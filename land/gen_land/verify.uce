
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

CAMAC_LECROY_4434(channels)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS);
  list(0<=index<channels)
  {
    UINT32 ch_data NOENCODE
    {
       0_23: value;
      24_31: 0;
      ENCODE(data[index],(value=value));
    }
  }
}

CAMAC_PHILLIPS_7164(channels,mark_channel_no)
{
  MEMBER(DATA12 data[16] ZERO_SUPPRESS);
  list(0<=index<channels)
  {
    if(mark_channel_no)
    {
      UINT16 ch_data NOENCODE
      {
         0_11: value;
        12_15: channel = CHECK(index);
        ENCODE(data[index],(value=value));
      }
    }
    else
    {
      UINT16 ch_data NOENCODE
      {
         0_11: value;
        ENCODE(data[index],(value=value));
      }
    }
  }
}

CAMAC_SILENA_4418(channels,mark_channel_no)
{
  MEMBER(DATA12_OVERFLOW data[8] ZERO_SUPPRESS);
  list(0<=index<channels)
  {
    if(mark_channel_no)
    {
      UINT16 ch_data NOENCODE
      {
         0_11: value;
        12_14: channel = CHECK(index);
           15: overflow;
        ENCODE(data[index],(value=value,overflow=overflow));
      }
    }
    else
    {
      UINT16 ch_data NOENCODE
      {
         0_11: value;
           15: overflow;
        ENCODE(data[index],(value=value,overflow=overflow));
      }
    }
  }
}

DUMMY_WORD()
{
  UINT32 dummy_word;
}

FASTBUS_LECROY_1875(geom,channels)
{
  MEMBER(DATA12_RANGE data[64] ZERO_SUPPRESS);
  UINT32 ch_data NOENCODE
  {
     0_11: value;
    16_21: channel = RANGE(0,(channels - 1));
       23: range;
    24_26: n = CHECK(0);
    27_31: geom = MATCH(geom);
    ENCODE(data[channel],(value=value,range=range));
  }
}

FASTBUS_LECROY_1885(geom,channels)
{
  MEMBER(DATA12_RANGE data[96] ZERO_SUPPRESS);
  UINT32 ch_data NOENCODE
  {
     0_11: value;
    16_22: channel = RANGE(0,(channels - 1));
       23: range;
    24_26: n = CHECK(0);
    27_31: geom = MATCH(geom);
    ENCODE(data[channel],(value=value,range=range));
  }
}

LAND_STD_VME()
{
  UINT32 failure
  {
        0: fail_general;
        1: fail_data_corrupt;
        2: fail_data_missing;
        3: fail_data_too_much;
        4: fail_event_counter_mismatch;
        5: fail_readout_error_driver;
        6: fail_unexpected_trigger;
       27: has_no_zero_suppression;
       28: has_multi_adctdc_counter0;
       29: has_multi_scaler_counter0;
       30: has_multi_event;
       31: has_time_stamp;
  }
  if(failure.has_time_stamp)
  {
    UINT32 time_stamp;
  }
  if(failure.has_multi_event)
  {
    UINT32 multi_events;
  }
  if(failure.has_multi_scaler_counter0)
  {
    UINT32 multi_scaler_counter0;
  }
  if(failure.has_multi_adctdc_counter0)
  {
    UINT32 multi_adctdc_counter0;
  }
  select several
  {
    tdc0 = VME_CAEN_V775(geom=20,crate=20);
  }
}

VME_CAEN_V1190(geom)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(v1190_start);
  UINT32 header
  {
     0_04: geom = MATCH(geom);
     5_26: event_number;
    27_31: 8;
  }
  select several
  {
    tdc[0] = VME_CAEN_V1190_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[1] = VME_CAEN_V1190_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[2] = VME_CAEN_V1190_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[3] = VME_CAEN_V1190_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   data=data);
  }
  UINT32 trigger
  {
     0_26: time_tag;
    27_31: 17;
  }
  MARK_COUNT(v1190_end);
  UINT32 trailer
  {
     0_04: geom = CHECK(geom);
     5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
       24: tdc_error;
       25: buffer_overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V1190_SHORT(geom)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(v1190_start);
  UINT32 header
  {
     0_04: geom = MATCH(geom);
     5_26: event_number;
    27_31: 8;
  }
  select several
  {
    tdc[0] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[1] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[2] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[3] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         data=data);
    norevisit err[0] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=0);
    norevisit err[1] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=1);
    norevisit err[2] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=2);
    norevisit err[3] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=3);
  }
  UINT32 trigger
  {
     0_26: time_tag;
    27_31: 17;
  }
  MARK_COUNT(v1190_end);
  UINT32 trailer
  {
     0_04: geom = CHECK(geom);
     5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
       24: tdc_error;
       25: buffer_overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V1190_SHORT_SUBTDC(tdc,event_id,data)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  UINT32 ch_data NOENCODE
  {
     0_18: value;
    19_23: channel_low;
    24_25: tdc = CHECK(tdc);
       26: trailing;
    27_31: 0;
    ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  }
}

VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc)
{
  UINT32 error_flags
  {
     0_14: flags;
    24_25: tdc = CHECK(tdc);
    27_31: 4;
  }
}

VME_CAEN_V1190_SUBTDC(tdc,event_id,data)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(tdc_start);
  UINT32 header
  {
     0_11: bunch_id;
    12_23: event_id = CHECK(event_id);
    24_25: tdc = MATCH(tdc);
    27_31: 1;
  }
  several UINT32 ch_data NOENCODE
  {
     0_18: value;
    19_23: channel_low;
    24_25: tdc = CHECK(tdc);
       26: trailing;
    27_31: 0;
    ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  }
  optional UINT32 error_flags
  {
     0_14: flags;
    24_25: tdc = CHECK(tdc);
    27_31: 4;
  }
  MARK_COUNT(tdc_end);
  UINT32 trailer
  {
     0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    12_23: event_id = CHECK(header.event_id);
    24_25: tdc = CHECK(tdc);
    27_31: 3;
  }
}

VME_CAEN_V1290(geom)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(v1190_start);
  UINT32 header
  {
     0_04: geom = MATCH(geom);
     5_26: event_number;
    27_31: 8;
  }
  select several
  {
    tdc[0] = VME_CAEN_V1290_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[1] = VME_CAEN_V1290_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[2] = VME_CAEN_V1290_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[3] = VME_CAEN_V1290_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   data=data);
  }
  UINT32 trigger
  {
     0_26: time_tag;
    27_31: 17;
  }
  MARK_COUNT(v1190_end);
  UINT32 trailer
  {
     0_04: geom = CHECK(geom);
     5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
       24: tdc_error;
       25: buffer_overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V1290_SHORT(geom)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(v1190_start);
  UINT32 header
  {
     0_04: geom = MATCH(geom);
     5_26: event_number;
    27_31: 8;
  }
  select several
  {
    tdc[0] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[1] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[2] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[3] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         data=data);
    norevisit err[0] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=0);
    norevisit err[1] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=1);
    norevisit err[2] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=2);
    norevisit err[3] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=3);
  }
  UINT32 trigger
  {
     0_26: time_tag;
    27_31: 17;
  }
  MARK_COUNT(v1190_end);
  UINT32 trailer
  {
     0_04: geom = CHECK(geom);
     5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
       24: tdc_error;
       25: buffer_overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V1290_SHORT_SUBTDC(tdc,event_id,data)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  UINT32 ch_data NOENCODE
  {
     0_20: value;
    21_23: channel_low;
    24_25: tdc = CHECK(tdc);
       26: trailing;
    27_31: 0;
    ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  }
}

VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc)
{
  UINT32 error_flags
  {
     0_14: flags;
    24_25: tdc = CHECK(tdc);
    27_31: 4;
  }
}

VME_CAEN_V1290_SUBTDC(tdc,event_id,data)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(tdc_start);
  UINT32 header
  {
     0_11: bunch_id;
    12_23: event_id = CHECK(event_id);
    24_25: tdc = MATCH(tdc);
    27_31: 1;
  }
  several UINT32 ch_data NOENCODE
  {
     0_20: value;
    21_23: channel_low;
    24_25: tdc = CHECK(tdc);
       26: trailing;
    27_31: 0;
    ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  }
  optional UINT32 error_flags
  {
     0_14: flags;
    24_25: tdc = CHECK(tdc);
    27_31: 4;
  }
  MARK_COUNT(tdc_end);
  UINT32 trailer
  {
     0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    12_23: event_id = CHECK(header.event_id);
    24_25: tdc = CHECK(tdc);
    27_31: 3;
  }
}

VME_CAEN_V775(geom,crate)
{
  MEMBER(DATA12_OVERFLOW data[32] ZERO_SUPPRESS);
  UINT32 header NOENCODE
  {
     8_13: count;
    16_23: crate = MATCH(crate);
    24_26: 2;
    27_31: geom = MATCH(geom);
  }
  list(0<=index<header.count)
  {
    UINT32 ch_data NOENCODE
    {
       0_11: value;
         12: overflow;
         13: underflow;
         14: valid;
      16_20: channel;
      24_26: 0;
      27_31: geom = CHECK(geom);
      ENCODE(data[channel],(value=value,overflow=overflow));
    }
  }
  UINT32 eob
  {
     0_23: event_number;
    24_26: 4;
    27_31: geom = CHECK(geom);
  }
}

VME_CAEN_V830(geom)
{
  MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  UINT32 header
  {
     0_15: event_number;
    16_17: ts;
    18_23: count;
       26: 1;
    27_31: geom = MATCH(geom);
  }
  list(0<=index<header.count)
  {
    UINT32 ch_data NOENCODE
    {
       0_25: value;
         26: 0;
      27_31: channel;
      ENCODE(data[channel],(value=value));
    }
  }
}

VME_MESYTEC_MADC32(geom)
{
  MEMBER(DATA14_OVERFLOW data[32] ZERO_SUPPRESS);
  MARK_COUNT(start);
  UINT32 header NOENCODE
  {
     0_11: word_number;
    12_14: adc_resol;
       15: out_form;
    16_23: geom = MATCH(geom);
    24_29: 0;
    30_31: 1;
  }
  several UINT32 ch_data NOENCODE
  {
     0_12: value;
       14: outofrange;
    16_20: channel;
    21_29: 32;
    30_31: 0;
    ENCODE(data[channel],(value=value,overflow=outofrange));
  }
  optional UINT32 filler NOENCODE
  {
     0_31: 0;
  }
  UINT32 end_of_event
  {
     0_29: counter;
    30_31: 3;
  }
  MARK_COUNT(end);
  CHECK_COUNT(header.word_number,start,end,( - 4),4)
}

VME_MESYTEC_MDPP16(geom)
{
  MEMBER(DATA16_OVERFLOW data[34] ZERO_SUPPRESS_MULTI(100));
  MARK_COUNT(start);
  UINT32 header NOENCODE
  {
     0_09: word_number;
    10_12: adc_res;
    13_15: tdc_res;
    16_23: geom = MATCH(geom);
    24_29: 0;
    30_31: 1;
  }
  several UINT32 ch_data NOENCODE
  {
     0_15: value;
    16_21: channel;
       22: overflow;
       23: pileup;
    24_27: 0;
    28_31: 1;
    ENCODE(data[channel],(value=value,overflow=overflow,pileup=pileup));
  }
  several UINT32 fill_word NOENCODE
  {
     0_31: 0;
  }
  UINT32 end_of_event
  {
     0_29: counter;
    30_31: 3;
  }
  MARK_COUNT(end);
  CHECK_COUNT(header.word_number,start,end,( - 4),4)
}

SUBEVENT(DUMMY_TDC)
{
  select several
  {
    d = DUMMY_WORD();
  }
}

SUBEVENT(LAND_CAMAC_CONVERTER)
{
  UINT16 tpat;
  UINT16 tprev;
  UINT16 tnext;
  UINT16 tprev2;
  if(EXTERNAL has_data)
  {
    qdc_SIA0429 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    tdc_SIA8035 = CAMAC_SILENA_4418(channels=4,mark_channel_no=0);
    qdc_SIA0458 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    qdc_SIA0416 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    tdc_SIA0426 = CAMAC_SILENA_4418(channels=4,mark_channel_no=0);
    tdc_SIA0400 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    tdc_SIA0401 = CAMAC_SILENA_4418(channels=2,mark_channel_no=0);
  }
}

SUBEVENT(LAND_CAMAC_SCALER)
{
  scaler0 = CAMAC_LECROY_4434(channels=32);
  scaler1 = CAMAC_LECROY_4434(channels=32);
  scaler2 = CAMAC_LECROY_4434(channels=32);
  if(EXTERNAL has_timestamp)
  {
    UINT32 timestamp;
    UINT32 endianess
    {
       0_31: 0x87654321;
    }
  }
}

SUBEVENT(LAND_CAMAC_TCAL_INFO)
{
  UINT32 info NOENCODE;
}

SUBEVENT(LAND_FASTBUS1)
{
  select several
  {
    qdc_L_Q47342 = FASTBUS_LECROY_1885(geom=7,channels=96);
    qdc_L_Q11111 = FASTBUS_LECROY_1885(geom=8,channels=96);
    qdc_L_Q46848 = FASTBUS_LECROY_1885(geom=10,channels=96);
    qdc_L_Q47315 = FASTBUS_LECROY_1885(geom=11,channels=96);
    qdc_L_Q17320 = FASTBUS_LECROY_1885(geom=13,channels=96);
    qdc_L_Q15372 = FASTBUS_LECROY_1885(geom=15,channels=96);
    qdc_F_Q46962 = FASTBUS_LECROY_1885(geom=16,channels=96);
    qdc_L_Q46993 = FASTBUS_LECROY_1885(geom=18,channels=96);
    qdc_L_Q15358 = FASTBUS_LECROY_1885(geom=20,channels=96);
    qdc_L_Q47264 = FASTBUS_LECROY_1885(geom=23,channels=96);
    tdc_L_T81855 = FASTBUS_LECROY_1875(geom=3,channels=64);
    tdc_L_T87044 = FASTBUS_LECROY_1875(geom=4,channels=64);
    tdc_L_T87024 = FASTBUS_LECROY_1875(geom=5,channels=64);
    tdc_L_T81800 = FASTBUS_LECROY_1875(geom=6,channels=64);
  }
}

SUBEVENT(LAND_FASTBUS2)
{
  select several
  {
    tdc_L_T87047 = FASTBUS_LECROY_1875(geom=1,channels=64);
    tdc_L_T48854 = FASTBUS_LECROY_1875(geom=2,channels=64);
    tdc_L_T81808 = FASTBUS_LECROY_1875(geom=3,channels=64);
    tdc_L_T81859 = FASTBUS_LECROY_1875(geom=4,channels=64);
    tdc_L_T81795 = FASTBUS_LECROY_1875(geom=5,channels=64);
    tdc_L_T81806 = FASTBUS_LECROY_1875(geom=6,channels=64);
    tdc_L_T48834 = FASTBUS_LECROY_1875(geom=7,channels=64);
  }
}

SUBEVENT(LAND_FASTBUS_ERROR)
{
  UINT32 error_code
  {
        0: timeout_waiting_smi;
        1: illegal_block_transfer;
        2: fifa_address_overflow;
        3: fifa_register_error;
       16: init_error;
  }
  UINT32 error_num;
}

SUBEVENT(LAND_VME)
{
  vme = LAND_STD_VME();
}

/**********************************************************
 * The event definition:
 */

EVENT
{
  camac = LAND_CAMAC_CONVERTER(type=34,subtype=0xc80);
  camac_tcal = LAND_CAMAC_CONVERTER(type=0x26ce,subtype=0xc80);
  camac_tcal_info = LAND_CAMAC_TCAL_INFO(type=0x26ce,subtype=0xc7f);
  camac_scalers = LAND_CAMAC_SCALER(type=34,subtype=0xc1c);
  camac_scalers_tcal = LAND_CAMAC_SCALER(type=0x26ce,subtype=0xc1c);
  fastbus_error = LAND_FASTBUS_ERROR(type=31,subtype=0xc1c);
  fastbus_1 = LAND_FASTBUS1(type=32,subtype=0xc3a,subcrate=1);
  fastbus_2 = LAND_FASTBUS2(type=32,subtype=0xc3a,subcrate=2);
  d1 = DUMMY_TDC(type=34,subtype=0xdac,control=9);
}

/**********************************************************
 * The sticky_event definition:
 */

/**********************************************************
 * Signal name mappings:
 */

SIGNAL(N01_01_1_E,fastbus_1.qdc_L_Q46993.data[0],DATA12);
SIGNAL(N01_01_1_T,fastbus_2.tdc_L_T48834.data[0],DATA12);
SIGNAL(N01_01_2_E,fastbus_1.qdc_L_Q46993.data[44],DATA12);
SIGNAL(N01_01_2_T,fastbus_2.tdc_L_T81795.data[12],DATA12);
SIGNAL(N01_02_1_E,fastbus_1.qdc_L_Q46993.data[4],DATA12);
SIGNAL(N01_02_1_T,fastbus_2.tdc_L_T48834.data[4],DATA12);
SIGNAL(N01_02_2_E,fastbus_1.qdc_L_Q46993.data[40],DATA12);
SIGNAL(N01_02_2_T,fastbus_2.tdc_L_T81795.data[8],DATA12);
SIGNAL(N01_03_1_E,fastbus_1.qdc_L_Q46993.data[8],DATA12);
SIGNAL(N01_03_1_T,fastbus_2.tdc_L_T48834.data[8],DATA12);
SIGNAL(N01_03_2_E,fastbus_1.qdc_L_Q46993.data[16],DATA12);
SIGNAL(N01_03_2_T,fastbus_2.tdc_L_T81806.data[0],DATA12);
SIGNAL(N01_04_1_E,fastbus_1.qdc_L_Q46993.data[12],DATA12);
SIGNAL(N01_04_1_T,fastbus_2.tdc_L_T48834.data[12],DATA12);
SIGNAL(N01_04_2_E,fastbus_1.qdc_L_Q46993.data[20],DATA12);
SIGNAL(N01_04_2_T,fastbus_2.tdc_L_T81806.data[4],DATA12);
SIGNAL(N01_05_1_E,fastbus_1.qdc_L_Q46993.data[1],DATA12);
SIGNAL(N01_05_1_T,fastbus_2.tdc_L_T48834.data[1],DATA12);
SIGNAL(N01_05_2_E,fastbus_1.qdc_L_Q46993.data[41],DATA12);
SIGNAL(N01_05_2_T,fastbus_2.tdc_L_T81795.data[9],DATA12);
SIGNAL(N01_06_1_E,fastbus_1.qdc_L_Q46993.data[5],DATA12);
SIGNAL(N01_06_1_T,fastbus_2.tdc_L_T48834.data[5],DATA12);
SIGNAL(N01_06_2_E,fastbus_1.qdc_L_Q46993.data[45],DATA12);
SIGNAL(N01_06_2_T,fastbus_2.tdc_L_T81795.data[13],DATA12);
SIGNAL(N01_07_1_E,fastbus_1.qdc_L_Q46993.data[9],DATA12);
SIGNAL(N01_07_1_T,fastbus_2.tdc_L_T48834.data[9],DATA12);
SIGNAL(N01_07_2_E,fastbus_1.qdc_L_Q46993.data[24],DATA12);
SIGNAL(N01_07_2_T,fastbus_2.tdc_L_T81806.data[8],DATA12);
SIGNAL(N01_08_1_E,fastbus_1.qdc_L_Q46993.data[13],DATA12);
SIGNAL(N01_08_1_T,fastbus_2.tdc_L_T48834.data[13],DATA12);
SIGNAL(N01_08_2_E,fastbus_1.qdc_L_Q46993.data[28],DATA12);
SIGNAL(N01_08_2_T,fastbus_2.tdc_L_T81806.data[12],DATA12);
SIGNAL(N01_09_1_E,fastbus_1.qdc_L_Q46993.data[2],DATA12);
SIGNAL(N01_09_1_T,fastbus_2.tdc_L_T48834.data[2],DATA12);
SIGNAL(N01_09_2_E,fastbus_1.qdc_L_Q46993.data[17],DATA12);
SIGNAL(N01_09_2_T,fastbus_2.tdc_L_T81806.data[1],DATA12);
SIGNAL(N01_10_1_E,fastbus_1.qdc_L_Q46993.data[6],DATA12);
SIGNAL(N01_10_1_T,fastbus_2.tdc_L_T48834.data[6],DATA12);
SIGNAL(N01_10_2_E,fastbus_1.qdc_L_Q46993.data[21],DATA12);
SIGNAL(N01_10_2_T,fastbus_2.tdc_L_T81806.data[5],DATA12);
SIGNAL(N01_11_1_E,fastbus_1.qdc_L_Q46993.data[10],DATA12);
SIGNAL(N01_11_1_T,fastbus_2.tdc_L_T48834.data[10],DATA12);
SIGNAL(N01_11_2_E,fastbus_1.qdc_L_Q46993.data[25],DATA12);
SIGNAL(N01_11_2_T,fastbus_2.tdc_L_T81806.data[9],DATA12);
SIGNAL(N01_12_1_E,fastbus_1.qdc_L_Q46993.data[14],DATA12);
SIGNAL(N01_12_1_T,fastbus_2.tdc_L_T48834.data[14],DATA12);
SIGNAL(N01_12_2_E,fastbus_1.qdc_L_Q46993.data[29],DATA12);
SIGNAL(N01_12_2_T,fastbus_2.tdc_L_T81806.data[13],DATA12);
SIGNAL(N01_13_1_E,fastbus_1.qdc_L_Q46993.data[3],DATA12);
SIGNAL(N01_13_1_T,fastbus_2.tdc_L_T48834.data[3],DATA12);
SIGNAL(N01_13_2_E,fastbus_1.qdc_L_Q46993.data[18],DATA12);
SIGNAL(N01_13_2_T,fastbus_2.tdc_L_T81806.data[2],DATA12);
SIGNAL(N01_14_1_E,fastbus_1.qdc_L_Q46993.data[7],DATA12);
SIGNAL(N01_14_1_T,fastbus_2.tdc_L_T48834.data[7],DATA12);
SIGNAL(N01_14_2_E,fastbus_1.qdc_L_Q46993.data[22],DATA12);
SIGNAL(N01_14_2_T,fastbus_2.tdc_L_T81806.data[6],DATA12);
SIGNAL(N01_15_1_E,fastbus_1.qdc_L_Q46993.data[46],DATA12);
SIGNAL(N01_15_1_T,fastbus_2.tdc_L_T81795.data[14],DATA12);
SIGNAL(N01_15_2_E,fastbus_1.qdc_L_Q46993.data[26],DATA12);
SIGNAL(N01_15_2_T,fastbus_2.tdc_L_T81806.data[10],DATA12);
SIGNAL(N01_16_1_E,fastbus_1.qdc_L_Q46993.data[42],DATA12);
SIGNAL(N01_16_1_T,fastbus_2.tdc_L_T81795.data[10],DATA12);
SIGNAL(N01_16_2_E,fastbus_1.qdc_L_Q46993.data[30],DATA12);
SIGNAL(N01_16_2_T,fastbus_2.tdc_L_T81806.data[14],DATA12);
SIGNAL(N01_17_1_E,fastbus_1.qdc_L_Q46993.data[11],DATA12);
SIGNAL(N01_17_1_T,fastbus_2.tdc_L_T48834.data[11],DATA12);
SIGNAL(N01_17_2_E,fastbus_1.qdc_L_Q46993.data[19],DATA12);
SIGNAL(N01_17_2_T,fastbus_2.tdc_L_T81806.data[3],DATA12);
SIGNAL(N01_18_1_E,fastbus_1.qdc_L_Q46993.data[15],DATA12);
SIGNAL(N01_18_1_T,fastbus_2.tdc_L_T48834.data[15],DATA12);
SIGNAL(N01_18_2_E,fastbus_1.qdc_L_Q46993.data[23],DATA12);
SIGNAL(N01_18_2_T,fastbus_2.tdc_L_T81806.data[7],DATA12);
SIGNAL(N01_19_1_E,fastbus_1.qdc_L_Q46993.data[47],DATA12);
SIGNAL(N01_19_1_T,fastbus_2.tdc_L_T81795.data[15],DATA12);
SIGNAL(N01_19_2_E,fastbus_1.qdc_L_Q46993.data[27],DATA12);
SIGNAL(N01_19_2_T,fastbus_2.tdc_L_T81806.data[11],DATA12);
SIGNAL(N01_20_1_E,fastbus_1.qdc_L_Q46993.data[43],DATA12);
SIGNAL(N01_20_1_T,fastbus_2.tdc_L_T81795.data[11],DATA12);
SIGNAL(N01_20_2_E,fastbus_1.qdc_L_Q46993.data[31],DATA12);
SIGNAL(N01_20_2_T,fastbus_2.tdc_L_T81806.data[15],DATA12);
SIGNAL(N02_01_1_E,fastbus_1.qdc_L_Q15358.data[0],DATA12);
SIGNAL(N02_01_1_T,fastbus_2.tdc_L_T81859.data[0],DATA12);
SIGNAL(N02_01_2_E,fastbus_1.qdc_L_Q46993.data[36],DATA12);
SIGNAL(N02_01_2_T,fastbus_2.tdc_L_T81795.data[4],DATA12);
SIGNAL(N02_02_1_E,fastbus_1.qdc_L_Q15358.data[4],DATA12);
SIGNAL(N02_02_1_T,fastbus_2.tdc_L_T81859.data[4],DATA12);
SIGNAL(N02_02_2_E,fastbus_1.qdc_L_Q46993.data[32],DATA12);
SIGNAL(N02_02_2_T,fastbus_2.tdc_L_T81795.data[0],DATA12);
SIGNAL(N02_03_1_E,fastbus_1.qdc_L_Q15358.data[8],DATA12);
SIGNAL(N02_03_1_T,fastbus_2.tdc_L_T81859.data[8],DATA12);
SIGNAL(N02_03_2_E,fastbus_1.qdc_L_Q15358.data[16],DATA12);
SIGNAL(N02_03_2_T,fastbus_2.tdc_L_T81808.data[0],DATA12);
SIGNAL(N02_04_1_E,fastbus_1.qdc_L_Q15358.data[12],DATA12);
SIGNAL(N02_04_1_T,fastbus_2.tdc_L_T81859.data[12],DATA12);
SIGNAL(N02_04_2_E,fastbus_1.qdc_L_Q15358.data[20],DATA12);
SIGNAL(N02_04_2_T,fastbus_2.tdc_L_T81808.data[4],DATA12);
SIGNAL(N02_05_1_E,fastbus_1.qdc_L_Q15358.data[1],DATA12);
SIGNAL(N02_05_1_T,fastbus_2.tdc_L_T81859.data[1],DATA12);
SIGNAL(N02_05_2_E,fastbus_1.qdc_L_Q46993.data[37],DATA12);
SIGNAL(N02_05_2_T,fastbus_2.tdc_L_T81795.data[5],DATA12);
SIGNAL(N02_06_1_E,fastbus_1.qdc_L_Q15358.data[5],DATA12);
SIGNAL(N02_06_1_T,fastbus_2.tdc_L_T81859.data[5],DATA12);
SIGNAL(N02_06_2_E,fastbus_1.qdc_L_Q46993.data[33],DATA12);
SIGNAL(N02_06_2_T,fastbus_2.tdc_L_T81795.data[1],DATA12);
SIGNAL(N02_07_1_E,fastbus_1.qdc_L_Q15358.data[9],DATA12);
SIGNAL(N02_07_1_T,fastbus_2.tdc_L_T81859.data[9],DATA12);
SIGNAL(N02_07_2_E,fastbus_1.qdc_L_Q15358.data[24],DATA12);
SIGNAL(N02_07_2_T,fastbus_2.tdc_L_T81808.data[8],DATA12);
SIGNAL(N02_08_1_E,fastbus_1.qdc_L_Q15358.data[13],DATA12);
SIGNAL(N02_08_1_T,fastbus_2.tdc_L_T81859.data[13],DATA12);
SIGNAL(N02_08_2_E,fastbus_1.qdc_L_Q15358.data[28],DATA12);
SIGNAL(N02_08_2_T,fastbus_2.tdc_L_T81808.data[12],DATA12);
SIGNAL(N02_09_1_E,fastbus_1.qdc_L_Q15358.data[2],DATA12);
SIGNAL(N02_09_1_T,fastbus_2.tdc_L_T81859.data[2],DATA12);
SIGNAL(N02_09_2_E,fastbus_1.qdc_L_Q15358.data[17],DATA12);
SIGNAL(N02_09_2_T,fastbus_2.tdc_L_T81808.data[1],DATA12);
SIGNAL(N02_10_1_E,fastbus_1.qdc_L_Q15358.data[6],DATA12);
SIGNAL(N02_10_1_T,fastbus_2.tdc_L_T81859.data[6],DATA12);
SIGNAL(N02_10_2_E,fastbus_1.qdc_L_Q15358.data[21],DATA12);
SIGNAL(N02_10_2_T,fastbus_2.tdc_L_T81808.data[5],DATA12);
SIGNAL(N02_11_1_E,fastbus_1.qdc_L_Q15358.data[10],DATA12);
SIGNAL(N02_11_1_T,fastbus_2.tdc_L_T81859.data[10],DATA12);
SIGNAL(N02_11_2_E,fastbus_1.qdc_L_Q15358.data[25],DATA12);
SIGNAL(N02_11_2_T,fastbus_2.tdc_L_T81808.data[9],DATA12);
SIGNAL(N02_12_1_E,fastbus_1.qdc_L_Q15358.data[14],DATA12);
SIGNAL(N02_12_1_T,fastbus_2.tdc_L_T81859.data[14],DATA12);
SIGNAL(N02_12_2_E,fastbus_1.qdc_L_Q15358.data[29],DATA12);
SIGNAL(N02_12_2_T,fastbus_2.tdc_L_T81808.data[13],DATA12);
SIGNAL(N02_13_1_E,fastbus_1.qdc_L_Q15358.data[3],DATA12);
SIGNAL(N02_13_1_T,fastbus_2.tdc_L_T81859.data[3],DATA12);
SIGNAL(N02_13_2_E,fastbus_1.qdc_L_Q15358.data[18],DATA12);
SIGNAL(N02_13_2_T,fastbus_2.tdc_L_T81808.data[2],DATA12);
SIGNAL(N02_14_1_E,fastbus_1.qdc_L_Q15358.data[7],DATA12);
SIGNAL(N02_14_1_T,fastbus_2.tdc_L_T81859.data[7],DATA12);
SIGNAL(N02_14_2_E,fastbus_1.qdc_L_Q15358.data[22],DATA12);
SIGNAL(N02_14_2_T,fastbus_2.tdc_L_T81808.data[6],DATA12);
SIGNAL(N02_15_1_E,fastbus_1.qdc_L_Q46993.data[38],DATA12);
SIGNAL(N02_15_1_T,fastbus_2.tdc_L_T81795.data[6],DATA12);
SIGNAL(N02_15_2_E,fastbus_1.qdc_L_Q15358.data[26],DATA12);
SIGNAL(N02_15_2_T,fastbus_2.tdc_L_T81808.data[10],DATA12);
SIGNAL(N02_16_1_E,fastbus_1.qdc_L_Q46993.data[34],DATA12);
SIGNAL(N02_16_1_T,fastbus_2.tdc_L_T81795.data[2],DATA12);
SIGNAL(N02_16_2_E,fastbus_1.qdc_L_Q15358.data[30],DATA12);
SIGNAL(N02_16_2_T,fastbus_2.tdc_L_T81808.data[14],DATA12);
SIGNAL(N02_17_1_E,fastbus_1.qdc_L_Q15358.data[11],DATA12);
SIGNAL(N02_17_1_T,fastbus_2.tdc_L_T81859.data[11],DATA12);
SIGNAL(N02_17_2_E,fastbus_1.qdc_L_Q15358.data[19],DATA12);
SIGNAL(N02_17_2_T,fastbus_2.tdc_L_T81808.data[3],DATA12);
SIGNAL(N02_18_1_E,fastbus_1.qdc_L_Q15358.data[15],DATA12);
SIGNAL(N02_18_1_T,fastbus_2.tdc_L_T81859.data[15],DATA12);
SIGNAL(N02_18_2_E,fastbus_1.qdc_L_Q15358.data[23],DATA12);
SIGNAL(N02_18_2_T,fastbus_2.tdc_L_T81808.data[7],DATA12);
SIGNAL(N02_19_1_E,fastbus_1.qdc_L_Q46993.data[39],DATA12);
SIGNAL(N02_19_1_T,fastbus_2.tdc_L_T81795.data[7],DATA12);
SIGNAL(N02_19_2_E,fastbus_1.qdc_L_Q15358.data[27],DATA12);
SIGNAL(N02_19_2_T,fastbus_2.tdc_L_T81808.data[11],DATA12);
SIGNAL(N02_20_1_E,fastbus_1.qdc_L_Q46993.data[35],DATA12);
SIGNAL(N02_20_1_T,fastbus_2.tdc_L_T81795.data[3],DATA12);
SIGNAL(N02_20_2_E,fastbus_1.qdc_L_Q15358.data[31],DATA12);
SIGNAL(N02_20_2_T,fastbus_2.tdc_L_T81808.data[15],DATA12);
SIGNAL(N03_01_1_E,fastbus_1.qdc_L_Q15358.data[32],DATA12);
SIGNAL(N03_01_1_T,fastbus_2.tdc_L_T48854.data[0],DATA12);
SIGNAL(N03_01_2_E,fastbus_1.qdc_F_Q46962.data[28],DATA12);
SIGNAL(N03_01_2_T,fastbus_2.tdc_L_T48834.data[28],DATA12);
SIGNAL(N03_02_1_E,fastbus_1.qdc_L_Q15358.data[36],DATA12);
SIGNAL(N03_02_1_T,fastbus_2.tdc_L_T48854.data[4],DATA12);
SIGNAL(N03_02_2_E,fastbus_1.qdc_F_Q46962.data[24],DATA12);
SIGNAL(N03_02_2_T,fastbus_2.tdc_L_T48834.data[24],DATA12);
SIGNAL(N03_03_1_E,fastbus_1.qdc_L_Q15358.data[40],DATA12);
SIGNAL(N03_03_1_T,fastbus_2.tdc_L_T48854.data[8],DATA12);
SIGNAL(N03_03_2_E,fastbus_1.qdc_F_Q46962.data[0],DATA12);
SIGNAL(N03_03_2_T,fastbus_2.tdc_L_T87047.data[0],DATA12);
SIGNAL(N03_04_1_E,fastbus_1.qdc_L_Q15358.data[44],DATA12);
SIGNAL(N03_04_1_T,fastbus_2.tdc_L_T48854.data[12],DATA12);
SIGNAL(N03_04_2_E,fastbus_1.qdc_F_Q46962.data[4],DATA12);
SIGNAL(N03_04_2_T,fastbus_2.tdc_L_T87047.data[4],DATA12);
SIGNAL(N03_05_1_E,fastbus_1.qdc_L_Q15358.data[33],DATA12);
SIGNAL(N03_05_1_T,fastbus_2.tdc_L_T48854.data[1],DATA12);
SIGNAL(N03_05_2_E,fastbus_1.qdc_F_Q46962.data[25],DATA12);
SIGNAL(N03_05_2_T,fastbus_2.tdc_L_T48834.data[25],DATA12);
SIGNAL(N03_06_1_E,fastbus_1.qdc_L_Q15358.data[37],DATA12);
SIGNAL(N03_06_1_T,fastbus_2.tdc_L_T48854.data[5],DATA12);
SIGNAL(N03_06_2_E,fastbus_1.qdc_F_Q46962.data[29],DATA12);
SIGNAL(N03_06_2_T,fastbus_2.tdc_L_T48834.data[29],DATA12);
SIGNAL(N03_07_1_E,fastbus_1.qdc_L_Q15358.data[41],DATA12);
SIGNAL(N03_07_1_T,fastbus_2.tdc_L_T48854.data[9],DATA12);
SIGNAL(N03_07_2_E,fastbus_1.qdc_F_Q46962.data[8],DATA12);
SIGNAL(N03_07_2_T,fastbus_2.tdc_L_T87047.data[8],DATA12);
SIGNAL(N03_08_1_E,fastbus_1.qdc_L_Q15358.data[45],DATA12);
SIGNAL(N03_08_1_T,fastbus_2.tdc_L_T48854.data[13],DATA12);
SIGNAL(N03_08_2_E,fastbus_1.qdc_F_Q46962.data[12],DATA12);
SIGNAL(N03_08_2_T,fastbus_2.tdc_L_T87047.data[12],DATA12);
SIGNAL(N03_09_1_E,fastbus_1.qdc_L_Q15358.data[34],DATA12);
SIGNAL(N03_09_1_T,fastbus_2.tdc_L_T48854.data[2],DATA12);
SIGNAL(N03_09_2_E,fastbus_1.qdc_F_Q46962.data[1],DATA12);
SIGNAL(N03_09_2_T,fastbus_2.tdc_L_T87047.data[1],DATA12);
SIGNAL(N03_10_1_E,fastbus_1.qdc_L_Q15358.data[38],DATA12);
SIGNAL(N03_10_1_T,fastbus_2.tdc_L_T48854.data[6],DATA12);
SIGNAL(N03_10_2_E,fastbus_1.qdc_F_Q46962.data[5],DATA12);
SIGNAL(N03_10_2_T,fastbus_2.tdc_L_T87047.data[5],DATA12);
SIGNAL(N03_11_1_E,fastbus_1.qdc_L_Q15358.data[42],DATA12);
SIGNAL(N03_11_1_T,fastbus_2.tdc_L_T48854.data[10],DATA12);
SIGNAL(N03_11_2_E,fastbus_1.qdc_F_Q46962.data[9],DATA12);
SIGNAL(N03_11_2_T,fastbus_2.tdc_L_T87047.data[9],DATA12);
SIGNAL(N03_12_1_E,fastbus_1.qdc_L_Q15358.data[46],DATA12);
SIGNAL(N03_12_1_T,fastbus_2.tdc_L_T48854.data[14],DATA12);
SIGNAL(N03_12_2_E,fastbus_1.qdc_F_Q46962.data[13],DATA12);
SIGNAL(N03_12_2_T,fastbus_2.tdc_L_T87047.data[13],DATA12);
SIGNAL(N03_13_1_E,fastbus_1.qdc_L_Q15358.data[35],DATA12);
SIGNAL(N03_13_1_T,fastbus_2.tdc_L_T48854.data[3],DATA12);
SIGNAL(N03_13_2_E,fastbus_1.qdc_F_Q46962.data[2],DATA12);
SIGNAL(N03_13_2_T,fastbus_2.tdc_L_T87047.data[2],DATA12);
SIGNAL(N03_14_1_E,fastbus_1.qdc_L_Q15358.data[39],DATA12);
SIGNAL(N03_14_1_T,fastbus_2.tdc_L_T48854.data[7],DATA12);
SIGNAL(N03_14_2_E,fastbus_1.qdc_F_Q46962.data[6],DATA12);
SIGNAL(N03_14_2_T,fastbus_2.tdc_L_T87047.data[6],DATA12);
SIGNAL(N03_15_1_E,fastbus_1.qdc_F_Q46962.data[30],DATA12);
SIGNAL(N03_15_1_T,fastbus_2.tdc_L_T48834.data[30],DATA12);
SIGNAL(N03_15_2_E,fastbus_1.qdc_F_Q46962.data[10],DATA12);
SIGNAL(N03_15_2_T,fastbus_2.tdc_L_T87047.data[10],DATA12);
SIGNAL(N03_16_1_E,fastbus_1.qdc_F_Q46962.data[26],DATA12);
SIGNAL(N03_16_1_T,fastbus_2.tdc_L_T48834.data[26],DATA12);
SIGNAL(N03_16_2_E,fastbus_1.qdc_F_Q46962.data[14],DATA12);
SIGNAL(N03_16_2_T,fastbus_2.tdc_L_T87047.data[14],DATA12);
SIGNAL(N03_17_1_E,fastbus_1.qdc_L_Q15358.data[43],DATA12);
SIGNAL(N03_17_1_T,fastbus_2.tdc_L_T48854.data[11],DATA12);
SIGNAL(N03_17_2_E,fastbus_1.qdc_F_Q46962.data[3],DATA12);
SIGNAL(N03_17_2_T,fastbus_2.tdc_L_T87047.data[3],DATA12);
SIGNAL(N03_18_1_E,fastbus_1.qdc_L_Q15358.data[47],DATA12);
SIGNAL(N03_18_1_T,fastbus_2.tdc_L_T48854.data[15],DATA12);
SIGNAL(N03_18_2_E,fastbus_1.qdc_F_Q46962.data[7],DATA12);
SIGNAL(N03_18_2_T,fastbus_2.tdc_L_T87047.data[7],DATA12);
SIGNAL(N03_19_1_E,fastbus_1.qdc_F_Q46962.data[31],DATA12);
SIGNAL(N03_19_1_T,fastbus_2.tdc_L_T48834.data[31],DATA12);
SIGNAL(N03_19_2_E,fastbus_1.qdc_F_Q46962.data[11],DATA12);
SIGNAL(N03_19_2_T,fastbus_2.tdc_L_T87047.data[11],DATA12);
SIGNAL(N03_20_1_E,fastbus_1.qdc_F_Q46962.data[27],DATA12);
SIGNAL(N03_20_1_T,fastbus_2.tdc_L_T48834.data[27],DATA12);
SIGNAL(N03_20_2_E,fastbus_1.qdc_F_Q46962.data[15],DATA12);
SIGNAL(N03_20_2_T,fastbus_2.tdc_L_T87047.data[15],DATA12);
SIGNAL(N04_01_1_E,fastbus_1.qdc_F_Q46962.data[32],DATA12);
SIGNAL(N04_01_1_T,fastbus_2.tdc_L_T81806.data[16],DATA12);
SIGNAL(N04_01_2_E,fastbus_1.qdc_F_Q46962.data[20],DATA12);
SIGNAL(N04_01_2_T,fastbus_2.tdc_L_T48834.data[20],DATA12);
SIGNAL(N04_02_1_E,fastbus_1.qdc_F_Q46962.data[36],DATA12);
SIGNAL(N04_02_1_T,fastbus_2.tdc_L_T81806.data[20],DATA12);
SIGNAL(N04_02_2_E,fastbus_1.qdc_F_Q46962.data[16],DATA12);
SIGNAL(N04_02_2_T,fastbus_2.tdc_L_T48834.data[16],DATA12);
SIGNAL(N04_03_1_E,fastbus_1.qdc_F_Q46962.data[40],DATA12);
SIGNAL(N04_03_1_T,fastbus_2.tdc_L_T81806.data[24],DATA12);
SIGNAL(N04_03_2_E,fastbus_1.qdc_L_Q15372.data[0],DATA12);
SIGNAL(N04_03_2_T,fastbus_2.tdc_L_T81795.data[16],DATA12);
SIGNAL(N04_04_1_E,fastbus_1.qdc_F_Q46962.data[44],DATA12);
SIGNAL(N04_04_1_T,fastbus_2.tdc_L_T81806.data[28],DATA12);
SIGNAL(N04_04_2_E,fastbus_1.qdc_L_Q15372.data[4],DATA12);
SIGNAL(N04_04_2_T,fastbus_2.tdc_L_T81795.data[20],DATA12);
SIGNAL(N04_05_1_E,fastbus_1.qdc_F_Q46962.data[33],DATA12);
SIGNAL(N04_05_1_T,fastbus_2.tdc_L_T81806.data[17],DATA12);
SIGNAL(N04_05_2_E,fastbus_1.qdc_F_Q46962.data[21],DATA12);
SIGNAL(N04_05_2_T,fastbus_2.tdc_L_T48834.data[21],DATA12);
SIGNAL(N04_06_1_E,fastbus_1.qdc_F_Q46962.data[37],DATA12);
SIGNAL(N04_06_1_T,fastbus_2.tdc_L_T81806.data[21],DATA12);
SIGNAL(N04_06_2_E,fastbus_1.qdc_F_Q46962.data[17],DATA12);
SIGNAL(N04_06_2_T,fastbus_2.tdc_L_T48834.data[17],DATA12);
SIGNAL(N04_07_1_E,fastbus_1.qdc_F_Q46962.data[41],DATA12);
SIGNAL(N04_07_1_T,fastbus_2.tdc_L_T81806.data[25],DATA12);
SIGNAL(N04_07_2_E,fastbus_1.qdc_L_Q15372.data[8],DATA12);
SIGNAL(N04_07_2_T,fastbus_2.tdc_L_T81795.data[24],DATA12);
SIGNAL(N04_08_1_E,fastbus_1.qdc_F_Q46962.data[45],DATA12);
SIGNAL(N04_08_1_T,fastbus_2.tdc_L_T81806.data[29],DATA12);
SIGNAL(N04_08_2_E,fastbus_1.qdc_L_Q15372.data[12],DATA12);
SIGNAL(N04_08_2_T,fastbus_2.tdc_L_T81795.data[28],DATA12);
SIGNAL(N04_09_1_E,fastbus_1.qdc_F_Q46962.data[34],DATA12);
SIGNAL(N04_09_1_T,fastbus_2.tdc_L_T81806.data[18],DATA12);
SIGNAL(N04_09_2_E,fastbus_1.qdc_L_Q15372.data[1],DATA12);
SIGNAL(N04_09_2_T,fastbus_2.tdc_L_T81795.data[17],DATA12);
SIGNAL(N04_10_1_E,fastbus_1.qdc_F_Q46962.data[38],DATA12);
SIGNAL(N04_10_1_T,fastbus_2.tdc_L_T81806.data[22],DATA12);
SIGNAL(N04_10_2_E,fastbus_1.qdc_L_Q15372.data[5],DATA12);
SIGNAL(N04_10_2_T,fastbus_2.tdc_L_T81795.data[21],DATA12);
SIGNAL(N04_11_1_E,fastbus_1.qdc_F_Q46962.data[42],DATA12);
SIGNAL(N04_11_1_T,fastbus_2.tdc_L_T81806.data[26],DATA12);
SIGNAL(N04_11_2_E,fastbus_1.qdc_L_Q15372.data[9],DATA12);
SIGNAL(N04_11_2_T,fastbus_2.tdc_L_T81795.data[25],DATA12);
SIGNAL(N04_12_1_E,fastbus_1.qdc_F_Q46962.data[46],DATA12);
SIGNAL(N04_12_1_T,fastbus_2.tdc_L_T81806.data[30],DATA12);
SIGNAL(N04_12_2_E,fastbus_1.qdc_L_Q15372.data[13],DATA12);
SIGNAL(N04_12_2_T,fastbus_2.tdc_L_T81795.data[29],DATA12);
SIGNAL(N04_13_1_E,fastbus_1.qdc_F_Q46962.data[35],DATA12);
SIGNAL(N04_13_1_T,fastbus_2.tdc_L_T81806.data[19],DATA12);
SIGNAL(N04_13_2_E,fastbus_1.qdc_L_Q15372.data[2],DATA12);
SIGNAL(N04_13_2_T,fastbus_2.tdc_L_T81795.data[18],DATA12);
SIGNAL(N04_14_1_E,fastbus_1.qdc_F_Q46962.data[39],DATA12);
SIGNAL(N04_14_1_T,fastbus_2.tdc_L_T81806.data[23],DATA12);
SIGNAL(N04_14_2_E,fastbus_1.qdc_L_Q15372.data[6],DATA12);
SIGNAL(N04_14_2_T,fastbus_2.tdc_L_T81795.data[22],DATA12);
SIGNAL(N04_15_1_E,fastbus_1.qdc_F_Q46962.data[22],DATA12);
SIGNAL(N04_15_1_T,fastbus_2.tdc_L_T48834.data[22],DATA12);
SIGNAL(N04_15_2_E,fastbus_1.qdc_L_Q15372.data[10],DATA12);
SIGNAL(N04_15_2_T,fastbus_2.tdc_L_T81795.data[26],DATA12);
SIGNAL(N04_16_1_E,fastbus_1.qdc_F_Q46962.data[18],DATA12);
SIGNAL(N04_16_1_T,fastbus_2.tdc_L_T48834.data[18],DATA12);
SIGNAL(N04_16_2_E,fastbus_1.qdc_L_Q15372.data[14],DATA12);
SIGNAL(N04_16_2_T,fastbus_2.tdc_L_T81795.data[30],DATA12);
SIGNAL(N04_17_1_E,fastbus_1.qdc_F_Q46962.data[43],DATA12);
SIGNAL(N04_17_1_T,fastbus_2.tdc_L_T81806.data[27],DATA12);
SIGNAL(N04_17_2_E,fastbus_1.qdc_L_Q15372.data[3],DATA12);
SIGNAL(N04_17_2_T,fastbus_2.tdc_L_T81795.data[19],DATA12);
SIGNAL(N04_18_1_E,fastbus_1.qdc_F_Q46962.data[47],DATA12);
SIGNAL(N04_18_1_T,fastbus_2.tdc_L_T81806.data[31],DATA12);
SIGNAL(N04_18_2_E,fastbus_1.qdc_L_Q15372.data[7],DATA12);
SIGNAL(N04_18_2_T,fastbus_2.tdc_L_T81795.data[23],DATA12);
SIGNAL(N04_19_1_E,fastbus_1.qdc_F_Q46962.data[23],DATA12);
SIGNAL(N04_19_1_T,fastbus_2.tdc_L_T48834.data[23],DATA12);
SIGNAL(N04_19_2_E,fastbus_1.qdc_L_Q15372.data[11],DATA12);
SIGNAL(N04_19_2_T,fastbus_2.tdc_L_T81795.data[27],DATA12);
SIGNAL(N04_20_1_E,fastbus_1.qdc_F_Q46962.data[19],DATA12);
SIGNAL(N04_20_1_T,fastbus_2.tdc_L_T48834.data[19],DATA12);
SIGNAL(N04_20_2_E,fastbus_1.qdc_L_Q15372.data[15],DATA12);
SIGNAL(N04_20_2_T,fastbus_2.tdc_L_T81795.data[31],DATA12);
SIGNAL(N05_01_1_E,fastbus_1.qdc_L_Q15372.data[16],DATA12);
SIGNAL(N05_01_1_T,fastbus_2.tdc_L_T81859.data[16],DATA12);
SIGNAL(N05_01_2_E,fastbus_1.qdc_L_Q47315.data[12],DATA12);
SIGNAL(N05_01_2_T,fastbus_2.tdc_L_T48854.data[28],DATA12);
SIGNAL(N05_02_1_E,fastbus_1.qdc_L_Q15372.data[20],DATA12);
SIGNAL(N05_02_1_T,fastbus_2.tdc_L_T81859.data[20],DATA12);
SIGNAL(N05_02_2_E,fastbus_1.qdc_L_Q47315.data[8],DATA12);
SIGNAL(N05_02_2_T,fastbus_2.tdc_L_T48854.data[24],DATA12);
SIGNAL(N05_03_1_E,fastbus_1.qdc_L_Q15372.data[24],DATA12);
SIGNAL(N05_03_1_T,fastbus_2.tdc_L_T81859.data[24],DATA12);
SIGNAL(N05_03_2_E,fastbus_1.qdc_L_Q15372.data[32],DATA12);
SIGNAL(N05_03_2_T,fastbus_2.tdc_L_T81808.data[16],DATA12);
SIGNAL(N05_04_1_E,fastbus_1.qdc_L_Q15372.data[28],DATA12);
SIGNAL(N05_04_1_T,fastbus_2.tdc_L_T81859.data[28],DATA12);
SIGNAL(N05_04_2_E,fastbus_1.qdc_L_Q15372.data[36],DATA12);
SIGNAL(N05_04_2_T,fastbus_2.tdc_L_T81808.data[20],DATA12);
SIGNAL(N05_05_1_E,fastbus_1.qdc_L_Q15372.data[17],DATA12);
SIGNAL(N05_05_1_T,fastbus_2.tdc_L_T81859.data[17],DATA12);
SIGNAL(N05_05_2_E,fastbus_1.qdc_L_Q47315.data[9],DATA12);
SIGNAL(N05_05_2_T,fastbus_2.tdc_L_T48854.data[25],DATA12);
SIGNAL(N05_06_1_E,fastbus_1.qdc_L_Q15372.data[21],DATA12);
SIGNAL(N05_06_1_T,fastbus_2.tdc_L_T81859.data[21],DATA12);
SIGNAL(N05_06_2_E,fastbus_1.qdc_L_Q47315.data[13],DATA12);
SIGNAL(N05_06_2_T,fastbus_2.tdc_L_T48854.data[29],DATA12);
SIGNAL(N05_07_1_E,fastbus_1.qdc_L_Q15372.data[25],DATA12);
SIGNAL(N05_07_1_T,fastbus_2.tdc_L_T81859.data[25],DATA12);
SIGNAL(N05_07_2_E,fastbus_1.qdc_L_Q15372.data[40],DATA12);
SIGNAL(N05_07_2_T,fastbus_2.tdc_L_T81808.data[24],DATA12);
SIGNAL(N05_08_1_E,fastbus_1.qdc_L_Q15372.data[29],DATA12);
SIGNAL(N05_08_1_T,fastbus_2.tdc_L_T81859.data[29],DATA12);
SIGNAL(N05_08_2_E,fastbus_1.qdc_L_Q15372.data[44],DATA12);
SIGNAL(N05_08_2_T,fastbus_2.tdc_L_T81808.data[28],DATA12);
SIGNAL(N05_09_1_E,fastbus_1.qdc_L_Q15372.data[18],DATA12);
SIGNAL(N05_09_1_T,fastbus_2.tdc_L_T81859.data[18],DATA12);
SIGNAL(N05_09_2_E,fastbus_1.qdc_L_Q15372.data[33],DATA12);
SIGNAL(N05_09_2_T,fastbus_2.tdc_L_T81808.data[17],DATA12);
SIGNAL(N05_10_1_E,fastbus_1.qdc_L_Q15372.data[22],DATA12);
SIGNAL(N05_10_1_T,fastbus_2.tdc_L_T81859.data[22],DATA12);
SIGNAL(N05_10_2_E,fastbus_1.qdc_L_Q15372.data[37],DATA12);
SIGNAL(N05_10_2_T,fastbus_2.tdc_L_T81808.data[21],DATA12);
SIGNAL(N05_11_1_E,fastbus_1.qdc_L_Q15372.data[26],DATA12);
SIGNAL(N05_11_1_T,fastbus_2.tdc_L_T81859.data[26],DATA12);
SIGNAL(N05_11_2_E,fastbus_1.qdc_L_Q15372.data[41],DATA12);
SIGNAL(N05_11_2_T,fastbus_2.tdc_L_T81808.data[25],DATA12);
SIGNAL(N05_12_1_E,fastbus_1.qdc_L_Q15372.data[30],DATA12);
SIGNAL(N05_12_1_T,fastbus_2.tdc_L_T81859.data[30],DATA12);
SIGNAL(N05_12_2_E,fastbus_1.qdc_L_Q15372.data[45],DATA12);
SIGNAL(N05_12_2_T,fastbus_2.tdc_L_T81808.data[29],DATA12);
SIGNAL(N05_13_1_E,fastbus_1.qdc_L_Q15372.data[19],DATA12);
SIGNAL(N05_13_1_T,fastbus_2.tdc_L_T81859.data[19],DATA12);
SIGNAL(N05_13_2_E,fastbus_1.qdc_L_Q15372.data[34],DATA12);
SIGNAL(N05_13_2_T,fastbus_2.tdc_L_T81808.data[18],DATA12);
SIGNAL(N05_14_1_E,fastbus_1.qdc_L_Q15372.data[23],DATA12);
SIGNAL(N05_14_1_T,fastbus_2.tdc_L_T81859.data[23],DATA12);
SIGNAL(N05_14_2_E,fastbus_1.qdc_L_Q15372.data[38],DATA12);
SIGNAL(N05_14_2_T,fastbus_2.tdc_L_T81808.data[22],DATA12);
SIGNAL(N05_15_1_E,fastbus_1.qdc_L_Q47315.data[14],DATA12);
SIGNAL(N05_15_1_T,fastbus_2.tdc_L_T48854.data[30],DATA12);
SIGNAL(N05_15_2_E,fastbus_1.qdc_L_Q15372.data[42],DATA12);
SIGNAL(N05_15_2_T,fastbus_2.tdc_L_T81808.data[26],DATA12);
SIGNAL(N05_16_1_E,fastbus_1.qdc_L_Q47315.data[10],DATA12);
SIGNAL(N05_16_1_T,fastbus_2.tdc_L_T48854.data[26],DATA12);
SIGNAL(N05_16_2_E,fastbus_1.qdc_L_Q15372.data[46],DATA12);
SIGNAL(N05_16_2_T,fastbus_2.tdc_L_T81808.data[30],DATA12);
SIGNAL(N05_17_1_E,fastbus_1.qdc_L_Q15372.data[27],DATA12);
SIGNAL(N05_17_1_T,fastbus_2.tdc_L_T81859.data[27],DATA12);
SIGNAL(N05_17_2_E,fastbus_1.qdc_L_Q15372.data[35],DATA12);
SIGNAL(N05_17_2_T,fastbus_2.tdc_L_T81808.data[19],DATA12);
SIGNAL(N05_18_1_E,fastbus_1.qdc_L_Q15372.data[31],DATA12);
SIGNAL(N05_18_1_T,fastbus_2.tdc_L_T81859.data[31],DATA12);
SIGNAL(N05_18_2_E,fastbus_1.qdc_L_Q15372.data[39],DATA12);
SIGNAL(N05_18_2_T,fastbus_2.tdc_L_T81808.data[23],DATA12);
SIGNAL(N05_19_1_E,fastbus_1.qdc_L_Q47315.data[15],DATA12);
SIGNAL(N05_19_1_T,fastbus_2.tdc_L_T48854.data[31],DATA12);
SIGNAL(N05_19_2_E,fastbus_1.qdc_L_Q15372.data[43],DATA12);
SIGNAL(N05_19_2_T,fastbus_2.tdc_L_T81808.data[27],DATA12);
SIGNAL(N05_20_1_E,fastbus_1.qdc_L_Q47315.data[11],DATA12);
SIGNAL(N05_20_1_T,fastbus_2.tdc_L_T48854.data[27],DATA12);
SIGNAL(N05_20_2_E,fastbus_1.qdc_L_Q15372.data[47],DATA12);
SIGNAL(N05_20_2_T,fastbus_2.tdc_L_T81808.data[31],DATA12);
SIGNAL(N06_01_1_E,fastbus_1.qdc_L_Q47315.data[16],DATA12);
SIGNAL(N06_01_1_T,fastbus_2.tdc_L_T87047.data[16],DATA12);
SIGNAL(N06_01_2_E,fastbus_1.qdc_L_Q47315.data[4],DATA12);
SIGNAL(N06_01_2_T,fastbus_2.tdc_L_T48854.data[20],DATA12);
SIGNAL(N06_02_1_E,fastbus_1.qdc_L_Q47315.data[20],DATA12);
SIGNAL(N06_02_1_T,fastbus_2.tdc_L_T87047.data[20],DATA12);
SIGNAL(N06_02_2_E,fastbus_1.qdc_L_Q47315.data[0],DATA12);
SIGNAL(N06_02_2_T,fastbus_2.tdc_L_T48854.data[16],DATA12);
SIGNAL(N06_03_1_E,fastbus_1.qdc_L_Q47315.data[24],DATA12);
SIGNAL(N06_03_1_T,fastbus_2.tdc_L_T87047.data[24],DATA12);
SIGNAL(N06_03_2_E,fastbus_1.qdc_L_Q46993.data[48],DATA12);
SIGNAL(N06_03_2_T,fastbus_2.tdc_L_T48834.data[32],DATA12);
SIGNAL(N06_04_1_E,fastbus_1.qdc_L_Q47315.data[28],DATA12);
SIGNAL(N06_04_1_T,fastbus_2.tdc_L_T87047.data[28],DATA12);
SIGNAL(N06_04_2_E,fastbus_1.qdc_L_Q46993.data[52],DATA12);
SIGNAL(N06_04_2_T,fastbus_2.tdc_L_T48834.data[36],DATA12);
SIGNAL(N06_05_1_E,fastbus_1.qdc_L_Q47315.data[17],DATA12);
SIGNAL(N06_05_1_T,fastbus_2.tdc_L_T87047.data[17],DATA12);
SIGNAL(N06_05_2_E,fastbus_1.qdc_L_Q47315.data[5],DATA12);
SIGNAL(N06_05_2_T,fastbus_2.tdc_L_T48854.data[21],DATA12);
SIGNAL(N06_06_1_E,fastbus_1.qdc_L_Q47315.data[21],DATA12);
SIGNAL(N06_06_1_T,fastbus_2.tdc_L_T87047.data[21],DATA12);
SIGNAL(N06_06_2_E,fastbus_1.qdc_L_Q47315.data[1],DATA12);
SIGNAL(N06_06_2_T,fastbus_2.tdc_L_T48854.data[17],DATA12);
SIGNAL(N06_07_1_E,fastbus_1.qdc_L_Q47315.data[25],DATA12);
SIGNAL(N06_07_1_T,fastbus_2.tdc_L_T87047.data[25],DATA12);
SIGNAL(N06_07_2_E,fastbus_1.qdc_L_Q46993.data[56],DATA12);
SIGNAL(N06_07_2_T,fastbus_2.tdc_L_T48834.data[40],DATA12);
SIGNAL(N06_08_1_E,fastbus_1.qdc_L_Q47315.data[29],DATA12);
SIGNAL(N06_08_1_T,fastbus_2.tdc_L_T87047.data[29],DATA12);
SIGNAL(N06_08_2_E,fastbus_1.qdc_L_Q46993.data[60],DATA12);
SIGNAL(N06_08_2_T,fastbus_2.tdc_L_T48834.data[44],DATA12);
SIGNAL(N06_09_1_E,fastbus_1.qdc_L_Q47315.data[18],DATA12);
SIGNAL(N06_09_1_T,fastbus_2.tdc_L_T87047.data[18],DATA12);
SIGNAL(N06_09_2_E,fastbus_1.qdc_L_Q46993.data[49],DATA12);
SIGNAL(N06_09_2_T,fastbus_2.tdc_L_T48834.data[33],DATA12);
SIGNAL(N06_10_1_E,fastbus_1.qdc_L_Q47315.data[22],DATA12);
SIGNAL(N06_10_1_T,fastbus_2.tdc_L_T87047.data[22],DATA12);
SIGNAL(N06_10_2_E,fastbus_1.qdc_L_Q46993.data[53],DATA12);
SIGNAL(N06_10_2_T,fastbus_2.tdc_L_T48834.data[37],DATA12);
SIGNAL(N06_11_1_E,fastbus_1.qdc_L_Q47315.data[26],DATA12);
SIGNAL(N06_11_1_T,fastbus_2.tdc_L_T87047.data[26],DATA12);
SIGNAL(N06_11_2_E,fastbus_1.qdc_L_Q46993.data[57],DATA12);
SIGNAL(N06_11_2_T,fastbus_2.tdc_L_T48834.data[41],DATA12);
SIGNAL(N06_12_1_E,fastbus_1.qdc_L_Q47315.data[30],DATA12);
SIGNAL(N06_12_1_T,fastbus_2.tdc_L_T87047.data[30],DATA12);
SIGNAL(N06_12_2_E,fastbus_1.qdc_L_Q46993.data[61],DATA12);
SIGNAL(N06_12_2_T,fastbus_2.tdc_L_T48834.data[45],DATA12);
SIGNAL(N06_13_1_E,fastbus_1.qdc_L_Q47315.data[19],DATA12);
SIGNAL(N06_13_1_T,fastbus_2.tdc_L_T87047.data[19],DATA12);
SIGNAL(N06_13_2_E,fastbus_1.qdc_L_Q46993.data[50],DATA12);
SIGNAL(N06_13_2_T,fastbus_2.tdc_L_T48834.data[34],DATA12);
SIGNAL(N06_14_1_E,fastbus_1.qdc_L_Q47315.data[23],DATA12);
SIGNAL(N06_14_1_T,fastbus_2.tdc_L_T87047.data[23],DATA12);
SIGNAL(N06_14_2_E,fastbus_1.qdc_L_Q46993.data[54],DATA12);
SIGNAL(N06_14_2_T,fastbus_2.tdc_L_T48834.data[38],DATA12);
SIGNAL(N06_15_1_E,fastbus_1.qdc_L_Q47315.data[6],DATA12);
SIGNAL(N06_15_1_T,fastbus_2.tdc_L_T48854.data[22],DATA12);
SIGNAL(N06_15_2_E,fastbus_1.qdc_L_Q46993.data[58],DATA12);
SIGNAL(N06_15_2_T,fastbus_2.tdc_L_T48834.data[42],DATA12);
SIGNAL(N06_16_1_E,fastbus_1.qdc_L_Q47315.data[2],DATA12);
SIGNAL(N06_16_1_T,fastbus_2.tdc_L_T48854.data[18],DATA12);
SIGNAL(N06_16_2_E,fastbus_1.qdc_L_Q46993.data[62],DATA12);
SIGNAL(N06_16_2_T,fastbus_2.tdc_L_T48834.data[46],DATA12);
SIGNAL(N06_17_1_E,fastbus_1.qdc_L_Q47315.data[27],DATA12);
SIGNAL(N06_17_1_T,fastbus_2.tdc_L_T87047.data[27],DATA12);
SIGNAL(N06_17_2_E,fastbus_1.qdc_L_Q46993.data[51],DATA12);
SIGNAL(N06_17_2_T,fastbus_2.tdc_L_T48834.data[35],DATA12);
SIGNAL(N06_18_1_E,fastbus_1.qdc_L_Q47315.data[31],DATA12);
SIGNAL(N06_18_1_T,fastbus_2.tdc_L_T87047.data[31],DATA12);
SIGNAL(N06_18_2_E,fastbus_1.qdc_L_Q46993.data[55],DATA12);
SIGNAL(N06_18_2_T,fastbus_2.tdc_L_T48834.data[39],DATA12);
SIGNAL(N06_19_1_E,fastbus_1.qdc_L_Q47315.data[7],DATA12);
SIGNAL(N06_19_1_T,fastbus_2.tdc_L_T48854.data[23],DATA12);
SIGNAL(N06_19_2_E,fastbus_1.qdc_L_Q46993.data[59],DATA12);
SIGNAL(N06_19_2_T,fastbus_2.tdc_L_T48834.data[43],DATA12);
SIGNAL(N06_20_1_E,fastbus_1.qdc_L_Q47315.data[3],DATA12);
SIGNAL(N06_20_1_T,fastbus_2.tdc_L_T48854.data[19],DATA12);
SIGNAL(N06_20_2_E,fastbus_1.qdc_L_Q46993.data[63],DATA12);
SIGNAL(N06_20_2_T,fastbus_2.tdc_L_T48834.data[47],DATA12);
SIGNAL(N07_01_1_E,fastbus_1.qdc_L_Q46993.data[64],DATA12);
SIGNAL(N07_01_1_T,fastbus_2.tdc_L_T81806.data[32],DATA12);
SIGNAL(N07_01_2_E,fastbus_1.qdc_L_Q15358.data[60],DATA12);
SIGNAL(N07_01_2_T,fastbus_2.tdc_L_T81859.data[44],DATA12);
SIGNAL(N07_02_1_E,fastbus_1.qdc_L_Q46993.data[68],DATA12);
SIGNAL(N07_02_1_T,fastbus_2.tdc_L_T81806.data[36],DATA12);
SIGNAL(N07_02_2_E,fastbus_1.qdc_L_Q15358.data[56],DATA12);
SIGNAL(N07_02_2_T,fastbus_2.tdc_L_T81859.data[40],DATA12);
SIGNAL(N07_03_1_E,fastbus_1.qdc_L_Q46993.data[72],DATA12);
SIGNAL(N07_03_1_T,fastbus_2.tdc_L_T81806.data[40],DATA12);
SIGNAL(N07_03_2_E,fastbus_1.qdc_L_Q46993.data[80],DATA12);
SIGNAL(N07_03_2_T,fastbus_2.tdc_L_T81795.data[32],DATA12);
SIGNAL(N07_04_1_E,fastbus_1.qdc_L_Q46993.data[76],DATA12);
SIGNAL(N07_04_1_T,fastbus_2.tdc_L_T81806.data[44],DATA12);
SIGNAL(N07_04_2_E,fastbus_1.qdc_L_Q46993.data[84],DATA12);
SIGNAL(N07_04_2_T,fastbus_2.tdc_L_T81795.data[36],DATA12);
SIGNAL(N07_05_1_E,fastbus_1.qdc_L_Q46993.data[65],DATA12);
SIGNAL(N07_05_1_T,fastbus_2.tdc_L_T81806.data[33],DATA12);
SIGNAL(N07_05_2_E,fastbus_1.qdc_L_Q15358.data[57],DATA12);
SIGNAL(N07_05_2_T,fastbus_2.tdc_L_T81859.data[41],DATA12);
SIGNAL(N07_06_1_E,fastbus_1.qdc_L_Q46993.data[69],DATA12);
SIGNAL(N07_06_1_T,fastbus_2.tdc_L_T81806.data[37],DATA12);
SIGNAL(N07_06_2_E,fastbus_1.qdc_L_Q15358.data[61],DATA12);
SIGNAL(N07_06_2_T,fastbus_2.tdc_L_T81859.data[45],DATA12);
SIGNAL(N07_07_1_E,fastbus_1.qdc_L_Q46993.data[73],DATA12);
SIGNAL(N07_07_1_T,fastbus_2.tdc_L_T81806.data[41],DATA12);
SIGNAL(N07_07_2_E,fastbus_1.qdc_L_Q46993.data[88],DATA12);
SIGNAL(N07_07_2_T,fastbus_2.tdc_L_T81795.data[40],DATA12);
SIGNAL(N07_08_1_E,fastbus_1.qdc_L_Q46993.data[77],DATA12);
SIGNAL(N07_08_1_T,fastbus_2.tdc_L_T81806.data[45],DATA12);
SIGNAL(N07_08_2_E,fastbus_1.qdc_L_Q46993.data[92],DATA12);
SIGNAL(N07_08_2_T,fastbus_2.tdc_L_T81795.data[44],DATA12);
SIGNAL(N07_09_1_E,fastbus_1.qdc_L_Q46993.data[66],DATA12);
SIGNAL(N07_09_1_T,fastbus_2.tdc_L_T81806.data[34],DATA12);
SIGNAL(N07_09_2_E,fastbus_1.qdc_L_Q46993.data[81],DATA12);
SIGNAL(N07_09_2_T,fastbus_2.tdc_L_T81795.data[33],DATA12);
SIGNAL(N07_10_1_E,fastbus_1.qdc_L_Q46993.data[70],DATA12);
SIGNAL(N07_10_1_T,fastbus_2.tdc_L_T81806.data[38],DATA12);
SIGNAL(N07_10_2_E,fastbus_1.qdc_L_Q46993.data[85],DATA12);
SIGNAL(N07_10_2_T,fastbus_2.tdc_L_T81795.data[37],DATA12);
SIGNAL(N07_11_1_E,fastbus_1.qdc_L_Q46993.data[74],DATA12);
SIGNAL(N07_11_1_T,fastbus_2.tdc_L_T81806.data[42],DATA12);
SIGNAL(N07_11_2_E,fastbus_1.qdc_L_Q46993.data[89],DATA12);
SIGNAL(N07_11_2_T,fastbus_2.tdc_L_T81795.data[41],DATA12);
SIGNAL(N07_12_1_E,fastbus_1.qdc_L_Q46993.data[78],DATA12);
SIGNAL(N07_12_1_T,fastbus_2.tdc_L_T81806.data[46],DATA12);
SIGNAL(N07_12_2_E,fastbus_1.qdc_L_Q46993.data[93],DATA12);
SIGNAL(N07_12_2_T,fastbus_2.tdc_L_T81795.data[45],DATA12);
SIGNAL(N07_13_1_E,fastbus_1.qdc_L_Q46993.data[67],DATA12);
SIGNAL(N07_13_1_T,fastbus_2.tdc_L_T81806.data[35],DATA12);
SIGNAL(N07_13_2_E,fastbus_1.qdc_L_Q46993.data[82],DATA12);
SIGNAL(N07_13_2_T,fastbus_2.tdc_L_T81795.data[34],DATA12);
SIGNAL(N07_14_1_E,fastbus_1.qdc_L_Q46993.data[71],DATA12);
SIGNAL(N07_14_1_T,fastbus_2.tdc_L_T81806.data[39],DATA12);
SIGNAL(N07_14_2_E,fastbus_1.qdc_L_Q46993.data[86],DATA12);
SIGNAL(N07_14_2_T,fastbus_2.tdc_L_T81795.data[38],DATA12);
SIGNAL(N07_15_1_E,fastbus_1.qdc_L_Q15358.data[62],DATA12);
SIGNAL(N07_15_1_T,fastbus_2.tdc_L_T81859.data[46],DATA12);
SIGNAL(N07_15_2_E,fastbus_1.qdc_L_Q46993.data[90],DATA12);
SIGNAL(N07_15_2_T,fastbus_2.tdc_L_T81795.data[42],DATA12);
SIGNAL(N07_16_1_E,fastbus_1.qdc_L_Q15358.data[58],DATA12);
SIGNAL(N07_16_1_T,fastbus_2.tdc_L_T81859.data[42],DATA12);
SIGNAL(N07_16_2_E,fastbus_1.qdc_L_Q46993.data[94],DATA12);
SIGNAL(N07_16_2_T,fastbus_2.tdc_L_T81795.data[46],DATA12);
SIGNAL(N07_17_1_E,fastbus_1.qdc_L_Q46993.data[75],DATA12);
SIGNAL(N07_17_1_T,fastbus_2.tdc_L_T81806.data[43],DATA12);
SIGNAL(N07_17_2_E,fastbus_1.qdc_L_Q46993.data[83],DATA12);
SIGNAL(N07_17_2_T,fastbus_2.tdc_L_T81795.data[35],DATA12);
SIGNAL(N07_18_1_E,fastbus_1.qdc_L_Q46993.data[79],DATA12);
SIGNAL(N07_18_1_T,fastbus_2.tdc_L_T81806.data[47],DATA12);
SIGNAL(N07_18_2_E,fastbus_1.qdc_L_Q46993.data[87],DATA12);
SIGNAL(N07_18_2_T,fastbus_2.tdc_L_T81795.data[39],DATA12);
SIGNAL(N07_19_1_E,fastbus_1.qdc_L_Q15358.data[63],DATA12);
SIGNAL(N07_19_1_T,fastbus_2.tdc_L_T81859.data[47],DATA12);
SIGNAL(N07_19_2_E,fastbus_1.qdc_L_Q46993.data[91],DATA12);
SIGNAL(N07_19_2_T,fastbus_2.tdc_L_T81795.data[43],DATA12);
SIGNAL(N07_20_1_E,fastbus_1.qdc_L_Q15358.data[59],DATA12);
SIGNAL(N07_20_1_T,fastbus_2.tdc_L_T81859.data[43],DATA12);
SIGNAL(N07_20_2_E,fastbus_1.qdc_L_Q46993.data[95],DATA12);
SIGNAL(N07_20_2_T,fastbus_2.tdc_L_T81795.data[47],DATA12);
SIGNAL(N08_01_1_E,fastbus_1.qdc_L_Q15358.data[64],DATA12);
SIGNAL(N08_01_1_T,fastbus_2.tdc_L_T81808.data[32],DATA12);
SIGNAL(N08_01_2_E,fastbus_1.qdc_L_Q15358.data[52],DATA12);
SIGNAL(N08_01_2_T,fastbus_2.tdc_L_T81859.data[36],DATA12);
SIGNAL(N08_02_1_E,fastbus_1.qdc_L_Q15358.data[68],DATA12);
SIGNAL(N08_02_1_T,fastbus_2.tdc_L_T81808.data[36],DATA12);
SIGNAL(N08_02_2_E,fastbus_1.qdc_L_Q15358.data[48],DATA12);
SIGNAL(N08_02_2_T,fastbus_2.tdc_L_T81859.data[32],DATA12);
SIGNAL(N08_03_1_E,fastbus_1.qdc_L_Q15358.data[72],DATA12);
SIGNAL(N08_03_1_T,fastbus_2.tdc_L_T81808.data[40],DATA12);
SIGNAL(N08_03_2_E,fastbus_1.qdc_L_Q15358.data[80],DATA12);
SIGNAL(N08_03_2_T,fastbus_2.tdc_L_T48854.data[32],DATA12);
SIGNAL(N08_04_1_E,fastbus_1.qdc_L_Q15358.data[76],DATA12);
SIGNAL(N08_04_1_T,fastbus_2.tdc_L_T81808.data[44],DATA12);
SIGNAL(N08_04_2_E,fastbus_1.qdc_L_Q15358.data[84],DATA12);
SIGNAL(N08_04_2_T,fastbus_2.tdc_L_T48854.data[36],DATA12);
SIGNAL(N08_05_1_E,fastbus_1.qdc_L_Q15358.data[65],DATA12);
SIGNAL(N08_05_1_T,fastbus_2.tdc_L_T81808.data[33],DATA12);
SIGNAL(N08_05_2_E,fastbus_1.qdc_L_Q15358.data[53],DATA12);
SIGNAL(N08_05_2_T,fastbus_2.tdc_L_T81859.data[37],DATA12);
SIGNAL(N08_06_1_E,fastbus_1.qdc_L_Q15358.data[69],DATA12);
SIGNAL(N08_06_1_T,fastbus_2.tdc_L_T81808.data[37],DATA12);
SIGNAL(N08_06_2_E,fastbus_1.qdc_L_Q15358.data[49],DATA12);
SIGNAL(N08_06_2_T,fastbus_2.tdc_L_T81859.data[33],DATA12);
SIGNAL(N08_07_1_E,fastbus_1.qdc_L_Q15358.data[73],DATA12);
SIGNAL(N08_07_1_T,fastbus_2.tdc_L_T81808.data[41],DATA12);
SIGNAL(N08_07_2_E,fastbus_1.qdc_L_Q15358.data[88],DATA12);
SIGNAL(N08_07_2_T,fastbus_2.tdc_L_T48854.data[40],DATA12);
SIGNAL(N08_08_1_E,fastbus_1.qdc_L_Q15358.data[77],DATA12);
SIGNAL(N08_08_1_T,fastbus_2.tdc_L_T81808.data[45],DATA12);
SIGNAL(N08_08_2_E,fastbus_1.qdc_L_Q15358.data[92],DATA12);
SIGNAL(N08_08_2_T,fastbus_2.tdc_L_T48854.data[44],DATA12);
SIGNAL(N08_09_1_E,fastbus_1.qdc_L_Q15358.data[66],DATA12);
SIGNAL(N08_09_1_T,fastbus_2.tdc_L_T81808.data[34],DATA12);
SIGNAL(N08_09_2_E,fastbus_1.qdc_L_Q15358.data[81],DATA12);
SIGNAL(N08_09_2_T,fastbus_2.tdc_L_T48854.data[33],DATA12);
SIGNAL(N08_10_1_E,fastbus_1.qdc_L_Q15358.data[70],DATA12);
SIGNAL(N08_10_1_T,fastbus_2.tdc_L_T81808.data[38],DATA12);
SIGNAL(N08_10_2_E,fastbus_1.qdc_L_Q15358.data[85],DATA12);
SIGNAL(N08_10_2_T,fastbus_2.tdc_L_T48854.data[37],DATA12);
SIGNAL(N08_11_1_E,fastbus_1.qdc_L_Q15358.data[74],DATA12);
SIGNAL(N08_11_1_T,fastbus_2.tdc_L_T81808.data[42],DATA12);
SIGNAL(N08_11_2_E,fastbus_1.qdc_L_Q15358.data[89],DATA12);
SIGNAL(N08_11_2_T,fastbus_2.tdc_L_T48854.data[41],DATA12);
SIGNAL(N08_12_1_E,fastbus_1.qdc_L_Q15358.data[78],DATA12);
SIGNAL(N08_12_1_T,fastbus_2.tdc_L_T81808.data[46],DATA12);
SIGNAL(N08_12_2_E,fastbus_1.qdc_L_Q15358.data[93],DATA12);
SIGNAL(N08_12_2_T,fastbus_2.tdc_L_T48854.data[45],DATA12);
SIGNAL(N08_13_1_E,fastbus_1.qdc_L_Q15358.data[67],DATA12);
SIGNAL(N08_13_1_T,fastbus_2.tdc_L_T81808.data[35],DATA12);
SIGNAL(N08_13_2_E,fastbus_1.qdc_L_Q15358.data[82],DATA12);
SIGNAL(N08_13_2_T,fastbus_2.tdc_L_T48854.data[34],DATA12);
SIGNAL(N08_14_1_E,fastbus_1.qdc_L_Q15358.data[71],DATA12);
SIGNAL(N08_14_1_T,fastbus_2.tdc_L_T81808.data[39],DATA12);
SIGNAL(N08_14_2_E,fastbus_1.qdc_L_Q15358.data[86],DATA12);
SIGNAL(N08_14_2_T,fastbus_2.tdc_L_T48854.data[38],DATA12);
SIGNAL(N08_15_1_E,fastbus_1.qdc_L_Q15358.data[54],DATA12);
SIGNAL(N08_15_1_T,fastbus_2.tdc_L_T81859.data[38],DATA12);
SIGNAL(N08_15_2_E,fastbus_1.qdc_L_Q15358.data[90],DATA12);
SIGNAL(N08_15_2_T,fastbus_2.tdc_L_T48854.data[42],DATA12);
SIGNAL(N08_16_1_E,fastbus_1.qdc_L_Q15358.data[50],DATA12);
SIGNAL(N08_16_1_T,fastbus_2.tdc_L_T81859.data[34],DATA12);
SIGNAL(N08_16_2_E,fastbus_1.qdc_L_Q15358.data[94],DATA12);
SIGNAL(N08_16_2_T,fastbus_2.tdc_L_T48854.data[46],DATA12);
SIGNAL(N08_17_1_E,fastbus_1.qdc_L_Q15358.data[75],DATA12);
SIGNAL(N08_17_1_T,fastbus_2.tdc_L_T81808.data[43],DATA12);
SIGNAL(N08_17_2_E,fastbus_1.qdc_L_Q15358.data[83],DATA12);
SIGNAL(N08_17_2_T,fastbus_2.tdc_L_T48854.data[35],DATA12);
SIGNAL(N08_18_1_E,fastbus_1.qdc_L_Q15358.data[79],DATA12);
SIGNAL(N08_18_1_T,fastbus_2.tdc_L_T81808.data[47],DATA12);
SIGNAL(N08_18_2_E,fastbus_1.qdc_L_Q15358.data[87],DATA12);
SIGNAL(N08_18_2_T,fastbus_2.tdc_L_T48854.data[39],DATA12);
SIGNAL(N08_19_1_E,fastbus_1.qdc_L_Q15358.data[55],DATA12);
SIGNAL(N08_19_1_T,fastbus_2.tdc_L_T81859.data[39],DATA12);
SIGNAL(N08_19_2_E,fastbus_1.qdc_L_Q15358.data[91],DATA12);
SIGNAL(N08_19_2_T,fastbus_2.tdc_L_T48854.data[43],DATA12);
SIGNAL(N08_20_1_E,fastbus_1.qdc_L_Q15358.data[51],DATA12);
SIGNAL(N08_20_1_T,fastbus_2.tdc_L_T81859.data[35],DATA12);
SIGNAL(N08_20_2_E,fastbus_1.qdc_L_Q15358.data[95],DATA12);
SIGNAL(N08_20_2_T,fastbus_2.tdc_L_T48854.data[47],DATA12);
SIGNAL(N09_01_1_E,fastbus_1.qdc_F_Q46962.data[48],DATA12);
SIGNAL(N09_01_1_T,fastbus_2.tdc_L_T87047.data[32],DATA12);
SIGNAL(N09_01_2_E,fastbus_1.qdc_F_Q46962.data[92],DATA12);
SIGNAL(N09_01_2_T,fastbus_2.tdc_L_T81808.data[60],DATA12);
SIGNAL(N09_02_1_E,fastbus_1.qdc_F_Q46962.data[52],DATA12);
SIGNAL(N09_02_1_T,fastbus_2.tdc_L_T87047.data[36],DATA12);
SIGNAL(N09_02_2_E,fastbus_1.qdc_F_Q46962.data[88],DATA12);
SIGNAL(N09_02_2_T,fastbus_2.tdc_L_T81808.data[56],DATA12);
SIGNAL(N09_03_1_E,fastbus_1.qdc_F_Q46962.data[56],DATA12);
SIGNAL(N09_03_1_T,fastbus_2.tdc_L_T87047.data[40],DATA12);
SIGNAL(N09_03_2_E,fastbus_1.qdc_F_Q46962.data[64],DATA12);
SIGNAL(N09_03_2_T,fastbus_2.tdc_L_T81859.data[48],DATA12);
SIGNAL(N09_04_1_E,fastbus_1.qdc_F_Q46962.data[60],DATA12);
SIGNAL(N09_04_1_T,fastbus_2.tdc_L_T87047.data[44],DATA12);
SIGNAL(N09_04_2_E,fastbus_1.qdc_F_Q46962.data[68],DATA12);
SIGNAL(N09_04_2_T,fastbus_2.tdc_L_T81859.data[52],DATA12);
SIGNAL(N09_05_1_E,fastbus_1.qdc_F_Q46962.data[49],DATA12);
SIGNAL(N09_05_1_T,fastbus_2.tdc_L_T87047.data[33],DATA12);
SIGNAL(N09_05_2_E,fastbus_1.qdc_F_Q46962.data[89],DATA12);
SIGNAL(N09_05_2_T,fastbus_2.tdc_L_T81808.data[57],DATA12);
SIGNAL(N09_06_1_E,fastbus_1.qdc_F_Q46962.data[53],DATA12);
SIGNAL(N09_06_1_T,fastbus_2.tdc_L_T87047.data[37],DATA12);
SIGNAL(N09_06_2_E,fastbus_1.qdc_F_Q46962.data[93],DATA12);
SIGNAL(N09_06_2_T,fastbus_2.tdc_L_T81808.data[61],DATA12);
SIGNAL(N09_07_1_E,fastbus_1.qdc_F_Q46962.data[57],DATA12);
SIGNAL(N09_07_1_T,fastbus_2.tdc_L_T87047.data[41],DATA12);
SIGNAL(N09_07_2_E,fastbus_1.qdc_F_Q46962.data[72],DATA12);
SIGNAL(N09_07_2_T,fastbus_2.tdc_L_T81859.data[56],DATA12);
SIGNAL(N09_08_1_E,fastbus_1.qdc_F_Q46962.data[61],DATA12);
SIGNAL(N09_08_1_T,fastbus_2.tdc_L_T87047.data[45],DATA12);
SIGNAL(N09_08_2_E,fastbus_1.qdc_F_Q46962.data[76],DATA12);
SIGNAL(N09_08_2_T,fastbus_2.tdc_L_T81859.data[60],DATA12);
SIGNAL(N09_09_1_E,fastbus_1.qdc_F_Q46962.data[50],DATA12);
SIGNAL(N09_09_1_T,fastbus_2.tdc_L_T87047.data[34],DATA12);
SIGNAL(N09_09_2_E,fastbus_1.qdc_F_Q46962.data[65],DATA12);
SIGNAL(N09_09_2_T,fastbus_2.tdc_L_T81859.data[49],DATA12);
SIGNAL(N09_10_1_E,fastbus_1.qdc_F_Q46962.data[54],DATA12);
SIGNAL(N09_10_1_T,fastbus_2.tdc_L_T87047.data[38],DATA12);
SIGNAL(N09_10_2_E,fastbus_1.qdc_F_Q46962.data[69],DATA12);
SIGNAL(N09_10_2_T,fastbus_2.tdc_L_T81859.data[53],DATA12);
SIGNAL(N09_11_1_E,fastbus_1.qdc_F_Q46962.data[58],DATA12);
SIGNAL(N09_11_1_T,fastbus_2.tdc_L_T87047.data[42],DATA12);
SIGNAL(N09_11_2_E,fastbus_1.qdc_F_Q46962.data[73],DATA12);
SIGNAL(N09_11_2_T,fastbus_2.tdc_L_T81859.data[57],DATA12);
SIGNAL(N09_12_1_E,fastbus_1.qdc_F_Q46962.data[62],DATA12);
SIGNAL(N09_12_1_T,fastbus_2.tdc_L_T87047.data[46],DATA12);
SIGNAL(N09_12_2_E,fastbus_1.qdc_F_Q46962.data[77],DATA12);
SIGNAL(N09_12_2_T,fastbus_2.tdc_L_T81859.data[61],DATA12);
SIGNAL(N09_13_1_E,fastbus_1.qdc_F_Q46962.data[51],DATA12);
SIGNAL(N09_13_1_T,fastbus_2.tdc_L_T87047.data[35],DATA12);
SIGNAL(N09_13_2_E,fastbus_1.qdc_F_Q46962.data[66],DATA12);
SIGNAL(N09_13_2_T,fastbus_2.tdc_L_T81859.data[50],DATA12);
SIGNAL(N09_14_1_E,fastbus_1.qdc_F_Q46962.data[55],DATA12);
SIGNAL(N09_14_1_T,fastbus_2.tdc_L_T87047.data[39],DATA12);
SIGNAL(N09_14_2_E,fastbus_1.qdc_F_Q46962.data[70],DATA12);
SIGNAL(N09_14_2_T,fastbus_2.tdc_L_T81859.data[54],DATA12);
SIGNAL(N09_15_1_E,fastbus_1.qdc_F_Q46962.data[94],DATA12);
SIGNAL(N09_15_1_T,fastbus_2.tdc_L_T81808.data[62],DATA12);
SIGNAL(N09_15_2_E,fastbus_1.qdc_F_Q46962.data[74],DATA12);
SIGNAL(N09_15_2_T,fastbus_2.tdc_L_T81859.data[58],DATA12);
SIGNAL(N09_16_1_E,fastbus_1.qdc_F_Q46962.data[90],DATA12);
SIGNAL(N09_16_1_T,fastbus_2.tdc_L_T81808.data[58],DATA12);
SIGNAL(N09_16_2_E,fastbus_1.qdc_F_Q46962.data[78],DATA12);
SIGNAL(N09_16_2_T,fastbus_2.tdc_L_T81859.data[62],DATA12);
SIGNAL(N09_17_1_E,fastbus_1.qdc_F_Q46962.data[59],DATA12);
SIGNAL(N09_17_1_T,fastbus_2.tdc_L_T87047.data[43],DATA12);
SIGNAL(N09_17_2_E,fastbus_1.qdc_F_Q46962.data[67],DATA12);
SIGNAL(N09_17_2_T,fastbus_2.tdc_L_T81859.data[51],DATA12);
SIGNAL(N09_18_1_E,fastbus_1.qdc_F_Q46962.data[63],DATA12);
SIGNAL(N09_18_1_T,fastbus_2.tdc_L_T87047.data[47],DATA12);
SIGNAL(N09_18_2_E,fastbus_1.qdc_F_Q46962.data[71],DATA12);
SIGNAL(N09_18_2_T,fastbus_2.tdc_L_T81859.data[55],DATA12);
SIGNAL(N09_19_1_E,fastbus_1.qdc_F_Q46962.data[95],DATA12);
SIGNAL(N09_19_1_T,fastbus_2.tdc_L_T81808.data[63],DATA12);
SIGNAL(N09_19_2_E,fastbus_1.qdc_F_Q46962.data[75],DATA12);
SIGNAL(N09_19_2_T,fastbus_2.tdc_L_T81859.data[59],DATA12);
SIGNAL(N09_20_1_E,fastbus_1.qdc_F_Q46962.data[91],DATA12);
SIGNAL(N09_20_1_T,fastbus_2.tdc_L_T81808.data[59],DATA12);
SIGNAL(N09_20_2_E,fastbus_1.qdc_F_Q46962.data[79],DATA12);
SIGNAL(N09_20_2_T,fastbus_2.tdc_L_T81859.data[63],DATA12);
SIGNAL(N10_01_1_E,fastbus_1.qdc_L_Q15372.data[64],DATA12);
SIGNAL(N10_01_1_T,fastbus_2.tdc_L_T48854.data[48],DATA12);
SIGNAL(N10_01_2_E,fastbus_1.qdc_F_Q46962.data[84],DATA12);
SIGNAL(N10_01_2_T,fastbus_2.tdc_L_T81808.data[52],DATA12);
SIGNAL(N10_02_1_E,fastbus_1.qdc_L_Q15372.data[68],DATA12);
SIGNAL(N10_02_1_T,fastbus_2.tdc_L_T48854.data[52],DATA12);
SIGNAL(N10_02_2_E,fastbus_1.qdc_F_Q46962.data[80],DATA12);
SIGNAL(N10_02_2_T,fastbus_2.tdc_L_T81808.data[48],DATA12);
SIGNAL(N10_03_1_E,fastbus_1.qdc_L_Q15372.data[72],DATA12);
SIGNAL(N10_03_1_T,fastbus_2.tdc_L_T48854.data[56],DATA12);
SIGNAL(N10_03_2_E,fastbus_1.qdc_L_Q15372.data[80],DATA12);
SIGNAL(N10_03_2_T,fastbus_2.tdc_L_T87047.data[48],DATA12);
SIGNAL(N10_04_1_E,fastbus_1.qdc_L_Q15372.data[76],DATA12);
SIGNAL(N10_04_1_T,fastbus_2.tdc_L_T48854.data[60],DATA12);
SIGNAL(N10_04_2_E,fastbus_1.qdc_L_Q15372.data[84],DATA12);
SIGNAL(N10_04_2_T,fastbus_2.tdc_L_T87047.data[52],DATA12);
SIGNAL(N10_05_1_E,fastbus_1.qdc_L_Q15372.data[65],DATA12);
SIGNAL(N10_05_1_T,fastbus_2.tdc_L_T48854.data[49],DATA12);
SIGNAL(N10_05_2_E,fastbus_1.qdc_F_Q46962.data[85],DATA12);
SIGNAL(N10_05_2_T,fastbus_2.tdc_L_T81808.data[53],DATA12);
SIGNAL(N10_06_1_E,fastbus_1.qdc_L_Q15372.data[69],DATA12);
SIGNAL(N10_06_1_T,fastbus_2.tdc_L_T48854.data[53],DATA12);
SIGNAL(N10_06_2_E,fastbus_1.qdc_F_Q46962.data[81],DATA12);
SIGNAL(N10_06_2_T,fastbus_2.tdc_L_T81808.data[49],DATA12);
SIGNAL(N10_07_1_E,fastbus_1.qdc_L_Q15372.data[73],DATA12);
SIGNAL(N10_07_1_T,fastbus_2.tdc_L_T48854.data[57],DATA12);
SIGNAL(N10_07_2_E,fastbus_1.qdc_L_Q15372.data[88],DATA12);
SIGNAL(N10_07_2_T,fastbus_2.tdc_L_T87047.data[56],DATA12);
SIGNAL(N10_08_1_E,fastbus_1.qdc_L_Q15372.data[77],DATA12);
SIGNAL(N10_08_1_T,fastbus_2.tdc_L_T48854.data[61],DATA12);
SIGNAL(N10_08_2_E,fastbus_1.qdc_L_Q15372.data[92],DATA12);
SIGNAL(N10_08_2_T,fastbus_2.tdc_L_T87047.data[60],DATA12);
SIGNAL(N10_09_1_E,fastbus_1.qdc_L_Q15372.data[66],DATA12);
SIGNAL(N10_09_1_T,fastbus_2.tdc_L_T48854.data[50],DATA12);
SIGNAL(N10_09_2_E,fastbus_1.qdc_L_Q15372.data[81],DATA12);
SIGNAL(N10_09_2_T,fastbus_2.tdc_L_T87047.data[49],DATA12);
SIGNAL(N10_10_1_E,fastbus_1.qdc_L_Q15372.data[70],DATA12);
SIGNAL(N10_10_1_T,fastbus_2.tdc_L_T48854.data[54],DATA12);
SIGNAL(N10_10_2_E,fastbus_1.qdc_L_Q15372.data[85],DATA12);
SIGNAL(N10_10_2_T,fastbus_2.tdc_L_T87047.data[53],DATA12);
SIGNAL(N10_11_1_E,fastbus_1.qdc_L_Q15372.data[74],DATA12);
SIGNAL(N10_11_1_T,fastbus_2.tdc_L_T48854.data[58],DATA12);
SIGNAL(N10_11_2_E,fastbus_1.qdc_L_Q15372.data[89],DATA12);
SIGNAL(N10_11_2_T,fastbus_2.tdc_L_T87047.data[57],DATA12);
SIGNAL(N10_12_1_E,fastbus_1.qdc_L_Q15372.data[79],DATA12);
SIGNAL(N10_12_1_T,fastbus_2.tdc_L_T48854.data[63],DATA12);
SIGNAL(N10_12_2_E,fastbus_1.qdc_L_Q15372.data[93],DATA12);
SIGNAL(N10_12_2_T,fastbus_2.tdc_L_T87047.data[61],DATA12);
SIGNAL(N10_13_1_E,fastbus_1.qdc_L_Q15372.data[67],DATA12);
SIGNAL(N10_13_1_T,fastbus_2.tdc_L_T48854.data[51],DATA12);
SIGNAL(N10_13_2_E,fastbus_1.qdc_L_Q15372.data[82],DATA12);
SIGNAL(N10_13_2_T,fastbus_2.tdc_L_T87047.data[50],DATA12);
SIGNAL(N10_14_1_E,fastbus_1.qdc_L_Q15372.data[71],DATA12);
SIGNAL(N10_14_1_T,fastbus_2.tdc_L_T48854.data[55],DATA12);
SIGNAL(N10_14_2_E,fastbus_1.qdc_L_Q15372.data[86],DATA12);
SIGNAL(N10_14_2_T,fastbus_2.tdc_L_T87047.data[54],DATA12);
SIGNAL(N10_15_1_E,fastbus_1.qdc_F_Q46962.data[86],DATA12);
SIGNAL(N10_15_1_T,fastbus_2.tdc_L_T81808.data[54],DATA12);
SIGNAL(N10_15_2_E,fastbus_1.qdc_L_Q15372.data[90],DATA12);
SIGNAL(N10_15_2_T,fastbus_2.tdc_L_T87047.data[58],DATA12);
SIGNAL(N10_16_1_E,fastbus_1.qdc_F_Q46962.data[82],DATA12);
SIGNAL(N10_16_1_T,fastbus_2.tdc_L_T81808.data[50],DATA12);
SIGNAL(N10_16_2_E,fastbus_1.qdc_L_Q15372.data[94],DATA12);
SIGNAL(N10_16_2_T,fastbus_2.tdc_L_T87047.data[62],DATA12);
SIGNAL(N10_17_1_E,fastbus_1.qdc_L_Q15372.data[75],DATA12);
SIGNAL(N10_17_1_T,fastbus_2.tdc_L_T48854.data[59],DATA12);
SIGNAL(N10_17_2_E,fastbus_1.qdc_L_Q15372.data[83],DATA12);
SIGNAL(N10_17_2_T,fastbus_2.tdc_L_T87047.data[51],DATA12);
SIGNAL(N10_18_1_E,fastbus_1.qdc_L_Q15372.data[78],DATA12);
SIGNAL(N10_18_1_T,fastbus_2.tdc_L_T48854.data[62],DATA12);
SIGNAL(N10_18_2_E,fastbus_1.qdc_L_Q15372.data[87],DATA12);
SIGNAL(N10_18_2_T,fastbus_2.tdc_L_T87047.data[55],DATA12);
SIGNAL(N10_19_1_E,fastbus_1.qdc_F_Q46962.data[87],DATA12);
SIGNAL(N10_19_1_T,fastbus_2.tdc_L_T81808.data[55],DATA12);
SIGNAL(N10_19_2_E,fastbus_1.qdc_L_Q15372.data[91],DATA12);
SIGNAL(N10_19_2_T,fastbus_2.tdc_L_T87047.data[59],DATA12);
SIGNAL(N10_20_1_E,fastbus_1.qdc_F_Q46962.data[83],DATA12);
SIGNAL(N10_20_1_T,fastbus_2.tdc_L_T81808.data[51],DATA12);
SIGNAL(N10_20_2_E,fastbus_1.qdc_L_Q15372.data[95],DATA12);
SIGNAL(N10_20_2_T,fastbus_2.tdc_L_T87047.data[63],DATA12);
SIGNAL(NTF01_1_E,fastbus_1.qdc_L_Q17320.data[32],DATA12);
SIGNAL(NTF01_1_T,fastbus_1.tdc_L_T81855.data[48],DATA12);
SIGNAL(NTF01_2_E,fastbus_1.qdc_L_Q17320.data[40],DATA12);
SIGNAL(NTF01_2_T,fastbus_1.tdc_L_T81855.data[56],DATA12);
SIGNAL(NTF02_1_E,fastbus_1.qdc_L_Q17320.data[37],DATA12);
SIGNAL(NTF02_1_T,fastbus_1.tdc_L_T81855.data[53],DATA12);
SIGNAL(NTF02_2_E,fastbus_1.qdc_L_Q17320.data[45],DATA12);
SIGNAL(NTF02_2_T,fastbus_1.tdc_L_T81855.data[61],DATA12);
SIGNAL(NTF03_1_E,fastbus_1.qdc_L_Q17320.data[34],DATA12);
SIGNAL(NTF03_1_T,fastbus_1.tdc_L_T81855.data[50],DATA12);
SIGNAL(NTF03_2_E,fastbus_1.qdc_L_Q17320.data[42],DATA12);
SIGNAL(NTF03_2_T,fastbus_1.tdc_L_T81855.data[58],DATA12);
SIGNAL(NTF04_1_E,fastbus_1.qdc_L_Q17320.data[39],DATA12);
SIGNAL(NTF04_1_T,fastbus_1.tdc_L_T81855.data[55],DATA12);
SIGNAL(NTF04_2_E,fastbus_1.qdc_L_Q17320.data[47],DATA12);
SIGNAL(NTF04_2_T,fastbus_1.tdc_L_T81855.data[63],DATA12);
SIGNAL(NTF05_1_E,fastbus_1.qdc_L_Q17320.data[36],DATA12);
SIGNAL(NTF05_1_T,fastbus_1.tdc_L_T81855.data[52],DATA12);
SIGNAL(NTF05_2_E,fastbus_1.qdc_L_Q17320.data[44],DATA12);
SIGNAL(NTF05_2_T,fastbus_1.tdc_L_T81855.data[60],DATA12);
SIGNAL(NTF06_1_E,fastbus_1.qdc_L_Q17320.data[33],DATA12);
SIGNAL(NTF06_1_T,fastbus_1.tdc_L_T81855.data[49],DATA12);
SIGNAL(NTF06_2_E,fastbus_1.qdc_L_Q17320.data[41],DATA12);
SIGNAL(NTF06_2_T,fastbus_1.tdc_L_T81855.data[57],DATA12);
SIGNAL(NTF07_1_E,fastbus_1.qdc_L_Q17320.data[38],DATA12);
SIGNAL(NTF07_1_T,fastbus_1.tdc_L_T81855.data[54],DATA12);
SIGNAL(NTF07_2_E,fastbus_1.qdc_L_Q17320.data[46],DATA12);
SIGNAL(NTF07_2_T,fastbus_1.tdc_L_T81855.data[62],DATA12);
SIGNAL(NTF08_1_E,fastbus_1.qdc_L_Q17320.data[35],DATA12);
SIGNAL(NTF08_1_T,fastbus_1.tdc_L_T81855.data[51],DATA12);
SIGNAL(NTF08_2_E,fastbus_1.qdc_L_Q17320.data[43],DATA12);
SIGNAL(NTF08_2_T,fastbus_1.tdc_L_T81855.data[59],DATA12);
SIGNAL(NTF09_1_E,fastbus_1.qdc_L_Q17320.data[48],DATA12);
SIGNAL(NTF09_1_T,fastbus_1.tdc_L_T81855.data[0],DATA12);
SIGNAL(NTF09_2_E,fastbus_1.qdc_L_Q17320.data[56],DATA12);
SIGNAL(NTF09_2_T,fastbus_1.tdc_L_T81855.data[8],DATA12);
SIGNAL(NTF10_1_E,fastbus_1.qdc_L_Q17320.data[53],DATA12);
SIGNAL(NTF10_1_T,fastbus_1.tdc_L_T81855.data[5],DATA12);
SIGNAL(NTF10_2_E,fastbus_1.qdc_L_Q17320.data[61],DATA12);
SIGNAL(NTF10_2_T,fastbus_1.tdc_L_T81855.data[13],DATA12);
SIGNAL(NTF11_1_E,fastbus_1.qdc_L_Q17320.data[50],DATA12);
SIGNAL(NTF11_1_T,fastbus_1.tdc_L_T81855.data[2],DATA12);
SIGNAL(NTF11_2_E,fastbus_1.qdc_L_Q17320.data[58],DATA12);
SIGNAL(NTF11_2_T,fastbus_1.tdc_L_T81855.data[10],DATA12);
SIGNAL(NTF12_1_E,fastbus_1.qdc_L_Q17320.data[55],DATA12);
SIGNAL(NTF12_1_T,fastbus_1.tdc_L_T81855.data[7],DATA12);
SIGNAL(NTF12_2_E,fastbus_1.qdc_L_Q17320.data[63],DATA12);
SIGNAL(NTF12_2_T,fastbus_1.tdc_L_T81855.data[15],DATA12);
SIGNAL(NTF13_1_E,fastbus_1.qdc_L_Q17320.data[52],DATA12);
SIGNAL(NTF13_1_T,fastbus_1.tdc_L_T81855.data[4],DATA12);
SIGNAL(NTF13_2_E,fastbus_1.qdc_L_Q17320.data[60],DATA12);
SIGNAL(NTF13_2_T,fastbus_1.tdc_L_T81855.data[12],DATA12);
SIGNAL(NTF14_1_E,fastbus_1.qdc_L_Q17320.data[49],DATA12);
SIGNAL(NTF14_1_T,fastbus_1.tdc_L_T81855.data[1],DATA12);
SIGNAL(NTF14_2_E,fastbus_1.qdc_L_Q17320.data[57],DATA12);
SIGNAL(NTF14_2_T,fastbus_1.tdc_L_T81855.data[9],DATA12);
SIGNAL(NTF15_1_E,fastbus_1.qdc_L_Q17320.data[54],DATA12);
SIGNAL(NTF15_1_T,fastbus_1.tdc_L_T81855.data[6],DATA12);
SIGNAL(NTF15_2_E,fastbus_1.qdc_L_Q17320.data[62],DATA12);
SIGNAL(NTF15_2_T,fastbus_1.tdc_L_T81855.data[14],DATA12);
SIGNAL(NTF16_1_E,fastbus_1.qdc_L_Q17320.data[51],DATA12);
SIGNAL(NTF16_1_T,fastbus_1.tdc_L_T81855.data[3],DATA12);
SIGNAL(NTF16_2_E,fastbus_1.qdc_L_Q17320.data[59],DATA12);
SIGNAL(NTF16_2_T,fastbus_1.tdc_L_T81855.data[11],DATA12);
SIGNAL(POS01_01_E,camac.qdc_SIA0429.data[0],DATA12);
SIGNAL(POS01_01_T,camac.tdc_SIA0426.data[0],DATA12);
SIGNAL(POS01_02_E,camac.qdc_SIA0429.data[1],DATA12);
SIGNAL(POS01_02_T,camac.tdc_SIA0426.data[1],DATA12);
SIGNAL(POS01_03_E,camac.qdc_SIA0429.data[2],DATA12);
SIGNAL(POS01_03_T,camac.tdc_SIA0426.data[2],DATA12);
SIGNAL(POS01_04_E,camac.qdc_SIA0429.data[3],DATA12);
SIGNAL(POS01_04_T,camac.tdc_SIA0426.data[3],DATA12);
SIGNAL(ROL01_01_E,camac.qdc_SIA0429.data[4],DATA12);
SIGNAL(ROL01_02_E,camac.qdc_SIA0429.data[5],DATA12);
SIGNAL(ROL01_03_E,camac.qdc_SIA0429.data[6],DATA12);
SIGNAL(ROL01_04_E,camac.qdc_SIA0429.data[7],DATA12);
SIGNAL(ROL02_01_E,camac.qdc_SIA0458.data[4],DATA12);
SIGNAL(ROL02_02_E,camac.qdc_SIA0458.data[5],DATA12);
SIGNAL(ROL02_03_E,camac.qdc_SIA0458.data[6],DATA12);
SIGNAL(ROL02_04_E,camac.qdc_SIA0458.data[7],DATA12);
SIGNAL(RPC01_01_E,camac.qdc_SIA0416.data[0],DATA12);
SIGNAL(RPC01_01_T,camac.tdc_SIA0400.data[0],DATA12);
SIGNAL(RPC01_02_E,camac.qdc_SIA0416.data[4],DATA12);
SIGNAL(RPC01_02_T,camac.tdc_SIA0400.data[5],DATA12);
SIGNAL(RPC02_01_E,camac.qdc_SIA0416.data[1],DATA12);
SIGNAL(RPC02_01_T,camac.tdc_SIA0400.data[1],DATA12);
SIGNAL(RPC02_02_E,camac.qdc_SIA0416.data[5],DATA12);
SIGNAL(RPC02_02_T,camac.tdc_SIA0400.data[6],DATA12);
SIGNAL(RPC03_01_E,camac.qdc_SIA0416.data[2],DATA12);
SIGNAL(RPC03_01_T,camac.tdc_SIA0400.data[3],DATA12);
SIGNAL(RPC03_02_E,camac.qdc_SIA0416.data[6],DATA12);
SIGNAL(RPC03_02_T,camac.tdc_SIA0400.data[7],DATA12);
SIGNAL(RPC04_01_E,camac.qdc_SIA0416.data[3],DATA12);
SIGNAL(RPC04_01_T,camac.tdc_SIA0400.data[4],DATA12);
SIGNAL(RPC04_02_E,camac.qdc_SIA0416.data[7],DATA12);
SIGNAL(RPC04_02_T,camac.tdc_SIA0401.data[0],DATA12);
SIGNAL(SCI01_01_E,camac.qdc_SIA0458.data[0],DATA12);
SIGNAL(SCI01_01_T,camac.tdc_SIA8035.data[0],DATA12);
SIGNAL(SCI01_02_E,camac.qdc_SIA0458.data[1],DATA12);
SIGNAL(SCI01_02_T,camac.tdc_SIA8035.data[1],DATA12);
SIGNAL(SCI02_01_E,camac.qdc_SIA0458.data[2],DATA12);
SIGNAL(SCI02_01_T,camac.tdc_SIA8035.data[2],DATA12);
SIGNAL(SCI02_02_E,camac.qdc_SIA0458.data[3],DATA12);
SIGNAL(SCI02_02_T,camac.tdc_SIA8035.data[3],DATA12);
SIGNAL(TFW09_1_E,fastbus_1.qdc_L_Q17320.data[16],DATA12);
SIGNAL(TFW09_1_T,fastbus_1.tdc_L_T81855.data[32],DATA12);
SIGNAL(TFW09_2_E,fastbus_1.qdc_L_Q17320.data[18],DATA12);
SIGNAL(TFW09_2_T,fastbus_1.tdc_L_T81855.data[34],DATA12);
SIGNAL(TFW10_1_E,fastbus_1.qdc_L_Q17320.data[20],DATA12);
SIGNAL(TFW10_1_T,fastbus_1.tdc_L_T81855.data[36],DATA12);
SIGNAL(TFW10_2_E,fastbus_1.qdc_L_Q17320.data[22],DATA12);
SIGNAL(TFW10_2_T,fastbus_1.tdc_L_T81855.data[38],DATA12);
SIGNAL(TFW11_1_E,fastbus_1.qdc_L_Q17320.data[24],DATA12);
SIGNAL(TFW11_1_T,fastbus_1.tdc_L_T81855.data[40],DATA12);
SIGNAL(TFW11_2_E,fastbus_1.qdc_L_Q17320.data[26],DATA12);
SIGNAL(TFW11_2_T,fastbus_1.tdc_L_T81855.data[42],DATA12);
SIGNAL(TFW12_1_E,fastbus_1.qdc_L_Q17320.data[28],DATA12);
SIGNAL(TFW12_1_T,fastbus_1.tdc_L_T81855.data[44],DATA12);
SIGNAL(TFW12_2_E,fastbus_1.qdc_L_Q17320.data[30],DATA12);
SIGNAL(TFW12_2_T,fastbus_1.tdc_L_T81855.data[46],DATA12);
SIGNAL(TFW13_1_E,fastbus_1.qdc_L_Q17320.data[17],DATA12);
SIGNAL(TFW13_1_T,fastbus_1.tdc_L_T81855.data[33],DATA12);
SIGNAL(TFW13_2_E,fastbus_1.qdc_L_Q17320.data[19],DATA12);
SIGNAL(TFW13_2_T,fastbus_1.tdc_L_T81855.data[35],DATA12);
SIGNAL(TFW14_1_E,fastbus_1.qdc_L_Q17320.data[21],DATA12);
SIGNAL(TFW14_1_T,fastbus_1.tdc_L_T81855.data[37],DATA12);
SIGNAL(TFW14_2_E,fastbus_1.qdc_L_Q17320.data[23],DATA12);
SIGNAL(TFW14_2_T,fastbus_1.tdc_L_T81855.data[39],DATA12);
SIGNAL(TFW15_1_E,fastbus_1.qdc_L_Q17320.data[25],DATA12);
SIGNAL(TFW15_1_T,fastbus_1.tdc_L_T81855.data[41],DATA12);
SIGNAL(TFW15_2_E,fastbus_1.qdc_L_Q17320.data[27],DATA12);
SIGNAL(TFW15_2_T,fastbus_1.tdc_L_T81855.data[43],DATA12);
SIGNAL(TFW16_1_E,fastbus_1.qdc_L_Q17320.data[29],DATA12);
SIGNAL(TFW16_1_T,fastbus_1.tdc_L_T81855.data[45],DATA12);
SIGNAL(TFW16_2_E,fastbus_1.qdc_L_Q17320.data[31],DATA12);
SIGNAL(TFW16_2_T,fastbus_1.tdc_L_T81855.data[47],DATA12);
SIGNAL(TFW17_1_E,fastbus_1.qdc_L_Q17320.data[64],DATA12);
SIGNAL(TFW17_1_T,fastbus_1.tdc_L_T81855.data[16],DATA12);
SIGNAL(TFW17_2_E,fastbus_1.qdc_L_Q17320.data[66],DATA12);
SIGNAL(TFW17_2_T,fastbus_1.tdc_L_T81855.data[18],DATA12);
SIGNAL(TFW18_1_E,fastbus_1.qdc_L_Q17320.data[68],DATA12);
SIGNAL(TFW18_1_T,fastbus_1.tdc_L_T81855.data[20],DATA12);
SIGNAL(TFW18_2_E,fastbus_1.qdc_L_Q17320.data[70],DATA12);
SIGNAL(TFW18_2_T,fastbus_1.tdc_L_T81855.data[22],DATA12);
SIGNAL(TFW19_1_E,fastbus_1.qdc_L_Q17320.data[72],DATA12);
SIGNAL(TFW19_1_T,fastbus_1.tdc_L_T81855.data[24],DATA12);
SIGNAL(TFW19_2_E,fastbus_1.qdc_L_Q17320.data[74],DATA12);
SIGNAL(TFW19_2_T,fastbus_1.tdc_L_T81855.data[26],DATA12);
SIGNAL(TFW20_1_E,fastbus_1.qdc_L_Q17320.data[76],DATA12);
SIGNAL(TFW20_1_T,fastbus_1.tdc_L_T81855.data[28],DATA12);
SIGNAL(TFW20_2_E,fastbus_1.qdc_L_Q17320.data[78],DATA12);
SIGNAL(TFW20_2_T,fastbus_1.tdc_L_T81855.data[30],DATA12);
SIGNAL(TFW21_1_E,fastbus_1.qdc_L_Q17320.data[65],DATA12);
SIGNAL(TFW21_1_T,fastbus_1.tdc_L_T81855.data[17],DATA12);
SIGNAL(TFW21_2_E,fastbus_1.qdc_L_Q17320.data[67],DATA12);
SIGNAL(TFW21_2_T,fastbus_1.tdc_L_T81855.data[19],DATA12);
SIGNAL(TFW22_1_E,fastbus_1.qdc_L_Q17320.data[69],DATA12);
SIGNAL(TFW22_1_T,fastbus_1.tdc_L_T81855.data[21],DATA12);
SIGNAL(TFW22_2_E,fastbus_1.qdc_L_Q17320.data[71],DATA12);
SIGNAL(TFW22_2_T,fastbus_1.tdc_L_T81855.data[23],DATA12);
SIGNAL(TFW23_1_E,fastbus_1.qdc_L_Q17320.data[73],DATA12);
SIGNAL(TFW23_1_T,fastbus_1.tdc_L_T81855.data[25],DATA12);
SIGNAL(TFW23_2_E,fastbus_1.qdc_L_Q17320.data[75],DATA12);
SIGNAL(TFW23_2_T,fastbus_1.tdc_L_T81855.data[27],DATA12);
SIGNAL(TFW24_1_E,fastbus_1.qdc_L_Q17320.data[77],DATA12);
SIGNAL(TFW24_1_T,fastbus_1.tdc_L_T81855.data[29],DATA12);
SIGNAL(TFW24_2_E,fastbus_1.qdc_L_Q17320.data[79],DATA12);
SIGNAL(TFW24_2_T,fastbus_1.tdc_L_T81855.data[31],DATA12);
SIGNAL(V1_01_1_E,fastbus_1.qdc_L_Q15372.data[48],DATA12);
SIGNAL(V1_01_1_T,fastbus_2.tdc_L_T81795.data[48],DATA12);
SIGNAL(V1_01_2_E,fastbus_1.qdc_L_Q17320.data[1],DATA12);
SIGNAL(V1_01_2_T,fastbus_1.tdc_L_T87024.data[49],DATA12);
SIGNAL(V1_02_1_E,fastbus_1.qdc_L_Q15372.data[52],DATA12);
SIGNAL(V1_02_1_T,fastbus_2.tdc_L_T81795.data[52],DATA12);
SIGNAL(V1_02_2_E,fastbus_1.qdc_L_Q17320.data[3],DATA12);
SIGNAL(V1_02_2_T,fastbus_1.tdc_L_T87024.data[51],DATA12);
SIGNAL(V1_03_1_E,fastbus_1.qdc_L_Q15372.data[56],DATA12);
SIGNAL(V1_03_1_T,fastbus_2.tdc_L_T81795.data[56],DATA12);
SIGNAL(V1_03_2_E,fastbus_1.qdc_L_Q47315.data[32],DATA12);
SIGNAL(V1_03_2_T,fastbus_1.tdc_L_T87044.data[48],DATA12);
SIGNAL(V1_04_1_E,fastbus_1.qdc_L_Q15372.data[60],DATA12);
SIGNAL(V1_04_1_T,fastbus_2.tdc_L_T81795.data[60],DATA12);
SIGNAL(V1_04_2_E,fastbus_1.qdc_L_Q47315.data[36],DATA12);
SIGNAL(V1_04_2_T,fastbus_1.tdc_L_T87044.data[52],DATA12);
SIGNAL(V1_05_1_E,fastbus_1.qdc_L_Q15372.data[49],DATA12);
SIGNAL(V1_05_1_T,fastbus_2.tdc_L_T81795.data[49],DATA12);
SIGNAL(V1_05_2_E,fastbus_1.qdc_L_Q17320.data[5],DATA12);
SIGNAL(V1_05_2_T,fastbus_1.tdc_L_T87024.data[53],DATA12);
SIGNAL(V1_06_1_E,fastbus_1.qdc_L_Q15372.data[53],DATA12);
SIGNAL(V1_06_1_T,fastbus_2.tdc_L_T81795.data[53],DATA12);
SIGNAL(V1_06_2_E,fastbus_1.qdc_L_Q17320.data[7],DATA12);
SIGNAL(V1_06_2_T,fastbus_1.tdc_L_T87024.data[55],DATA12);
SIGNAL(V1_07_1_E,fastbus_1.qdc_L_Q15372.data[57],DATA12);
SIGNAL(V1_07_1_T,fastbus_2.tdc_L_T81795.data[57],DATA12);
SIGNAL(V1_07_2_E,fastbus_1.qdc_L_Q47315.data[40],DATA12);
SIGNAL(V1_07_2_T,fastbus_1.tdc_L_T87044.data[56],DATA12);
SIGNAL(V1_08_1_E,fastbus_1.qdc_L_Q15372.data[61],DATA12);
SIGNAL(V1_08_1_T,fastbus_2.tdc_L_T81795.data[61],DATA12);
SIGNAL(V1_08_2_E,fastbus_1.qdc_L_Q47315.data[44],DATA12);
SIGNAL(V1_08_2_T,fastbus_1.tdc_L_T87044.data[60],DATA12);
SIGNAL(V1_09_1_E,fastbus_1.qdc_L_Q15372.data[50],DATA12);
SIGNAL(V1_09_1_T,fastbus_2.tdc_L_T81795.data[50],DATA12);
SIGNAL(V1_09_2_E,fastbus_1.qdc_L_Q47315.data[33],DATA12);
SIGNAL(V1_09_2_T,fastbus_1.tdc_L_T87044.data[49],DATA12);
SIGNAL(V1_10_1_E,fastbus_1.qdc_L_Q15372.data[54],DATA12);
SIGNAL(V1_10_1_T,fastbus_2.tdc_L_T81795.data[54],DATA12);
SIGNAL(V1_10_2_E,fastbus_1.qdc_L_Q47315.data[37],DATA12);
SIGNAL(V1_10_2_T,fastbus_1.tdc_L_T87044.data[53],DATA12);
SIGNAL(V1_11_1_E,fastbus_1.qdc_L_Q15372.data[58],DATA12);
SIGNAL(V1_11_1_T,fastbus_2.tdc_L_T81795.data[58],DATA12);
SIGNAL(V1_11_2_E,fastbus_1.qdc_L_Q47315.data[41],DATA12);
SIGNAL(V1_11_2_T,fastbus_1.tdc_L_T87044.data[57],DATA12);
SIGNAL(V1_12_1_E,fastbus_1.qdc_L_Q15372.data[62],DATA12);
SIGNAL(V1_12_1_T,fastbus_2.tdc_L_T81795.data[62],DATA12);
SIGNAL(V1_12_2_E,fastbus_1.qdc_L_Q47315.data[45],DATA12);
SIGNAL(V1_12_2_T,fastbus_1.tdc_L_T87044.data[61],DATA12);
SIGNAL(V1_13_1_E,fastbus_1.qdc_L_Q15372.data[51],DATA12);
SIGNAL(V1_13_1_T,fastbus_2.tdc_L_T81795.data[51],DATA12);
SIGNAL(V1_13_2_E,fastbus_1.qdc_L_Q47315.data[34],DATA12);
SIGNAL(V1_13_2_T,fastbus_1.tdc_L_T87044.data[50],DATA12);
SIGNAL(V1_14_1_E,fastbus_1.qdc_L_Q15372.data[55],DATA12);
SIGNAL(V1_14_1_T,fastbus_2.tdc_L_T81795.data[55],DATA12);
SIGNAL(V1_14_2_E,fastbus_1.qdc_L_Q47315.data[38],DATA12);
SIGNAL(V1_14_2_T,fastbus_1.tdc_L_T87044.data[54],DATA12);
SIGNAL(V1_15_1_E,fastbus_1.qdc_L_Q17320.data[0],DATA12);
SIGNAL(V1_15_1_T,fastbus_1.tdc_L_T87024.data[48],DATA12);
SIGNAL(V1_15_2_E,fastbus_1.qdc_L_Q47315.data[42],DATA12);
SIGNAL(V1_15_2_T,fastbus_1.tdc_L_T87044.data[58],DATA12);
SIGNAL(V1_16_1_E,fastbus_1.qdc_L_Q17320.data[2],DATA12);
SIGNAL(V1_16_1_T,fastbus_1.tdc_L_T87024.data[50],DATA12);
SIGNAL(V1_16_2_E,fastbus_1.qdc_L_Q47315.data[46],DATA12);
SIGNAL(V1_16_2_T,fastbus_1.tdc_L_T87044.data[62],DATA12);
SIGNAL(V1_17_1_E,fastbus_1.qdc_L_Q15372.data[59],DATA12);
SIGNAL(V1_17_1_T,fastbus_2.tdc_L_T81795.data[59],DATA12);
SIGNAL(V1_17_2_E,fastbus_1.qdc_L_Q47315.data[35],DATA12);
SIGNAL(V1_17_2_T,fastbus_1.tdc_L_T87044.data[51],DATA12);
SIGNAL(V1_18_1_E,fastbus_1.qdc_L_Q15372.data[63],DATA12);
SIGNAL(V1_18_1_T,fastbus_2.tdc_L_T81795.data[63],DATA12);
SIGNAL(V1_18_2_E,fastbus_1.qdc_L_Q47315.data[39],DATA12);
SIGNAL(V1_18_2_T,fastbus_1.tdc_L_T87044.data[55],DATA12);
SIGNAL(V1_19_1_E,fastbus_1.qdc_L_Q17320.data[4],DATA12);
SIGNAL(V1_19_1_T,fastbus_1.tdc_L_T87024.data[52],DATA12);
SIGNAL(V1_19_2_E,fastbus_1.qdc_L_Q47315.data[43],DATA12);
SIGNAL(V1_19_2_T,fastbus_1.tdc_L_T87044.data[59],DATA12);
SIGNAL(V1_20_1_E,fastbus_1.qdc_L_Q17320.data[6],DATA12);
SIGNAL(V1_20_1_T,fastbus_1.tdc_L_T87024.data[54],DATA12);
SIGNAL(V1_20_2_E,fastbus_1.qdc_L_Q47315.data[47],DATA12);
SIGNAL(V1_20_2_T,fastbus_1.tdc_L_T87044.data[63],DATA12);
SIGNAL(XB1_001_E,fastbus_1.qdc_L_Q11111.data[0],DATA12);
SIGNAL(XB1_001_T,fastbus_1.tdc_L_T81800.data[24],DATA12);
SIGNAL(XB1_002_E,fastbus_1.qdc_L_Q11111.data[2],DATA12);
SIGNAL(XB1_002_T,fastbus_1.tdc_L_T81800.data[26],DATA12);
SIGNAL(XB1_003_E,fastbus_1.qdc_L_Q11111.data[4],DATA12);
SIGNAL(XB1_003_T,fastbus_1.tdc_L_T81800.data[28],DATA12);
SIGNAL(XB1_004_E,fastbus_1.qdc_L_Q11111.data[6],DATA12);
SIGNAL(XB1_004_T,fastbus_1.tdc_L_T81800.data[30],DATA12);
SIGNAL(XB1_005_E,fastbus_1.qdc_L_Q11111.data[8],DATA12);
SIGNAL(XB1_005_T,fastbus_1.tdc_L_T81800.data[32],DATA12);
SIGNAL(XB1_006_E,fastbus_1.qdc_L_Q11111.data[10],DATA12);
SIGNAL(XB1_006_T,fastbus_1.tdc_L_T81800.data[34],DATA12);
SIGNAL(XB1_007_E,fastbus_1.qdc_L_Q11111.data[12],DATA12);
SIGNAL(XB1_007_T,fastbus_1.tdc_L_T81800.data[36],DATA12);
SIGNAL(XB1_008_E,fastbus_1.qdc_L_Q11111.data[14],DATA12);
SIGNAL(XB1_008_T,fastbus_1.tdc_L_T81800.data[38],DATA12);
SIGNAL(XB1_009_E,fastbus_1.qdc_L_Q11111.data[16],DATA12);
SIGNAL(XB1_009_T,fastbus_1.tdc_L_T87044.data[32],DATA12);
SIGNAL(XB1_010_E,fastbus_1.qdc_L_Q11111.data[18],DATA12);
SIGNAL(XB1_010_T,fastbus_1.tdc_L_T87044.data[34],DATA12);
SIGNAL(XB1_011_E,fastbus_1.qdc_L_Q11111.data[20],DATA12);
SIGNAL(XB1_011_T,fastbus_1.tdc_L_T87044.data[36],DATA12);
SIGNAL(XB1_012_E,fastbus_1.qdc_L_Q11111.data[22],DATA12);
SIGNAL(XB1_012_T,fastbus_1.tdc_L_T87044.data[38],DATA12);
SIGNAL(XB1_013_E,fastbus_1.qdc_L_Q11111.data[24],DATA12);
SIGNAL(XB1_013_T,fastbus_1.tdc_L_T81800.data[8],DATA12);
SIGNAL(XB1_014_E,fastbus_1.qdc_L_Q11111.data[26],DATA12);
SIGNAL(XB1_014_T,fastbus_1.tdc_L_T81800.data[10],DATA12);
SIGNAL(XB1_015_E,fastbus_1.qdc_L_Q11111.data[28],DATA12);
SIGNAL(XB1_015_T,fastbus_1.tdc_L_T81800.data[12],DATA12);
SIGNAL(XB1_016_E,fastbus_1.qdc_L_Q11111.data[30],DATA12);
SIGNAL(XB1_016_T,fastbus_1.tdc_L_T81800.data[14],DATA12);
SIGNAL(XB1_017_E,fastbus_1.qdc_L_Q11111.data[32],DATA12);
SIGNAL(XB1_017_T,fastbus_1.tdc_L_T87044.data[0],DATA12);
SIGNAL(XB1_018_E,fastbus_1.qdc_L_Q11111.data[34],DATA12);
SIGNAL(XB1_018_T,fastbus_1.tdc_L_T87044.data[2],DATA12);
SIGNAL(XB1_019_E,fastbus_1.qdc_L_Q11111.data[36],DATA12);
SIGNAL(XB1_019_T,fastbus_1.tdc_L_T87044.data[4],DATA12);
SIGNAL(XB1_020_E,fastbus_1.qdc_L_Q11111.data[38],DATA12);
SIGNAL(XB1_020_T,fastbus_1.tdc_L_T87044.data[6],DATA12);
SIGNAL(XB1_021_E,fastbus_1.qdc_L_Q11111.data[40],DATA12);
SIGNAL(XB1_021_T,fastbus_1.tdc_L_T87044.data[8],DATA12);
SIGNAL(XB1_022_E,fastbus_1.qdc_L_Q11111.data[42],DATA12);
SIGNAL(XB1_022_T,fastbus_1.tdc_L_T87044.data[10],DATA12);
SIGNAL(XB1_023_E,fastbus_1.qdc_L_Q11111.data[44],DATA12);
SIGNAL(XB1_023_T,fastbus_1.tdc_L_T87044.data[12],DATA12);
SIGNAL(XB1_024_E,fastbus_1.qdc_L_Q11111.data[46],DATA12);
SIGNAL(XB1_024_T,fastbus_1.tdc_L_T87044.data[14],DATA12);
SIGNAL(XB1_025_E,fastbus_1.qdc_L_Q11111.data[48],DATA12);
SIGNAL(XB1_025_T,fastbus_1.tdc_L_T87024.data[24],DATA12);
SIGNAL(XB1_026_E,fastbus_1.qdc_L_Q11111.data[50],DATA12);
SIGNAL(XB1_026_T,fastbus_1.tdc_L_T87024.data[26],DATA12);
SIGNAL(XB1_027_E,fastbus_1.qdc_L_Q11111.data[52],DATA12);
SIGNAL(XB1_027_T,fastbus_1.tdc_L_T87024.data[28],DATA12);
SIGNAL(XB1_028_E,fastbus_1.qdc_L_Q11111.data[54],DATA12);
SIGNAL(XB1_028_T,fastbus_1.tdc_L_T87024.data[30],DATA12);
SIGNAL(XB1_029_E,fastbus_1.qdc_L_Q11111.data[56],DATA12);
SIGNAL(XB1_029_T,fastbus_1.tdc_L_T87024.data[32],DATA12);
SIGNAL(XB1_030_E,fastbus_1.qdc_L_Q11111.data[58],DATA12);
SIGNAL(XB1_030_T,fastbus_1.tdc_L_T87024.data[34],DATA12);
SIGNAL(XB1_031_E,fastbus_1.qdc_L_Q11111.data[60],DATA12);
SIGNAL(XB1_031_T,fastbus_1.tdc_L_T87024.data[36],DATA12);
SIGNAL(XB1_032_E,fastbus_1.qdc_L_Q11111.data[62],DATA12);
SIGNAL(XB1_032_T,fastbus_1.tdc_L_T87024.data[38],DATA12);
SIGNAL(XB1_033_E,fastbus_1.qdc_L_Q11111.data[33],DATA12);
SIGNAL(XB1_033_T,fastbus_1.tdc_L_T87044.data[1],DATA12);
SIGNAL(XB1_034_E,fastbus_1.qdc_L_Q11111.data[35],DATA12);
SIGNAL(XB1_034_T,fastbus_1.tdc_L_T87044.data[3],DATA12);
SIGNAL(XB1_035_E,fastbus_1.qdc_L_Q11111.data[37],DATA12);
SIGNAL(XB1_035_T,fastbus_1.tdc_L_T87044.data[5],DATA12);
SIGNAL(XB1_036_E,fastbus_1.qdc_L_Q11111.data[39],DATA12);
SIGNAL(XB1_036_T,fastbus_1.tdc_L_T87044.data[7],DATA12);
SIGNAL(XB1_037_E,fastbus_1.qdc_L_Q11111.data[41],DATA12);
SIGNAL(XB1_037_T,fastbus_1.tdc_L_T87044.data[9],DATA12);
SIGNAL(XB1_038_E,fastbus_1.qdc_L_Q11111.data[43],DATA12);
SIGNAL(XB1_038_T,fastbus_1.tdc_L_T87044.data[11],DATA12);
SIGNAL(XB1_039_E,fastbus_1.qdc_L_Q11111.data[45],DATA12);
SIGNAL(XB1_039_T,fastbus_1.tdc_L_T87044.data[13],DATA12);
SIGNAL(XB1_040_E,fastbus_1.qdc_L_Q11111.data[47],DATA12);
SIGNAL(XB1_040_T,fastbus_1.tdc_L_T87044.data[15],DATA12);
SIGNAL(XB1_041_E,fastbus_1.qdc_L_Q11111.data[17],DATA12);
SIGNAL(XB1_041_T,fastbus_1.tdc_L_T87044.data[33],DATA12);
SIGNAL(XB1_042_E,fastbus_1.qdc_L_Q11111.data[19],DATA12);
SIGNAL(XB1_042_T,fastbus_1.tdc_L_T87044.data[35],DATA12);
SIGNAL(XB1_043_E,fastbus_1.qdc_L_Q11111.data[21],DATA12);
SIGNAL(XB1_043_T,fastbus_1.tdc_L_T87044.data[37],DATA12);
SIGNAL(XB1_044_E,fastbus_1.qdc_L_Q11111.data[23],DATA12);
SIGNAL(XB1_044_T,fastbus_1.tdc_L_T87044.data[39],DATA12);
SIGNAL(XB1_045_E,fastbus_1.qdc_L_Q11111.data[25],DATA12);
SIGNAL(XB1_045_T,fastbus_1.tdc_L_T81800.data[9],DATA12);
SIGNAL(XB1_046_E,fastbus_1.qdc_L_Q11111.data[27],DATA12);
SIGNAL(XB1_046_T,fastbus_1.tdc_L_T81800.data[11],DATA12);
SIGNAL(XB1_047_E,fastbus_1.qdc_L_Q11111.data[29],DATA12);
SIGNAL(XB1_047_T,fastbus_1.tdc_L_T81800.data[13],DATA12);
SIGNAL(XB1_048_E,fastbus_1.qdc_L_Q11111.data[31],DATA12);
SIGNAL(XB1_048_T,fastbus_1.tdc_L_T81800.data[15],DATA12);
SIGNAL(XB1_049_E,fastbus_1.qdc_L_Q11111.data[1],DATA12);
SIGNAL(XB1_049_T,fastbus_1.tdc_L_T81800.data[25],DATA12);
SIGNAL(XB1_050_E,fastbus_1.qdc_L_Q11111.data[3],DATA12);
SIGNAL(XB1_050_T,fastbus_1.tdc_L_T81800.data[27],DATA12);
SIGNAL(XB1_051_E,fastbus_1.qdc_L_Q11111.data[5],DATA12);
SIGNAL(XB1_051_T,fastbus_1.tdc_L_T81800.data[29],DATA12);
SIGNAL(XB1_052_E,fastbus_1.qdc_L_Q11111.data[7],DATA12);
SIGNAL(XB1_052_T,fastbus_1.tdc_L_T81800.data[31],DATA12);
SIGNAL(XB1_053_E,fastbus_1.qdc_L_Q11111.data[9],DATA12);
SIGNAL(XB1_053_T,fastbus_1.tdc_L_T81800.data[33],DATA12);
SIGNAL(XB1_054_E,fastbus_1.qdc_L_Q11111.data[11],DATA12);
SIGNAL(XB1_054_T,fastbus_1.tdc_L_T81800.data[35],DATA12);
SIGNAL(XB1_055_E,fastbus_1.qdc_L_Q11111.data[13],DATA12);
SIGNAL(XB1_055_T,fastbus_1.tdc_L_T81800.data[37],DATA12);
SIGNAL(XB1_056_E,fastbus_1.qdc_L_Q11111.data[15],DATA12);
SIGNAL(XB1_056_T,fastbus_1.tdc_L_T81800.data[39],DATA12);
SIGNAL(XB1_057_E,fastbus_1.qdc_L_Q47342.data[64],DATA12);
SIGNAL(XB1_057_T,fastbus_1.tdc_L_T87024.data[0],DATA12);
SIGNAL(XB1_058_E,fastbus_1.qdc_L_Q47342.data[66],DATA12);
SIGNAL(XB1_058_T,fastbus_1.tdc_L_T87024.data[2],DATA12);
SIGNAL(XB1_059_E,fastbus_1.qdc_L_Q47342.data[68],DATA12);
SIGNAL(XB1_059_T,fastbus_1.tdc_L_T87024.data[4],DATA12);
SIGNAL(XB1_060_E,fastbus_1.qdc_L_Q47342.data[70],DATA12);
SIGNAL(XB1_060_T,fastbus_1.tdc_L_T87024.data[6],DATA12);
SIGNAL(XB1_061_E,fastbus_1.qdc_L_Q47342.data[72],DATA12);
SIGNAL(XB1_061_T,fastbus_1.tdc_L_T87024.data[8],DATA12);
SIGNAL(XB1_062_E,fastbus_1.qdc_L_Q47342.data[74],DATA12);
SIGNAL(XB1_062_T,fastbus_1.tdc_L_T87024.data[10],DATA12);
SIGNAL(XB1_063_E,fastbus_1.qdc_L_Q47342.data[76],DATA12);
SIGNAL(XB1_063_T,fastbus_1.tdc_L_T87024.data[12],DATA12);
SIGNAL(XB1_064_E,fastbus_1.qdc_L_Q47342.data[78],DATA12);
SIGNAL(XB1_064_T,fastbus_1.tdc_L_T87024.data[14],DATA12);
SIGNAL(XB1_065_E,fastbus_1.qdc_L_Q11111.data[64],DATA12);
SIGNAL(XB1_065_T,fastbus_1.tdc_L_T81800.data[40],DATA12);
SIGNAL(XB1_066_E,fastbus_1.qdc_L_Q11111.data[66],DATA12);
SIGNAL(XB1_066_T,fastbus_1.tdc_L_T81800.data[42],DATA12);
SIGNAL(XB1_067_E,fastbus_1.qdc_L_Q11111.data[68],DATA12);
SIGNAL(XB1_067_T,fastbus_1.tdc_L_T81800.data[44],DATA12);
SIGNAL(XB1_068_E,fastbus_1.qdc_L_Q11111.data[70],DATA12);
SIGNAL(XB1_068_T,fastbus_1.tdc_L_T81800.data[46],DATA12);
SIGNAL(XB1_069_E,fastbus_1.qdc_L_Q11111.data[72],DATA12);
SIGNAL(XB1_069_T,fastbus_1.tdc_L_T87024.data[40],DATA12);
SIGNAL(XB1_070_E,fastbus_1.qdc_L_Q11111.data[74],DATA12);
SIGNAL(XB1_070_T,fastbus_1.tdc_L_T87024.data[42],DATA12);
SIGNAL(XB1_071_E,fastbus_1.qdc_L_Q11111.data[76],DATA12);
SIGNAL(XB1_071_T,fastbus_1.tdc_L_T87024.data[44],DATA12);
SIGNAL(XB1_072_E,fastbus_1.qdc_L_Q11111.data[78],DATA12);
SIGNAL(XB1_072_T,fastbus_1.tdc_L_T87024.data[46],DATA12);
SIGNAL(XB1_073_E,fastbus_1.qdc_L_Q46848.data[57],DATA12);
SIGNAL(XB1_073_T,fastbus_1.tdc_L_T81800.data[52],DATA12);
SIGNAL(XB1_074_E,fastbus_1.qdc_L_Q46848.data[51],DATA12);
SIGNAL(XB1_074_T,fastbus_1.tdc_L_T81800.data[63],DATA12);
SIGNAL(XB1_075_E,fastbus_1.qdc_L_Q46848.data[53],DATA12);
SIGNAL(XB1_075_T,fastbus_1.tdc_L_T81800.data[49],DATA12);
SIGNAL(XB1_076_E,fastbus_1.qdc_L_Q46848.data[55],DATA12);
SIGNAL(XB1_076_T,fastbus_1.tdc_L_T81800.data[51],DATA12);
SIGNAL(XB1_078_E,fastbus_1.qdc_L_Q46848.data[59],DATA12);
SIGNAL(XB1_078_T,fastbus_1.tdc_L_T81800.data[56],DATA12);
SIGNAL(XB1_079_E,fastbus_1.qdc_L_Q46848.data[61],DATA12);
SIGNAL(XB1_079_T,fastbus_1.tdc_L_T81800.data[57],DATA12);
SIGNAL(XB1_080_E,fastbus_1.qdc_L_Q46848.data[63],DATA12);
SIGNAL(XB1_080_T,fastbus_1.tdc_L_T81800.data[58],DATA12);
SIGNAL(XB1_083_E,fastbus_1.qdc_L_Q11111.data[53],DATA12);
SIGNAL(XB1_083_T,fastbus_1.tdc_L_T87024.data[29],DATA12);
SIGNAL(XB1_084_E,fastbus_1.qdc_L_Q11111.data[55],DATA12);
SIGNAL(XB1_084_T,fastbus_1.tdc_L_T87024.data[31],DATA12);
SIGNAL(XB1_085_E,fastbus_1.qdc_L_Q11111.data[57],DATA12);
SIGNAL(XB1_085_T,fastbus_1.tdc_L_T87024.data[33],DATA12);
SIGNAL(XB1_086_E,fastbus_1.qdc_L_Q11111.data[59],DATA12);
SIGNAL(XB1_086_T,fastbus_1.tdc_L_T87024.data[35],DATA12);
SIGNAL(XB1_087_E,fastbus_1.qdc_L_Q11111.data[61],DATA12);
SIGNAL(XB1_087_T,fastbus_1.tdc_L_T87024.data[37],DATA12);
SIGNAL(XB1_088_E,fastbus_1.qdc_L_Q11111.data[63],DATA12);
SIGNAL(XB1_088_T,fastbus_1.tdc_L_T87024.data[39],DATA12);
SIGNAL(XB1_089_E,fastbus_1.qdc_L_Q47342.data[16],DATA12);
SIGNAL(XB1_089_T,fastbus_1.tdc_L_T87044.data[24],DATA12);
SIGNAL(XB1_090_E,fastbus_1.qdc_L_Q47342.data[18],DATA12);
SIGNAL(XB1_090_T,fastbus_1.tdc_L_T87044.data[26],DATA12);
SIGNAL(XB1_091_E,fastbus_1.qdc_L_Q47342.data[20],DATA12);
SIGNAL(XB1_091_T,fastbus_1.tdc_L_T87044.data[28],DATA12);
SIGNAL(XB1_092_E,fastbus_1.qdc_L_Q47342.data[22],DATA12);
SIGNAL(XB1_092_T,fastbus_1.tdc_L_T87044.data[30],DATA12);
SIGNAL(XB1_093_E,fastbus_1.qdc_L_Q47342.data[24],DATA12);
SIGNAL(XB1_093_T,fastbus_1.tdc_L_T87044.data[40],DATA12);
SIGNAL(XB1_094_E,fastbus_1.qdc_L_Q47342.data[26],DATA12);
SIGNAL(XB1_094_T,fastbus_1.tdc_L_T87044.data[42],DATA12);
SIGNAL(XB1_095_E,fastbus_1.qdc_L_Q47342.data[28],DATA12);
SIGNAL(XB1_095_T,fastbus_1.tdc_L_T87044.data[44],DATA12);
SIGNAL(XB1_096_E,fastbus_1.qdc_L_Q47342.data[30],DATA12);
SIGNAL(XB1_096_T,fastbus_1.tdc_L_T87044.data[46],DATA12);
SIGNAL(XB1_097_E,fastbus_1.qdc_L_Q47342.data[48],DATA12);
SIGNAL(XB1_097_T,fastbus_1.tdc_L_T87024.data[16],DATA12);
SIGNAL(XB1_098_E,fastbus_1.qdc_L_Q47342.data[50],DATA12);
SIGNAL(XB1_098_T,fastbus_1.tdc_L_T87024.data[18],DATA12);
SIGNAL(XB1_099_E,fastbus_1.qdc_L_Q47342.data[52],DATA12);
SIGNAL(XB1_099_T,fastbus_1.tdc_L_T87024.data[20],DATA12);
SIGNAL(XB1_104_E,fastbus_1.qdc_L_Q47342.data[62],DATA12);
SIGNAL(XB1_104_T,fastbus_1.tdc_L_T81800.data[22],DATA12);
SIGNAL(XB1_105_E,fastbus_1.qdc_L_Q47342.data[33],DATA12);
SIGNAL(XB1_105_T,fastbus_1.tdc_L_T87044.data[17],DATA12);
SIGNAL(XB1_106_E,fastbus_1.qdc_L_Q47342.data[35],DATA12);
SIGNAL(XB1_106_T,fastbus_1.tdc_L_T87044.data[19],DATA12);
SIGNAL(XB1_107_E,fastbus_1.qdc_L_Q47342.data[37],DATA12);
SIGNAL(XB1_107_T,fastbus_1.tdc_L_T87044.data[21],DATA12);
SIGNAL(XB1_108_E,fastbus_1.qdc_L_Q47342.data[39],DATA12);
SIGNAL(XB1_108_T,fastbus_1.tdc_L_T87044.data[23],DATA12);
SIGNAL(XB1_109_E,fastbus_1.qdc_L_Q47342.data[41],DATA12);
SIGNAL(XB1_109_T,fastbus_1.tdc_L_T81800.data[1],DATA12);
SIGNAL(XB1_110_E,fastbus_1.qdc_L_Q47342.data[43],DATA12);
SIGNAL(XB1_110_T,fastbus_1.tdc_L_T81800.data[3],DATA12);
SIGNAL(XB1_111_E,fastbus_1.qdc_L_Q47342.data[45],DATA12);
SIGNAL(XB1_111_T,fastbus_1.tdc_L_T81800.data[5],DATA12);
SIGNAL(XB1_112_E,fastbus_1.qdc_L_Q47342.data[47],DATA12);
SIGNAL(XB1_112_T,fastbus_1.tdc_L_T81800.data[7],DATA12);
SIGNAL(XB1_113_E,fastbus_1.qdc_L_Q47342.data[65],DATA12);
SIGNAL(XB1_113_T,fastbus_1.tdc_L_T87024.data[1],DATA12);
SIGNAL(XB1_114_E,fastbus_1.qdc_L_Q47342.data[67],DATA12);
SIGNAL(XB1_114_T,fastbus_1.tdc_L_T87024.data[3],DATA12);
SIGNAL(XB1_115_E,fastbus_1.qdc_L_Q47342.data[69],DATA12);
SIGNAL(XB1_115_T,fastbus_1.tdc_L_T87024.data[5],DATA12);
SIGNAL(XB1_116_E,fastbus_1.qdc_L_Q47342.data[71],DATA12);
SIGNAL(XB1_116_T,fastbus_1.tdc_L_T87024.data[7],DATA12);
SIGNAL(XB1_117_E,fastbus_1.qdc_L_Q47342.data[73],DATA12);
SIGNAL(XB1_117_T,fastbus_1.tdc_L_T87024.data[9],DATA12);
SIGNAL(XB1_118_E,fastbus_1.qdc_L_Q47342.data[75],DATA12);
SIGNAL(XB1_118_T,fastbus_1.tdc_L_T87024.data[11],DATA12);
SIGNAL(XB1_119_E,fastbus_1.qdc_L_Q47342.data[77],DATA12);
SIGNAL(XB1_119_T,fastbus_1.tdc_L_T87024.data[13],DATA12);
SIGNAL(XB1_120_E,fastbus_1.qdc_L_Q47342.data[79],DATA12);
SIGNAL(XB1_120_T,fastbus_1.tdc_L_T87024.data[15],DATA12);
SIGNAL(XB1_121_E,fastbus_1.qdc_L_Q47342.data[17],DATA12);
SIGNAL(XB1_121_T,fastbus_1.tdc_L_T87044.data[25],DATA12);
SIGNAL(XB1_122_E,fastbus_1.qdc_L_Q47342.data[19],DATA12);
SIGNAL(XB1_122_T,fastbus_1.tdc_L_T87044.data[27],DATA12);
SIGNAL(XB1_123_E,fastbus_1.qdc_L_Q47342.data[21],DATA12);
SIGNAL(XB1_123_T,fastbus_1.tdc_L_T87044.data[29],DATA12);
SIGNAL(XB1_124_E,fastbus_1.qdc_L_Q47342.data[23],DATA12);
SIGNAL(XB1_124_T,fastbus_1.tdc_L_T87044.data[31],DATA12);
SIGNAL(XB1_125_E,fastbus_1.qdc_L_Q47342.data[25],DATA12);
SIGNAL(XB1_125_T,fastbus_1.tdc_L_T87044.data[41],DATA12);
SIGNAL(XB1_126_E,fastbus_1.qdc_L_Q47342.data[27],DATA12);
SIGNAL(XB1_126_T,fastbus_1.tdc_L_T87044.data[43],DATA12);
SIGNAL(XB1_127_E,fastbus_1.qdc_L_Q47342.data[29],DATA12);
SIGNAL(XB1_127_T,fastbus_1.tdc_L_T87044.data[45],DATA12);
SIGNAL(XB1_128_E,fastbus_1.qdc_L_Q47342.data[31],DATA12);
SIGNAL(XB1_128_T,fastbus_1.tdc_L_T87044.data[47],DATA12);
SIGNAL(XB1_129_E,fastbus_1.qdc_L_Q46848.data[48],DATA12);
SIGNAL(XB1_129_T,fastbus_1.tdc_L_T81800.data[60],DATA12);
SIGNAL(XB1_130_E,fastbus_1.qdc_L_Q46848.data[50],DATA12);
SIGNAL(XB1_130_T,fastbus_1.tdc_L_T81800.data[62],DATA12);
SIGNAL(XB1_131_E,fastbus_1.qdc_L_Q46848.data[52],DATA12);
SIGNAL(XB1_131_T,fastbus_1.tdc_L_T81800.data[48],DATA12);
SIGNAL(XB1_132_E,fastbus_1.qdc_L_Q46848.data[54],DATA12);
SIGNAL(XB1_132_T,fastbus_1.tdc_L_T81800.data[50],DATA12);
SIGNAL(XB1_133_E,fastbus_1.qdc_L_Q46848.data[56],DATA12);
SIGNAL(XB1_133_T,fastbus_1.tdc_L_T81800.data[61],DATA12);
SIGNAL(XB1_134_E,fastbus_1.qdc_L_Q46848.data[58],DATA12);
SIGNAL(XB1_134_T,fastbus_1.tdc_L_T81800.data[53],DATA12);
SIGNAL(XB1_135_E,fastbus_1.qdc_L_Q46848.data[60],DATA12);
SIGNAL(XB1_135_T,fastbus_1.tdc_L_T81800.data[55],DATA12);
SIGNAL(XB1_136_E,fastbus_1.qdc_L_Q46848.data[62],DATA12);
SIGNAL(XB1_136_T,fastbus_1.tdc_L_T81800.data[54],DATA12);
SIGNAL(XB1_137_E,fastbus_1.qdc_L_Q11111.data[65],DATA12);
SIGNAL(XB1_137_T,fastbus_1.tdc_L_T81800.data[41],DATA12);
SIGNAL(XB1_138_E,fastbus_1.qdc_L_Q11111.data[67],DATA12);
SIGNAL(XB1_138_T,fastbus_1.tdc_L_T81800.data[43],DATA12);
SIGNAL(XB1_139_E,fastbus_1.qdc_L_Q11111.data[69],DATA12);
SIGNAL(XB1_139_T,fastbus_1.tdc_L_T81800.data[45],DATA12);
SIGNAL(XB1_140_E,fastbus_1.qdc_L_Q11111.data[71],DATA12);
SIGNAL(XB1_140_T,fastbus_1.tdc_L_T81800.data[47],DATA12);
SIGNAL(XB1_141_E,fastbus_1.qdc_L_Q11111.data[73],DATA12);
SIGNAL(XB1_141_T,fastbus_1.tdc_L_T87024.data[41],DATA12);
SIGNAL(XB1_142_E,fastbus_1.qdc_L_Q11111.data[75],DATA12);
SIGNAL(XB1_142_T,fastbus_1.tdc_L_T87024.data[43],DATA12);
SIGNAL(XB1_143_E,fastbus_1.qdc_L_Q11111.data[77],DATA12);
SIGNAL(XB1_143_T,fastbus_1.tdc_L_T87024.data[45],DATA12);
SIGNAL(XB1_144_E,fastbus_1.qdc_L_Q11111.data[79],DATA12);
SIGNAL(XB1_144_T,fastbus_1.tdc_L_T87024.data[47],DATA12);
SIGNAL(XB1_145_E,fastbus_1.qdc_L_Q47342.data[32],DATA12);
SIGNAL(XB1_145_T,fastbus_1.tdc_L_T87044.data[16],DATA12);
SIGNAL(XB1_146_E,fastbus_1.qdc_L_Q47342.data[34],DATA12);
SIGNAL(XB1_146_T,fastbus_1.tdc_L_T87044.data[18],DATA12);
SIGNAL(XB1_147_E,fastbus_1.qdc_L_Q47342.data[36],DATA12);
SIGNAL(XB1_147_T,fastbus_1.tdc_L_T87044.data[20],DATA12);
SIGNAL(XB1_148_E,fastbus_1.qdc_L_Q47342.data[38],DATA12);
SIGNAL(XB1_148_T,fastbus_1.tdc_L_T87044.data[22],DATA12);
SIGNAL(XB1_149_E,fastbus_1.qdc_L_Q47342.data[40],DATA12);
SIGNAL(XB1_149_T,fastbus_1.tdc_L_T81800.data[0],DATA12);
SIGNAL(XB1_150_E,fastbus_1.qdc_L_Q47342.data[42],DATA12);
SIGNAL(XB1_150_T,fastbus_1.tdc_L_T81800.data[2],DATA12);
SIGNAL(XB1_151_E,fastbus_1.qdc_L_Q47342.data[44],DATA12);
SIGNAL(XB1_151_T,fastbus_1.tdc_L_T81800.data[4],DATA12);
SIGNAL(XB1_152_E,fastbus_1.qdc_L_Q47342.data[46],DATA12);
SIGNAL(XB1_152_T,fastbus_1.tdc_L_T81800.data[6],DATA12);
SIGNAL(XB1_153_E,fastbus_1.qdc_L_Q47342.data[49],DATA12);
SIGNAL(XB1_153_T,fastbus_1.tdc_L_T87024.data[17],DATA12);
SIGNAL(XB1_154_E,fastbus_1.qdc_L_Q47342.data[51],DATA12);
SIGNAL(XB1_154_T,fastbus_1.tdc_L_T87024.data[19],DATA12);
SIGNAL(XB1_155_E,fastbus_1.qdc_L_Q47342.data[53],DATA12);
SIGNAL(XB1_155_T,fastbus_1.tdc_L_T87024.data[21],DATA12);
SIGNAL(XB1_156_E,fastbus_1.qdc_L_Q47342.data[55],DATA12);
SIGNAL(XB1_156_T,fastbus_1.tdc_L_T87024.data[23],DATA12);
SIGNAL(XB1_157_E,fastbus_1.qdc_L_Q47342.data[57],DATA12);
SIGNAL(XB1_157_T,fastbus_1.tdc_L_T81800.data[17],DATA12);
SIGNAL(XB1_158_E,fastbus_1.qdc_L_Q47342.data[59],DATA12);
SIGNAL(XB1_158_T,fastbus_1.tdc_L_T81800.data[19],DATA12);
SIGNAL(XB1_159_E,fastbus_1.qdc_L_Q47342.data[61],DATA12);
SIGNAL(XB1_159_T,fastbus_1.tdc_L_T81800.data[21],DATA12);
SIGNAL(XB1_160_E,fastbus_1.qdc_L_Q47342.data[63],DATA12);
SIGNAL(XB1_160_T,fastbus_1.tdc_L_T81800.data[23],DATA12);
SIGNAL(XB1_161_E,fastbus_1.qdc_L_Q11111.data[49],DATA12);
SIGNAL(XB1_161_T,fastbus_1.tdc_L_T87024.data[25],DATA12);
SIGNAL(XB1_162_E,fastbus_1.qdc_L_Q11111.data[51],DATA12);
SIGNAL(XB1_162_T,fastbus_1.tdc_L_T87024.data[27],DATA12);
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/

/**********************************************************
 * Generating unpacking code...
 */

//
// Generating code for: CAMAC_LECROY_4434
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for CAMAC_LECROY_4434.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_LECROY_4434(channels)
#if !PACKER_CODE
# define DECLARED_UNPACK_CAMAC_LECROY_4434
class CAMAC_LECROY_4434
#else//PACKER_CODE
# define DECLARED_PACKER_CAMAC_LECROY_4434
class PACKER_CAMAC_LECROY_4434
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA24,DATA24,32> data;
  // list(0<=index<channels)

    // UINT32 ch_data NOENCODE
    // {
      //  0_23: value;
      // 24_31: 0;
      // ENCODE(data[index],(value=value));
    // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 channels);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 channels);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 channels);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(CAMAC_LECROY_4434);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for CAMAC_LECROY_4434.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_LECROY_4434(channels)
template<typename __data_src_t>
void CAMAC_LECROY_4434::__unpack(__data_src_t &__buffer,uint32 channels)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_23: value;
      // 24_31: 0;
      // ENCODE(data[index],(value=value));
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 value : 24; // 0..23
        uint32 unnamed_24_31 : 8; // 24..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 unnamed_24_31 : 8; // 24..31
        uint32 value : 24; // 0..23
#endif
      };
      uint32  u32;
    } ch_data;
    READ_FROM_BUFFER_FULL(18,uint32 ,ch_data,ch_data.u32);
    CHECK_BITS_EQUAL(16,ch_data.unnamed_24_31,0);
    {
      typedef __typeof__(*(&(data))) __array_t;
      typedef typename __array_t::item_t __item_t;
      __item_t &__item = data.insert_index(17,index);
      __item.value = ch_data.value;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_LECROY_4434::__unpack,uint32 channels);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for CAMAC_LECROY_4434.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_LECROY_4434(channels)
template<typename __data_src_t>
bool CAMAC_LECROY_4434::__match(__data_src_t &__buffer,uint32 channels)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_23: value;
      // 24_31: 0;
      // ENCODE(data[index],(value=value));
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 value : 24; // 0..23
        uint32 unnamed_24_31 : 8; // 24..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 unnamed_24_31 : 8; // 24..31
        uint32 value : 24; // 0..23
#endif
      };
      uint32  u32;
    } ch_data;
    READ_FROM_BUFFER_FULL(18,uint32 ,ch_data,ch_data.u32);
    MATCH_BITS_EQUAL(16,ch_data.unnamed_24_31,0);
    return true;
    return false;
  }
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,CAMAC_LECROY_4434::__match,uint32 channels);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for CAMAC_LECROY_4434.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_LECROY_4434(channels)
template<typename __data_dest_t>
void PACKER_CAMAC_LECROY_4434::__packer(__data_dest_t &__buffer,uint32 channels)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS);
  // list(0<=index<channels)

  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_23: value;
      // 24_31: 0;
      // ENCODE(data[index],(value=value));
    // }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_LECROY_4434::__packer,uint32 channels);

/** END_PACKER ********************************************************/

//
// Generating code for: CAMAC_PHILLIPS_7164
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for CAMAC_PHILLIPS_7164.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_PHILLIPS_7164(channels,mark_channel_no)
#if !PACKER_CODE
# define DECLARED_UNPACK_CAMAC_PHILLIPS_7164
class CAMAC_PHILLIPS_7164
#else//PACKER_CODE
# define DECLARED_PACKER_CAMAC_PHILLIPS_7164
class PACKER_CAMAC_PHILLIPS_7164
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA12 data[16] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA12,DATA12,16> data;
  // list(0<=index<channels)

    // if(mark_channel_no)

    // else

      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_15: channel = CHECK(index);
        // ENCODE(data[index],(value=value));
      // }
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // ENCODE(data[index],(value=value));
      // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 channels,uint32 mark_channel_no);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 channels,uint32 mark_channel_no);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 channels,uint32 mark_channel_no);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(CAMAC_PHILLIPS_7164);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for CAMAC_PHILLIPS_7164.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_PHILLIPS_7164(channels,mark_channel_no)
template<typename __data_src_t>
void CAMAC_PHILLIPS_7164::__unpack(__data_src_t &__buffer,uint32 channels
                                                         ,uint32 mark_channel_no)
{
  // MEMBER(DATA12 data[16] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // if(mark_channel_no)

    // else

    if (mark_channel_no)
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_15: channel = CHECK(index);
        // ENCODE(data[index],(value=value));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 channel : 4; // 12..15
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 channel : 4; // 12..15
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(34,uint16 ,ch_data,ch_data.u16);
      CHECK_BITS_EQUAL(32,ch_data.channel,index);
      {
        typedef __typeof__(*(&(data))) __array_t;
        typedef typename __array_t::item_t __item_t;
        __item_t &__item = data.insert_index(33,index);
        __item.value = ch_data.value;
      }
    }

    else
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // ENCODE(data[index],(value=value));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 dummy_12_15 : 4;
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 dummy_12_15 : 4;
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(42,uint16 ,ch_data,ch_data.u16);
      CHECK_UNNAMED_BITS_ZERO(42,ch_data.u16,0xf000);
      {
        typedef __typeof__(*(&(data))) __array_t;
        typedef typename __array_t::item_t __item_t;
        __item_t &__item = data.insert_index(41,index);
        __item.value = ch_data.value;
      }
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_PHILLIPS_7164::__unpack,uint32 channels
                                                              ,uint32 mark_channel_no);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for CAMAC_PHILLIPS_7164.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_PHILLIPS_7164(channels,mark_channel_no)
template<typename __data_src_t>
bool CAMAC_PHILLIPS_7164::__match(__data_src_t &__buffer,uint32 channels
                                                        ,uint32 mark_channel_no)
{
  // MEMBER(DATA12 data[16] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // if(mark_channel_no)

    // else

    if (mark_channel_no)
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_15: channel = CHECK(index);
        // ENCODE(data[index],(value=value));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 channel : 4; // 12..15
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 channel : 4; // 12..15
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(34,uint16 ,ch_data,ch_data.u16);
      MATCH_BITS_EQUAL(32,ch_data.channel,index);
      return true;
      return false;
    }

    else
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // ENCODE(data[index],(value=value));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 dummy_12_15 : 4;
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 dummy_12_15 : 4;
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(42,uint16 ,ch_data,ch_data.u16);
      MATCH_UNNAMED_BITS_ZERO(42,ch_data.u16,0xf000);
      return true;
      return false;
    }
    return false;
  }
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,CAMAC_PHILLIPS_7164::__match,uint32 channels
                                                             ,uint32 mark_channel_no);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for CAMAC_PHILLIPS_7164.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_PHILLIPS_7164(channels,mark_channel_no)
template<typename __data_dest_t>
void PACKER_CAMAC_PHILLIPS_7164::__packer(__data_dest_t &__buffer,uint32 channels
                                                                 ,uint32 mark_channel_no)
{
  // MEMBER(DATA12 data[16] ZERO_SUPPRESS);
  // list(0<=index<channels)

  {
    // if(mark_channel_no)

    // else

    if (mark_channel_no)
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_15: channel = CHECK(index);
        // ENCODE(data[index],(value=value));
      // }
    }

    else
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // ENCODE(data[index],(value=value));
      // }
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_PHILLIPS_7164::__packer,uint32 channels
                                                              ,uint32 mark_channel_no);

/** END_PACKER ********************************************************/

//
// Generating code for: CAMAC_SILENA_4418
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for CAMAC_SILENA_4418.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_SILENA_4418(channels,mark_channel_no)
#if !PACKER_CODE
# define DECLARED_UNPACK_CAMAC_SILENA_4418
class CAMAC_SILENA_4418
#else//PACKER_CODE
# define DECLARED_PACKER_CAMAC_SILENA_4418
class PACKER_CAMAC_SILENA_4418
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA12_OVERFLOW data[8] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA12_OVERFLOW,DATA12_OVERFLOW,8> data;
  // list(0<=index<channels)

    // if(mark_channel_no)

    // else

      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_14: channel = CHECK(index);
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 channels,uint32 mark_channel_no);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 channels,uint32 mark_channel_no);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 channels,uint32 mark_channel_no);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(CAMAC_SILENA_4418);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for CAMAC_SILENA_4418.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_SILENA_4418(channels,mark_channel_no)
template<typename __data_src_t>
void CAMAC_SILENA_4418::__unpack(__data_src_t &__buffer,uint32 channels,uint32 mark_channel_no)
{
  // MEMBER(DATA12_OVERFLOW data[8] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // if(mark_channel_no)

    // else

    if (mark_channel_no)
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_14: channel = CHECK(index);
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 channel : 3; // 12..14
          uint16 overflow : 1; // 15
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 overflow : 1; // 15
          uint16 channel : 3; // 12..14
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(60,uint16 ,ch_data,ch_data.u16);
      CHECK_BITS_EQUAL(57,ch_data.channel,index);
      {
        typedef __typeof__(*(&(data))) __array_t;
        typedef typename __array_t::item_t __item_t;
        __item_t &__item = data.insert_index(59,index);
        __item.value = ch_data.value;
        __item.overflow = ch_data.overflow;
      }
    }

    else
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 dummy_12_14 : 3;
          uint16 overflow : 1; // 15
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 overflow : 1; // 15
          uint16 dummy_12_14 : 3;
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(69,uint16 ,ch_data,ch_data.u16);
      CHECK_UNNAMED_BITS_ZERO(69,ch_data.u16,0x7000);
      {
        typedef __typeof__(*(&(data))) __array_t;
        typedef typename __array_t::item_t __item_t;
        __item_t &__item = data.insert_index(68,index);
        __item.value = ch_data.value;
        __item.overflow = ch_data.overflow;
      }
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_SILENA_4418::__unpack,uint32 channels
                                                            ,uint32 mark_channel_no);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for CAMAC_SILENA_4418.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_SILENA_4418(channels,mark_channel_no)
template<typename __data_src_t>
bool CAMAC_SILENA_4418::__match(__data_src_t &__buffer,uint32 channels,uint32 mark_channel_no)
{
  // MEMBER(DATA12_OVERFLOW data[8] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // if(mark_channel_no)

    // else

    if (mark_channel_no)
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_14: channel = CHECK(index);
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 channel : 3; // 12..14
          uint16 overflow : 1; // 15
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 overflow : 1; // 15
          uint16 channel : 3; // 12..14
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(60,uint16 ,ch_data,ch_data.u16);
      MATCH_BITS_EQUAL(57,ch_data.channel,index);
      return true;
      return false;
    }

    else
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 dummy_12_14 : 3;
          uint16 overflow : 1; // 15
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 overflow : 1; // 15
          uint16 dummy_12_14 : 3;
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(69,uint16 ,ch_data,ch_data.u16);
      MATCH_UNNAMED_BITS_ZERO(69,ch_data.u16,0x7000);
      return true;
      return false;
    }
    return false;
  }
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,CAMAC_SILENA_4418::__match,uint32 channels
                                                           ,uint32 mark_channel_no);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for CAMAC_SILENA_4418.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_SILENA_4418(channels,mark_channel_no)
template<typename __data_dest_t>
void PACKER_CAMAC_SILENA_4418::__packer(__data_dest_t &__buffer,uint32 channels
                                                               ,uint32 mark_channel_no)
{
  // MEMBER(DATA12_OVERFLOW data[8] ZERO_SUPPRESS);
  // list(0<=index<channels)

  {
    // if(mark_channel_no)

    // else

    if (mark_channel_no)
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_14: channel = CHECK(index);
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
    }

    else
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_SILENA_4418::__packer,uint32 channels
                                                            ,uint32 mark_channel_no);

/** END_PACKER ********************************************************/

//
// Generating code for: DUMMY_WORD
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for DUMMY_WORD.
 *
 * Do not edit - automatically generated.
 */

// DUMMY_WORD()
#if !PACKER_CODE
# define DECLARED_UNPACK_DUMMY_WORD
class DUMMY_WORD
#else//PACKER_CODE
# define DECLARED_PACKER_DUMMY_WORD
class PACKER_DUMMY_WORD
#endif//PACKER_CODE

{
public:
  // UINT32 dummy_word;
  uint32  dummy_word;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(DUMMY_WORD);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for DUMMY_WORD.
 *
 * Do not edit - automatically generated.
 */

// DUMMY_WORD()
template<typename __data_src_t>
void DUMMY_WORD::__unpack(__data_src_t &__buffer)
{
  // UINT32 dummy_word;
  READ_FROM_BUFFER(76,uint32 ,dummy_word);
}
FORCE_IMPL_DATA_SRC_FCN(void,DUMMY_WORD::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for DUMMY_WORD.
 *
 * Do not edit - automatically generated.
 */

// DUMMY_WORD()
template<typename __data_src_t>
bool DUMMY_WORD::__match(__data_src_t &__buffer)
{
  // UINT32 dummy_word;
  uint32  __dummy_word;
  READ_FROM_BUFFER(76,uint32 ,__dummy_word);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN(bool,DUMMY_WORD::__match);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for DUMMY_WORD.
 *
 * Do not edit - automatically generated.
 */

// DUMMY_WORD()
template<typename __data_dest_t>
void PACKER_DUMMY_WORD::__packer(__data_dest_t &__buffer)
{
  // UINT32 dummy_word;
}
FORCE_IMPL_DATA_SRC_FCN(void,DUMMY_WORD::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: FASTBUS_LECROY_1875
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for FASTBUS_LECROY_1875.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1875(geom,channels)
#if !PACKER_CODE
# define DECLARED_UNPACK_FASTBUS_LECROY_1875
class FASTBUS_LECROY_1875
#else//PACKER_CODE
# define DECLARED_PACKER_FASTBUS_LECROY_1875
class PACKER_FASTBUS_LECROY_1875
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA12_RANGE data[64] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA12_RANGE,DATA12_RANGE,64> data;
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_21: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom,uint32 channels);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom,uint32 channels);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom,uint32 channels);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(FASTBUS_LECROY_1875);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for FASTBUS_LECROY_1875.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1875(geom,channels)
template<typename __data_src_t>
void FASTBUS_LECROY_1875::__unpack(__data_src_t &__buffer,uint32 geom,uint32 channels)
{
  // MEMBER(DATA12_RANGE data[64] ZERO_SUPPRESS);
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_21: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 12; // 0..11
      uint32 dummy_12_15 : 4;
      uint32 channel : 6; // 16..21
      uint32 dummy_22 : 1;
      uint32 range : 1; // 23
      uint32 n : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 n : 3; // 24..26
      uint32 range : 1; // 23
      uint32 dummy_22 : 1;
      uint32 channel : 6; // 16..21
      uint32 dummy_12_15 : 4;
      uint32 value : 12; // 0..11
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(90,uint32 ,ch_data,ch_data.u32);
  CHECK_BITS_RANGE_MAX(85,ch_data.channel,(channels - 1));
  CHECK_BITS_EQUAL(87,ch_data.n,0);
  CHECK_BITS_EQUAL(88,ch_data.geom,geom);
  CHECK_UNNAMED_BITS_ZERO(90,ch_data.u32,0x0040f000);
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(89,ch_data.channel);
    __item.value = ch_data.value;
    __item.range = ch_data.range;
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,FASTBUS_LECROY_1875::__unpack,uint32 geom
                                                              ,uint32 channels);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for FASTBUS_LECROY_1875.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1875(geom,channels)
template<typename __data_src_t>
bool FASTBUS_LECROY_1875::__match(__data_src_t &__buffer,uint32 geom,uint32 channels)
{
  // MEMBER(DATA12_RANGE data[64] ZERO_SUPPRESS);
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_21: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 12; // 0..11
      uint32 dummy_12_15 : 4;
      uint32 channel : 6; // 16..21
      uint32 dummy_22 : 1;
      uint32 range : 1; // 23
      uint32 n : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 n : 3; // 24..26
      uint32 range : 1; // 23
      uint32 dummy_22 : 1;
      uint32 channel : 6; // 16..21
      uint32 dummy_12_15 : 4;
      uint32 value : 12; // 0..11
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(90,uint32 ,ch_data,ch_data.u32);
  MATCH_BITS_RANGE_MAX(85,ch_data.channel,(channels - 1));
  MATCH_BITS_EQUAL(87,ch_data.n,0);
  MATCH_BITS_EQUAL(88,ch_data.geom,geom);
  MATCH_UNNAMED_BITS_ZERO(90,ch_data.u32,0x0040f000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,FASTBUS_LECROY_1875::__match,uint32 geom
                                                             ,uint32 channels);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for FASTBUS_LECROY_1875.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1875(geom,channels)
template<typename __data_dest_t>
void PACKER_FASTBUS_LECROY_1875::__packer(__data_dest_t &__buffer,uint32 geom
                                                                 ,uint32 channels)
{
  // MEMBER(DATA12_RANGE data[64] ZERO_SUPPRESS);
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_21: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,FASTBUS_LECROY_1875::__packer,uint32 geom
                                                              ,uint32 channels);

/** END_PACKER ********************************************************/

//
// Generating code for: FASTBUS_LECROY_1885
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for FASTBUS_LECROY_1885.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1885(geom,channels)
#if !PACKER_CODE
# define DECLARED_UNPACK_FASTBUS_LECROY_1885
class FASTBUS_LECROY_1885
#else//PACKER_CODE
# define DECLARED_PACKER_FASTBUS_LECROY_1885
class PACKER_FASTBUS_LECROY_1885
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA12_RANGE data[96] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA12_RANGE,DATA12_RANGE,96> data;
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_22: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom,uint32 channels);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom,uint32 channels);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom,uint32 channels);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(FASTBUS_LECROY_1885);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for FASTBUS_LECROY_1885.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1885(geom,channels)
template<typename __data_src_t>
void FASTBUS_LECROY_1885::__unpack(__data_src_t &__buffer,uint32 geom,uint32 channels)
{
  // MEMBER(DATA12_RANGE data[96] ZERO_SUPPRESS);
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_22: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 12; // 0..11
      uint32 dummy_12_15 : 4;
      uint32 channel : 7; // 16..22
      uint32 range : 1; // 23
      uint32 n : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 n : 3; // 24..26
      uint32 range : 1; // 23
      uint32 channel : 7; // 16..22
      uint32 dummy_12_15 : 4;
      uint32 value : 12; // 0..11
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(104,uint32 ,ch_data,ch_data.u32);
  CHECK_BITS_RANGE_MAX(99,ch_data.channel,(channels - 1));
  CHECK_BITS_EQUAL(101,ch_data.n,0);
  CHECK_BITS_EQUAL(102,ch_data.geom,geom);
  CHECK_UNNAMED_BITS_ZERO(104,ch_data.u32,0x0000f000);
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(103,ch_data.channel);
    __item.value = ch_data.value;
    __item.range = ch_data.range;
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,FASTBUS_LECROY_1885::__unpack,uint32 geom
                                                              ,uint32 channels);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for FASTBUS_LECROY_1885.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1885(geom,channels)
template<typename __data_src_t>
bool FASTBUS_LECROY_1885::__match(__data_src_t &__buffer,uint32 geom,uint32 channels)
{
  // MEMBER(DATA12_RANGE data[96] ZERO_SUPPRESS);
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_22: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 12; // 0..11
      uint32 dummy_12_15 : 4;
      uint32 channel : 7; // 16..22
      uint32 range : 1; // 23
      uint32 n : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 n : 3; // 24..26
      uint32 range : 1; // 23
      uint32 channel : 7; // 16..22
      uint32 dummy_12_15 : 4;
      uint32 value : 12; // 0..11
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(104,uint32 ,ch_data,ch_data.u32);
  MATCH_BITS_RANGE_MAX(99,ch_data.channel,(channels - 1));
  MATCH_BITS_EQUAL(101,ch_data.n,0);
  MATCH_BITS_EQUAL(102,ch_data.geom,geom);
  MATCH_UNNAMED_BITS_ZERO(104,ch_data.u32,0x0000f000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,FASTBUS_LECROY_1885::__match,uint32 geom
                                                             ,uint32 channels);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for FASTBUS_LECROY_1885.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1885(geom,channels)
template<typename __data_dest_t>
void PACKER_FASTBUS_LECROY_1885::__packer(__data_dest_t &__buffer,uint32 geom
                                                                 ,uint32 channels)
{
  // MEMBER(DATA12_RANGE data[96] ZERO_SUPPRESS);
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_22: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,FASTBUS_LECROY_1885::__packer,uint32 geom
                                                              ,uint32 channels);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_STD_VME
//
//
// Generating code for: VME_CAEN_V775
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V775.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V775(geom,crate)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V775
class VME_CAEN_V775
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V775
class PACKER_VME_CAEN_V775
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA12_OVERFLOW data[32] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA12_OVERFLOW,DATA12_OVERFLOW,32> data;
  // UINT32 header NOENCODE
  // {
    //  8_13: count;
    // 16_23: crate = MATCH(crate);
    // 24_26: 2;
    // 27_31: geom = MATCH(geom);
  // }
  // list(0<=index<header.count)

    // UINT32 ch_data NOENCODE
    // {
      //  0_11: value;
      //    12: overflow;
      //    13: underflow;
      //    14: valid;
      // 16_20: channel;
      // 24_26: 0;
      // 27_31: geom = CHECK(geom);
      // ENCODE(data[channel],(value=value,overflow=overflow));
    // }
  // UINT32 eob
  // {
    //  0_23: event_number;
    // 24_26: 4;
    // 27_31: geom = CHECK(geom);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 event_number : 24; // 0..23
      uint32 unnamed_24_26 : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 unnamed_24_26 : 3; // 24..26
      uint32 event_number : 24; // 0..23
#endif
    };
    uint32  u32;
  } eob;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom,uint32 crate);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom,uint32 crate);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom,uint32 crate);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V775);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V775.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V775(geom,crate)
template<typename __data_src_t>
void VME_CAEN_V775::__unpack(__data_src_t &__buffer,uint32 geom,uint32 crate)
{
  // MEMBER(DATA12_OVERFLOW data[32] ZERO_SUPPRESS);
  // UINT32 header NOENCODE
  // {
    //  8_13: count;
    // 16_23: crate = MATCH(crate);
    // 24_26: 2;
    // 27_31: geom = MATCH(geom);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 dummy_0_7 : 8;
      uint32 count : 6; // 8..13
      uint32 dummy_14_15 : 2;
      uint32 crate : 8; // 16..23
      uint32 unnamed_24_26 : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 unnamed_24_26 : 3; // 24..26
      uint32 crate : 8; // 16..23
      uint32 dummy_14_15 : 2;
      uint32 count : 6; // 8..13
      uint32 dummy_0_7 : 8;
#endif
    };
    uint32  u32;
  } header;
  READ_FROM_BUFFER_FULL(435,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(432,header.crate,crate);
  CHECK_BITS_EQUAL(433,header.unnamed_24_26,2);
  CHECK_BITS_EQUAL(434,header.geom,geom);
  CHECK_UNNAMED_BITS_ZERO(435,header.u32,0x0000c0ff);
  // list(0<=index<header.count)

  for (uint32 index = 0; index < (uint32) (header.count); ++index)
  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_11: value;
      //    12: overflow;
      //    13: underflow;
      //    14: valid;
      // 16_20: channel;
      // 24_26: 0;
      // 27_31: geom = CHECK(geom);
      // ENCODE(data[channel],(value=value,overflow=overflow));
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 value : 12; // 0..11
        uint32 overflow : 1; // 12
        uint32 underflow : 1; // 13
        uint32 valid : 1; // 14
        uint32 dummy_15 : 1;
        uint32 channel : 5; // 16..20
        uint32 dummy_21_23 : 3;
        uint32 unnamed_24_26 : 3; // 24..26
        uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 geom : 5; // 27..31
        uint32 unnamed_24_26 : 3; // 24..26
        uint32 dummy_21_23 : 3;
        uint32 channel : 5; // 16..20
        uint32 dummy_15 : 1;
        uint32 valid : 1; // 14
        uint32 underflow : 1; // 13
        uint32 overflow : 1; // 12
        uint32 value : 12; // 0..11
#endif
      };
      uint32  u32;
    } ch_data;
    READ_FROM_BUFFER_FULL(448,uint32 ,ch_data,ch_data.u32);
    CHECK_BITS_EQUAL(445,ch_data.unnamed_24_26,0);
    CHECK_BITS_EQUAL(446,ch_data.geom,geom);
    CHECK_UNNAMED_BITS_ZERO(448,ch_data.u32,0x00e08000);
    {
      typedef __typeof__(*(&(data))) __array_t;
      typedef typename __array_t::item_t __item_t;
      __item_t &__item = data.insert_index(447,ch_data.channel);
      __item.value = ch_data.value;
      __item.overflow = ch_data.overflow;
    }
  }
  // UINT32 eob
  // {
    //  0_23: event_number;
    // 24_26: 4;
    // 27_31: geom = CHECK(geom);
  // }
  READ_FROM_BUFFER_FULL(455,uint32 ,eob,eob.u32);
  CHECK_BITS_EQUAL(453,eob.unnamed_24_26,4);
  CHECK_BITS_EQUAL(454,eob.geom,geom);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V775::__unpack,uint32 geom,uint32 crate);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V775.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V775(geom,crate)
template<typename __data_src_t>
bool VME_CAEN_V775::__match(__data_src_t &__buffer,uint32 geom,uint32 crate)
{
  // MEMBER(DATA12_OVERFLOW data[32] ZERO_SUPPRESS);
  // UINT32 header NOENCODE
  // {
    //  8_13: count;
    // 16_23: crate = MATCH(crate);
    // 24_26: 2;
    // 27_31: geom = MATCH(geom);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 dummy_0_7 : 8;
      uint32 count : 6; // 8..13
      uint32 dummy_14_15 : 2;
      uint32 crate : 8; // 16..23
      uint32 unnamed_24_26 : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 unnamed_24_26 : 3; // 24..26
      uint32 crate : 8; // 16..23
      uint32 dummy_14_15 : 2;
      uint32 count : 6; // 8..13
      uint32 dummy_0_7 : 8;
#endif
    };
    uint32  u32;
  } header;
  READ_FROM_BUFFER_FULL(435,uint32 ,header,header.u32);
  MATCH_BITS_EQUAL(432,header.crate,crate);
  MATCH_BITS_EQUAL(433,header.unnamed_24_26,2);
  MATCH_BITS_EQUAL(434,header.geom,geom);
  MATCH_UNNAMED_BITS_ZERO(435,header.u32,0x0000c0ff);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V775::__match,uint32 geom,uint32 crate);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V775.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V775(geom,crate)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V775::__packer(__data_dest_t &__buffer,uint32 geom,uint32 crate)
{
  // MEMBER(DATA12_OVERFLOW data[32] ZERO_SUPPRESS);
  // UINT32 header NOENCODE
  // {
    //  8_13: count;
    // 16_23: crate = MATCH(crate);
    // 24_26: 2;
    // 27_31: geom = MATCH(geom);
  // }
  // list(0<=index<header.count)

  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_11: value;
      //    12: overflow;
      //    13: underflow;
      //    14: valid;
      // 16_20: channel;
      // 24_26: 0;
      // 27_31: geom = CHECK(geom);
      // ENCODE(data[channel],(value=value,overflow=overflow));
    // }
  }
  // UINT32 eob
  // {
    //  0_23: event_number;
    // 24_26: 4;
    // 27_31: geom = CHECK(geom);
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V775::__packer,uint32 geom,uint32 crate);

/** END_PACKER ********************************************************/


/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_STD_VME.
 *
 * Do not edit - automatically generated.
 */

// LAND_STD_VME()
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_STD_VME
class LAND_STD_VME
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_STD_VME
class PACKER_LAND_STD_VME
#endif//PACKER_CODE

{
public:
  // UINT32 failure
  // {
    //     0: fail_general;
    //     1: fail_data_corrupt;
    //     2: fail_data_missing;
    //     3: fail_data_too_much;
    //     4: fail_event_counter_mismatch;
    //     5: fail_readout_error_driver;
    //     6: fail_unexpected_trigger;
    //    27: has_no_zero_suppression;
    //    28: has_multi_adctdc_counter0;
    //    29: has_multi_scaler_counter0;
    //    30: has_multi_event;
    //    31: has_time_stamp;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 fail_general : 1; // 0
      uint32 fail_data_corrupt : 1; // 1
      uint32 fail_data_missing : 1; // 2
      uint32 fail_data_too_much : 1; // 3
      uint32 fail_event_counter_mismatch : 1; // 4
      uint32 fail_readout_error_driver : 1; // 5
      uint32 fail_unexpected_trigger : 1; // 6
      uint32 dummy_7_26 : 20;
      uint32 has_no_zero_suppression : 1; // 27
      uint32 has_multi_adctdc_counter0 : 1; // 28
      uint32 has_multi_scaler_counter0 : 1; // 29
      uint32 has_multi_event : 1; // 30
      uint32 has_time_stamp : 1; // 31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 has_time_stamp : 1; // 31
      uint32 has_multi_event : 1; // 30
      uint32 has_multi_scaler_counter0 : 1; // 29
      uint32 has_multi_adctdc_counter0 : 1; // 28
      uint32 has_no_zero_suppression : 1; // 27
      uint32 dummy_7_26 : 20;
      uint32 fail_unexpected_trigger : 1; // 6
      uint32 fail_readout_error_driver : 1; // 5
      uint32 fail_event_counter_mismatch : 1; // 4
      uint32 fail_data_too_much : 1; // 3
      uint32 fail_data_missing : 1; // 2
      uint32 fail_data_corrupt : 1; // 1
      uint32 fail_general : 1; // 0
#endif
    };
    uint32  u32;
  } failure;
  // if(failure.has_time_stamp)

    // UINT32 time_stamp;
    uint32  time_stamp;
  // if(failure.has_multi_event)

    // UINT32 multi_events;
    uint32  multi_events;
  // if(failure.has_multi_scaler_counter0)

    // UINT32 multi_scaler_counter0;
    uint32  multi_scaler_counter0;
  // if(failure.has_multi_adctdc_counter0)

    // UINT32 multi_adctdc_counter0;
    uint32  multi_adctdc_counter0;
  // select several

    // tdc0 = VME_CAEN_V775(geom=20,crate=20);
  SINGLE(VME_CAEN_V775,tdc0);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_STD_VME);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_STD_VME.
 *
 * Do not edit - automatically generated.
 */

// LAND_STD_VME()
template<typename __data_src_t>
void LAND_STD_VME::__unpack(__data_src_t &__buffer)
{
  // UINT32 failure
  // {
    //     0: fail_general;
    //     1: fail_data_corrupt;
    //     2: fail_data_missing;
    //     3: fail_data_too_much;
    //     4: fail_event_counter_mismatch;
    //     5: fail_readout_error_driver;
    //     6: fail_unexpected_trigger;
    //    27: has_no_zero_suppression;
    //    28: has_multi_adctdc_counter0;
    //    29: has_multi_scaler_counter0;
    //    30: has_multi_event;
    //    31: has_time_stamp;
  // }
  READ_FROM_BUFFER_FULL(123,uint32 ,failure,failure.u32);
  CHECK_UNNAMED_BITS_ZERO(123,failure.u32,0x07ffff80);
  // if(failure.has_time_stamp)

  if (failure.has_time_stamp)
  {
    // UINT32 time_stamp;
    READ_FROM_BUFFER(126,uint32 ,time_stamp);
  }
  // if(failure.has_multi_event)

  if (failure.has_multi_event)
  {
    // UINT32 multi_events;
    READ_FROM_BUFFER(130,uint32 ,multi_events);
  }
  // if(failure.has_multi_scaler_counter0)

  if (failure.has_multi_scaler_counter0)
  {
    // UINT32 multi_scaler_counter0;
    READ_FROM_BUFFER(134,uint32 ,multi_scaler_counter0);
  }
  // if(failure.has_multi_adctdc_counter0)

  if (failure.has_multi_adctdc_counter0)
  {
    // UINT32 multi_adctdc_counter0;
    READ_FROM_BUFFER(138,uint32 ,multi_adctdc_counter0);
  }
  // select several

    // tdc0 = VME_CAEN_V775(geom=20,crate=20);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: VME_CAEN_V775 tdc0: (s32) => (0xffffc0ff,0xa2140000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(143,uint32,__match_peek);
    // differ = 00000000 :
    uint32 __match_index = 0;
    static const sint8 __match_index_array[1] = { 1, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 0
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        CHECK_SPURIOUS_MATCH_DECL(142,spurious_match_abort_loop_0,VME_CAEN_V775,/*geom*/20,/*crate*/20);
        UNPACK_DECL(142,VME_CAEN_V775,tdc0,/*geom*/20,/*crate*/20);
        break;
    }
  }
  spurious_match_abort_loop_0:;
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_STD_VME::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_STD_VME.
 *
 * Do not edit - automatically generated.
 */

// LAND_STD_VME()
template<typename __data_src_t>
bool LAND_STD_VME::__match(__data_src_t &__buffer)
{
  // UINT32 failure
  // {
    //     0: fail_general;
    //     1: fail_data_corrupt;
    //     2: fail_data_missing;
    //     3: fail_data_too_much;
    //     4: fail_event_counter_mismatch;
    //     5: fail_readout_error_driver;
    //     6: fail_unexpected_trigger;
    //    27: has_no_zero_suppression;
    //    28: has_multi_adctdc_counter0;
    //    29: has_multi_scaler_counter0;
    //    30: has_multi_event;
    //    31: has_time_stamp;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 fail_general : 1; // 0
      uint32 fail_data_corrupt : 1; // 1
      uint32 fail_data_missing : 1; // 2
      uint32 fail_data_too_much : 1; // 3
      uint32 fail_event_counter_mismatch : 1; // 4
      uint32 fail_readout_error_driver : 1; // 5
      uint32 fail_unexpected_trigger : 1; // 6
      uint32 dummy_7_26 : 20;
      uint32 has_no_zero_suppression : 1; // 27
      uint32 has_multi_adctdc_counter0 : 1; // 28
      uint32 has_multi_scaler_counter0 : 1; // 29
      uint32 has_multi_event : 1; // 30
      uint32 has_time_stamp : 1; // 31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 has_time_stamp : 1; // 31
      uint32 has_multi_event : 1; // 30
      uint32 has_multi_scaler_counter0 : 1; // 29
      uint32 has_multi_adctdc_counter0 : 1; // 28
      uint32 has_no_zero_suppression : 1; // 27
      uint32 dummy_7_26 : 20;
      uint32 fail_unexpected_trigger : 1; // 6
      uint32 fail_readout_error_driver : 1; // 5
      uint32 fail_event_counter_mismatch : 1; // 4
      uint32 fail_data_too_much : 1; // 3
      uint32 fail_data_missing : 1; // 2
      uint32 fail_data_corrupt : 1; // 1
      uint32 fail_general : 1; // 0
#endif
    };
    uint32  u32;
  } __failure;
  READ_FROM_BUFFER_FULL(123,uint32 ,failure,__failure.u32);
  MATCH_UNNAMED_BITS_ZERO(123,__failure.u32,0x07ffff80);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN(bool,LAND_STD_VME::__match);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_STD_VME.
 *
 * Do not edit - automatically generated.
 */

// LAND_STD_VME()
template<typename __data_dest_t>
void PACKER_LAND_STD_VME::__packer(__data_dest_t &__buffer)
{
  // UINT32 failure
  // {
    //     0: fail_general;
    //     1: fail_data_corrupt;
    //     2: fail_data_missing;
    //     3: fail_data_too_much;
    //     4: fail_event_counter_mismatch;
    //     5: fail_readout_error_driver;
    //     6: fail_unexpected_trigger;
    //    27: has_no_zero_suppression;
    //    28: has_multi_adctdc_counter0;
    //    29: has_multi_scaler_counter0;
    //    30: has_multi_event;
    //    31: has_time_stamp;
  // }
  // if(failure.has_time_stamp)

  if (failure.has_time_stamp)
  {
    // UINT32 time_stamp;
  }
  // if(failure.has_multi_event)

  if (failure.has_multi_event)
  {
    // UINT32 multi_events;
  }
  // if(failure.has_multi_scaler_counter0)

  if (failure.has_multi_scaler_counter0)
  {
    // UINT32 multi_scaler_counter0;
  }
  // if(failure.has_multi_adctdc_counter0)

  if (failure.has_multi_adctdc_counter0)
  {
    // UINT32 multi_adctdc_counter0;
  }
  // select several

    // tdc0 = VME_CAEN_V775(geom=20,crate=20);
  {
    PACK_DECL(142,VME_CAEN_V775,tdc0,/*geom*/20,/*crate*/20);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_STD_VME::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V1190
//
//
// Generating code for: VME_CAEN_V1190_SUBTDC
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1190_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SUBTDC(tdc,event_id,data)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1190_SUBTDC
class VME_CAEN_V1190_SUBTDC
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1190_SUBTDC
class PACKER_VME_CAEN_V1190_SUBTDC
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 bunch_id : 12; // 0..11
      uint32 event_id : 12; // 12..23
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 event_id : 12; // 12..23
      uint32 bunch_id : 12; // 0..11
#endif
    };
    uint32  u32;
  } header;
  // several UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }
  // optional UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } error_flags;
  // MARK_COUNT(tdc_end);
  // UINT32 trailer
  // {
    //  0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    // 12_23: event_id = CHECK(header.event_id);
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 3;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_count : 12; // 0..11
      uint32 event_id : 12; // 12..23
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 event_id : 12; // 12..23
      uint32 word_count : 12; // 0..11
#endif
    };
    uint32  u32;
  } trailer;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 tdc,uint32 event_id);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1190_SUBTDC);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1190_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
void VME_CAEN_V1190_SUBTDC::__unpack(__data_src_t &__buffer,uint32 tdc,uint32 event_id
                                                           ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  void *__mark_tdc_start = __buffer._data;
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  READ_FROM_BUFFER_FULL(260,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(257,header.event_id,event_id);
  CHECK_BITS_EQUAL(258,header.tdc,tdc);
  CHECK_BITS_EQUAL(259,header.unnamed_27_31,1);
  CHECK_UNNAMED_BITS_ZERO(260,header.u32,0x04000000);
  // several UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }
  for ( ; ; ) {
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 19; // 0..18
      uint32 channel_low : 5; // 19..23
      uint32 tdc : 2; // 24..25
      uint32 trailing : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trailing : 1; // 26
      uint32 tdc : 2; // 24..25
      uint32 channel_low : 5; // 19..23
      uint32 value : 19; // 0..18
#endif
    };
    uint32  u32;
  } ch_data;
  if (__buffer.empty()) goto data_done_0;
  PEEK_FROM_BUFFER_FULL(269,uint32 ,ch_data,ch_data.u32);
  CHECK_JUMP_BITS_EQUAL(265,ch_data.tdc,tdc,data_done_0);
  CHECK_JUMP_BITS_EQUAL(267,ch_data.unnamed_27_31,0,data_done_0);
  __buffer.advance(sizeof(ch_data.u32));
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(268,((ch_data.tdc << 5) | ch_data.channel_low));
    __item.value = ch_data.value;
  }
  }
  data_done_0:;
  // optional UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } __error_flags;
  if (__buffer.empty()) goto data_done_1;
  PEEK_FROM_BUFFER_FULL(275,uint32 ,error_flags,__error_flags.u32);
  CHECK_JUMP_BITS_EQUAL(273,__error_flags.tdc,tdc,data_done_1);
  CHECK_JUMP_BITS_EQUAL(274,__error_flags.unnamed_27_31,4,data_done_1);
  CHECK_JUMP_UNNAMED_BITS_ZERO(275,__error_flags.u32,0x04ff8000,data_done_1);
  error_flags.u32 = __error_flags.u32;
  __buffer.advance(sizeof(__error_flags.u32));
  data_done_1:;
  // MARK_COUNT(tdc_end);
  void *__mark_tdc_end = __buffer._data;
  // UINT32 trailer
  // {
    //  0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    // 12_23: event_id = CHECK(header.event_id);
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 3;
  // }
  READ_FROM_BUFFER_FULL(283,uint32 ,trailer,trailer.u32);
  CHECK_WORD_COUNT(279,trailer.word_count,tdc_start,tdc_end,4,4);
  CHECK_BITS_EQUAL(280,trailer.event_id,header.event_id);
  CHECK_BITS_EQUAL(281,trailer.tdc,tdc);
  CHECK_BITS_EQUAL(282,trailer.unnamed_27_31,3);
  CHECK_UNNAMED_BITS_ZERO(283,trailer.u32,0x04000000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SUBTDC::__unpack,uint32 tdc
                                                                ,uint32 event_id
                                                                ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1190_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
bool VME_CAEN_V1190_SUBTDC::__match(__data_src_t &__buffer,uint32 tdc,uint32 event_id)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 bunch_id : 12; // 0..11
      uint32 event_id : 12; // 12..23
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 event_id : 12; // 12..23
      uint32 bunch_id : 12; // 0..11
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(260,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(257,__header.event_id,event_id);
  MATCH_BITS_EQUAL(258,__header.tdc,tdc);
  MATCH_BITS_EQUAL(259,__header.unnamed_27_31,1);
  MATCH_UNNAMED_BITS_ZERO(260,__header.u32,0x04000000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1190_SUBTDC::__match,uint32 tdc
                                                               ,uint32 event_id);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1190_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SUBTDC(tdc,event_id,data)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1190_SUBTDC::__packer(__data_dest_t &__buffer,uint32 tdc
                                                                   ,uint32 event_id
                                                                   ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  void *__mark_tdc_start = __buffer._offset;
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  // several UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }
  // optional UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  // MARK_COUNT(tdc_end);
  void *__mark_tdc_end = __buffer._offset;
  // UINT32 trailer
  // {
    //  0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    // 12_23: event_id = CHECK(header.event_id);
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 3;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SUBTDC::__packer,uint32 tdc
                                                                ,uint32 event_id);

/** END_PACKER ********************************************************/


/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1190.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1190
class VME_CAEN_V1190
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1190
class PACKER_VME_CAEN_V1190
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } header;
  // select several

    // tdc[0] = VME_CAEN_V1190_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[1] = VME_CAEN_V1190_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[2] = VME_CAEN_V1190_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[3] = VME_CAEN_V1190_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   // data=data);
  SINGLE(VME_CAEN_V1190_SUBTDC,tdc[4]);
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 time_tag : 27; // 0..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 time_tag : 27; // 0..26
#endif
    };
    uint32  u32;
  } trigger;
  // MARK_COUNT(v1190_end);
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 word_count : 15; // 5..19
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1; // 24
      uint32 buffer_overflow : 1; // 25
      uint32 trigger_lost : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trigger_lost : 1; // 26
      uint32 buffer_overflow : 1; // 25
      uint32 tdc_error : 1; // 24
      uint32 dummy_20_23 : 4;
      uint32 word_count : 15; // 5..19
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } trailer;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1190);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1190.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190(geom)
template<typename __data_src_t>
void VME_CAEN_V1190::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._data;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  READ_FROM_BUFFER_FULL(155,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(152,header.geom,geom);
  CHECK_BITS_EQUAL(154,header.unnamed_27_31,8);
  // select several

    // tdc[0] = VME_CAEN_V1190_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[1] = VME_CAEN_V1190_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[2] = VME_CAEN_V1190_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[3] = VME_CAEN_V1190_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   // data=data);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: VME_CAEN_V1190_SUBTDC tdc[0]: (s32) => (0xff000000,0x08000000)
    // optimized match 2: VME_CAEN_V1190_SUBTDC tdc[1]: (s32) => (0xff000000,0x09000000)
    // optimized match 3: VME_CAEN_V1190_SUBTDC tdc[2]: (s32) => (0xff000000,0x0a000000)
    // optimized match 4: VME_CAEN_V1190_SUBTDC tdc[3]: (s32) => (0xff000000,0x0b000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(166,uint32,__match_peek);
    // differ = 03000000 : 24 25
    uint32 __match_index = 0 | /* 24,25 */ ((__match_peek >> 24) & 0x00000003);
    static const sint8 __match_index_array[4] = { 1, 2, 3, 4, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 0
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        CHECK_SPURIOUS_MATCH_DECL(159,spurious_match_abort_loop_1,VME_CAEN_V1190_SUBTDC,/*tdc*/0,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(159,VME_CAEN_V1190_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 2:
        CHECK_SPURIOUS_MATCH_DECL(161,spurious_match_abort_loop_1,VME_CAEN_V1190_SUBTDC,/*tdc*/1,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(161,VME_CAEN_V1190_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 3:
        CHECK_SPURIOUS_MATCH_DECL(163,spurious_match_abort_loop_1,VME_CAEN_V1190_SUBTDC,/*tdc*/2,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(163,VME_CAEN_V1190_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 4:
        CHECK_SPURIOUS_MATCH_DECL(165,spurious_match_abort_loop_1,VME_CAEN_V1190_SUBTDC,/*tdc*/3,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(165,VME_CAEN_V1190_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
    }
  }
  spurious_match_abort_loop_1:;
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  READ_FROM_BUFFER_FULL(171,uint32 ,trigger,trigger.u32);
  CHECK_BITS_EQUAL(170,trigger.unnamed_27_31,17);
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._data;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  READ_FROM_BUFFER_FULL(181,uint32 ,trailer,trailer.u32);
  CHECK_BITS_EQUAL(175,trailer.geom,geom);
  CHECK_WORD_COUNT(176,trailer.word_count,v1190_start,v1190_end,4,4);
  CHECK_BITS_EQUAL(180,trailer.unnamed_27_31,16);
  CHECK_UNNAMED_BITS_ZERO(181,trailer.u32,0x00f00000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1190.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190(geom)
template<typename __data_src_t>
bool VME_CAEN_V1190::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(155,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(152,__header.geom,geom);
  MATCH_BITS_EQUAL(154,__header.unnamed_27_31,8);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1190::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1190.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190(geom)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1190::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._offset;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  // select several

    // tdc[0] = VME_CAEN_V1190_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[1] = VME_CAEN_V1190_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[2] = VME_CAEN_V1190_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[3] = VME_CAEN_V1190_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   // data=data);
  {
    PACK_DECL(159,VME_CAEN_V1190_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(161,VME_CAEN_V1190_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(163,VME_CAEN_V1190_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(165,VME_CAEN_V1190_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
  }
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._offset;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V1190_SHORT
//
//
// Generating code for: VME_CAEN_V1190_SHORT_SUBTDC
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1190_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC(tdc,event_id,data)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1190_SHORT_SUBTDC
class VME_CAEN_V1190_SHORT_SUBTDC
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1190_SHORT_SUBTDC
class PACKER_VME_CAEN_V1190_SHORT_SUBTDC
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 tdc,uint32 event_id);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1190_SHORT_SUBTDC);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1190_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
void VME_CAEN_V1190_SHORT_SUBTDC::__unpack(__data_src_t &__buffer,uint32 tdc
                                                                 ,uint32 event_id
                                                                 ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 19; // 0..18
      uint32 channel_low : 5; // 19..23
      uint32 tdc : 2; // 24..25
      uint32 trailing : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trailing : 1; // 26
      uint32 tdc : 2; // 24..25
      uint32 channel_low : 5; // 19..23
      uint32 value : 19; // 0..18
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(237,uint32 ,ch_data,ch_data.u32);
  CHECK_BITS_EQUAL(233,ch_data.tdc,tdc);
  CHECK_BITS_EQUAL(235,ch_data.unnamed_27_31,0);
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(236,((ch_data.tdc << 5) | ch_data.channel_low));
    __item.value = ch_data.value;
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SHORT_SUBTDC::__unpack,uint32 tdc
                                                                      ,uint32 event_id
                                                                      ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1190_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
bool VME_CAEN_V1190_SHORT_SUBTDC::__match(__data_src_t &__buffer,uint32 tdc
                                                                ,uint32 event_id)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 19; // 0..18
      uint32 channel_low : 5; // 19..23
      uint32 tdc : 2; // 24..25
      uint32 trailing : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trailing : 1; // 26
      uint32 tdc : 2; // 24..25
      uint32 channel_low : 5; // 19..23
      uint32 value : 19; // 0..18
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(237,uint32 ,ch_data,ch_data.u32);
  MATCH_BITS_EQUAL(233,ch_data.tdc,tdc);
  MATCH_BITS_EQUAL(235,ch_data.unnamed_27_31,0);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1190_SHORT_SUBTDC::__match,uint32 tdc
                                                                     ,uint32 event_id);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1190_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC(tdc,event_id,data)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1190_SHORT_SUBTDC::__packer(__data_dest_t &__buffer,uint32 tdc
                                                                         ,uint32 event_id
                                                                         ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SHORT_SUBTDC::__packer,uint32 tdc
                                                                      ,uint32 event_id);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V1190_SHORT_SUBTDC_ERROR
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1190_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1190_SHORT_SUBTDC_ERROR
class VME_CAEN_V1190_SHORT_SUBTDC_ERROR
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1190_SHORT_SUBTDC_ERROR
class PACKER_VME_CAEN_V1190_SHORT_SUBTDC_ERROR
#endif//PACKER_CODE

{
public:
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } error_flags;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 tdc);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 tdc);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 tdc);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1190_SHORT_SUBTDC_ERROR);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1190_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc)
template<typename __data_src_t>
void VME_CAEN_V1190_SHORT_SUBTDC_ERROR::__unpack(__data_src_t &__buffer,uint32 tdc)
{
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  READ_FROM_BUFFER_FULL(247,uint32 ,error_flags,error_flags.u32);
  CHECK_BITS_EQUAL(245,error_flags.tdc,tdc);
  CHECK_BITS_EQUAL(246,error_flags.unnamed_27_31,4);
  CHECK_UNNAMED_BITS_ZERO(247,error_flags.u32,0x04ff8000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SHORT_SUBTDC_ERROR::__unpack,uint32 tdc);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1190_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc)
template<typename __data_src_t>
bool VME_CAEN_V1190_SHORT_SUBTDC_ERROR::__match(__data_src_t &__buffer,uint32 tdc)
{
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } __error_flags;
  READ_FROM_BUFFER_FULL(247,uint32 ,error_flags,__error_flags.u32);
  MATCH_BITS_EQUAL(245,__error_flags.tdc,tdc);
  MATCH_BITS_EQUAL(246,__error_flags.unnamed_27_31,4);
  MATCH_UNNAMED_BITS_ZERO(247,__error_flags.u32,0x04ff8000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1190_SHORT_SUBTDC_ERROR::__match,uint32 tdc);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1190_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1190_SHORT_SUBTDC_ERROR::__packer(__data_dest_t &__buffer,uint32 tdc)
{
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SHORT_SUBTDC_ERROR::__packer,uint32 tdc);

/** END_PACKER ********************************************************/


/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1190_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1190_SHORT
class VME_CAEN_V1190_SHORT
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1190_SHORT
class PACKER_VME_CAEN_V1190_SHORT
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } header;
  // select several

    // tdc[0] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[1] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[2] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[3] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // norevisit err[0] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=0);
    // norevisit err[1] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=1);
    // norevisit err[2] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=2);
    // norevisit err[3] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=3);
  SINGLE(VME_CAEN_V1190_SHORT_SUBTDC,tdc[4]);
  SINGLE(VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[4]);
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 time_tag : 27; // 0..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 time_tag : 27; // 0..26
#endif
    };
    uint32  u32;
  } trigger;
  // MARK_COUNT(v1190_end);
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 word_count : 15; // 5..19
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1; // 24
      uint32 buffer_overflow : 1; // 25
      uint32 trigger_lost : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trigger_lost : 1; // 26
      uint32 buffer_overflow : 1; // 25
      uint32 tdc_error : 1; // 24
      uint32 dummy_20_23 : 4;
      uint32 word_count : 15; // 5..19
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } trailer;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1190_SHORT);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1190_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT(geom)
template<typename __data_src_t>
void VME_CAEN_V1190_SHORT::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._data;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  READ_FROM_BUFFER_FULL(193,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(190,header.geom,geom);
  CHECK_BITS_EQUAL(192,header.unnamed_27_31,8);
  // select several

    // tdc[0] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[1] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[2] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[3] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // norevisit err[0] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=0);
    // norevisit err[1] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=1);
    // norevisit err[2] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=2);
    // norevisit err[3] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=3);
  bitsone<4> __visited1;
  __visited1.clear();
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: VME_CAEN_V1190_SHORT_SUBTDC tdc[0]: (s32) => (0xfb000000,0x00000000)
    // optimized match 2: VME_CAEN_V1190_SHORT_SUBTDC tdc[1]: (s32) => (0xfb000000,0x01000000)
    // optimized match 3: VME_CAEN_V1190_SHORT_SUBTDC tdc[2]: (s32) => (0xfb000000,0x02000000)
    // optimized match 4: VME_CAEN_V1190_SHORT_SUBTDC tdc[3]: (s32) => (0xfb000000,0x03000000)
    // optimized match 5: VME_CAEN_V1190_SHORT_SUBTDC_ERROR err[0]: (s32) => (0xffff8000,0x20000000)
    // optimized match 6: VME_CAEN_V1190_SHORT_SUBTDC_ERROR err[1]: (s32) => (0xffff8000,0x21000000)
    // optimized match 7: VME_CAEN_V1190_SHORT_SUBTDC_ERROR err[2]: (s32) => (0xffff8000,0x22000000)
    // optimized match 8: VME_CAEN_V1190_SHORT_SUBTDC_ERROR err[3]: (s32) => (0xffff8000,0x23000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(208,uint32,__match_peek);
    // differ = 23000000 : 24 25 29
    uint32 __match_index = 0 | /* 24,25 */ ((__match_peek >> 24) & 0x00000003) | /* 29,29 */ ((__match_peek >> 27) & 0x00000004);
    static const sint8 __match_index_array[8] = { 1, 2, 3, 4, 5, 6, 7, 8, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 0
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        CHECK_SPURIOUS_MATCH_DECL(197,spurious_match_abort_loop_2,VME_CAEN_V1190_SHORT_SUBTDC,/*tdc*/0,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(197,VME_CAEN_V1190_SHORT_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 2:
        CHECK_SPURIOUS_MATCH_DECL(199,spurious_match_abort_loop_2,VME_CAEN_V1190_SHORT_SUBTDC,/*tdc*/1,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(199,VME_CAEN_V1190_SHORT_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 3:
        CHECK_SPURIOUS_MATCH_DECL(201,spurious_match_abort_loop_2,VME_CAEN_V1190_SHORT_SUBTDC,/*tdc*/2,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(201,VME_CAEN_V1190_SHORT_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 4:
        CHECK_SPURIOUS_MATCH_DECL(203,spurious_match_abort_loop_2,VME_CAEN_V1190_SHORT_SUBTDC,/*tdc*/3,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(203,VME_CAEN_V1190_SHORT_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 5:
        CHECK_SPURIOUS_MATCH_DECL(204,spurious_match_abort_loop_2,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,/*tdc*/0);
        UNPACK_CHECK_NO_REVISIT(204,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[0],__visited1,0);
        UNPACK_DECL(204,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[0],/*tdc*/0);
        break;
      case 6:
        CHECK_SPURIOUS_MATCH_DECL(205,spurious_match_abort_loop_2,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,/*tdc*/1);
        UNPACK_CHECK_NO_REVISIT(205,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[1],__visited1,1);
        UNPACK_DECL(205,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[1],/*tdc*/1);
        break;
      case 7:
        CHECK_SPURIOUS_MATCH_DECL(206,spurious_match_abort_loop_2,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,/*tdc*/2);
        UNPACK_CHECK_NO_REVISIT(206,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[2],__visited1,2);
        UNPACK_DECL(206,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[2],/*tdc*/2);
        break;
      case 8:
        CHECK_SPURIOUS_MATCH_DECL(207,spurious_match_abort_loop_2,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,/*tdc*/3);
        UNPACK_CHECK_NO_REVISIT(207,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[3],__visited1,3);
        UNPACK_DECL(207,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[3],/*tdc*/3);
        break;
    }
  }
  spurious_match_abort_loop_2:;
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  READ_FROM_BUFFER_FULL(213,uint32 ,trigger,trigger.u32);
  CHECK_BITS_EQUAL(212,trigger.unnamed_27_31,17);
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._data;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  READ_FROM_BUFFER_FULL(223,uint32 ,trailer,trailer.u32);
  CHECK_BITS_EQUAL(217,trailer.geom,geom);
  CHECK_WORD_COUNT(218,trailer.word_count,v1190_start,v1190_end,4,4);
  CHECK_BITS_EQUAL(222,trailer.unnamed_27_31,16);
  CHECK_UNNAMED_BITS_ZERO(223,trailer.u32,0x00f00000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SHORT::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1190_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT(geom)
template<typename __data_src_t>
bool VME_CAEN_V1190_SHORT::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(193,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(190,__header.geom,geom);
  MATCH_BITS_EQUAL(192,__header.unnamed_27_31,8);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1190_SHORT::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1190_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT(geom)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1190_SHORT::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._offset;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  // select several

    // tdc[0] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[1] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[2] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[3] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // norevisit err[0] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=0);
    // norevisit err[1] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=1);
    // norevisit err[2] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=2);
    // norevisit err[3] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=3);
  {
    PACK_DECL(197,VME_CAEN_V1190_SHORT_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(199,VME_CAEN_V1190_SHORT_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(201,VME_CAEN_V1190_SHORT_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(203,VME_CAEN_V1190_SHORT_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(204,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[0],/*tdc*/0);
    PACK_DECL(205,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[1],/*tdc*/1);
    PACK_DECL(206,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[2],/*tdc*/2);
    PACK_DECL(207,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[3],/*tdc*/3);
  }
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._offset;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SHORT::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V1290
//
//
// Generating code for: VME_CAEN_V1290_SUBTDC
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1290_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SUBTDC(tdc,event_id,data)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1290_SUBTDC
class VME_CAEN_V1290_SUBTDC
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1290_SUBTDC
class PACKER_VME_CAEN_V1290_SUBTDC
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 bunch_id : 12; // 0..11
      uint32 event_id : 12; // 12..23
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 event_id : 12; // 12..23
      uint32 bunch_id : 12; // 0..11
#endif
    };
    uint32  u32;
  } header;
  // several UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }
  // optional UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } error_flags;
  // MARK_COUNT(tdc_end);
  // UINT32 trailer
  // {
    //  0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    // 12_23: event_id = CHECK(header.event_id);
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 3;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_count : 12; // 0..11
      uint32 event_id : 12; // 12..23
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 event_id : 12; // 12..23
      uint32 word_count : 12; // 0..11
#endif
    };
    uint32  u32;
  } trailer;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 tdc,uint32 event_id);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1290_SUBTDC);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1290_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
void VME_CAEN_V1290_SUBTDC::__unpack(__data_src_t &__buffer,uint32 tdc,uint32 event_id
                                                           ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  void *__mark_tdc_start = __buffer._data;
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  READ_FROM_BUFFER_FULL(400,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(397,header.event_id,event_id);
  CHECK_BITS_EQUAL(398,header.tdc,tdc);
  CHECK_BITS_EQUAL(399,header.unnamed_27_31,1);
  CHECK_UNNAMED_BITS_ZERO(400,header.u32,0x04000000);
  // several UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }
  for ( ; ; ) {
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 21; // 0..20
      uint32 channel_low : 3; // 21..23
      uint32 tdc : 2; // 24..25
      uint32 trailing : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trailing : 1; // 26
      uint32 tdc : 2; // 24..25
      uint32 channel_low : 3; // 21..23
      uint32 value : 21; // 0..20
#endif
    };
    uint32  u32;
  } ch_data;
  if (__buffer.empty()) goto data_done_2;
  PEEK_FROM_BUFFER_FULL(409,uint32 ,ch_data,ch_data.u32);
  CHECK_JUMP_BITS_EQUAL(405,ch_data.tdc,tdc,data_done_2);
  CHECK_JUMP_BITS_EQUAL(407,ch_data.unnamed_27_31,0,data_done_2);
  __buffer.advance(sizeof(ch_data.u32));
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(408,((ch_data.tdc << 3) | ch_data.channel_low));
    __item.value = ch_data.value;
  }
  }
  data_done_2:;
  // optional UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } __error_flags;
  if (__buffer.empty()) goto data_done_3;
  PEEK_FROM_BUFFER_FULL(415,uint32 ,error_flags,__error_flags.u32);
  CHECK_JUMP_BITS_EQUAL(413,__error_flags.tdc,tdc,data_done_3);
  CHECK_JUMP_BITS_EQUAL(414,__error_flags.unnamed_27_31,4,data_done_3);
  CHECK_JUMP_UNNAMED_BITS_ZERO(415,__error_flags.u32,0x04ff8000,data_done_3);
  error_flags.u32 = __error_flags.u32;
  __buffer.advance(sizeof(__error_flags.u32));
  data_done_3:;
  // MARK_COUNT(tdc_end);
  void *__mark_tdc_end = __buffer._data;
  // UINT32 trailer
  // {
    //  0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    // 12_23: event_id = CHECK(header.event_id);
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 3;
  // }
  READ_FROM_BUFFER_FULL(423,uint32 ,trailer,trailer.u32);
  CHECK_WORD_COUNT(419,trailer.word_count,tdc_start,tdc_end,4,4);
  CHECK_BITS_EQUAL(420,trailer.event_id,header.event_id);
  CHECK_BITS_EQUAL(421,trailer.tdc,tdc);
  CHECK_BITS_EQUAL(422,trailer.unnamed_27_31,3);
  CHECK_UNNAMED_BITS_ZERO(423,trailer.u32,0x04000000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SUBTDC::__unpack,uint32 tdc
                                                                ,uint32 event_id
                                                                ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1290_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
bool VME_CAEN_V1290_SUBTDC::__match(__data_src_t &__buffer,uint32 tdc,uint32 event_id)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 bunch_id : 12; // 0..11
      uint32 event_id : 12; // 12..23
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 event_id : 12; // 12..23
      uint32 bunch_id : 12; // 0..11
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(400,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(397,__header.event_id,event_id);
  MATCH_BITS_EQUAL(398,__header.tdc,tdc);
  MATCH_BITS_EQUAL(399,__header.unnamed_27_31,1);
  MATCH_UNNAMED_BITS_ZERO(400,__header.u32,0x04000000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1290_SUBTDC::__match,uint32 tdc
                                                               ,uint32 event_id);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1290_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SUBTDC(tdc,event_id,data)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1290_SUBTDC::__packer(__data_dest_t &__buffer,uint32 tdc
                                                                   ,uint32 event_id
                                                                   ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  void *__mark_tdc_start = __buffer._offset;
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  // several UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }
  // optional UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  // MARK_COUNT(tdc_end);
  void *__mark_tdc_end = __buffer._offset;
  // UINT32 trailer
  // {
    //  0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    // 12_23: event_id = CHECK(header.event_id);
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 3;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SUBTDC::__packer,uint32 tdc
                                                                ,uint32 event_id);

/** END_PACKER ********************************************************/


/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1290.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1290
class VME_CAEN_V1290
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1290
class PACKER_VME_CAEN_V1290
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } header;
  // select several

    // tdc[0] = VME_CAEN_V1290_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[1] = VME_CAEN_V1290_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[2] = VME_CAEN_V1290_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[3] = VME_CAEN_V1290_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   // data=data);
  SINGLE(VME_CAEN_V1290_SUBTDC,tdc[4]);
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 time_tag : 27; // 0..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 time_tag : 27; // 0..26
#endif
    };
    uint32  u32;
  } trigger;
  // MARK_COUNT(v1190_end);
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 word_count : 15; // 5..19
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1; // 24
      uint32 buffer_overflow : 1; // 25
      uint32 trigger_lost : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trigger_lost : 1; // 26
      uint32 buffer_overflow : 1; // 25
      uint32 tdc_error : 1; // 24
      uint32 dummy_20_23 : 4;
      uint32 word_count : 15; // 5..19
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } trailer;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1290);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1290.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290(geom)
template<typename __data_src_t>
void VME_CAEN_V1290::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._data;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  READ_FROM_BUFFER_FULL(295,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(292,header.geom,geom);
  CHECK_BITS_EQUAL(294,header.unnamed_27_31,8);
  // select several

    // tdc[0] = VME_CAEN_V1290_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[1] = VME_CAEN_V1290_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[2] = VME_CAEN_V1290_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[3] = VME_CAEN_V1290_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   // data=data);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: VME_CAEN_V1290_SUBTDC tdc[0]: (s32) => (0xff000000,0x08000000)
    // optimized match 2: VME_CAEN_V1290_SUBTDC tdc[1]: (s32) => (0xff000000,0x09000000)
    // optimized match 3: VME_CAEN_V1290_SUBTDC tdc[2]: (s32) => (0xff000000,0x0a000000)
    // optimized match 4: VME_CAEN_V1290_SUBTDC tdc[3]: (s32) => (0xff000000,0x0b000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(306,uint32,__match_peek);
    // differ = 03000000 : 24 25
    uint32 __match_index = 0 | /* 24,25 */ ((__match_peek >> 24) & 0x00000003);
    static const sint8 __match_index_array[4] = { 1, 2, 3, 4, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 0
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        CHECK_SPURIOUS_MATCH_DECL(299,spurious_match_abort_loop_3,VME_CAEN_V1290_SUBTDC,/*tdc*/0,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(299,VME_CAEN_V1290_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 2:
        CHECK_SPURIOUS_MATCH_DECL(301,spurious_match_abort_loop_3,VME_CAEN_V1290_SUBTDC,/*tdc*/1,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(301,VME_CAEN_V1290_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 3:
        CHECK_SPURIOUS_MATCH_DECL(303,spurious_match_abort_loop_3,VME_CAEN_V1290_SUBTDC,/*tdc*/2,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(303,VME_CAEN_V1290_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 4:
        CHECK_SPURIOUS_MATCH_DECL(305,spurious_match_abort_loop_3,VME_CAEN_V1290_SUBTDC,/*tdc*/3,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(305,VME_CAEN_V1290_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
    }
  }
  spurious_match_abort_loop_3:;
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  READ_FROM_BUFFER_FULL(311,uint32 ,trigger,trigger.u32);
  CHECK_BITS_EQUAL(310,trigger.unnamed_27_31,17);
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._data;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  READ_FROM_BUFFER_FULL(321,uint32 ,trailer,trailer.u32);
  CHECK_BITS_EQUAL(315,trailer.geom,geom);
  CHECK_WORD_COUNT(316,trailer.word_count,v1190_start,v1190_end,4,4);
  CHECK_BITS_EQUAL(320,trailer.unnamed_27_31,16);
  CHECK_UNNAMED_BITS_ZERO(321,trailer.u32,0x00f00000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1290.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290(geom)
template<typename __data_src_t>
bool VME_CAEN_V1290::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(295,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(292,__header.geom,geom);
  MATCH_BITS_EQUAL(294,__header.unnamed_27_31,8);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1290::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1290.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290(geom)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1290::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._offset;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  // select several

    // tdc[0] = VME_CAEN_V1290_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[1] = VME_CAEN_V1290_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[2] = VME_CAEN_V1290_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[3] = VME_CAEN_V1290_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   // data=data);
  {
    PACK_DECL(299,VME_CAEN_V1290_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(301,VME_CAEN_V1290_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(303,VME_CAEN_V1290_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(305,VME_CAEN_V1290_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
  }
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._offset;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V1290_SHORT
//
//
// Generating code for: VME_CAEN_V1290_SHORT_SUBTDC
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1290_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC(tdc,event_id,data)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1290_SHORT_SUBTDC
class VME_CAEN_V1290_SHORT_SUBTDC
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1290_SHORT_SUBTDC
class PACKER_VME_CAEN_V1290_SHORT_SUBTDC
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 tdc,uint32 event_id);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1290_SHORT_SUBTDC);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1290_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
void VME_CAEN_V1290_SHORT_SUBTDC::__unpack(__data_src_t &__buffer,uint32 tdc
                                                                 ,uint32 event_id
                                                                 ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 21; // 0..20
      uint32 channel_low : 3; // 21..23
      uint32 tdc : 2; // 24..25
      uint32 trailing : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trailing : 1; // 26
      uint32 tdc : 2; // 24..25
      uint32 channel_low : 3; // 21..23
      uint32 value : 21; // 0..20
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(377,uint32 ,ch_data,ch_data.u32);
  CHECK_BITS_EQUAL(373,ch_data.tdc,tdc);
  CHECK_BITS_EQUAL(375,ch_data.unnamed_27_31,0);
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(376,((ch_data.tdc << 3) | ch_data.channel_low));
    __item.value = ch_data.value;
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SHORT_SUBTDC::__unpack,uint32 tdc
                                                                      ,uint32 event_id
                                                                      ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1290_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
bool VME_CAEN_V1290_SHORT_SUBTDC::__match(__data_src_t &__buffer,uint32 tdc
                                                                ,uint32 event_id)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 21; // 0..20
      uint32 channel_low : 3; // 21..23
      uint32 tdc : 2; // 24..25
      uint32 trailing : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trailing : 1; // 26
      uint32 tdc : 2; // 24..25
      uint32 channel_low : 3; // 21..23
      uint32 value : 21; // 0..20
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(377,uint32 ,ch_data,ch_data.u32);
  MATCH_BITS_EQUAL(373,ch_data.tdc,tdc);
  MATCH_BITS_EQUAL(375,ch_data.unnamed_27_31,0);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1290_SHORT_SUBTDC::__match,uint32 tdc
                                                                     ,uint32 event_id);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1290_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC(tdc,event_id,data)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1290_SHORT_SUBTDC::__packer(__data_dest_t &__buffer,uint32 tdc
                                                                         ,uint32 event_id
                                                                         ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SHORT_SUBTDC::__packer,uint32 tdc
                                                                      ,uint32 event_id);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V1290_SHORT_SUBTDC_ERROR
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1290_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1290_SHORT_SUBTDC_ERROR
class VME_CAEN_V1290_SHORT_SUBTDC_ERROR
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1290_SHORT_SUBTDC_ERROR
class PACKER_VME_CAEN_V1290_SHORT_SUBTDC_ERROR
#endif//PACKER_CODE

{
public:
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } error_flags;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 tdc);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 tdc);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 tdc);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1290_SHORT_SUBTDC_ERROR);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1290_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc)
template<typename __data_src_t>
void VME_CAEN_V1290_SHORT_SUBTDC_ERROR::__unpack(__data_src_t &__buffer,uint32 tdc)
{
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  READ_FROM_BUFFER_FULL(387,uint32 ,error_flags,error_flags.u32);
  CHECK_BITS_EQUAL(385,error_flags.tdc,tdc);
  CHECK_BITS_EQUAL(386,error_flags.unnamed_27_31,4);
  CHECK_UNNAMED_BITS_ZERO(387,error_flags.u32,0x04ff8000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SHORT_SUBTDC_ERROR::__unpack,uint32 tdc);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1290_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc)
template<typename __data_src_t>
bool VME_CAEN_V1290_SHORT_SUBTDC_ERROR::__match(__data_src_t &__buffer,uint32 tdc)
{
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } __error_flags;
  READ_FROM_BUFFER_FULL(387,uint32 ,error_flags,__error_flags.u32);
  MATCH_BITS_EQUAL(385,__error_flags.tdc,tdc);
  MATCH_BITS_EQUAL(386,__error_flags.unnamed_27_31,4);
  MATCH_UNNAMED_BITS_ZERO(387,__error_flags.u32,0x04ff8000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1290_SHORT_SUBTDC_ERROR::__match,uint32 tdc);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1290_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1290_SHORT_SUBTDC_ERROR::__packer(__data_dest_t &__buffer,uint32 tdc)
{
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SHORT_SUBTDC_ERROR::__packer,uint32 tdc);

/** END_PACKER ********************************************************/


/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1290_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1290_SHORT
class VME_CAEN_V1290_SHORT
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1290_SHORT
class PACKER_VME_CAEN_V1290_SHORT
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } header;
  // select several

    // tdc[0] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[1] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[2] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[3] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // norevisit err[0] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=0);
    // norevisit err[1] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=1);
    // norevisit err[2] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=2);
    // norevisit err[3] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=3);
  SINGLE(VME_CAEN_V1290_SHORT_SUBTDC,tdc[4]);
  SINGLE(VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[4]);
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 time_tag : 27; // 0..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 time_tag : 27; // 0..26
#endif
    };
    uint32  u32;
  } trigger;
  // MARK_COUNT(v1190_end);
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 word_count : 15; // 5..19
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1; // 24
      uint32 buffer_overflow : 1; // 25
      uint32 trigger_lost : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trigger_lost : 1; // 26
      uint32 buffer_overflow : 1; // 25
      uint32 tdc_error : 1; // 24
      uint32 dummy_20_23 : 4;
      uint32 word_count : 15; // 5..19
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } trailer;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1290_SHORT);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1290_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT(geom)
template<typename __data_src_t>
void VME_CAEN_V1290_SHORT::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._data;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  READ_FROM_BUFFER_FULL(333,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(330,header.geom,geom);
  CHECK_BITS_EQUAL(332,header.unnamed_27_31,8);
  // select several

    // tdc[0] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[1] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[2] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[3] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // norevisit err[0] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=0);
    // norevisit err[1] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=1);
    // norevisit err[2] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=2);
    // norevisit err[3] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=3);
  bitsone<4> __visited2;
  __visited2.clear();
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: VME_CAEN_V1290_SHORT_SUBTDC tdc[0]: (s32) => (0xfb000000,0x00000000)
    // optimized match 2: VME_CAEN_V1290_SHORT_SUBTDC tdc[1]: (s32) => (0xfb000000,0x01000000)
    // optimized match 3: VME_CAEN_V1290_SHORT_SUBTDC tdc[2]: (s32) => (0xfb000000,0x02000000)
    // optimized match 4: VME_CAEN_V1290_SHORT_SUBTDC tdc[3]: (s32) => (0xfb000000,0x03000000)
    // optimized match 5: VME_CAEN_V1290_SHORT_SUBTDC_ERROR err[0]: (s32) => (0xffff8000,0x20000000)
    // optimized match 6: VME_CAEN_V1290_SHORT_SUBTDC_ERROR err[1]: (s32) => (0xffff8000,0x21000000)
    // optimized match 7: VME_CAEN_V1290_SHORT_SUBTDC_ERROR err[2]: (s32) => (0xffff8000,0x22000000)
    // optimized match 8: VME_CAEN_V1290_SHORT_SUBTDC_ERROR err[3]: (s32) => (0xffff8000,0x23000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(348,uint32,__match_peek);
    // differ = 23000000 : 24 25 29
    uint32 __match_index = 0 | /* 24,25 */ ((__match_peek >> 24) & 0x00000003) | /* 29,29 */ ((__match_peek >> 27) & 0x00000004);
    static const sint8 __match_index_array[8] = { 1, 2, 3, 4, 5, 6, 7, 8, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 0
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        CHECK_SPURIOUS_MATCH_DECL(337,spurious_match_abort_loop_4,VME_CAEN_V1290_SHORT_SUBTDC,/*tdc*/0,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(337,VME_CAEN_V1290_SHORT_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 2:
        CHECK_SPURIOUS_MATCH_DECL(339,spurious_match_abort_loop_4,VME_CAEN_V1290_SHORT_SUBTDC,/*tdc*/1,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(339,VME_CAEN_V1290_SHORT_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 3:
        CHECK_SPURIOUS_MATCH_DECL(341,spurious_match_abort_loop_4,VME_CAEN_V1290_SHORT_SUBTDC,/*tdc*/2,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(341,VME_CAEN_V1290_SHORT_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 4:
        CHECK_SPURIOUS_MATCH_DECL(343,spurious_match_abort_loop_4,VME_CAEN_V1290_SHORT_SUBTDC,/*tdc*/3,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(343,VME_CAEN_V1290_SHORT_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 5:
        CHECK_SPURIOUS_MATCH_DECL(344,spurious_match_abort_loop_4,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,/*tdc*/0);
        UNPACK_CHECK_NO_REVISIT(344,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[0],__visited2,0);
        UNPACK_DECL(344,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[0],/*tdc*/0);
        break;
      case 6:
        CHECK_SPURIOUS_MATCH_DECL(345,spurious_match_abort_loop_4,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,/*tdc*/1);
        UNPACK_CHECK_NO_REVISIT(345,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[1],__visited2,1);
        UNPACK_DECL(345,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[1],/*tdc*/1);
        break;
      case 7:
        CHECK_SPURIOUS_MATCH_DECL(346,spurious_match_abort_loop_4,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,/*tdc*/2);
        UNPACK_CHECK_NO_REVISIT(346,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[2],__visited2,2);
        UNPACK_DECL(346,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[2],/*tdc*/2);
        break;
      case 8:
        CHECK_SPURIOUS_MATCH_DECL(347,spurious_match_abort_loop_4,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,/*tdc*/3);
        UNPACK_CHECK_NO_REVISIT(347,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[3],__visited2,3);
        UNPACK_DECL(347,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[3],/*tdc*/3);
        break;
    }
  }
  spurious_match_abort_loop_4:;
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  READ_FROM_BUFFER_FULL(353,uint32 ,trigger,trigger.u32);
  CHECK_BITS_EQUAL(352,trigger.unnamed_27_31,17);
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._data;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  READ_FROM_BUFFER_FULL(363,uint32 ,trailer,trailer.u32);
  CHECK_BITS_EQUAL(357,trailer.geom,geom);
  CHECK_WORD_COUNT(358,trailer.word_count,v1190_start,v1190_end,4,4);
  CHECK_BITS_EQUAL(362,trailer.unnamed_27_31,16);
  CHECK_UNNAMED_BITS_ZERO(363,trailer.u32,0x00f00000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SHORT::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1290_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT(geom)
template<typename __data_src_t>
bool VME_CAEN_V1290_SHORT::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(333,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(330,__header.geom,geom);
  MATCH_BITS_EQUAL(332,__header.unnamed_27_31,8);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1290_SHORT::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1290_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT(geom)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1290_SHORT::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._offset;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  // select several

    // tdc[0] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[1] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[2] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[3] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // norevisit err[0] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=0);
    // norevisit err[1] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=1);
    // norevisit err[2] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=2);
    // norevisit err[3] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=3);
  {
    PACK_DECL(337,VME_CAEN_V1290_SHORT_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(339,VME_CAEN_V1290_SHORT_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(341,VME_CAEN_V1290_SHORT_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(343,VME_CAEN_V1290_SHORT_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(344,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[0],/*tdc*/0);
    PACK_DECL(345,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[1],/*tdc*/1);
    PACK_DECL(346,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[2],/*tdc*/2);
    PACK_DECL(347,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[3],/*tdc*/3);
  }
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._offset;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SHORT::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V830
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V830.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V830(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V830
class VME_CAEN_V830
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V830
class PACKER_VME_CAEN_V830
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA32,DATA32,32> data;
  // UINT32 header
  // {
    //  0_15: event_number;
    // 16_17: ts;
    // 18_23: count;
    //    26: 1;
    // 27_31: geom = MATCH(geom);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 event_number : 16; // 0..15
      uint32 ts : 2; // 16..17
      uint32 count : 6; // 18..23
      uint32 dummy_24_25 : 2;
      uint32 unnamed_26_26 : 1; // 26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 unnamed_26_26 : 1; // 26
      uint32 dummy_24_25 : 2;
      uint32 count : 6; // 18..23
      uint32 ts : 2; // 16..17
      uint32 event_number : 16; // 0..15
#endif
    };
    uint32  u32;
  } header;
  // list(0<=index<header.count)

    // UINT32 ch_data NOENCODE
    // {
      //  0_25: value;
      //    26: 0;
      // 27_31: channel;
      // ENCODE(data[channel],(value=value));
    // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V830);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V830.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V830(geom)
template<typename __data_src_t>
void VME_CAEN_V830::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  // UINT32 header
  // {
    //  0_15: event_number;
    // 16_17: ts;
    // 18_23: count;
    //    26: 1;
    // 27_31: geom = MATCH(geom);
  // }
  READ_FROM_BUFFER_FULL(468,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(466,header.unnamed_26_26,1);
  CHECK_BITS_EQUAL(467,header.geom,geom);
  CHECK_UNNAMED_BITS_ZERO(468,header.u32,0x03000000);
  // list(0<=index<header.count)

  for (uint32 index = 0; index < (uint32) (header.count); ++index)
  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_25: value;
      //    26: 0;
      // 27_31: channel;
      // ENCODE(data[channel],(value=value));
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 value : 26; // 0..25
        uint32 unnamed_26_26 : 1; // 26
        uint32 channel : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 channel : 5; // 27..31
        uint32 unnamed_26_26 : 1; // 26
        uint32 value : 26; // 0..25
#endif
      };
      uint32  u32;
    } ch_data;
    READ_FROM_BUFFER_FULL(477,uint32 ,ch_data,ch_data.u32);
    CHECK_BITS_EQUAL(474,ch_data.unnamed_26_26,0);
    {
      typedef __typeof__(*(&(data))) __array_t;
      typedef typename __array_t::item_t __item_t;
      __item_t &__item = data.insert_index(476,ch_data.channel);
      __item.value = ch_data.value;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V830::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V830.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V830(geom)
template<typename __data_src_t>
bool VME_CAEN_V830::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  // UINT32 header
  // {
    //  0_15: event_number;
    // 16_17: ts;
    // 18_23: count;
    //    26: 1;
    // 27_31: geom = MATCH(geom);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 event_number : 16; // 0..15
      uint32 ts : 2; // 16..17
      uint32 count : 6; // 18..23
      uint32 dummy_24_25 : 2;
      uint32 unnamed_26_26 : 1; // 26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 unnamed_26_26 : 1; // 26
      uint32 dummy_24_25 : 2;
      uint32 count : 6; // 18..23
      uint32 ts : 2; // 16..17
      uint32 event_number : 16; // 0..15
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(468,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(466,__header.unnamed_26_26,1);
  MATCH_BITS_EQUAL(467,__header.geom,geom);
  MATCH_UNNAMED_BITS_ZERO(468,__header.u32,0x03000000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V830::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V830.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V830(geom)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V830::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  // UINT32 header
  // {
    //  0_15: event_number;
    // 16_17: ts;
    // 18_23: count;
    //    26: 1;
    // 27_31: geom = MATCH(geom);
  // }
  // list(0<=index<header.count)

  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_25: value;
      //    26: 0;
      // 27_31: channel;
      // ENCODE(data[channel],(value=value));
    // }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V830::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_MESYTEC_MADC32
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_MESYTEC_MADC32.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MADC32(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_MESYTEC_MADC32
class VME_MESYTEC_MADC32
#else//PACKER_CODE
# define DECLARED_PACKER_VME_MESYTEC_MADC32
class PACKER_VME_MESYTEC_MADC32
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA14_OVERFLOW data[32] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA14_OVERFLOW,DATA14_OVERFLOW,32> data;
  // MARK_COUNT(start);
  // UINT32 header NOENCODE
  // {
    //  0_11: word_number;
    // 12_14: adc_resol;
    //    15: out_form;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  // several UINT32 ch_data NOENCODE
  // {
    //  0_12: value;
    //    14: outofrange;
    // 16_20: channel;
    // 21_29: 32;
    // 30_31: 0;
    // ENCODE(data[channel],(value=value,overflow=outofrange));
  // }
  // optional UINT32 filler NOENCODE
  // {
    //  0_31: 0;
  // }
  // UINT32 end_of_event
  // {
    //  0_29: counter;
    // 30_31: 3;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 counter : 30; // 0..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 counter : 30; // 0..29
#endif
    };
    uint32  u32;
  } end_of_event;
  // MARK_COUNT(end);
  // CHECK_COUNT(header.word_number,start,end,( - 4),4)

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_MESYTEC_MADC32);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_MESYTEC_MADC32.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MADC32(geom)
template<typename __data_src_t>
void VME_MESYTEC_MADC32::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA14_OVERFLOW data[32] ZERO_SUPPRESS);
  // MARK_COUNT(start);
  void *__mark_start = __buffer._data;
  // UINT32 header NOENCODE
  // {
    //  0_11: word_number;
    // 12_14: adc_resol;
    //    15: out_form;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_number : 12; // 0..11
      uint32 adc_resol : 3; // 12..14
      uint32 out_form : 1; // 15
      uint32 geom : 8; // 16..23
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 geom : 8; // 16..23
      uint32 out_form : 1; // 15
      uint32 adc_resol : 3; // 12..14
      uint32 word_number : 12; // 0..11
#endif
    };
    uint32  u32;
  } header;
  READ_FROM_BUFFER_FULL(493,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(490,header.geom,geom);
  CHECK_BITS_EQUAL(491,header.unnamed_24_29,0);
  CHECK_BITS_EQUAL(492,header.unnamed_30_31,1);
  // several UINT32 ch_data NOENCODE
  // {
    //  0_12: value;
    //    14: outofrange;
    // 16_20: channel;
    // 21_29: 32;
    // 30_31: 0;
    // ENCODE(data[channel],(value=value,overflow=outofrange));
  // }
  for ( ; ; ) {
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 13; // 0..12
      uint32 dummy_13 : 1;
      uint32 outofrange : 1; // 14
      uint32 dummy_15 : 1;
      uint32 channel : 5; // 16..20
      uint32 unnamed_21_29 : 9; // 21..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 unnamed_21_29 : 9; // 21..29
      uint32 channel : 5; // 16..20
      uint32 dummy_15 : 1;
      uint32 outofrange : 1; // 14
      uint32 dummy_13 : 1;
      uint32 value : 13; // 0..12
#endif
    };
    uint32  u32;
  } ch_data;
  if (__buffer.empty()) goto data_done_4;
  PEEK_FROM_BUFFER_FULL(502,uint32 ,ch_data,ch_data.u32);
  CHECK_JUMP_BITS_EQUAL(499,ch_data.unnamed_21_29,32,data_done_4);
  CHECK_JUMP_BITS_EQUAL(500,ch_data.unnamed_30_31,0,data_done_4);
  CHECK_JUMP_UNNAMED_BITS_ZERO(502,ch_data.u32,0x0000a000,data_done_4);
  __buffer.advance(sizeof(ch_data.u32));
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(501,ch_data.channel);
    __item.value = ch_data.value;
    __item.overflow = ch_data.outofrange;
  }
  }
  data_done_4:;
  // optional UINT32 filler NOENCODE
  // {
    //  0_31: 0;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 unnamed_0_31 : 32; // 0..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_0_31 : 32; // 0..31
#endif
    };
    uint32  u32;
  } filler;
  if (__buffer.empty()) goto data_done_5;
  PEEK_FROM_BUFFER_FULL(506,uint32 ,filler,filler.u32);
  CHECK_JUMP_BITS_EQUAL(505,filler.unnamed_0_31,0,data_done_5);
  __buffer.advance(sizeof(filler.u32));
  data_done_5:;
  // UINT32 end_of_event
  // {
    //  0_29: counter;
    // 30_31: 3;
  // }
  READ_FROM_BUFFER_FULL(511,uint32 ,end_of_event,end_of_event.u32);
  CHECK_BITS_EQUAL(510,end_of_event.unnamed_30_31,3);
  // MARK_COUNT(end);
  void *__mark_end = __buffer._data;
  // CHECK_COUNT(header.word_number,start,end,( - 4),4)
  CHECK_WORD_COUNT(513,header.word_number,start,end,( - 4),4);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_MESYTEC_MADC32::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_MESYTEC_MADC32.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MADC32(geom)
template<typename __data_src_t>
bool VME_MESYTEC_MADC32::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA14_OVERFLOW data[32] ZERO_SUPPRESS);
  // MARK_COUNT(start);
  // UINT32 header NOENCODE
  // {
    //  0_11: word_number;
    // 12_14: adc_resol;
    //    15: out_form;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_number : 12; // 0..11
      uint32 adc_resol : 3; // 12..14
      uint32 out_form : 1; // 15
      uint32 geom : 8; // 16..23
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 geom : 8; // 16..23
      uint32 out_form : 1; // 15
      uint32 adc_resol : 3; // 12..14
      uint32 word_number : 12; // 0..11
#endif
    };
    uint32  u32;
  } header;
  READ_FROM_BUFFER_FULL(493,uint32 ,header,header.u32);
  MATCH_BITS_EQUAL(490,header.geom,geom);
  MATCH_BITS_EQUAL(491,header.unnamed_24_29,0);
  MATCH_BITS_EQUAL(492,header.unnamed_30_31,1);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_MESYTEC_MADC32::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_MESYTEC_MADC32.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MADC32(geom)
template<typename __data_dest_t>
void PACKER_VME_MESYTEC_MADC32::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA14_OVERFLOW data[32] ZERO_SUPPRESS);
  // MARK_COUNT(start);
  void *__mark_start = __buffer._offset;
  // UINT32 header NOENCODE
  // {
    //  0_11: word_number;
    // 12_14: adc_resol;
    //    15: out_form;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  // several UINT32 ch_data NOENCODE
  // {
    //  0_12: value;
    //    14: outofrange;
    // 16_20: channel;
    // 21_29: 32;
    // 30_31: 0;
    // ENCODE(data[channel],(value=value,overflow=outofrange));
  // }
  // optional UINT32 filler NOENCODE
  // {
    //  0_31: 0;
  // }
  // UINT32 end_of_event
  // {
    //  0_29: counter;
    // 30_31: 3;
  // }
  // MARK_COUNT(end);
  void *__mark_end = __buffer._offset;
  // CHECK_COUNT(header.word_number,start,end,( - 4),4)
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_MESYTEC_MADC32::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_MESYTEC_MDPP16
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_MESYTEC_MDPP16.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MDPP16(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_MESYTEC_MDPP16
class VME_MESYTEC_MDPP16
#else//PACKER_CODE
# define DECLARED_PACKER_VME_MESYTEC_MDPP16
class PACKER_VME_MESYTEC_MDPP16
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA16_OVERFLOW data[34] ZERO_SUPPRESS_MULTI(100));
  raw_array_multi_zero_suppress<DATA16_OVERFLOW,DATA16_OVERFLOW,34,100> data;
  // MARK_COUNT(start);
  // UINT32 header NOENCODE
  // {
    //  0_09: word_number;
    // 10_12: adc_res;
    // 13_15: tdc_res;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  // several UINT32 ch_data NOENCODE
  // {
    //  0_15: value;
    // 16_21: channel;
    //    22: overflow;
    //    23: pileup;
    // 24_27: 0;
    // 28_31: 1;
    // ENCODE(data[channel],(value=value,overflow=overflow,pileup=pileup));
  // }
  // several UINT32 fill_word NOENCODE
  // {
    //  0_31: 0;
  // }
  // UINT32 end_of_event
  // {
    //  0_29: counter;
    // 30_31: 3;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 counter : 30; // 0..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 counter : 30; // 0..29
#endif
    };
    uint32  u32;
  } end_of_event;
  // MARK_COUNT(end);
  // CHECK_COUNT(header.word_number,start,end,( - 4),4)

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_MESYTEC_MDPP16);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_MESYTEC_MDPP16.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MDPP16(geom)
template<typename __data_src_t>
void VME_MESYTEC_MDPP16::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA16_OVERFLOW data[34] ZERO_SUPPRESS_MULTI(100));
  // MARK_COUNT(start);
  void *__mark_start = __buffer._data;
  // UINT32 header NOENCODE
  // {
    //  0_09: word_number;
    // 10_12: adc_res;
    // 13_15: tdc_res;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_number : 10; // 0..9
      uint32 adc_res : 3; // 10..12
      uint32 tdc_res : 3; // 13..15
      uint32 geom : 8; // 16..23
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 geom : 8; // 16..23
      uint32 tdc_res : 3; // 13..15
      uint32 adc_res : 3; // 10..12
      uint32 word_number : 10; // 0..9
#endif
    };
    uint32  u32;
  } header;
  READ_FROM_BUFFER_FULL(528,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(525,header.geom,geom);
  CHECK_BITS_EQUAL(526,header.unnamed_24_29,0);
  CHECK_BITS_EQUAL(527,header.unnamed_30_31,1);
  // several UINT32 ch_data NOENCODE
  // {
    //  0_15: value;
    // 16_21: channel;
    //    22: overflow;
    //    23: pileup;
    // 24_27: 0;
    // 28_31: 1;
    // ENCODE(data[channel],(value=value,overflow=overflow,pileup=pileup));
  // }
  for ( ; ; ) {
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 16; // 0..15
      uint32 channel : 6; // 16..21
      uint32 overflow : 1; // 22
      uint32 pileup : 1; // 23
      uint32 unnamed_24_27 : 4; // 24..27
      uint32 unnamed_28_31 : 4; // 28..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_28_31 : 4; // 28..31
      uint32 unnamed_24_27 : 4; // 24..27
      uint32 pileup : 1; // 23
      uint32 overflow : 1; // 22
      uint32 channel : 6; // 16..21
      uint32 value : 16; // 0..15
#endif
    };
    uint32  u32;
  } ch_data;
  if (__buffer.empty()) goto data_done_6;
  PEEK_FROM_BUFFER_FULL(538,uint32 ,ch_data,ch_data.u32);
  CHECK_JUMP_BITS_EQUAL(535,ch_data.unnamed_24_27,0,data_done_6);
  CHECK_JUMP_BITS_EQUAL(536,ch_data.unnamed_28_31,1,data_done_6);
  __buffer.advance(sizeof(ch_data.u32));
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(537,ch_data.channel);
    __item.value = ch_data.value;
    __item.overflow = ch_data.overflow;
    __item.pileup = ch_data.pileup;
  }
  }
  data_done_6:;
  // several UINT32 fill_word NOENCODE
  // {
    //  0_31: 0;
  // }
  for ( ; ; ) {
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 unnamed_0_31 : 32; // 0..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_0_31 : 32; // 0..31
#endif
    };
    uint32  u32;
  } fill_word;
  if (__buffer.empty()) goto data_done_7;
  PEEK_FROM_BUFFER_FULL(542,uint32 ,fill_word,fill_word.u32);
  CHECK_JUMP_BITS_EQUAL(541,fill_word.unnamed_0_31,0,data_done_7);
  __buffer.advance(sizeof(fill_word.u32));
  }
  data_done_7:;
  // UINT32 end_of_event
  // {
    //  0_29: counter;
    // 30_31: 3;
  // }
  READ_FROM_BUFFER_FULL(547,uint32 ,end_of_event,end_of_event.u32);
  CHECK_BITS_EQUAL(546,end_of_event.unnamed_30_31,3);
  // MARK_COUNT(end);
  void *__mark_end = __buffer._data;
  // CHECK_COUNT(header.word_number,start,end,( - 4),4)
  CHECK_WORD_COUNT(549,header.word_number,start,end,( - 4),4);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_MESYTEC_MDPP16::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_MESYTEC_MDPP16.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MDPP16(geom)
template<typename __data_src_t>
bool VME_MESYTEC_MDPP16::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA16_OVERFLOW data[34] ZERO_SUPPRESS_MULTI(100));
  // MARK_COUNT(start);
  // UINT32 header NOENCODE
  // {
    //  0_09: word_number;
    // 10_12: adc_res;
    // 13_15: tdc_res;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_number : 10; // 0..9
      uint32 adc_res : 3; // 10..12
      uint32 tdc_res : 3; // 13..15
      uint32 geom : 8; // 16..23
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 geom : 8; // 16..23
      uint32 tdc_res : 3; // 13..15
      uint32 adc_res : 3; // 10..12
      uint32 word_number : 10; // 0..9
#endif
    };
    uint32  u32;
  } header;
  READ_FROM_BUFFER_FULL(528,uint32 ,header,header.u32);
  MATCH_BITS_EQUAL(525,header.geom,geom);
  MATCH_BITS_EQUAL(526,header.unnamed_24_29,0);
  MATCH_BITS_EQUAL(527,header.unnamed_30_31,1);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_MESYTEC_MDPP16::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_MESYTEC_MDPP16.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MDPP16(geom)
template<typename __data_dest_t>
void PACKER_VME_MESYTEC_MDPP16::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA16_OVERFLOW data[34] ZERO_SUPPRESS_MULTI(100));
  // MARK_COUNT(start);
  void *__mark_start = __buffer._offset;
  // UINT32 header NOENCODE
  // {
    //  0_09: word_number;
    // 10_12: adc_res;
    // 13_15: tdc_res;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  // several UINT32 ch_data NOENCODE
  // {
    //  0_15: value;
    // 16_21: channel;
    //    22: overflow;
    //    23: pileup;
    // 24_27: 0;
    // 28_31: 1;
    // ENCODE(data[channel],(value=value,overflow=overflow,pileup=pileup));
  // }
  // several UINT32 fill_word NOENCODE
  // {
    //  0_31: 0;
  // }
  // UINT32 end_of_event
  // {
    //  0_29: counter;
    // 30_31: 3;
  // }
  // MARK_COUNT(end);
  void *__mark_end = __buffer._offset;
  // CHECK_COUNT(header.word_number,start,end,( - 4),4)
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_MESYTEC_MDPP16::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: DUMMY_TDC
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for DUMMY_TDC.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(DUMMY_TDC)
#if !PACKER_CODE
# define DECLARED_UNPACK_DUMMY_TDC
class DUMMY_TDC
#else//PACKER_CODE
# define DECLARED_PACKER_DUMMY_TDC
class PACKER_DUMMY_TDC
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // select several

    // d = DUMMY_WORD();
  SINGLE(DUMMY_WORD,d);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(DUMMY_TDC);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for DUMMY_TDC.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(DUMMY_TDC)
template<typename __data_src_t>
void DUMMY_TDC::__unpack(__data_src_t &__buffer)
{
  // select several

    // d = DUMMY_WORD();
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: DUMMY_WORD d: (s32)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(557,uint32,__match_peek);
    // differ = 00000000 :
    uint32 __match_index = 0;
    static const sint8 __match_index_array[1] = { 1, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 1
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        UNPACK_DECL(556,DUMMY_WORD,d);
        break;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,DUMMY_TDC::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for DUMMY_TDC.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(DUMMY_TDC)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for DUMMY_TDC.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(DUMMY_TDC)
template<typename __data_dest_t>
void PACKER_DUMMY_TDC::__packer(__data_dest_t &__buffer)
{
  // select several

    // d = DUMMY_WORD();
  {
    PACK_DECL(556,DUMMY_WORD,d);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,DUMMY_TDC::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_CAMAC_CONVERTER
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_CAMAC_CONVERTER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_CONVERTER)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_CAMAC_CONVERTER
class LAND_CAMAC_CONVERTER
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_CAMAC_CONVERTER
class PACKER_LAND_CAMAC_CONVERTER
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // UINT16 tpat;
  uint16  tpat;
  // UINT16 tprev;
  uint16  tprev;
  // UINT16 tnext;
  uint16  tnext;
  // UINT16 tprev2;
  uint16  tprev2;
  // if(EXTERNAL has_data)

#ifndef __PSDC__
  uint32 has_data() const;
#endif//!__PSDC__
    // qdc_SIA0429 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    // tdc_SIA8035 = CAMAC_SILENA_4418(channels=4,mark_channel_no=0);
    // qdc_SIA0458 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    // qdc_SIA0416 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    // tdc_SIA0426 = CAMAC_SILENA_4418(channels=4,mark_channel_no=0);
    // tdc_SIA0400 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    // tdc_SIA0401 = CAMAC_SILENA_4418(channels=2,mark_channel_no=0);
    SINGLE(CAMAC_SILENA_4418,qdc_SIA0429);
    SINGLE(CAMAC_SILENA_4418,qdc_SIA0458);
    SINGLE(CAMAC_SILENA_4418,tdc_SIA8035);
    SINGLE(CAMAC_SILENA_4418,qdc_SIA0416);
    SINGLE(CAMAC_SILENA_4418,tdc_SIA0426);
    SINGLE(CAMAC_SILENA_4418,tdc_SIA0400);
    SINGLE(CAMAC_SILENA_4418,tdc_SIA0401);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_CAMAC_CONVERTER);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_CAMAC_CONVERTER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_CONVERTER)
template<typename __data_src_t>
void LAND_CAMAC_CONVERTER::__unpack(__data_src_t &__buffer)
{
  // UINT16 tpat;
  READ_FROM_BUFFER(562,uint16 ,tpat);
  // UINT16 tprev;
  READ_FROM_BUFFER(563,uint16 ,tprev);
  // UINT16 tnext;
  READ_FROM_BUFFER(564,uint16 ,tnext);
  // UINT16 tprev2;
  READ_FROM_BUFFER(565,uint16 ,tprev2);
  // if(EXTERNAL has_data)

  if (has_data())
  {
    // qdc_SIA0429 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    UNPACK_DECL(568,CAMAC_SILENA_4418,qdc_SIA0429,/*channels*/8,/*mark_channel_no*/0);
    // tdc_SIA8035 = CAMAC_SILENA_4418(channels=4,mark_channel_no=0);
    UNPACK_DECL(569,CAMAC_SILENA_4418,tdc_SIA8035,/*channels*/4,/*mark_channel_no*/0);
    // qdc_SIA0458 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    UNPACK_DECL(570,CAMAC_SILENA_4418,qdc_SIA0458,/*channels*/8,/*mark_channel_no*/0);
    // qdc_SIA0416 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    UNPACK_DECL(571,CAMAC_SILENA_4418,qdc_SIA0416,/*channels*/8,/*mark_channel_no*/0);
    // tdc_SIA0426 = CAMAC_SILENA_4418(channels=4,mark_channel_no=0);
    UNPACK_DECL(572,CAMAC_SILENA_4418,tdc_SIA0426,/*channels*/4,/*mark_channel_no*/0);
    // tdc_SIA0400 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    UNPACK_DECL(573,CAMAC_SILENA_4418,tdc_SIA0400,/*channels*/8,/*mark_channel_no*/0);
    // tdc_SIA0401 = CAMAC_SILENA_4418(channels=2,mark_channel_no=0);
    UNPACK_DECL(574,CAMAC_SILENA_4418,tdc_SIA0401,/*channels*/2,/*mark_channel_no*/0);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_CONVERTER::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_CAMAC_CONVERTER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_CONVERTER)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_CAMAC_CONVERTER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_CONVERTER)
template<typename __data_dest_t>
void PACKER_LAND_CAMAC_CONVERTER::__packer(__data_dest_t &__buffer)
{
  // UINT16 tpat;
  // UINT16 tprev;
  // UINT16 tnext;
  // UINT16 tprev2;
  // if(EXTERNAL has_data)

  if (has_data())
  {
    // qdc_SIA0429 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    PACK_DECL(568,CAMAC_SILENA_4418,qdc_SIA0429,/*channels*/8,/*mark_channel_no*/0);
    // tdc_SIA8035 = CAMAC_SILENA_4418(channels=4,mark_channel_no=0);
    PACK_DECL(569,CAMAC_SILENA_4418,tdc_SIA8035,/*channels*/4,/*mark_channel_no*/0);
    // qdc_SIA0458 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    PACK_DECL(570,CAMAC_SILENA_4418,qdc_SIA0458,/*channels*/8,/*mark_channel_no*/0);
    // qdc_SIA0416 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    PACK_DECL(571,CAMAC_SILENA_4418,qdc_SIA0416,/*channels*/8,/*mark_channel_no*/0);
    // tdc_SIA0426 = CAMAC_SILENA_4418(channels=4,mark_channel_no=0);
    PACK_DECL(572,CAMAC_SILENA_4418,tdc_SIA0426,/*channels*/4,/*mark_channel_no*/0);
    // tdc_SIA0400 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    PACK_DECL(573,CAMAC_SILENA_4418,tdc_SIA0400,/*channels*/8,/*mark_channel_no*/0);
    // tdc_SIA0401 = CAMAC_SILENA_4418(channels=2,mark_channel_no=0);
    PACK_DECL(574,CAMAC_SILENA_4418,tdc_SIA0401,/*channels*/2,/*mark_channel_no*/0);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_CONVERTER::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_CAMAC_SCALER
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_CAMAC_SCALER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_SCALER)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_CAMAC_SCALER
class LAND_CAMAC_SCALER
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_CAMAC_SCALER
class PACKER_LAND_CAMAC_SCALER
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // scaler0 = CAMAC_LECROY_4434(channels=32);
  // scaler1 = CAMAC_LECROY_4434(channels=32);
  // scaler2 = CAMAC_LECROY_4434(channels=32);
  // if(EXTERNAL has_timestamp)

#ifndef __PSDC__
  uint32 has_timestamp() const;
#endif//!__PSDC__
    // UINT32 timestamp;
    uint32  timestamp;
    // UINT32 endianess
    // {
      //  0_31: 0x87654321;
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 unnamed_0_31 : 32; // 0..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 unnamed_0_31 : 32; // 0..31
#endif
      };
      uint32  u32;
    } endianess;
  SINGLE(CAMAC_LECROY_4434,scaler0);
  SINGLE(CAMAC_LECROY_4434,scaler2);
  SINGLE(CAMAC_LECROY_4434,scaler1);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_CAMAC_SCALER);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_CAMAC_SCALER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_SCALER)
template<typename __data_src_t>
void LAND_CAMAC_SCALER::__unpack(__data_src_t &__buffer)
{
  // scaler0 = CAMAC_LECROY_4434(channels=32);
  UNPACK_DECL(580,CAMAC_LECROY_4434,scaler0,/*channels*/32);
  // scaler1 = CAMAC_LECROY_4434(channels=32);
  UNPACK_DECL(581,CAMAC_LECROY_4434,scaler1,/*channels*/32);
  // scaler2 = CAMAC_LECROY_4434(channels=32);
  UNPACK_DECL(582,CAMAC_LECROY_4434,scaler2,/*channels*/32);
  // if(EXTERNAL has_timestamp)

  if (has_timestamp())
  {
    // UINT32 timestamp;
    READ_FROM_BUFFER(585,uint32 ,timestamp);
    // UINT32 endianess
    // {
      //  0_31: 0x87654321;
    // }
    READ_FROM_BUFFER_FULL(589,uint32 ,endianess,endianess.u32);
    CHECK_BITS_EQUAL(588,endianess.unnamed_0_31,0x87654321);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_SCALER::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_CAMAC_SCALER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_SCALER)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_CAMAC_SCALER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_SCALER)
template<typename __data_dest_t>
void PACKER_LAND_CAMAC_SCALER::__packer(__data_dest_t &__buffer)
{
  // scaler0 = CAMAC_LECROY_4434(channels=32);
  PACK_DECL(580,CAMAC_LECROY_4434,scaler0,/*channels*/32);
  // scaler1 = CAMAC_LECROY_4434(channels=32);
  PACK_DECL(581,CAMAC_LECROY_4434,scaler1,/*channels*/32);
  // scaler2 = CAMAC_LECROY_4434(channels=32);
  PACK_DECL(582,CAMAC_LECROY_4434,scaler2,/*channels*/32);
  // if(EXTERNAL has_timestamp)

  if (has_timestamp())
  {
    // UINT32 timestamp;
    // UINT32 endianess
    // {
      //  0_31: 0x87654321;
    // }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_SCALER::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_CAMAC_TCAL_INFO
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_CAMAC_TCAL_INFO.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_TCAL_INFO)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_CAMAC_TCAL_INFO
class LAND_CAMAC_TCAL_INFO
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_CAMAC_TCAL_INFO
class PACKER_LAND_CAMAC_TCAL_INFO
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // UINT32 info NOENCODE;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_CAMAC_TCAL_INFO);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_CAMAC_TCAL_INFO.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_TCAL_INFO)
template<typename __data_src_t>
void LAND_CAMAC_TCAL_INFO::__unpack(__data_src_t &__buffer)
{
  // UINT32 info NOENCODE;
  uint32  info;READ_FROM_BUFFER(595,uint32 ,info);
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_TCAL_INFO::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_CAMAC_TCAL_INFO.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_TCAL_INFO)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_CAMAC_TCAL_INFO.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_TCAL_INFO)
template<typename __data_dest_t>
void PACKER_LAND_CAMAC_TCAL_INFO::__packer(__data_dest_t &__buffer)
{
  // UINT32 info NOENCODE;
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_TCAL_INFO::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_FASTBUS1
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_FASTBUS1.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS1)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_FASTBUS1
class LAND_FASTBUS1
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_FASTBUS1
class PACKER_LAND_FASTBUS1
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // select several

    // qdc_L_Q47342 = FASTBUS_LECROY_1885(geom=7,channels=96);
    // qdc_L_Q11111 = FASTBUS_LECROY_1885(geom=8,channels=96);
    // qdc_L_Q46848 = FASTBUS_LECROY_1885(geom=10,channels=96);
    // qdc_L_Q47315 = FASTBUS_LECROY_1885(geom=11,channels=96);
    // qdc_L_Q17320 = FASTBUS_LECROY_1885(geom=13,channels=96);
    // qdc_L_Q15372 = FASTBUS_LECROY_1885(geom=15,channels=96);
    // qdc_F_Q46962 = FASTBUS_LECROY_1885(geom=16,channels=96);
    // qdc_L_Q46993 = FASTBUS_LECROY_1885(geom=18,channels=96);
    // qdc_L_Q15358 = FASTBUS_LECROY_1885(geom=20,channels=96);
    // qdc_L_Q47264 = FASTBUS_LECROY_1885(geom=23,channels=96);
    // tdc_L_T81855 = FASTBUS_LECROY_1875(geom=3,channels=64);
    // tdc_L_T87044 = FASTBUS_LECROY_1875(geom=4,channels=64);
    // tdc_L_T87024 = FASTBUS_LECROY_1875(geom=5,channels=64);
    // tdc_L_T81800 = FASTBUS_LECROY_1875(geom=6,channels=64);
  SINGLE(FASTBUS_LECROY_1885,qdc_L_Q47342);
  SINGLE(FASTBUS_LECROY_1885,qdc_L_Q46848);
  SINGLE(FASTBUS_LECROY_1885,qdc_L_Q11111);
  SINGLE(FASTBUS_LECROY_1885,qdc_L_Q47315);
  SINGLE(FASTBUS_LECROY_1885,qdc_L_Q17320);
  SINGLE(FASTBUS_LECROY_1885,qdc_L_Q15372);
  SINGLE(FASTBUS_LECROY_1885,qdc_F_Q46962);
  SINGLE(FASTBUS_LECROY_1885,qdc_L_Q46993);
  SINGLE(FASTBUS_LECROY_1885,qdc_L_Q15358);
  SINGLE(FASTBUS_LECROY_1885,qdc_L_Q47264);
  SINGLE(FASTBUS_LECROY_1875,tdc_L_T81855);
  SINGLE(FASTBUS_LECROY_1875,tdc_L_T87044);
  SINGLE(FASTBUS_LECROY_1875,tdc_L_T87024);
  SINGLE(FASTBUS_LECROY_1875,tdc_L_T81800);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_FASTBUS1);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_FASTBUS1.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS1)
template<typename __data_src_t>
void LAND_FASTBUS1::__unpack(__data_src_t &__buffer)
{
  // select several

    // qdc_L_Q47342 = FASTBUS_LECROY_1885(geom=7,channels=96);
    // qdc_L_Q11111 = FASTBUS_LECROY_1885(geom=8,channels=96);
    // qdc_L_Q46848 = FASTBUS_LECROY_1885(geom=10,channels=96);
    // qdc_L_Q47315 = FASTBUS_LECROY_1885(geom=11,channels=96);
    // qdc_L_Q17320 = FASTBUS_LECROY_1885(geom=13,channels=96);
    // qdc_L_Q15372 = FASTBUS_LECROY_1885(geom=15,channels=96);
    // qdc_F_Q46962 = FASTBUS_LECROY_1885(geom=16,channels=96);
    // qdc_L_Q46993 = FASTBUS_LECROY_1885(geom=18,channels=96);
    // qdc_L_Q15358 = FASTBUS_LECROY_1885(geom=20,channels=96);
    // qdc_L_Q47264 = FASTBUS_LECROY_1885(geom=23,channels=96);
    // tdc_L_T81855 = FASTBUS_LECROY_1875(geom=3,channels=64);
    // tdc_L_T87044 = FASTBUS_LECROY_1875(geom=4,channels=64);
    // tdc_L_T87024 = FASTBUS_LECROY_1875(geom=5,channels=64);
    // tdc_L_T81800 = FASTBUS_LECROY_1875(geom=6,channels=64);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: FASTBUS_LECROY_1885 qdc_L_Q47342: (s32) => (0xff00f000,0x38000000)
    // optimized match 2: FASTBUS_LECROY_1885 qdc_L_Q11111: (s32) => (0xff00f000,0x40000000)
    // optimized match 3: FASTBUS_LECROY_1885 qdc_L_Q46848: (s32) => (0xff00f000,0x50000000)
    // optimized match 4: FASTBUS_LECROY_1885 qdc_L_Q47315: (s32) => (0xff00f000,0x58000000)
    // optimized match 5: FASTBUS_LECROY_1885 qdc_L_Q17320: (s32) => (0xff00f000,0x68000000)
    // optimized match 6: FASTBUS_LECROY_1885 qdc_L_Q15372: (s32) => (0xff00f000,0x78000000)
    // optimized match 7: FASTBUS_LECROY_1885 qdc_F_Q46962: (s32) => (0xff00f000,0x80000000)
    // optimized match 8: FASTBUS_LECROY_1885 qdc_L_Q46993: (s32) => (0xff00f000,0x90000000)
    // optimized match 9: FASTBUS_LECROY_1885 qdc_L_Q15358: (s32) => (0xff00f000,0xa0000000)
    // optimized match 10: FASTBUS_LECROY_1885 qdc_L_Q47264: (s32) => (0xff00f000,0xb8000000)
    // optimized match 11: FASTBUS_LECROY_1875 tdc_L_T81855: (s32) => (0xff40f000,0x18000000)
    // optimized match 12: FASTBUS_LECROY_1875 tdc_L_T87044: (s32) => (0xff40f000,0x20000000)
    // optimized match 13: FASTBUS_LECROY_1875 tdc_L_T87024: (s32) => (0xff40f000,0x28000000)
    // optimized match 14: FASTBUS_LECROY_1875 tdc_L_T81800: (s32) => (0xff40f000,0x30000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(616,uint32,__match_peek);
    // differ = f8000000 : 27 28 29 30 31
    uint32 __match_index = 0 | /* 27,31 */ ((__match_peek >> 27) & 0x0000001f);
    static const sint8 __match_index_array[32] = { 0, 0, 0, 11, 12, 13, 14, 1, 2, 0, 3, 4, 0, 5, 0, 6, 7, 0, 8, 0, 9, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 1
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        UNPACK_DECL(602,FASTBUS_LECROY_1885,qdc_L_Q47342,/*geom*/7,/*channels*/96);
        break;
      case 2:
        UNPACK_DECL(603,FASTBUS_LECROY_1885,qdc_L_Q11111,/*geom*/8,/*channels*/96);
        break;
      case 3:
        UNPACK_DECL(604,FASTBUS_LECROY_1885,qdc_L_Q46848,/*geom*/10,/*channels*/96);
        break;
      case 4:
        UNPACK_DECL(605,FASTBUS_LECROY_1885,qdc_L_Q47315,/*geom*/11,/*channels*/96);
        break;
      case 5:
        UNPACK_DECL(606,FASTBUS_LECROY_1885,qdc_L_Q17320,/*geom*/13,/*channels*/96);
        break;
      case 6:
        UNPACK_DECL(607,FASTBUS_LECROY_1885,qdc_L_Q15372,/*geom*/15,/*channels*/96);
        break;
      case 7:
        UNPACK_DECL(608,FASTBUS_LECROY_1885,qdc_F_Q46962,/*geom*/16,/*channels*/96);
        break;
      case 8:
        UNPACK_DECL(609,FASTBUS_LECROY_1885,qdc_L_Q46993,/*geom*/18,/*channels*/96);
        break;
      case 9:
        UNPACK_DECL(610,FASTBUS_LECROY_1885,qdc_L_Q15358,/*geom*/20,/*channels*/96);
        break;
      case 10:
        UNPACK_DECL(611,FASTBUS_LECROY_1885,qdc_L_Q47264,/*geom*/23,/*channels*/96);
        break;
      case 11:
        UNPACK_DECL(612,FASTBUS_LECROY_1875,tdc_L_T81855,/*geom*/3,/*channels*/64);
        break;
      case 12:
        UNPACK_DECL(613,FASTBUS_LECROY_1875,tdc_L_T87044,/*geom*/4,/*channels*/64);
        break;
      case 13:
        UNPACK_DECL(614,FASTBUS_LECROY_1875,tdc_L_T87024,/*geom*/5,/*channels*/64);
        break;
      case 14:
        UNPACK_DECL(615,FASTBUS_LECROY_1875,tdc_L_T81800,/*geom*/6,/*channels*/64);
        break;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS1::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_FASTBUS1.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS1)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_FASTBUS1.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS1)
template<typename __data_dest_t>
void PACKER_LAND_FASTBUS1::__packer(__data_dest_t &__buffer)
{
  // select several

    // qdc_L_Q47342 = FASTBUS_LECROY_1885(geom=7,channels=96);
    // qdc_L_Q11111 = FASTBUS_LECROY_1885(geom=8,channels=96);
    // qdc_L_Q46848 = FASTBUS_LECROY_1885(geom=10,channels=96);
    // qdc_L_Q47315 = FASTBUS_LECROY_1885(geom=11,channels=96);
    // qdc_L_Q17320 = FASTBUS_LECROY_1885(geom=13,channels=96);
    // qdc_L_Q15372 = FASTBUS_LECROY_1885(geom=15,channels=96);
    // qdc_F_Q46962 = FASTBUS_LECROY_1885(geom=16,channels=96);
    // qdc_L_Q46993 = FASTBUS_LECROY_1885(geom=18,channels=96);
    // qdc_L_Q15358 = FASTBUS_LECROY_1885(geom=20,channels=96);
    // qdc_L_Q47264 = FASTBUS_LECROY_1885(geom=23,channels=96);
    // tdc_L_T81855 = FASTBUS_LECROY_1875(geom=3,channels=64);
    // tdc_L_T87044 = FASTBUS_LECROY_1875(geom=4,channels=64);
    // tdc_L_T87024 = FASTBUS_LECROY_1875(geom=5,channels=64);
    // tdc_L_T81800 = FASTBUS_LECROY_1875(geom=6,channels=64);
  {
    PACK_DECL(602,FASTBUS_LECROY_1885,qdc_L_Q47342,/*geom*/7,/*channels*/96);
    PACK_DECL(603,FASTBUS_LECROY_1885,qdc_L_Q11111,/*geom*/8,/*channels*/96);
    PACK_DECL(604,FASTBUS_LECROY_1885,qdc_L_Q46848,/*geom*/10,/*channels*/96);
    PACK_DECL(605,FASTBUS_LECROY_1885,qdc_L_Q47315,/*geom*/11,/*channels*/96);
    PACK_DECL(606,FASTBUS_LECROY_1885,qdc_L_Q17320,/*geom*/13,/*channels*/96);
    PACK_DECL(607,FASTBUS_LECROY_1885,qdc_L_Q15372,/*geom*/15,/*channels*/96);
    PACK_DECL(608,FASTBUS_LECROY_1885,qdc_F_Q46962,/*geom*/16,/*channels*/96);
    PACK_DECL(609,FASTBUS_LECROY_1885,qdc_L_Q46993,/*geom*/18,/*channels*/96);
    PACK_DECL(610,FASTBUS_LECROY_1885,qdc_L_Q15358,/*geom*/20,/*channels*/96);
    PACK_DECL(611,FASTBUS_LECROY_1885,qdc_L_Q47264,/*geom*/23,/*channels*/96);
    PACK_DECL(612,FASTBUS_LECROY_1875,tdc_L_T81855,/*geom*/3,/*channels*/64);
    PACK_DECL(613,FASTBUS_LECROY_1875,tdc_L_T87044,/*geom*/4,/*channels*/64);
    PACK_DECL(614,FASTBUS_LECROY_1875,tdc_L_T87024,/*geom*/5,/*channels*/64);
    PACK_DECL(615,FASTBUS_LECROY_1875,tdc_L_T81800,/*geom*/6,/*channels*/64);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS1::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_FASTBUS2
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_FASTBUS2.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS2)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_FASTBUS2
class LAND_FASTBUS2
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_FASTBUS2
class PACKER_LAND_FASTBUS2
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // select several

    // tdc_L_T87047 = FASTBUS_LECROY_1875(geom=1,channels=64);
    // tdc_L_T48854 = FASTBUS_LECROY_1875(geom=2,channels=64);
    // tdc_L_T81808 = FASTBUS_LECROY_1875(geom=3,channels=64);
    // tdc_L_T81859 = FASTBUS_LECROY_1875(geom=4,channels=64);
    // tdc_L_T81795 = FASTBUS_LECROY_1875(geom=5,channels=64);
    // tdc_L_T81806 = FASTBUS_LECROY_1875(geom=6,channels=64);
    // tdc_L_T48834 = FASTBUS_LECROY_1875(geom=7,channels=64);
  SINGLE(FASTBUS_LECROY_1875,tdc_L_T87047);
  SINGLE(FASTBUS_LECROY_1875,tdc_L_T81808);
  SINGLE(FASTBUS_LECROY_1875,tdc_L_T48854);
  SINGLE(FASTBUS_LECROY_1875,tdc_L_T81859);
  SINGLE(FASTBUS_LECROY_1875,tdc_L_T81795);
  SINGLE(FASTBUS_LECROY_1875,tdc_L_T81806);
  SINGLE(FASTBUS_LECROY_1875,tdc_L_T48834);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_FASTBUS2);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_FASTBUS2.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS2)
template<typename __data_src_t>
void LAND_FASTBUS2::__unpack(__data_src_t &__buffer)
{
  // select several

    // tdc_L_T87047 = FASTBUS_LECROY_1875(geom=1,channels=64);
    // tdc_L_T48854 = FASTBUS_LECROY_1875(geom=2,channels=64);
    // tdc_L_T81808 = FASTBUS_LECROY_1875(geom=3,channels=64);
    // tdc_L_T81859 = FASTBUS_LECROY_1875(geom=4,channels=64);
    // tdc_L_T81795 = FASTBUS_LECROY_1875(geom=5,channels=64);
    // tdc_L_T81806 = FASTBUS_LECROY_1875(geom=6,channels=64);
    // tdc_L_T48834 = FASTBUS_LECROY_1875(geom=7,channels=64);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: FASTBUS_LECROY_1875 tdc_L_T87047: (s32) => (0xff40f000,0x08000000)
    // optimized match 2: FASTBUS_LECROY_1875 tdc_L_T48854: (s32) => (0xff40f000,0x10000000)
    // optimized match 3: FASTBUS_LECROY_1875 tdc_L_T81808: (s32) => (0xff40f000,0x18000000)
    // optimized match 4: FASTBUS_LECROY_1875 tdc_L_T81859: (s32) => (0xff40f000,0x20000000)
    // optimized match 5: FASTBUS_LECROY_1875 tdc_L_T81795: (s32) => (0xff40f000,0x28000000)
    // optimized match 6: FASTBUS_LECROY_1875 tdc_L_T81806: (s32) => (0xff40f000,0x30000000)
    // optimized match 7: FASTBUS_LECROY_1875 tdc_L_T48834: (s32) => (0xff40f000,0x38000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(630,uint32,__match_peek);
    // differ = 38000000 : 27 28 29
    uint32 __match_index = 0 | /* 27,29 */ ((__match_peek >> 27) & 0x00000007);
    static const sint8 __match_index_array[8] = { 0, 1, 2, 3, 4, 5, 6, 7, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 1
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        UNPACK_DECL(623,FASTBUS_LECROY_1875,tdc_L_T87047,/*geom*/1,/*channels*/64);
        break;
      case 2:
        UNPACK_DECL(624,FASTBUS_LECROY_1875,tdc_L_T48854,/*geom*/2,/*channels*/64);
        break;
      case 3:
        UNPACK_DECL(625,FASTBUS_LECROY_1875,tdc_L_T81808,/*geom*/3,/*channels*/64);
        break;
      case 4:
        UNPACK_DECL(626,FASTBUS_LECROY_1875,tdc_L_T81859,/*geom*/4,/*channels*/64);
        break;
      case 5:
        UNPACK_DECL(627,FASTBUS_LECROY_1875,tdc_L_T81795,/*geom*/5,/*channels*/64);
        break;
      case 6:
        UNPACK_DECL(628,FASTBUS_LECROY_1875,tdc_L_T81806,/*geom*/6,/*channels*/64);
        break;
      case 7:
        UNPACK_DECL(629,FASTBUS_LECROY_1875,tdc_L_T48834,/*geom*/7,/*channels*/64);
        break;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS2::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_FASTBUS2.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS2)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_FASTBUS2.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS2)
template<typename __data_dest_t>
void PACKER_LAND_FASTBUS2::__packer(__data_dest_t &__buffer)
{
  // select several

    // tdc_L_T87047 = FASTBUS_LECROY_1875(geom=1,channels=64);
    // tdc_L_T48854 = FASTBUS_LECROY_1875(geom=2,channels=64);
    // tdc_L_T81808 = FASTBUS_LECROY_1875(geom=3,channels=64);
    // tdc_L_T81859 = FASTBUS_LECROY_1875(geom=4,channels=64);
    // tdc_L_T81795 = FASTBUS_LECROY_1875(geom=5,channels=64);
    // tdc_L_T81806 = FASTBUS_LECROY_1875(geom=6,channels=64);
    // tdc_L_T48834 = FASTBUS_LECROY_1875(geom=7,channels=64);
  {
    PACK_DECL(623,FASTBUS_LECROY_1875,tdc_L_T87047,/*geom*/1,/*channels*/64);
    PACK_DECL(624,FASTBUS_LECROY_1875,tdc_L_T48854,/*geom*/2,/*channels*/64);
    PACK_DECL(625,FASTBUS_LECROY_1875,tdc_L_T81808,/*geom*/3,/*channels*/64);
    PACK_DECL(626,FASTBUS_LECROY_1875,tdc_L_T81859,/*geom*/4,/*channels*/64);
    PACK_DECL(627,FASTBUS_LECROY_1875,tdc_L_T81795,/*geom*/5,/*channels*/64);
    PACK_DECL(628,FASTBUS_LECROY_1875,tdc_L_T81806,/*geom*/6,/*channels*/64);
    PACK_DECL(629,FASTBUS_LECROY_1875,tdc_L_T48834,/*geom*/7,/*channels*/64);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS2::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_FASTBUS_ERROR
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_FASTBUS_ERROR.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS_ERROR)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_FASTBUS_ERROR
class LAND_FASTBUS_ERROR
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_FASTBUS_ERROR
class PACKER_LAND_FASTBUS_ERROR
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // UINT32 error_code
  // {
    //     0: timeout_waiting_smi;
    //     1: illegal_block_transfer;
    //     2: fifa_address_overflow;
    //     3: fifa_register_error;
    //    16: init_error;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 timeout_waiting_smi : 1; // 0
      uint32 illegal_block_transfer : 1; // 1
      uint32 fifa_address_overflow : 1; // 2
      uint32 fifa_register_error : 1; // 3
      uint32 dummy_4_15 : 12;
      uint32 init_error : 1; // 16
      uint32 dummy_17_31 : 15;
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 dummy_17_31 : 15;
      uint32 init_error : 1; // 16
      uint32 dummy_4_15 : 12;
      uint32 fifa_register_error : 1; // 3
      uint32 fifa_address_overflow : 1; // 2
      uint32 illegal_block_transfer : 1; // 1
      uint32 timeout_waiting_smi : 1; // 0
#endif
    };
    uint32  u32;
  } error_code;
  // UINT32 error_num;
  uint32  error_num;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_FASTBUS_ERROR);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_FASTBUS_ERROR.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS_ERROR)
template<typename __data_src_t>
void LAND_FASTBUS_ERROR::__unpack(__data_src_t &__buffer)
{
  // UINT32 error_code
  // {
    //     0: timeout_waiting_smi;
    //     1: illegal_block_transfer;
    //     2: fifa_address_overflow;
    //     3: fifa_register_error;
    //    16: init_error;
  // }
  READ_FROM_BUFFER_FULL(642,uint32 ,error_code,error_code.u32);
  CHECK_UNNAMED_BITS_ZERO(642,error_code.u32,0xfffefff0);
  // UINT32 error_num;
  READ_FROM_BUFFER(643,uint32 ,error_num);
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS_ERROR::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_FASTBUS_ERROR.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS_ERROR)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_FASTBUS_ERROR.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS_ERROR)
template<typename __data_dest_t>
void PACKER_LAND_FASTBUS_ERROR::__packer(__data_dest_t &__buffer)
{
  // UINT32 error_code
  // {
    //     0: timeout_waiting_smi;
    //     1: illegal_block_transfer;
    //     2: fifa_address_overflow;
    //     3: fifa_register_error;
    //    16: init_error;
  // }
  // UINT32 error_num;
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS_ERROR::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_VME
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_VME)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_VME
class LAND_VME
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_VME
class PACKER_LAND_VME
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // vme = LAND_STD_VME();
  SINGLE(LAND_STD_VME,vme);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_VME);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_VME)
template<typename __data_src_t>
void LAND_VME::__unpack(__data_src_t &__buffer)
{
  // vme = LAND_STD_VME();
  UNPACK_DECL(648,LAND_STD_VME,vme);
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_VME::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_VME)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_VME)
template<typename __data_dest_t>
void PACKER_LAND_VME::__packer(__data_dest_t &__buffer)
{
  // vme = LAND_STD_VME();
  PACK_DECL(648,LAND_STD_VME,vme);
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_VME::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for EVENT
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for EVENT.
 *
 * Do not edit - automatically generated.
 */

// EVENT
class unpack_event : public unpack_event_base
{
public:
  // camac = LAND_CAMAC_CONVERTER(type=34,subtype=0xc80);
  // camac_tcal = LAND_CAMAC_CONVERTER(type=0x26ce,subtype=0xc80);
  // camac_tcal_info = LAND_CAMAC_TCAL_INFO(type=0x26ce,subtype=0xc7f);
  // camac_scalers = LAND_CAMAC_SCALER(type=34,subtype=0xc1c);
  // camac_scalers_tcal = LAND_CAMAC_SCALER(type=0x26ce,subtype=0xc1c);
  // fastbus_error = LAND_FASTBUS_ERROR(type=31,subtype=0xc1c);
  // fastbus_1 = LAND_FASTBUS1(type=32,subtype=0xc3a,subcrate=1);
  // fastbus_2 = LAND_FASTBUS2(type=32,subtype=0xc3a,subcrate=2);
  // d1 = DUMMY_TDC(type=34,subtype=0xdac,control=9);
SINGLE(LAND_CAMAC_CONVERTER,camac);
SINGLE(LAND_CAMAC_TCAL_INFO,camac_tcal_info);
SINGLE(LAND_CAMAC_CONVERTER,camac_tcal);
SINGLE(LAND_CAMAC_SCALER,camac_scalers);
SINGLE(LAND_CAMAC_SCALER,camac_scalers_tcal);
SINGLE(LAND_FASTBUS_ERROR,fastbus_error);
SINGLE(LAND_FASTBUS1,fastbus_1);
SINGLE(LAND_FASTBUS2,fastbus_2);
SINGLE(DUMMY_TDC,d1);
public:
#ifndef __PSDC__
  bitsone<9> __visited;
  void __clear_visited() { __visited.clear(); }
  bool ignore_unknown_subevent() { return false; }
#endif//!__PSDC__

public:
#ifndef __PSDC__
template<typename __data_src_t>
  int __unpack_subevent(subevent_header *__header,__data_src_t &__buffer);
  int __revoke_subevent(subevent_header *__header);
  // void __clean_event();

  STRUCT_FCNS_DECL(unpack_event);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for EVENT.
 *
 * Do not edit - automatically generated.
 */

// EVENT
template<typename __data_src_t>
int unpack_event::__unpack_subevent(subevent_header *__header,__data_src_t &__buffer)
  // camac = LAND_CAMAC_CONVERTER(type=34,subtype=0xc80);
  // camac_tcal = LAND_CAMAC_CONVERTER(type=0x26ce,subtype=0xc80);
  // camac_tcal_info = LAND_CAMAC_TCAL_INFO(type=0x26ce,subtype=0xc7f);
  // camac_scalers = LAND_CAMAC_SCALER(type=34,subtype=0xc1c);
  // camac_scalers_tcal = LAND_CAMAC_SCALER(type=0x26ce,subtype=0xc1c);
  // fastbus_error = LAND_FASTBUS_ERROR(type=31,subtype=0xc1c);
  // fastbus_1 = LAND_FASTBUS1(type=32,subtype=0xc3a,subcrate=1);
  // fastbus_2 = LAND_FASTBUS2(type=32,subtype=0xc3a,subcrate=2);
  // d1 = DUMMY_TDC(type=34,subtype=0xdac,control=9);
{
  int __match_no = 0;
  MATCH_SUBEVENT_DECL(657,__match_no,1,((VES10_1_type==34)&&(VES10_1_subtype==0xc80)),camac);
  MATCH_SUBEVENT_DECL(658,__match_no,2,((VES10_1_type==0x26ce)&&(VES10_1_subtype==0xc80)),camac_tcal);
  MATCH_SUBEVENT_DECL(659,__match_no,3,((VES10_1_type==0x26ce)&&(VES10_1_subtype==0xc7f)),camac_tcal_info);
  MATCH_SUBEVENT_DECL(660,__match_no,4,((VES10_1_type==34)&&(VES10_1_subtype==0xc1c)),camac_scalers);
  MATCH_SUBEVENT_DECL(661,__match_no,5,((VES10_1_type==0x26ce)&&(VES10_1_subtype==0xc1c)),camac_scalers_tcal);
  MATCH_SUBEVENT_DECL(662,__match_no,6,((VES10_1_type==31)&&(VES10_1_subtype==0xc1c)),fastbus_error);
  MATCH_SUBEVENT_DECL(663,__match_no,7,((VES10_1_type==32)&&(VES10_1_subtype==0xc3a)&&(VES10_1_subcrate==1)),fastbus_1);
  MATCH_SUBEVENT_DECL(664,__match_no,8,((VES10_1_type==32)&&(VES10_1_subtype==0xc3a)&&(VES10_1_subcrate==2)),fastbus_2);
  MATCH_SUBEVENT_DECL(665,__match_no,9,((VES10_1_type==34)&&(VES10_1_subtype==0xdac)&&(VES10_1_control==9)),d1);
  if (!__match_no) return 0;
  switch (__match_no)
  {
    case 1:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(657,LAND_CAMAC_CONVERTER,camac,0);
      UNPACK_SUBEVENT_DECL(657,0,LAND_CAMAC_CONVERTER,camac);
      break;
    case 2:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(658,LAND_CAMAC_CONVERTER,camac_tcal,1);
      UNPACK_SUBEVENT_DECL(658,0,LAND_CAMAC_CONVERTER,camac_tcal);
      break;
    case 3:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(659,LAND_CAMAC_TCAL_INFO,camac_tcal_info,2);
      UNPACK_SUBEVENT_DECL(659,0,LAND_CAMAC_TCAL_INFO,camac_tcal_info);
      break;
    case 4:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(660,LAND_CAMAC_SCALER,camac_scalers,3);
      UNPACK_SUBEVENT_DECL(660,0,LAND_CAMAC_SCALER,camac_scalers);
      break;
    case 5:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(661,LAND_CAMAC_SCALER,camac_scalers_tcal,4);
      UNPACK_SUBEVENT_DECL(661,0,LAND_CAMAC_SCALER,camac_scalers_tcal);
      break;
    case 6:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(662,LAND_FASTBUS_ERROR,fastbus_error,5);
      UNPACK_SUBEVENT_DECL(662,0,LAND_FASTBUS_ERROR,fastbus_error);
      break;
    case 7:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(663,LAND_FASTBUS1,fastbus_1,6);
      UNPACK_SUBEVENT_DECL(663,0,LAND_FASTBUS1,fastbus_1);
      break;
    case 8:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(664,LAND_FASTBUS2,fastbus_2,7);
      UNPACK_SUBEVENT_DECL(664,0,LAND_FASTBUS2,fastbus_2);
      break;
    case 9:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(665,DUMMY_TDC,d1,8);
      UNPACK_SUBEVENT_DECL(665,0,DUMMY_TDC,d1);
      break;
  }
  return 0;
}
FORCE_IMPL_DATA_SRC_FCN_HDR(int,unpack_event::__unpack_subevent);

/** END_UNPACKER ******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for EVENT.
 *
 * Do not edit - automatically generated.
 */

// EVENT
  // camac = LAND_CAMAC_CONVERTER(type=34,subtype=0xc80);
  // camac_tcal = LAND_CAMAC_CONVERTER(type=0x26ce,subtype=0xc80);
  // camac_tcal_info = LAND_CAMAC_TCAL_INFO(type=0x26ce,subtype=0xc7f);
  // camac_scalers = LAND_CAMAC_SCALER(type=34,subtype=0xc1c);
  // camac_scalers_tcal = LAND_CAMAC_SCALER(type=0x26ce,subtype=0xc1c);
  // fastbus_error = LAND_FASTBUS_ERROR(type=31,subtype=0xc1c);
  // fastbus_1 = LAND_FASTBUS1(type=32,subtype=0xc3a,subcrate=1);
  // fastbus_2 = LAND_FASTBUS2(type=32,subtype=0xc3a,subcrate=2);
  // d1 = DUMMY_TDC(type=34,subtype=0xdac,control=9);
{
}

/** END_PACKER ********************************************************/


/** BEGIN_REVOKE *******************************************************
 *
 * Event revoker for EVENT.
 *
 * Do not edit - automatically generated.
 */

// EVENT
int unpack_event::__revoke_subevent(subevent_header *__header)
  // camac = LAND_CAMAC_CONVERTER(type=34,subtype=0xc80);
  // camac_tcal = LAND_CAMAC_CONVERTER(type=0x26ce,subtype=0xc80);
  // camac_tcal_info = LAND_CAMAC_TCAL_INFO(type=0x26ce,subtype=0xc7f);
  // camac_scalers = LAND_CAMAC_SCALER(type=34,subtype=0xc1c);
  // camac_scalers_tcal = LAND_CAMAC_SCALER(type=0x26ce,subtype=0xc1c);
  // fastbus_error = LAND_FASTBUS_ERROR(type=31,subtype=0xc1c);
  // fastbus_1 = LAND_FASTBUS1(type=32,subtype=0xc3a,subcrate=1);
  // fastbus_2 = LAND_FASTBUS2(type=32,subtype=0xc3a,subcrate=2);
  // d1 = DUMMY_TDC(type=34,subtype=0xdac,control=9);
{
  int __match_no = 0;
  MATCH_SUBEVENT_DECL(657,__match_no,1,((VES10_1_type==34)&&(VES10_1_subtype==0xc80)),camac);
  MATCH_SUBEVENT_DECL(658,__match_no,2,((VES10_1_type==0x26ce)&&(VES10_1_subtype==0xc80)),camac_tcal);
  MATCH_SUBEVENT_DECL(659,__match_no,3,((VES10_1_type==0x26ce)&&(VES10_1_subtype==0xc7f)),camac_tcal_info);
  MATCH_SUBEVENT_DECL(660,__match_no,4,((VES10_1_type==34)&&(VES10_1_subtype==0xc1c)),camac_scalers);
  MATCH_SUBEVENT_DECL(661,__match_no,5,((VES10_1_type==0x26ce)&&(VES10_1_subtype==0xc1c)),camac_scalers_tcal);
  MATCH_SUBEVENT_DECL(662,__match_no,6,((VES10_1_type==31)&&(VES10_1_subtype==0xc1c)),fastbus_error);
  MATCH_SUBEVENT_DECL(663,__match_no,7,((VES10_1_type==32)&&(VES10_1_subtype==0xc3a)&&(VES10_1_subcrate==1)),fastbus_1);
  MATCH_SUBEVENT_DECL(664,__match_no,8,((VES10_1_type==32)&&(VES10_1_subtype==0xc3a)&&(VES10_1_subcrate==2)),fastbus_2);
  MATCH_SUBEVENT_DECL(665,__match_no,9,((VES10_1_type==34)&&(VES10_1_subtype==0xdac)&&(VES10_1_control==9)),d1);
  if (!__match_no) return 0;
  switch (__match_no)
  {
    case 1:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(657,LAND_CAMAC_CONVERTER,camac,0);
      REVOKE_SUBEVENT_DECL(657,0,LAND_CAMAC_CONVERTER,camac);
      break;
    case 2:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(658,LAND_CAMAC_CONVERTER,camac_tcal,1);
      REVOKE_SUBEVENT_DECL(658,0,LAND_CAMAC_CONVERTER,camac_tcal);
      break;
    case 3:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(659,LAND_CAMAC_TCAL_INFO,camac_tcal_info,2);
      REVOKE_SUBEVENT_DECL(659,0,LAND_CAMAC_TCAL_INFO,camac_tcal_info);
      break;
    case 4:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(660,LAND_CAMAC_SCALER,camac_scalers,3);
      REVOKE_SUBEVENT_DECL(660,0,LAND_CAMAC_SCALER,camac_scalers);
      break;
    case 5:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(661,LAND_CAMAC_SCALER,camac_scalers_tcal,4);
      REVOKE_SUBEVENT_DECL(661,0,LAND_CAMAC_SCALER,camac_scalers_tcal);
      break;
    case 6:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(662,LAND_FASTBUS_ERROR,fastbus_error,5);
      REVOKE_SUBEVENT_DECL(662,0,LAND_FASTBUS_ERROR,fastbus_error);
      break;
    case 7:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(663,LAND_FASTBUS1,fastbus_1,6);
      REVOKE_SUBEVENT_DECL(663,0,LAND_FASTBUS1,fastbus_1);
      break;
    case 8:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(664,LAND_FASTBUS2,fastbus_2,7);
      REVOKE_SUBEVENT_DECL(664,0,LAND_FASTBUS2,fastbus_2);
      break;
    case 9:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(665,DUMMY_TDC,d1,8);
      REVOKE_SUBEVENT_DECL(665,0,DUMMY_TDC,d1);
      break;
  }
  return 0;
}

/** END_REVOKE ********************************************************/


/** BEGIN_SUBEVENT_NAMES ***********************************************
 *
 * Mappings of names for [incl|excl] name lookup.
 *
 * Do not edit - automatically generated.
 */

{ "camac", "type=34:subtype=0xc80" },
{ "camac_tcal", "type=0x26ce:subtype=0xc80" },
{ "camac_tcal_info", "type=0x26ce:subtype=0xc7f" },
{ "camac_scalers", "type=34:subtype=0xc1c" },
{ "camac_scalers_tcal", "type=0x26ce:subtype=0xc1c" },
{ "fastbus_error", "type=31:subtype=0xc1c" },
{ "fastbus_1", "type=32:subtype=0xc3a:subcrate=1" },
{ "fastbus_2", "type=32:subtype=0xc3a:subcrate=2" },
{ "d1", "type=34:subtype=0xdac:control=9" },

/** END_SUBEVENT_NAMES ************************************************/

//
// Generating code for EVENT
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for EVENT.
 *
 * Do not edit - automatically generated.
 */

// STICKY_EVENT
class unpack_sticky_event : public unpack_sticky_event_base
{
public:
public:
#ifndef __PSDC__
  void __clear_visited() { }
  bool ignore_unknown_subevent() { return false; }
#endif//!__PSDC__

public:
#ifndef __PSDC__
template<typename __data_src_t>
  int __unpack_subevent(subevent_header *__header,__data_src_t &__buffer);
  int __revoke_subevent(subevent_header *__header);
  // void __clean_event();

  STRUCT_FCNS_DECL(unpack_sticky_event);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for EVENT.
 *
 * Do not edit - automatically generated.
 */

// STICKY_EVENT
template<typename __data_src_t>
int unpack_sticky_event::__unpack_subevent(subevent_header *__header,__data_src_t &__buffer)
{
  int __match_no = 0;
  if (!__match_no) return 0;
  switch (__match_no)
  {
  }
  return 0;
}
FORCE_IMPL_DATA_SRC_FCN_HDR(int,unpack_sticky_event::__unpack_subevent);

/** END_UNPACKER ******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for EVENT.
 *
 * Do not edit - automatically generated.
 */

// STICKY_EVENT
{
}

/** END_PACKER ********************************************************/


/** BEGIN_REVOKE *******************************************************
 *
 * Event revoker for EVENT.
 *
 * Do not edit - automatically generated.
 */

// STICKY_EVENT
int unpack_sticky_event::__revoke_subevent(subevent_header *__header)
{
  int __match_no = 0;
  if (!__match_no) return 0;
  switch (__match_no)
  {
  }
  return 0;
}

/** END_REVOKE ********************************************************/


/** BEGIN_SUBEVENT_NAMES ***********************************************
 *
 * Mappings of names for [incl|excl] name lookup.
 *
 * Do not edit - automatically generated.
 */


/** END_SUBEVENT_NAMES ************************************************/


/** BEGIN_UNPACKER_DEFINES *********************************************
 *
 * Control
 *
 * Do not edit - automatically generated.
 */

#define STICKY_EVENT_IS_NONTRIVIAL  0


/** END_UNPACKER_DEFINES **********************************************/

/**********************************************************/
/**********************************************************
 * Generating event structure...
 */


/** BEGIN_EVENT_RAW_STRUCTURE ******************************************
 *
 * Event data structure.
 *
 * Do not edit - automatically generated.
 */

//DUMPY: 10 0
//DUMPY: 20 0
//DUMPY: 2 0
class raw_event_N
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_N);
#endif//!__PSDC__
} ;

//DUMPY: 16 0
//DUMPY: 2 0
class raw_event_NTF
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_NTF);
#endif//!__PSDC__
} ;

//DUMPY: 1 0
//DUMPY: 4 0
class raw_event_POS
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_POS);
#endif//!__PSDC__
} ;

//DUMPY: 2 0
//DUMPY: 4 0
class raw_event_ROL
{
public:
  DATA12 E;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_ROL);
#endif//!__PSDC__
} ;

//DUMPY: 4 0
//DUMPY: 2 0
class raw_event_RPC
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_RPC);
#endif//!__PSDC__
} ;

//DUMPY: 2 0
//DUMPY: 2 0
class raw_event_SCI
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_SCI);
#endif//!__PSDC__
} ;

//DUMPY: 24 0
//DUMPY: 2 0
class raw_event_TFW
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_TFW);
#endif//!__PSDC__
} ;

//DUMPY: 1 0
//DUMPY: 20 0
//DUMPY: 2 0
class raw_event_V
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_V);
#endif//!__PSDC__
} ;

//DUMPY: 1 0
//DUMPY: 162 0
class raw_event_XB
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_XB);
#endif//!__PSDC__
} ;

class raw_event : public raw_event_base
{
public:
//DUMPY: 10 0
//DUMPY: 20 0
//DUMPY: 2 0
  raw_event_N
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ N[10][20][2];
//DUMPY: 16 0
//DUMPY: 2 0
  raw_event_NTF
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ NTF[16][2];
//DUMPY: 1 0
//DUMPY: 4 0
  raw_event_POS
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ POS[1][4];
//DUMPY: 2 0
//DUMPY: 4 0
  raw_event_ROL
  /* {
  public:
    DATA12 E;
  } */ ROL[2][4];
//DUMPY: 4 0
//DUMPY: 2 0
  raw_event_RPC
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ RPC[4][2];
//DUMPY: 2 0
//DUMPY: 2 0
  raw_event_SCI
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ SCI[2][2];
//DUMPY: 24 0
//DUMPY: 2 0
  raw_event_TFW
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ TFW[24][2];
//DUMPY: 1 0
//DUMPY: 20 0
//DUMPY: 2 0
  raw_event_V
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ V[1][20][2];
//DUMPY: 1 0
//DUMPY: 162 0
  raw_event_XB
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ XB[1][162];

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event);
#endif//!__PSDC__
} ;

/** END_EVENT_RAW_STRUCTURE *******************************************/


/** BEGIN_EVENT_CAL_STRUCTURE ******************************************
 *
 * Event data structure.
 *
 * Do not edit - automatically generated.
 */

class cal_event : public cal_event_base
{
public:

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(cal_event);
#endif//!__PSDC__
} ;

/** END_EVENT_CAL_STRUCTURE *******************************************/


/** BEGIN_EVENT_RAW_STRUCTURE ******************************************
 *
 * Event data structure.
 *
 * Do not edit - automatically generated.
 */

class raw_sticky : public raw_sticky_base
{
public:

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_sticky);
#endif//!__PSDC__
} ;

/** END_EVENT_RAW_STRUCTURE *******************************************/


/** BEGIN_EVENT_DATA_MAPPING *******************************************
 *
 * Event data mapping.
 *
 * Do not edit - automatically generated.
 */

// The order in this file does not matter.
// This information parsed once and not treated eventwise,
// it is used to initialize a structure.

SIGNAL_MAPPING(DATA12,N01_01_1_E,fastbus_1.qdc_L_Q46993.data[0],N[0][0][0].E);
SIGNAL_MAPPING(DATA12,N01_01_1_T,fastbus_2.tdc_L_T48834.data[0],N[0][0][0].T);
SIGNAL_MAPPING(DATA12,N01_01_2_E,fastbus_1.qdc_L_Q46993.data[44],N[0][0][1].E);
SIGNAL_MAPPING(DATA12,N01_01_2_T,fastbus_2.tdc_L_T81795.data[12],N[0][0][1].T);
SIGNAL_MAPPING(DATA12,N01_02_1_E,fastbus_1.qdc_L_Q46993.data[4],N[0][1][0].E);
SIGNAL_MAPPING(DATA12,N01_02_1_T,fastbus_2.tdc_L_T48834.data[4],N[0][1][0].T);
SIGNAL_MAPPING(DATA12,N01_02_2_E,fastbus_1.qdc_L_Q46993.data[40],N[0][1][1].E);
SIGNAL_MAPPING(DATA12,N01_02_2_T,fastbus_2.tdc_L_T81795.data[8],N[0][1][1].T);
SIGNAL_MAPPING(DATA12,N01_03_1_E,fastbus_1.qdc_L_Q46993.data[8],N[0][2][0].E);
SIGNAL_MAPPING(DATA12,N01_03_1_T,fastbus_2.tdc_L_T48834.data[8],N[0][2][0].T);
SIGNAL_MAPPING(DATA12,N01_03_2_E,fastbus_1.qdc_L_Q46993.data[16],N[0][2][1].E);
SIGNAL_MAPPING(DATA12,N01_03_2_T,fastbus_2.tdc_L_T81806.data[0],N[0][2][1].T);
SIGNAL_MAPPING(DATA12,N01_04_1_E,fastbus_1.qdc_L_Q46993.data[12],N[0][3][0].E);
SIGNAL_MAPPING(DATA12,N01_04_1_T,fastbus_2.tdc_L_T48834.data[12],N[0][3][0].T);
SIGNAL_MAPPING(DATA12,N01_04_2_E,fastbus_1.qdc_L_Q46993.data[20],N[0][3][1].E);
SIGNAL_MAPPING(DATA12,N01_04_2_T,fastbus_2.tdc_L_T81806.data[4],N[0][3][1].T);
SIGNAL_MAPPING(DATA12,N01_05_1_E,fastbus_1.qdc_L_Q46993.data[1],N[0][4][0].E);
SIGNAL_MAPPING(DATA12,N01_05_1_T,fastbus_2.tdc_L_T48834.data[1],N[0][4][0].T);
SIGNAL_MAPPING(DATA12,N01_05_2_E,fastbus_1.qdc_L_Q46993.data[41],N[0][4][1].E);
SIGNAL_MAPPING(DATA12,N01_05_2_T,fastbus_2.tdc_L_T81795.data[9],N[0][4][1].T);
SIGNAL_MAPPING(DATA12,N01_06_1_E,fastbus_1.qdc_L_Q46993.data[5],N[0][5][0].E);
SIGNAL_MAPPING(DATA12,N01_06_1_T,fastbus_2.tdc_L_T48834.data[5],N[0][5][0].T);
SIGNAL_MAPPING(DATA12,N01_06_2_E,fastbus_1.qdc_L_Q46993.data[45],N[0][5][1].E);
SIGNAL_MAPPING(DATA12,N01_06_2_T,fastbus_2.tdc_L_T81795.data[13],N[0][5][1].T);
SIGNAL_MAPPING(DATA12,N01_07_1_E,fastbus_1.qdc_L_Q46993.data[9],N[0][6][0].E);
SIGNAL_MAPPING(DATA12,N01_07_1_T,fastbus_2.tdc_L_T48834.data[9],N[0][6][0].T);
SIGNAL_MAPPING(DATA12,N01_07_2_E,fastbus_1.qdc_L_Q46993.data[24],N[0][6][1].E);
SIGNAL_MAPPING(DATA12,N01_07_2_T,fastbus_2.tdc_L_T81806.data[8],N[0][6][1].T);
SIGNAL_MAPPING(DATA12,N01_08_1_E,fastbus_1.qdc_L_Q46993.data[13],N[0][7][0].E);
SIGNAL_MAPPING(DATA12,N01_08_1_T,fastbus_2.tdc_L_T48834.data[13],N[0][7][0].T);
SIGNAL_MAPPING(DATA12,N01_08_2_E,fastbus_1.qdc_L_Q46993.data[28],N[0][7][1].E);
SIGNAL_MAPPING(DATA12,N01_08_2_T,fastbus_2.tdc_L_T81806.data[12],N[0][7][1].T);
SIGNAL_MAPPING(DATA12,N01_09_1_E,fastbus_1.qdc_L_Q46993.data[2],N[0][8][0].E);
SIGNAL_MAPPING(DATA12,N01_09_1_T,fastbus_2.tdc_L_T48834.data[2],N[0][8][0].T);
SIGNAL_MAPPING(DATA12,N01_09_2_E,fastbus_1.qdc_L_Q46993.data[17],N[0][8][1].E);
SIGNAL_MAPPING(DATA12,N01_09_2_T,fastbus_2.tdc_L_T81806.data[1],N[0][8][1].T);
SIGNAL_MAPPING(DATA12,N01_10_1_E,fastbus_1.qdc_L_Q46993.data[6],N[0][9][0].E);
SIGNAL_MAPPING(DATA12,N01_10_1_T,fastbus_2.tdc_L_T48834.data[6],N[0][9][0].T);
SIGNAL_MAPPING(DATA12,N01_10_2_E,fastbus_1.qdc_L_Q46993.data[21],N[0][9][1].E);
SIGNAL_MAPPING(DATA12,N01_10_2_T,fastbus_2.tdc_L_T81806.data[5],N[0][9][1].T);
SIGNAL_MAPPING(DATA12,N01_11_1_E,fastbus_1.qdc_L_Q46993.data[10],N[0][10][0].E);
SIGNAL_MAPPING(DATA12,N01_11_1_T,fastbus_2.tdc_L_T48834.data[10],N[0][10][0].T);
SIGNAL_MAPPING(DATA12,N01_11_2_E,fastbus_1.qdc_L_Q46993.data[25],N[0][10][1].E);
SIGNAL_MAPPING(DATA12,N01_11_2_T,fastbus_2.tdc_L_T81806.data[9],N[0][10][1].T);
SIGNAL_MAPPING(DATA12,N01_12_1_E,fastbus_1.qdc_L_Q46993.data[14],N[0][11][0].E);
SIGNAL_MAPPING(DATA12,N01_12_1_T,fastbus_2.tdc_L_T48834.data[14],N[0][11][0].T);
SIGNAL_MAPPING(DATA12,N01_12_2_E,fastbus_1.qdc_L_Q46993.data[29],N[0][11][1].E);
SIGNAL_MAPPING(DATA12,N01_12_2_T,fastbus_2.tdc_L_T81806.data[13],N[0][11][1].T);
SIGNAL_MAPPING(DATA12,N01_13_1_E,fastbus_1.qdc_L_Q46993.data[3],N[0][12][0].E);
SIGNAL_MAPPING(DATA12,N01_13_1_T,fastbus_2.tdc_L_T48834.data[3],N[0][12][0].T);
SIGNAL_MAPPING(DATA12,N01_13_2_E,fastbus_1.qdc_L_Q46993.data[18],N[0][12][1].E);
SIGNAL_MAPPING(DATA12,N01_13_2_T,fastbus_2.tdc_L_T81806.data[2],N[0][12][1].T);
SIGNAL_MAPPING(DATA12,N01_14_1_E,fastbus_1.qdc_L_Q46993.data[7],N[0][13][0].E);
SIGNAL_MAPPING(DATA12,N01_14_1_T,fastbus_2.tdc_L_T48834.data[7],N[0][13][0].T);
SIGNAL_MAPPING(DATA12,N01_14_2_E,fastbus_1.qdc_L_Q46993.data[22],N[0][13][1].E);
SIGNAL_MAPPING(DATA12,N01_14_2_T,fastbus_2.tdc_L_T81806.data[6],N[0][13][1].T);
SIGNAL_MAPPING(DATA12,N01_15_1_E,fastbus_1.qdc_L_Q46993.data[46],N[0][14][0].E);
SIGNAL_MAPPING(DATA12,N01_15_1_T,fastbus_2.tdc_L_T81795.data[14],N[0][14][0].T);
SIGNAL_MAPPING(DATA12,N01_15_2_E,fastbus_1.qdc_L_Q46993.data[26],N[0][14][1].E);
SIGNAL_MAPPING(DATA12,N01_15_2_T,fastbus_2.tdc_L_T81806.data[10],N[0][14][1].T);
SIGNAL_MAPPING(DATA12,N01_16_1_E,fastbus_1.qdc_L_Q46993.data[42],N[0][15][0].E);
SIGNAL_MAPPING(DATA12,N01_16_1_T,fastbus_2.tdc_L_T81795.data[10],N[0][15][0].T);
SIGNAL_MAPPING(DATA12,N01_16_2_E,fastbus_1.qdc_L_Q46993.data[30],N[0][15][1].E);
SIGNAL_MAPPING(DATA12,N01_16_2_T,fastbus_2.tdc_L_T81806.data[14],N[0][15][1].T);
SIGNAL_MAPPING(DATA12,N01_17_1_E,fastbus_1.qdc_L_Q46993.data[11],N[0][16][0].E);
SIGNAL_MAPPING(DATA12,N01_17_1_T,fastbus_2.tdc_L_T48834.data[11],N[0][16][0].T);
SIGNAL_MAPPING(DATA12,N01_17_2_E,fastbus_1.qdc_L_Q46993.data[19],N[0][16][1].E);
SIGNAL_MAPPING(DATA12,N01_17_2_T,fastbus_2.tdc_L_T81806.data[3],N[0][16][1].T);
SIGNAL_MAPPING(DATA12,N01_18_1_E,fastbus_1.qdc_L_Q46993.data[15],N[0][17][0].E);
SIGNAL_MAPPING(DATA12,N01_18_1_T,fastbus_2.tdc_L_T48834.data[15],N[0][17][0].T);
SIGNAL_MAPPING(DATA12,N01_18_2_E,fastbus_1.qdc_L_Q46993.data[23],N[0][17][1].E);
SIGNAL_MAPPING(DATA12,N01_18_2_T,fastbus_2.tdc_L_T81806.data[7],N[0][17][1].T);
SIGNAL_MAPPING(DATA12,N01_19_1_E,fastbus_1.qdc_L_Q46993.data[47],N[0][18][0].E);
SIGNAL_MAPPING(DATA12,N01_19_1_T,fastbus_2.tdc_L_T81795.data[15],N[0][18][0].T);
SIGNAL_MAPPING(DATA12,N01_19_2_E,fastbus_1.qdc_L_Q46993.data[27],N[0][18][1].E);
SIGNAL_MAPPING(DATA12,N01_19_2_T,fastbus_2.tdc_L_T81806.data[11],N[0][18][1].T);
SIGNAL_MAPPING(DATA12,N01_20_1_E,fastbus_1.qdc_L_Q46993.data[43],N[0][19][0].E);
SIGNAL_MAPPING(DATA12,N01_20_1_T,fastbus_2.tdc_L_T81795.data[11],N[0][19][0].T);
SIGNAL_MAPPING(DATA12,N01_20_2_E,fastbus_1.qdc_L_Q46993.data[31],N[0][19][1].E);
SIGNAL_MAPPING(DATA12,N01_20_2_T,fastbus_2.tdc_L_T81806.data[15],N[0][19][1].T);
SIGNAL_MAPPING(DATA12,N02_01_1_E,fastbus_1.qdc_L_Q15358.data[0],N[1][0][0].E);
SIGNAL_MAPPING(DATA12,N02_01_1_T,fastbus_2.tdc_L_T81859.data[0],N[1][0][0].T);
SIGNAL_MAPPING(DATA12,N02_01_2_E,fastbus_1.qdc_L_Q46993.data[36],N[1][0][1].E);
SIGNAL_MAPPING(DATA12,N02_01_2_T,fastbus_2.tdc_L_T81795.data[4],N[1][0][1].T);
SIGNAL_MAPPING(DATA12,N02_02_1_E,fastbus_1.qdc_L_Q15358.data[4],N[1][1][0].E);
SIGNAL_MAPPING(DATA12,N02_02_1_T,fastbus_2.tdc_L_T81859.data[4],N[1][1][0].T);
SIGNAL_MAPPING(DATA12,N02_02_2_E,fastbus_1.qdc_L_Q46993.data[32],N[1][1][1].E);
SIGNAL_MAPPING(DATA12,N02_02_2_T,fastbus_2.tdc_L_T81795.data[0],N[1][1][1].T);
SIGNAL_MAPPING(DATA12,N02_03_1_E,fastbus_1.qdc_L_Q15358.data[8],N[1][2][0].E);
SIGNAL_MAPPING(DATA12,N02_03_1_T,fastbus_2.tdc_L_T81859.data[8],N[1][2][0].T);
SIGNAL_MAPPING(DATA12,N02_03_2_E,fastbus_1.qdc_L_Q15358.data[16],N[1][2][1].E);
SIGNAL_MAPPING(DATA12,N02_03_2_T,fastbus_2.tdc_L_T81808.data[0],N[1][2][1].T);
SIGNAL_MAPPING(DATA12,N02_04_1_E,fastbus_1.qdc_L_Q15358.data[12],N[1][3][0].E);
SIGNAL_MAPPING(DATA12,N02_04_1_T,fastbus_2.tdc_L_T81859.data[12],N[1][3][0].T);
SIGNAL_MAPPING(DATA12,N02_04_2_E,fastbus_1.qdc_L_Q15358.data[20],N[1][3][1].E);
SIGNAL_MAPPING(DATA12,N02_04_2_T,fastbus_2.tdc_L_T81808.data[4],N[1][3][1].T);
SIGNAL_MAPPING(DATA12,N02_05_1_E,fastbus_1.qdc_L_Q15358.data[1],N[1][4][0].E);
SIGNAL_MAPPING(DATA12,N02_05_1_T,fastbus_2.tdc_L_T81859.data[1],N[1][4][0].T);
SIGNAL_MAPPING(DATA12,N02_05_2_E,fastbus_1.qdc_L_Q46993.data[37],N[1][4][1].E);
SIGNAL_MAPPING(DATA12,N02_05_2_T,fastbus_2.tdc_L_T81795.data[5],N[1][4][1].T);
SIGNAL_MAPPING(DATA12,N02_06_1_E,fastbus_1.qdc_L_Q15358.data[5],N[1][5][0].E);
SIGNAL_MAPPING(DATA12,N02_06_1_T,fastbus_2.tdc_L_T81859.data[5],N[1][5][0].T);
SIGNAL_MAPPING(DATA12,N02_06_2_E,fastbus_1.qdc_L_Q46993.data[33],N[1][5][1].E);
SIGNAL_MAPPING(DATA12,N02_06_2_T,fastbus_2.tdc_L_T81795.data[1],N[1][5][1].T);
SIGNAL_MAPPING(DATA12,N02_07_1_E,fastbus_1.qdc_L_Q15358.data[9],N[1][6][0].E);
SIGNAL_MAPPING(DATA12,N02_07_1_T,fastbus_2.tdc_L_T81859.data[9],N[1][6][0].T);
SIGNAL_MAPPING(DATA12,N02_07_2_E,fastbus_1.qdc_L_Q15358.data[24],N[1][6][1].E);
SIGNAL_MAPPING(DATA12,N02_07_2_T,fastbus_2.tdc_L_T81808.data[8],N[1][6][1].T);
SIGNAL_MAPPING(DATA12,N02_08_1_E,fastbus_1.qdc_L_Q15358.data[13],N[1][7][0].E);
SIGNAL_MAPPING(DATA12,N02_08_1_T,fastbus_2.tdc_L_T81859.data[13],N[1][7][0].T);
SIGNAL_MAPPING(DATA12,N02_08_2_E,fastbus_1.qdc_L_Q15358.data[28],N[1][7][1].E);
SIGNAL_MAPPING(DATA12,N02_08_2_T,fastbus_2.tdc_L_T81808.data[12],N[1][7][1].T);
SIGNAL_MAPPING(DATA12,N02_09_1_E,fastbus_1.qdc_L_Q15358.data[2],N[1][8][0].E);
SIGNAL_MAPPING(DATA12,N02_09_1_T,fastbus_2.tdc_L_T81859.data[2],N[1][8][0].T);
SIGNAL_MAPPING(DATA12,N02_09_2_E,fastbus_1.qdc_L_Q15358.data[17],N[1][8][1].E);
SIGNAL_MAPPING(DATA12,N02_09_2_T,fastbus_2.tdc_L_T81808.data[1],N[1][8][1].T);
SIGNAL_MAPPING(DATA12,N02_10_1_E,fastbus_1.qdc_L_Q15358.data[6],N[1][9][0].E);
SIGNAL_MAPPING(DATA12,N02_10_1_T,fastbus_2.tdc_L_T81859.data[6],N[1][9][0].T);
SIGNAL_MAPPING(DATA12,N02_10_2_E,fastbus_1.qdc_L_Q15358.data[21],N[1][9][1].E);
SIGNAL_MAPPING(DATA12,N02_10_2_T,fastbus_2.tdc_L_T81808.data[5],N[1][9][1].T);
SIGNAL_MAPPING(DATA12,N02_11_1_E,fastbus_1.qdc_L_Q15358.data[10],N[1][10][0].E);
SIGNAL_MAPPING(DATA12,N02_11_1_T,fastbus_2.tdc_L_T81859.data[10],N[1][10][0].T);
SIGNAL_MAPPING(DATA12,N02_11_2_E,fastbus_1.qdc_L_Q15358.data[25],N[1][10][1].E);
SIGNAL_MAPPING(DATA12,N02_11_2_T,fastbus_2.tdc_L_T81808.data[9],N[1][10][1].T);
SIGNAL_MAPPING(DATA12,N02_12_1_E,fastbus_1.qdc_L_Q15358.data[14],N[1][11][0].E);
SIGNAL_MAPPING(DATA12,N02_12_1_T,fastbus_2.tdc_L_T81859.data[14],N[1][11][0].T);
SIGNAL_MAPPING(DATA12,N02_12_2_E,fastbus_1.qdc_L_Q15358.data[29],N[1][11][1].E);
SIGNAL_MAPPING(DATA12,N02_12_2_T,fastbus_2.tdc_L_T81808.data[13],N[1][11][1].T);
SIGNAL_MAPPING(DATA12,N02_13_1_E,fastbus_1.qdc_L_Q15358.data[3],N[1][12][0].E);
SIGNAL_MAPPING(DATA12,N02_13_1_T,fastbus_2.tdc_L_T81859.data[3],N[1][12][0].T);
SIGNAL_MAPPING(DATA12,N02_13_2_E,fastbus_1.qdc_L_Q15358.data[18],N[1][12][1].E);
SIGNAL_MAPPING(DATA12,N02_13_2_T,fastbus_2.tdc_L_T81808.data[2],N[1][12][1].T);
SIGNAL_MAPPING(DATA12,N02_14_1_E,fastbus_1.qdc_L_Q15358.data[7],N[1][13][0].E);
SIGNAL_MAPPING(DATA12,N02_14_1_T,fastbus_2.tdc_L_T81859.data[7],N[1][13][0].T);
SIGNAL_MAPPING(DATA12,N02_14_2_E,fastbus_1.qdc_L_Q15358.data[22],N[1][13][1].E);
SIGNAL_MAPPING(DATA12,N02_14_2_T,fastbus_2.tdc_L_T81808.data[6],N[1][13][1].T);
SIGNAL_MAPPING(DATA12,N02_15_1_E,fastbus_1.qdc_L_Q46993.data[38],N[1][14][0].E);
SIGNAL_MAPPING(DATA12,N02_15_1_T,fastbus_2.tdc_L_T81795.data[6],N[1][14][0].T);
SIGNAL_MAPPING(DATA12,N02_15_2_E,fastbus_1.qdc_L_Q15358.data[26],N[1][14][1].E);
SIGNAL_MAPPING(DATA12,N02_15_2_T,fastbus_2.tdc_L_T81808.data[10],N[1][14][1].T);
SIGNAL_MAPPING(DATA12,N02_16_1_E,fastbus_1.qdc_L_Q46993.data[34],N[1][15][0].E);
SIGNAL_MAPPING(DATA12,N02_16_1_T,fastbus_2.tdc_L_T81795.data[2],N[1][15][0].T);
SIGNAL_MAPPING(DATA12,N02_16_2_E,fastbus_1.qdc_L_Q15358.data[30],N[1][15][1].E);
SIGNAL_MAPPING(DATA12,N02_16_2_T,fastbus_2.tdc_L_T81808.data[14],N[1][15][1].T);
SIGNAL_MAPPING(DATA12,N02_17_1_E,fastbus_1.qdc_L_Q15358.data[11],N[1][16][0].E);
SIGNAL_MAPPING(DATA12,N02_17_1_T,fastbus_2.tdc_L_T81859.data[11],N[1][16][0].T);
SIGNAL_MAPPING(DATA12,N02_17_2_E,fastbus_1.qdc_L_Q15358.data[19],N[1][16][1].E);
SIGNAL_MAPPING(DATA12,N02_17_2_T,fastbus_2.tdc_L_T81808.data[3],N[1][16][1].T);
SIGNAL_MAPPING(DATA12,N02_18_1_E,fastbus_1.qdc_L_Q15358.data[15],N[1][17][0].E);
SIGNAL_MAPPING(DATA12,N02_18_1_T,fastbus_2.tdc_L_T81859.data[15],N[1][17][0].T);
SIGNAL_MAPPING(DATA12,N02_18_2_E,fastbus_1.qdc_L_Q15358.data[23],N[1][17][1].E);
SIGNAL_MAPPING(DATA12,N02_18_2_T,fastbus_2.tdc_L_T81808.data[7],N[1][17][1].T);
SIGNAL_MAPPING(DATA12,N02_19_1_E,fastbus_1.qdc_L_Q46993.data[39],N[1][18][0].E);
SIGNAL_MAPPING(DATA12,N02_19_1_T,fastbus_2.tdc_L_T81795.data[7],N[1][18][0].T);
SIGNAL_MAPPING(DATA12,N02_19_2_E,fastbus_1.qdc_L_Q15358.data[27],N[1][18][1].E);
SIGNAL_MAPPING(DATA12,N02_19_2_T,fastbus_2.tdc_L_T81808.data[11],N[1][18][1].T);
SIGNAL_MAPPING(DATA12,N02_20_1_E,fastbus_1.qdc_L_Q46993.data[35],N[1][19][0].E);
SIGNAL_MAPPING(DATA12,N02_20_1_T,fastbus_2.tdc_L_T81795.data[3],N[1][19][0].T);
SIGNAL_MAPPING(DATA12,N02_20_2_E,fastbus_1.qdc_L_Q15358.data[31],N[1][19][1].E);
SIGNAL_MAPPING(DATA12,N02_20_2_T,fastbus_2.tdc_L_T81808.data[15],N[1][19][1].T);
SIGNAL_MAPPING(DATA12,N03_01_1_E,fastbus_1.qdc_L_Q15358.data[32],N[2][0][0].E);
SIGNAL_MAPPING(DATA12,N03_01_1_T,fastbus_2.tdc_L_T48854.data[0],N[2][0][0].T);
SIGNAL_MAPPING(DATA12,N03_01_2_E,fastbus_1.qdc_F_Q46962.data[28],N[2][0][1].E);
SIGNAL_MAPPING(DATA12,N03_01_2_T,fastbus_2.tdc_L_T48834.data[28],N[2][0][1].T);
SIGNAL_MAPPING(DATA12,N03_02_1_E,fastbus_1.qdc_L_Q15358.data[36],N[2][1][0].E);
SIGNAL_MAPPING(DATA12,N03_02_1_T,fastbus_2.tdc_L_T48854.data[4],N[2][1][0].T);
SIGNAL_MAPPING(DATA12,N03_02_2_E,fastbus_1.qdc_F_Q46962.data[24],N[2][1][1].E);
SIGNAL_MAPPING(DATA12,N03_02_2_T,fastbus_2.tdc_L_T48834.data[24],N[2][1][1].T);
SIGNAL_MAPPING(DATA12,N03_03_1_E,fastbus_1.qdc_L_Q15358.data[40],N[2][2][0].E);
SIGNAL_MAPPING(DATA12,N03_03_1_T,fastbus_2.tdc_L_T48854.data[8],N[2][2][0].T);
SIGNAL_MAPPING(DATA12,N03_03_2_E,fastbus_1.qdc_F_Q46962.data[0],N[2][2][1].E);
SIGNAL_MAPPING(DATA12,N03_03_2_T,fastbus_2.tdc_L_T87047.data[0],N[2][2][1].T);
SIGNAL_MAPPING(DATA12,N03_04_1_E,fastbus_1.qdc_L_Q15358.data[44],N[2][3][0].E);
SIGNAL_MAPPING(DATA12,N03_04_1_T,fastbus_2.tdc_L_T48854.data[12],N[2][3][0].T);
SIGNAL_MAPPING(DATA12,N03_04_2_E,fastbus_1.qdc_F_Q46962.data[4],N[2][3][1].E);
SIGNAL_MAPPING(DATA12,N03_04_2_T,fastbus_2.tdc_L_T87047.data[4],N[2][3][1].T);
SIGNAL_MAPPING(DATA12,N03_05_1_E,fastbus_1.qdc_L_Q15358.data[33],N[2][4][0].E);
SIGNAL_MAPPING(DATA12,N03_05_1_T,fastbus_2.tdc_L_T48854.data[1],N[2][4][0].T);
SIGNAL_MAPPING(DATA12,N03_05_2_E,fastbus_1.qdc_F_Q46962.data[25],N[2][4][1].E);
SIGNAL_MAPPING(DATA12,N03_05_2_T,fastbus_2.tdc_L_T48834.data[25],N[2][4][1].T);
SIGNAL_MAPPING(DATA12,N03_06_1_E,fastbus_1.qdc_L_Q15358.data[37],N[2][5][0].E);
SIGNAL_MAPPING(DATA12,N03_06_1_T,fastbus_2.tdc_L_T48854.data[5],N[2][5][0].T);
SIGNAL_MAPPING(DATA12,N03_06_2_E,fastbus_1.qdc_F_Q46962.data[29],N[2][5][1].E);
SIGNAL_MAPPING(DATA12,N03_06_2_T,fastbus_2.tdc_L_T48834.data[29],N[2][5][1].T);
SIGNAL_MAPPING(DATA12,N03_07_1_E,fastbus_1.qdc_L_Q15358.data[41],N[2][6][0].E);
SIGNAL_MAPPING(DATA12,N03_07_1_T,fastbus_2.tdc_L_T48854.data[9],N[2][6][0].T);
SIGNAL_MAPPING(DATA12,N03_07_2_E,fastbus_1.qdc_F_Q46962.data[8],N[2][6][1].E);
SIGNAL_MAPPING(DATA12,N03_07_2_T,fastbus_2.tdc_L_T87047.data[8],N[2][6][1].T);
SIGNAL_MAPPING(DATA12,N03_08_1_E,fastbus_1.qdc_L_Q15358.data[45],N[2][7][0].E);
SIGNAL_MAPPING(DATA12,N03_08_1_T,fastbus_2.tdc_L_T48854.data[13],N[2][7][0].T);
SIGNAL_MAPPING(DATA12,N03_08_2_E,fastbus_1.qdc_F_Q46962.data[12],N[2][7][1].E);
SIGNAL_MAPPING(DATA12,N03_08_2_T,fastbus_2.tdc_L_T87047.data[12],N[2][7][1].T);
SIGNAL_MAPPING(DATA12,N03_09_1_E,fastbus_1.qdc_L_Q15358.data[34],N[2][8][0].E);
SIGNAL_MAPPING(DATA12,N03_09_1_T,fastbus_2.tdc_L_T48854.data[2],N[2][8][0].T);
SIGNAL_MAPPING(DATA12,N03_09_2_E,fastbus_1.qdc_F_Q46962.data[1],N[2][8][1].E);
SIGNAL_MAPPING(DATA12,N03_09_2_T,fastbus_2.tdc_L_T87047.data[1],N[2][8][1].T);
SIGNAL_MAPPING(DATA12,N03_10_1_E,fastbus_1.qdc_L_Q15358.data[38],N[2][9][0].E);
SIGNAL_MAPPING(DATA12,N03_10_1_T,fastbus_2.tdc_L_T48854.data[6],N[2][9][0].T);
SIGNAL_MAPPING(DATA12,N03_10_2_E,fastbus_1.qdc_F_Q46962.data[5],N[2][9][1].E);
SIGNAL_MAPPING(DATA12,N03_10_2_T,fastbus_2.tdc_L_T87047.data[5],N[2][9][1].T);
SIGNAL_MAPPING(DATA12,N03_11_1_E,fastbus_1.qdc_L_Q15358.data[42],N[2][10][0].E);
SIGNAL_MAPPING(DATA12,N03_11_1_T,fastbus_2.tdc_L_T48854.data[10],N[2][10][0].T);
SIGNAL_MAPPING(DATA12,N03_11_2_E,fastbus_1.qdc_F_Q46962.data[9],N[2][10][1].E);
SIGNAL_MAPPING(DATA12,N03_11_2_T,fastbus_2.tdc_L_T87047.data[9],N[2][10][1].T);
SIGNAL_MAPPING(DATA12,N03_12_1_E,fastbus_1.qdc_L_Q15358.data[46],N[2][11][0].E);
SIGNAL_MAPPING(DATA12,N03_12_1_T,fastbus_2.tdc_L_T48854.data[14],N[2][11][0].T);
SIGNAL_MAPPING(DATA12,N03_12_2_E,fastbus_1.qdc_F_Q46962.data[13],N[2][11][1].E);
SIGNAL_MAPPING(DATA12,N03_12_2_T,fastbus_2.tdc_L_T87047.data[13],N[2][11][1].T);
SIGNAL_MAPPING(DATA12,N03_13_1_E,fastbus_1.qdc_L_Q15358.data[35],N[2][12][0].E);
SIGNAL_MAPPING(DATA12,N03_13_1_T,fastbus_2.tdc_L_T48854.data[3],N[2][12][0].T);
SIGNAL_MAPPING(DATA12,N03_13_2_E,fastbus_1.qdc_F_Q46962.data[2],N[2][12][1].E);
SIGNAL_MAPPING(DATA12,N03_13_2_T,fastbus_2.tdc_L_T87047.data[2],N[2][12][1].T);
SIGNAL_MAPPING(DATA12,N03_14_1_E,fastbus_1.qdc_L_Q15358.data[39],N[2][13][0].E);
SIGNAL_MAPPING(DATA12,N03_14_1_T,fastbus_2.tdc_L_T48854.data[7],N[2][13][0].T);
SIGNAL_MAPPING(DATA12,N03_14_2_E,fastbus_1.qdc_F_Q46962.data[6],N[2][13][1].E);
SIGNAL_MAPPING(DATA12,N03_14_2_T,fastbus_2.tdc_L_T87047.data[6],N[2][13][1].T);
SIGNAL_MAPPING(DATA12,N03_15_1_E,fastbus_1.qdc_F_Q46962.data[30],N[2][14][0].E);
SIGNAL_MAPPING(DATA12,N03_15_1_T,fastbus_2.tdc_L_T48834.data[30],N[2][14][0].T);
SIGNAL_MAPPING(DATA12,N03_15_2_E,fastbus_1.qdc_F_Q46962.data[10],N[2][14][1].E);
SIGNAL_MAPPING(DATA12,N03_15_2_T,fastbus_2.tdc_L_T87047.data[10],N[2][14][1].T);
SIGNAL_MAPPING(DATA12,N03_16_1_E,fastbus_1.qdc_F_Q46962.data[26],N[2][15][0].E);
SIGNAL_MAPPING(DATA12,N03_16_1_T,fastbus_2.tdc_L_T48834.data[26],N[2][15][0].T);
SIGNAL_MAPPING(DATA12,N03_16_2_E,fastbus_1.qdc_F_Q46962.data[14],N[2][15][1].E);
SIGNAL_MAPPING(DATA12,N03_16_2_T,fastbus_2.tdc_L_T87047.data[14],N[2][15][1].T);
SIGNAL_MAPPING(DATA12,N03_17_1_E,fastbus_1.qdc_L_Q15358.data[43],N[2][16][0].E);
SIGNAL_MAPPING(DATA12,N03_17_1_T,fastbus_2.tdc_L_T48854.data[11],N[2][16][0].T);
SIGNAL_MAPPING(DATA12,N03_17_2_E,fastbus_1.qdc_F_Q46962.data[3],N[2][16][1].E);
SIGNAL_MAPPING(DATA12,N03_17_2_T,fastbus_2.tdc_L_T87047.data[3],N[2][16][1].T);
SIGNAL_MAPPING(DATA12,N03_18_1_E,fastbus_1.qdc_L_Q15358.data[47],N[2][17][0].E);
SIGNAL_MAPPING(DATA12,N03_18_1_T,fastbus_2.tdc_L_T48854.data[15],N[2][17][0].T);
SIGNAL_MAPPING(DATA12,N03_18_2_E,fastbus_1.qdc_F_Q46962.data[7],N[2][17][1].E);
SIGNAL_MAPPING(DATA12,N03_18_2_T,fastbus_2.tdc_L_T87047.data[7],N[2][17][1].T);
SIGNAL_MAPPING(DATA12,N03_19_1_E,fastbus_1.qdc_F_Q46962.data[31],N[2][18][0].E);
SIGNAL_MAPPING(DATA12,N03_19_1_T,fastbus_2.tdc_L_T48834.data[31],N[2][18][0].T);
SIGNAL_MAPPING(DATA12,N03_19_2_E,fastbus_1.qdc_F_Q46962.data[11],N[2][18][1].E);
SIGNAL_MAPPING(DATA12,N03_19_2_T,fastbus_2.tdc_L_T87047.data[11],N[2][18][1].T);
SIGNAL_MAPPING(DATA12,N03_20_1_E,fastbus_1.qdc_F_Q46962.data[27],N[2][19][0].E);
SIGNAL_MAPPING(DATA12,N03_20_1_T,fastbus_2.tdc_L_T48834.data[27],N[2][19][0].T);
SIGNAL_MAPPING(DATA12,N03_20_2_E,fastbus_1.qdc_F_Q46962.data[15],N[2][19][1].E);
SIGNAL_MAPPING(DATA12,N03_20_2_T,fastbus_2.tdc_L_T87047.data[15],N[2][19][1].T);
SIGNAL_MAPPING(DATA12,N04_01_1_E,fastbus_1.qdc_F_Q46962.data[32],N[3][0][0].E);
SIGNAL_MAPPING(DATA12,N04_01_1_T,fastbus_2.tdc_L_T81806.data[16],N[3][0][0].T);
SIGNAL_MAPPING(DATA12,N04_01_2_E,fastbus_1.qdc_F_Q46962.data[20],N[3][0][1].E);
SIGNAL_MAPPING(DATA12,N04_01_2_T,fastbus_2.tdc_L_T48834.data[20],N[3][0][1].T);
SIGNAL_MAPPING(DATA12,N04_02_1_E,fastbus_1.qdc_F_Q46962.data[36],N[3][1][0].E);
SIGNAL_MAPPING(DATA12,N04_02_1_T,fastbus_2.tdc_L_T81806.data[20],N[3][1][0].T);
SIGNAL_MAPPING(DATA12,N04_02_2_E,fastbus_1.qdc_F_Q46962.data[16],N[3][1][1].E);
SIGNAL_MAPPING(DATA12,N04_02_2_T,fastbus_2.tdc_L_T48834.data[16],N[3][1][1].T);
SIGNAL_MAPPING(DATA12,N04_03_1_E,fastbus_1.qdc_F_Q46962.data[40],N[3][2][0].E);
SIGNAL_MAPPING(DATA12,N04_03_1_T,fastbus_2.tdc_L_T81806.data[24],N[3][2][0].T);
SIGNAL_MAPPING(DATA12,N04_03_2_E,fastbus_1.qdc_L_Q15372.data[0],N[3][2][1].E);
SIGNAL_MAPPING(DATA12,N04_03_2_T,fastbus_2.tdc_L_T81795.data[16],N[3][2][1].T);
SIGNAL_MAPPING(DATA12,N04_04_1_E,fastbus_1.qdc_F_Q46962.data[44],N[3][3][0].E);
SIGNAL_MAPPING(DATA12,N04_04_1_T,fastbus_2.tdc_L_T81806.data[28],N[3][3][0].T);
SIGNAL_MAPPING(DATA12,N04_04_2_E,fastbus_1.qdc_L_Q15372.data[4],N[3][3][1].E);
SIGNAL_MAPPING(DATA12,N04_04_2_T,fastbus_2.tdc_L_T81795.data[20],N[3][3][1].T);
SIGNAL_MAPPING(DATA12,N04_05_1_E,fastbus_1.qdc_F_Q46962.data[33],N[3][4][0].E);
SIGNAL_MAPPING(DATA12,N04_05_1_T,fastbus_2.tdc_L_T81806.data[17],N[3][4][0].T);
SIGNAL_MAPPING(DATA12,N04_05_2_E,fastbus_1.qdc_F_Q46962.data[21],N[3][4][1].E);
SIGNAL_MAPPING(DATA12,N04_05_2_T,fastbus_2.tdc_L_T48834.data[21],N[3][4][1].T);
SIGNAL_MAPPING(DATA12,N04_06_1_E,fastbus_1.qdc_F_Q46962.data[37],N[3][5][0].E);
SIGNAL_MAPPING(DATA12,N04_06_1_T,fastbus_2.tdc_L_T81806.data[21],N[3][5][0].T);
SIGNAL_MAPPING(DATA12,N04_06_2_E,fastbus_1.qdc_F_Q46962.data[17],N[3][5][1].E);
SIGNAL_MAPPING(DATA12,N04_06_2_T,fastbus_2.tdc_L_T48834.data[17],N[3][5][1].T);
SIGNAL_MAPPING(DATA12,N04_07_1_E,fastbus_1.qdc_F_Q46962.data[41],N[3][6][0].E);
SIGNAL_MAPPING(DATA12,N04_07_1_T,fastbus_2.tdc_L_T81806.data[25],N[3][6][0].T);
SIGNAL_MAPPING(DATA12,N04_07_2_E,fastbus_1.qdc_L_Q15372.data[8],N[3][6][1].E);
SIGNAL_MAPPING(DATA12,N04_07_2_T,fastbus_2.tdc_L_T81795.data[24],N[3][6][1].T);
SIGNAL_MAPPING(DATA12,N04_08_1_E,fastbus_1.qdc_F_Q46962.data[45],N[3][7][0].E);
SIGNAL_MAPPING(DATA12,N04_08_1_T,fastbus_2.tdc_L_T81806.data[29],N[3][7][0].T);
SIGNAL_MAPPING(DATA12,N04_08_2_E,fastbus_1.qdc_L_Q15372.data[12],N[3][7][1].E);
SIGNAL_MAPPING(DATA12,N04_08_2_T,fastbus_2.tdc_L_T81795.data[28],N[3][7][1].T);
SIGNAL_MAPPING(DATA12,N04_09_1_E,fastbus_1.qdc_F_Q46962.data[34],N[3][8][0].E);
SIGNAL_MAPPING(DATA12,N04_09_1_T,fastbus_2.tdc_L_T81806.data[18],N[3][8][0].T);
SIGNAL_MAPPING(DATA12,N04_09_2_E,fastbus_1.qdc_L_Q15372.data[1],N[3][8][1].E);
SIGNAL_MAPPING(DATA12,N04_09_2_T,fastbus_2.tdc_L_T81795.data[17],N[3][8][1].T);
SIGNAL_MAPPING(DATA12,N04_10_1_E,fastbus_1.qdc_F_Q46962.data[38],N[3][9][0].E);
SIGNAL_MAPPING(DATA12,N04_10_1_T,fastbus_2.tdc_L_T81806.data[22],N[3][9][0].T);
SIGNAL_MAPPING(DATA12,N04_10_2_E,fastbus_1.qdc_L_Q15372.data[5],N[3][9][1].E);
SIGNAL_MAPPING(DATA12,N04_10_2_T,fastbus_2.tdc_L_T81795.data[21],N[3][9][1].T);
SIGNAL_MAPPING(DATA12,N04_11_1_E,fastbus_1.qdc_F_Q46962.data[42],N[3][10][0].E);
SIGNAL_MAPPING(DATA12,N04_11_1_T,fastbus_2.tdc_L_T81806.data[26],N[3][10][0].T);
SIGNAL_MAPPING(DATA12,N04_11_2_E,fastbus_1.qdc_L_Q15372.data[9],N[3][10][1].E);
SIGNAL_MAPPING(DATA12,N04_11_2_T,fastbus_2.tdc_L_T81795.data[25],N[3][10][1].T);
SIGNAL_MAPPING(DATA12,N04_12_1_E,fastbus_1.qdc_F_Q46962.data[46],N[3][11][0].E);
SIGNAL_MAPPING(DATA12,N04_12_1_T,fastbus_2.tdc_L_T81806.data[30],N[3][11][0].T);
SIGNAL_MAPPING(DATA12,N04_12_2_E,fastbus_1.qdc_L_Q15372.data[13],N[3][11][1].E);
SIGNAL_MAPPING(DATA12,N04_12_2_T,fastbus_2.tdc_L_T81795.data[29],N[3][11][1].T);
SIGNAL_MAPPING(DATA12,N04_13_1_E,fastbus_1.qdc_F_Q46962.data[35],N[3][12][0].E);
SIGNAL_MAPPING(DATA12,N04_13_1_T,fastbus_2.tdc_L_T81806.data[19],N[3][12][0].T);
SIGNAL_MAPPING(DATA12,N04_13_2_E,fastbus_1.qdc_L_Q15372.data[2],N[3][12][1].E);
SIGNAL_MAPPING(DATA12,N04_13_2_T,fastbus_2.tdc_L_T81795.data[18],N[3][12][1].T);
SIGNAL_MAPPING(DATA12,N04_14_1_E,fastbus_1.qdc_F_Q46962.data[39],N[3][13][0].E);
SIGNAL_MAPPING(DATA12,N04_14_1_T,fastbus_2.tdc_L_T81806.data[23],N[3][13][0].T);
SIGNAL_MAPPING(DATA12,N04_14_2_E,fastbus_1.qdc_L_Q15372.data[6],N[3][13][1].E);
SIGNAL_MAPPING(DATA12,N04_14_2_T,fastbus_2.tdc_L_T81795.data[22],N[3][13][1].T);
SIGNAL_MAPPING(DATA12,N04_15_1_E,fastbus_1.qdc_F_Q46962.data[22],N[3][14][0].E);
SIGNAL_MAPPING(DATA12,N04_15_1_T,fastbus_2.tdc_L_T48834.data[22],N[3][14][0].T);
SIGNAL_MAPPING(DATA12,N04_15_2_E,fastbus_1.qdc_L_Q15372.data[10],N[3][14][1].E);
SIGNAL_MAPPING(DATA12,N04_15_2_T,fastbus_2.tdc_L_T81795.data[26],N[3][14][1].T);
SIGNAL_MAPPING(DATA12,N04_16_1_E,fastbus_1.qdc_F_Q46962.data[18],N[3][15][0].E);
SIGNAL_MAPPING(DATA12,N04_16_1_T,fastbus_2.tdc_L_T48834.data[18],N[3][15][0].T);
SIGNAL_MAPPING(DATA12,N04_16_2_E,fastbus_1.qdc_L_Q15372.data[14],N[3][15][1].E);
SIGNAL_MAPPING(DATA12,N04_16_2_T,fastbus_2.tdc_L_T81795.data[30],N[3][15][1].T);
SIGNAL_MAPPING(DATA12,N04_17_1_E,fastbus_1.qdc_F_Q46962.data[43],N[3][16][0].E);
SIGNAL_MAPPING(DATA12,N04_17_1_T,fastbus_2.tdc_L_T81806.data[27],N[3][16][0].T);
SIGNAL_MAPPING(DATA12,N04_17_2_E,fastbus_1.qdc_L_Q15372.data[3],N[3][16][1].E);
SIGNAL_MAPPING(DATA12,N04_17_2_T,fastbus_2.tdc_L_T81795.data[19],N[3][16][1].T);
SIGNAL_MAPPING(DATA12,N04_18_1_E,fastbus_1.qdc_F_Q46962.data[47],N[3][17][0].E);
SIGNAL_MAPPING(DATA12,N04_18_1_T,fastbus_2.tdc_L_T81806.data[31],N[3][17][0].T);
SIGNAL_MAPPING(DATA12,N04_18_2_E,fastbus_1.qdc_L_Q15372.data[7],N[3][17][1].E);
SIGNAL_MAPPING(DATA12,N04_18_2_T,fastbus_2.tdc_L_T81795.data[23],N[3][17][1].T);
SIGNAL_MAPPING(DATA12,N04_19_1_E,fastbus_1.qdc_F_Q46962.data[23],N[3][18][0].E);
SIGNAL_MAPPING(DATA12,N04_19_1_T,fastbus_2.tdc_L_T48834.data[23],N[3][18][0].T);
SIGNAL_MAPPING(DATA12,N04_19_2_E,fastbus_1.qdc_L_Q15372.data[11],N[3][18][1].E);
SIGNAL_MAPPING(DATA12,N04_19_2_T,fastbus_2.tdc_L_T81795.data[27],N[3][18][1].T);
SIGNAL_MAPPING(DATA12,N04_20_1_E,fastbus_1.qdc_F_Q46962.data[19],N[3][19][0].E);
SIGNAL_MAPPING(DATA12,N04_20_1_T,fastbus_2.tdc_L_T48834.data[19],N[3][19][0].T);
SIGNAL_MAPPING(DATA12,N04_20_2_E,fastbus_1.qdc_L_Q15372.data[15],N[3][19][1].E);
SIGNAL_MAPPING(DATA12,N04_20_2_T,fastbus_2.tdc_L_T81795.data[31],N[3][19][1].T);
SIGNAL_MAPPING(DATA12,N05_01_1_E,fastbus_1.qdc_L_Q15372.data[16],N[4][0][0].E);
SIGNAL_MAPPING(DATA12,N05_01_1_T,fastbus_2.tdc_L_T81859.data[16],N[4][0][0].T);
SIGNAL_MAPPING(DATA12,N05_01_2_E,fastbus_1.qdc_L_Q47315.data[12],N[4][0][1].E);
SIGNAL_MAPPING(DATA12,N05_01_2_T,fastbus_2.tdc_L_T48854.data[28],N[4][0][1].T);
SIGNAL_MAPPING(DATA12,N05_02_1_E,fastbus_1.qdc_L_Q15372.data[20],N[4][1][0].E);
SIGNAL_MAPPING(DATA12,N05_02_1_T,fastbus_2.tdc_L_T81859.data[20],N[4][1][0].T);
SIGNAL_MAPPING(DATA12,N05_02_2_E,fastbus_1.qdc_L_Q47315.data[8],N[4][1][1].E);
SIGNAL_MAPPING(DATA12,N05_02_2_T,fastbus_2.tdc_L_T48854.data[24],N[4][1][1].T);
SIGNAL_MAPPING(DATA12,N05_03_1_E,fastbus_1.qdc_L_Q15372.data[24],N[4][2][0].E);
SIGNAL_MAPPING(DATA12,N05_03_1_T,fastbus_2.tdc_L_T81859.data[24],N[4][2][0].T);
SIGNAL_MAPPING(DATA12,N05_03_2_E,fastbus_1.qdc_L_Q15372.data[32],N[4][2][1].E);
SIGNAL_MAPPING(DATA12,N05_03_2_T,fastbus_2.tdc_L_T81808.data[16],N[4][2][1].T);
SIGNAL_MAPPING(DATA12,N05_04_1_E,fastbus_1.qdc_L_Q15372.data[28],N[4][3][0].E);
SIGNAL_MAPPING(DATA12,N05_04_1_T,fastbus_2.tdc_L_T81859.data[28],N[4][3][0].T);
SIGNAL_MAPPING(DATA12,N05_04_2_E,fastbus_1.qdc_L_Q15372.data[36],N[4][3][1].E);
SIGNAL_MAPPING(DATA12,N05_04_2_T,fastbus_2.tdc_L_T81808.data[20],N[4][3][1].T);
SIGNAL_MAPPING(DATA12,N05_05_1_E,fastbus_1.qdc_L_Q15372.data[17],N[4][4][0].E);
SIGNAL_MAPPING(DATA12,N05_05_1_T,fastbus_2.tdc_L_T81859.data[17],N[4][4][0].T);
SIGNAL_MAPPING(DATA12,N05_05_2_E,fastbus_1.qdc_L_Q47315.data[9],N[4][4][1].E);
SIGNAL_MAPPING(DATA12,N05_05_2_T,fastbus_2.tdc_L_T48854.data[25],N[4][4][1].T);
SIGNAL_MAPPING(DATA12,N05_06_1_E,fastbus_1.qdc_L_Q15372.data[21],N[4][5][0].E);
SIGNAL_MAPPING(DATA12,N05_06_1_T,fastbus_2.tdc_L_T81859.data[21],N[4][5][0].T);
SIGNAL_MAPPING(DATA12,N05_06_2_E,fastbus_1.qdc_L_Q47315.data[13],N[4][5][1].E);
SIGNAL_MAPPING(DATA12,N05_06_2_T,fastbus_2.tdc_L_T48854.data[29],N[4][5][1].T);
SIGNAL_MAPPING(DATA12,N05_07_1_E,fastbus_1.qdc_L_Q15372.data[25],N[4][6][0].E);
SIGNAL_MAPPING(DATA12,N05_07_1_T,fastbus_2.tdc_L_T81859.data[25],N[4][6][0].T);
SIGNAL_MAPPING(DATA12,N05_07_2_E,fastbus_1.qdc_L_Q15372.data[40],N[4][6][1].E);
SIGNAL_MAPPING(DATA12,N05_07_2_T,fastbus_2.tdc_L_T81808.data[24],N[4][6][1].T);
SIGNAL_MAPPING(DATA12,N05_08_1_E,fastbus_1.qdc_L_Q15372.data[29],N[4][7][0].E);
SIGNAL_MAPPING(DATA12,N05_08_1_T,fastbus_2.tdc_L_T81859.data[29],N[4][7][0].T);
SIGNAL_MAPPING(DATA12,N05_08_2_E,fastbus_1.qdc_L_Q15372.data[44],N[4][7][1].E);
SIGNAL_MAPPING(DATA12,N05_08_2_T,fastbus_2.tdc_L_T81808.data[28],N[4][7][1].T);
SIGNAL_MAPPING(DATA12,N05_09_1_E,fastbus_1.qdc_L_Q15372.data[18],N[4][8][0].E);
SIGNAL_MAPPING(DATA12,N05_09_1_T,fastbus_2.tdc_L_T81859.data[18],N[4][8][0].T);
SIGNAL_MAPPING(DATA12,N05_09_2_E,fastbus_1.qdc_L_Q15372.data[33],N[4][8][1].E);
SIGNAL_MAPPING(DATA12,N05_09_2_T,fastbus_2.tdc_L_T81808.data[17],N[4][8][1].T);
SIGNAL_MAPPING(DATA12,N05_10_1_E,fastbus_1.qdc_L_Q15372.data[22],N[4][9][0].E);
SIGNAL_MAPPING(DATA12,N05_10_1_T,fastbus_2.tdc_L_T81859.data[22],N[4][9][0].T);
SIGNAL_MAPPING(DATA12,N05_10_2_E,fastbus_1.qdc_L_Q15372.data[37],N[4][9][1].E);
SIGNAL_MAPPING(DATA12,N05_10_2_T,fastbus_2.tdc_L_T81808.data[21],N[4][9][1].T);
SIGNAL_MAPPING(DATA12,N05_11_1_E,fastbus_1.qdc_L_Q15372.data[26],N[4][10][0].E);
SIGNAL_MAPPING(DATA12,N05_11_1_T,fastbus_2.tdc_L_T81859.data[26],N[4][10][0].T);
SIGNAL_MAPPING(DATA12,N05_11_2_E,fastbus_1.qdc_L_Q15372.data[41],N[4][10][1].E);
SIGNAL_MAPPING(DATA12,N05_11_2_T,fastbus_2.tdc_L_T81808.data[25],N[4][10][1].T);
SIGNAL_MAPPING(DATA12,N05_12_1_E,fastbus_1.qdc_L_Q15372.data[30],N[4][11][0].E);
SIGNAL_MAPPING(DATA12,N05_12_1_T,fastbus_2.tdc_L_T81859.data[30],N[4][11][0].T);
SIGNAL_MAPPING(DATA12,N05_12_2_E,fastbus_1.qdc_L_Q15372.data[45],N[4][11][1].E);
SIGNAL_MAPPING(DATA12,N05_12_2_T,fastbus_2.tdc_L_T81808.data[29],N[4][11][1].T);
SIGNAL_MAPPING(DATA12,N05_13_1_E,fastbus_1.qdc_L_Q15372.data[19],N[4][12][0].E);
SIGNAL_MAPPING(DATA12,N05_13_1_T,fastbus_2.tdc_L_T81859.data[19],N[4][12][0].T);
SIGNAL_MAPPING(DATA12,N05_13_2_E,fastbus_1.qdc_L_Q15372.data[34],N[4][12][1].E);
SIGNAL_MAPPING(DATA12,N05_13_2_T,fastbus_2.tdc_L_T81808.data[18],N[4][12][1].T);
SIGNAL_MAPPING(DATA12,N05_14_1_E,fastbus_1.qdc_L_Q15372.data[23],N[4][13][0].E);
SIGNAL_MAPPING(DATA12,N05_14_1_T,fastbus_2.tdc_L_T81859.data[23],N[4][13][0].T);
SIGNAL_MAPPING(DATA12,N05_14_2_E,fastbus_1.qdc_L_Q15372.data[38],N[4][13][1].E);
SIGNAL_MAPPING(DATA12,N05_14_2_T,fastbus_2.tdc_L_T81808.data[22],N[4][13][1].T);
SIGNAL_MAPPING(DATA12,N05_15_1_E,fastbus_1.qdc_L_Q47315.data[14],N[4][14][0].E);
SIGNAL_MAPPING(DATA12,N05_15_1_T,fastbus_2.tdc_L_T48854.data[30],N[4][14][0].T);
SIGNAL_MAPPING(DATA12,N05_15_2_E,fastbus_1.qdc_L_Q15372.data[42],N[4][14][1].E);
SIGNAL_MAPPING(DATA12,N05_15_2_T,fastbus_2.tdc_L_T81808.data[26],N[4][14][1].T);
SIGNAL_MAPPING(DATA12,N05_16_1_E,fastbus_1.qdc_L_Q47315.data[10],N[4][15][0].E);
SIGNAL_MAPPING(DATA12,N05_16_1_T,fastbus_2.tdc_L_T48854.data[26],N[4][15][0].T);
SIGNAL_MAPPING(DATA12,N05_16_2_E,fastbus_1.qdc_L_Q15372.data[46],N[4][15][1].E);
SIGNAL_MAPPING(DATA12,N05_16_2_T,fastbus_2.tdc_L_T81808.data[30],N[4][15][1].T);
SIGNAL_MAPPING(DATA12,N05_17_1_E,fastbus_1.qdc_L_Q15372.data[27],N[4][16][0].E);
SIGNAL_MAPPING(DATA12,N05_17_1_T,fastbus_2.tdc_L_T81859.data[27],N[4][16][0].T);
SIGNAL_MAPPING(DATA12,N05_17_2_E,fastbus_1.qdc_L_Q15372.data[35],N[4][16][1].E);
SIGNAL_MAPPING(DATA12,N05_17_2_T,fastbus_2.tdc_L_T81808.data[19],N[4][16][1].T);
SIGNAL_MAPPING(DATA12,N05_18_1_E,fastbus_1.qdc_L_Q15372.data[31],N[4][17][0].E);
SIGNAL_MAPPING(DATA12,N05_18_1_T,fastbus_2.tdc_L_T81859.data[31],N[4][17][0].T);
SIGNAL_MAPPING(DATA12,N05_18_2_E,fastbus_1.qdc_L_Q15372.data[39],N[4][17][1].E);
SIGNAL_MAPPING(DATA12,N05_18_2_T,fastbus_2.tdc_L_T81808.data[23],N[4][17][1].T);
SIGNAL_MAPPING(DATA12,N05_19_1_E,fastbus_1.qdc_L_Q47315.data[15],N[4][18][0].E);
SIGNAL_MAPPING(DATA12,N05_19_1_T,fastbus_2.tdc_L_T48854.data[31],N[4][18][0].T);
SIGNAL_MAPPING(DATA12,N05_19_2_E,fastbus_1.qdc_L_Q15372.data[43],N[4][18][1].E);
SIGNAL_MAPPING(DATA12,N05_19_2_T,fastbus_2.tdc_L_T81808.data[27],N[4][18][1].T);
SIGNAL_MAPPING(DATA12,N05_20_1_E,fastbus_1.qdc_L_Q47315.data[11],N[4][19][0].E);
SIGNAL_MAPPING(DATA12,N05_20_1_T,fastbus_2.tdc_L_T48854.data[27],N[4][19][0].T);
SIGNAL_MAPPING(DATA12,N05_20_2_E,fastbus_1.qdc_L_Q15372.data[47],N[4][19][1].E);
SIGNAL_MAPPING(DATA12,N05_20_2_T,fastbus_2.tdc_L_T81808.data[31],N[4][19][1].T);
SIGNAL_MAPPING(DATA12,N06_01_1_E,fastbus_1.qdc_L_Q47315.data[16],N[5][0][0].E);
SIGNAL_MAPPING(DATA12,N06_01_1_T,fastbus_2.tdc_L_T87047.data[16],N[5][0][0].T);
SIGNAL_MAPPING(DATA12,N06_01_2_E,fastbus_1.qdc_L_Q47315.data[4],N[5][0][1].E);
SIGNAL_MAPPING(DATA12,N06_01_2_T,fastbus_2.tdc_L_T48854.data[20],N[5][0][1].T);
SIGNAL_MAPPING(DATA12,N06_02_1_E,fastbus_1.qdc_L_Q47315.data[20],N[5][1][0].E);
SIGNAL_MAPPING(DATA12,N06_02_1_T,fastbus_2.tdc_L_T87047.data[20],N[5][1][0].T);
SIGNAL_MAPPING(DATA12,N06_02_2_E,fastbus_1.qdc_L_Q47315.data[0],N[5][1][1].E);
SIGNAL_MAPPING(DATA12,N06_02_2_T,fastbus_2.tdc_L_T48854.data[16],N[5][1][1].T);
SIGNAL_MAPPING(DATA12,N06_03_1_E,fastbus_1.qdc_L_Q47315.data[24],N[5][2][0].E);
SIGNAL_MAPPING(DATA12,N06_03_1_T,fastbus_2.tdc_L_T87047.data[24],N[5][2][0].T);
SIGNAL_MAPPING(DATA12,N06_03_2_E,fastbus_1.qdc_L_Q46993.data[48],N[5][2][1].E);
SIGNAL_MAPPING(DATA12,N06_03_2_T,fastbus_2.tdc_L_T48834.data[32],N[5][2][1].T);
SIGNAL_MAPPING(DATA12,N06_04_1_E,fastbus_1.qdc_L_Q47315.data[28],N[5][3][0].E);
SIGNAL_MAPPING(DATA12,N06_04_1_T,fastbus_2.tdc_L_T87047.data[28],N[5][3][0].T);
SIGNAL_MAPPING(DATA12,N06_04_2_E,fastbus_1.qdc_L_Q46993.data[52],N[5][3][1].E);
SIGNAL_MAPPING(DATA12,N06_04_2_T,fastbus_2.tdc_L_T48834.data[36],N[5][3][1].T);
SIGNAL_MAPPING(DATA12,N06_05_1_E,fastbus_1.qdc_L_Q47315.data[17],N[5][4][0].E);
SIGNAL_MAPPING(DATA12,N06_05_1_T,fastbus_2.tdc_L_T87047.data[17],N[5][4][0].T);
SIGNAL_MAPPING(DATA12,N06_05_2_E,fastbus_1.qdc_L_Q47315.data[5],N[5][4][1].E);
SIGNAL_MAPPING(DATA12,N06_05_2_T,fastbus_2.tdc_L_T48854.data[21],N[5][4][1].T);
SIGNAL_MAPPING(DATA12,N06_06_1_E,fastbus_1.qdc_L_Q47315.data[21],N[5][5][0].E);
SIGNAL_MAPPING(DATA12,N06_06_1_T,fastbus_2.tdc_L_T87047.data[21],N[5][5][0].T);
SIGNAL_MAPPING(DATA12,N06_06_2_E,fastbus_1.qdc_L_Q47315.data[1],N[5][5][1].E);
SIGNAL_MAPPING(DATA12,N06_06_2_T,fastbus_2.tdc_L_T48854.data[17],N[5][5][1].T);
SIGNAL_MAPPING(DATA12,N06_07_1_E,fastbus_1.qdc_L_Q47315.data[25],N[5][6][0].E);
SIGNAL_MAPPING(DATA12,N06_07_1_T,fastbus_2.tdc_L_T87047.data[25],N[5][6][0].T);
SIGNAL_MAPPING(DATA12,N06_07_2_E,fastbus_1.qdc_L_Q46993.data[56],N[5][6][1].E);
SIGNAL_MAPPING(DATA12,N06_07_2_T,fastbus_2.tdc_L_T48834.data[40],N[5][6][1].T);
SIGNAL_MAPPING(DATA12,N06_08_1_E,fastbus_1.qdc_L_Q47315.data[29],N[5][7][0].E);
SIGNAL_MAPPING(DATA12,N06_08_1_T,fastbus_2.tdc_L_T87047.data[29],N[5][7][0].T);
SIGNAL_MAPPING(DATA12,N06_08_2_E,fastbus_1.qdc_L_Q46993.data[60],N[5][7][1].E);
SIGNAL_MAPPING(DATA12,N06_08_2_T,fastbus_2.tdc_L_T48834.data[44],N[5][7][1].T);
SIGNAL_MAPPING(DATA12,N06_09_1_E,fastbus_1.qdc_L_Q47315.data[18],N[5][8][0].E);
SIGNAL_MAPPING(DATA12,N06_09_1_T,fastbus_2.tdc_L_T87047.data[18],N[5][8][0].T);
SIGNAL_MAPPING(DATA12,N06_09_2_E,fastbus_1.qdc_L_Q46993.data[49],N[5][8][1].E);
SIGNAL_MAPPING(DATA12,N06_09_2_T,fastbus_2.tdc_L_T48834.data[33],N[5][8][1].T);
SIGNAL_MAPPING(DATA12,N06_10_1_E,fastbus_1.qdc_L_Q47315.data[22],N[5][9][0].E);
SIGNAL_MAPPING(DATA12,N06_10_1_T,fastbus_2.tdc_L_T87047.data[22],N[5][9][0].T);
SIGNAL_MAPPING(DATA12,N06_10_2_E,fastbus_1.qdc_L_Q46993.data[53],N[5][9][1].E);
SIGNAL_MAPPING(DATA12,N06_10_2_T,fastbus_2.tdc_L_T48834.data[37],N[5][9][1].T);
SIGNAL_MAPPING(DATA12,N06_11_1_E,fastbus_1.qdc_L_Q47315.data[26],N[5][10][0].E);
SIGNAL_MAPPING(DATA12,N06_11_1_T,fastbus_2.tdc_L_T87047.data[26],N[5][10][0].T);
SIGNAL_MAPPING(DATA12,N06_11_2_E,fastbus_1.qdc_L_Q46993.data[57],N[5][10][1].E);
SIGNAL_MAPPING(DATA12,N06_11_2_T,fastbus_2.tdc_L_T48834.data[41],N[5][10][1].T);
SIGNAL_MAPPING(DATA12,N06_12_1_E,fastbus_1.qdc_L_Q47315.data[30],N[5][11][0].E);
SIGNAL_MAPPING(DATA12,N06_12_1_T,fastbus_2.tdc_L_T87047.data[30],N[5][11][0].T);
SIGNAL_MAPPING(DATA12,N06_12_2_E,fastbus_1.qdc_L_Q46993.data[61],N[5][11][1].E);
SIGNAL_MAPPING(DATA12,N06_12_2_T,fastbus_2.tdc_L_T48834.data[45],N[5][11][1].T);
SIGNAL_MAPPING(DATA12,N06_13_1_E,fastbus_1.qdc_L_Q47315.data[19],N[5][12][0].E);
SIGNAL_MAPPING(DATA12,N06_13_1_T,fastbus_2.tdc_L_T87047.data[19],N[5][12][0].T);
SIGNAL_MAPPING(DATA12,N06_13_2_E,fastbus_1.qdc_L_Q46993.data[50],N[5][12][1].E);
SIGNAL_MAPPING(DATA12,N06_13_2_T,fastbus_2.tdc_L_T48834.data[34],N[5][12][1].T);
SIGNAL_MAPPING(DATA12,N06_14_1_E,fastbus_1.qdc_L_Q47315.data[23],N[5][13][0].E);
SIGNAL_MAPPING(DATA12,N06_14_1_T,fastbus_2.tdc_L_T87047.data[23],N[5][13][0].T);
SIGNAL_MAPPING(DATA12,N06_14_2_E,fastbus_1.qdc_L_Q46993.data[54],N[5][13][1].E);
SIGNAL_MAPPING(DATA12,N06_14_2_T,fastbus_2.tdc_L_T48834.data[38],N[5][13][1].T);
SIGNAL_MAPPING(DATA12,N06_15_1_E,fastbus_1.qdc_L_Q47315.data[6],N[5][14][0].E);
SIGNAL_MAPPING(DATA12,N06_15_1_T,fastbus_2.tdc_L_T48854.data[22],N[5][14][0].T);
SIGNAL_MAPPING(DATA12,N06_15_2_E,fastbus_1.qdc_L_Q46993.data[58],N[5][14][1].E);
SIGNAL_MAPPING(DATA12,N06_15_2_T,fastbus_2.tdc_L_T48834.data[42],N[5][14][1].T);
SIGNAL_MAPPING(DATA12,N06_16_1_E,fastbus_1.qdc_L_Q47315.data[2],N[5][15][0].E);
SIGNAL_MAPPING(DATA12,N06_16_1_T,fastbus_2.tdc_L_T48854.data[18],N[5][15][0].T);
SIGNAL_MAPPING(DATA12,N06_16_2_E,fastbus_1.qdc_L_Q46993.data[62],N[5][15][1].E);
SIGNAL_MAPPING(DATA12,N06_16_2_T,fastbus_2.tdc_L_T48834.data[46],N[5][15][1].T);
SIGNAL_MAPPING(DATA12,N06_17_1_E,fastbus_1.qdc_L_Q47315.data[27],N[5][16][0].E);
SIGNAL_MAPPING(DATA12,N06_17_1_T,fastbus_2.tdc_L_T87047.data[27],N[5][16][0].T);
SIGNAL_MAPPING(DATA12,N06_17_2_E,fastbus_1.qdc_L_Q46993.data[51],N[5][16][1].E);
SIGNAL_MAPPING(DATA12,N06_17_2_T,fastbus_2.tdc_L_T48834.data[35],N[5][16][1].T);
SIGNAL_MAPPING(DATA12,N06_18_1_E,fastbus_1.qdc_L_Q47315.data[31],N[5][17][0].E);
SIGNAL_MAPPING(DATA12,N06_18_1_T,fastbus_2.tdc_L_T87047.data[31],N[5][17][0].T);
SIGNAL_MAPPING(DATA12,N06_18_2_E,fastbus_1.qdc_L_Q46993.data[55],N[5][17][1].E);
SIGNAL_MAPPING(DATA12,N06_18_2_T,fastbus_2.tdc_L_T48834.data[39],N[5][17][1].T);
SIGNAL_MAPPING(DATA12,N06_19_1_E,fastbus_1.qdc_L_Q47315.data[7],N[5][18][0].E);
SIGNAL_MAPPING(DATA12,N06_19_1_T,fastbus_2.tdc_L_T48854.data[23],N[5][18][0].T);
SIGNAL_MAPPING(DATA12,N06_19_2_E,fastbus_1.qdc_L_Q46993.data[59],N[5][18][1].E);
SIGNAL_MAPPING(DATA12,N06_19_2_T,fastbus_2.tdc_L_T48834.data[43],N[5][18][1].T);
SIGNAL_MAPPING(DATA12,N06_20_1_E,fastbus_1.qdc_L_Q47315.data[3],N[5][19][0].E);
SIGNAL_MAPPING(DATA12,N06_20_1_T,fastbus_2.tdc_L_T48854.data[19],N[5][19][0].T);
SIGNAL_MAPPING(DATA12,N06_20_2_E,fastbus_1.qdc_L_Q46993.data[63],N[5][19][1].E);
SIGNAL_MAPPING(DATA12,N06_20_2_T,fastbus_2.tdc_L_T48834.data[47],N[5][19][1].T);
SIGNAL_MAPPING(DATA12,N07_01_1_E,fastbus_1.qdc_L_Q46993.data[64],N[6][0][0].E);
SIGNAL_MAPPING(DATA12,N07_01_1_T,fastbus_2.tdc_L_T81806.data[32],N[6][0][0].T);
SIGNAL_MAPPING(DATA12,N07_01_2_E,fastbus_1.qdc_L_Q15358.data[60],N[6][0][1].E);
SIGNAL_MAPPING(DATA12,N07_01_2_T,fastbus_2.tdc_L_T81859.data[44],N[6][0][1].T);
SIGNAL_MAPPING(DATA12,N07_02_1_E,fastbus_1.qdc_L_Q46993.data[68],N[6][1][0].E);
SIGNAL_MAPPING(DATA12,N07_02_1_T,fastbus_2.tdc_L_T81806.data[36],N[6][1][0].T);
SIGNAL_MAPPING(DATA12,N07_02_2_E,fastbus_1.qdc_L_Q15358.data[56],N[6][1][1].E);
SIGNAL_MAPPING(DATA12,N07_02_2_T,fastbus_2.tdc_L_T81859.data[40],N[6][1][1].T);
SIGNAL_MAPPING(DATA12,N07_03_1_E,fastbus_1.qdc_L_Q46993.data[72],N[6][2][0].E);
SIGNAL_MAPPING(DATA12,N07_03_1_T,fastbus_2.tdc_L_T81806.data[40],N[6][2][0].T);
SIGNAL_MAPPING(DATA12,N07_03_2_E,fastbus_1.qdc_L_Q46993.data[80],N[6][2][1].E);
SIGNAL_MAPPING(DATA12,N07_03_2_T,fastbus_2.tdc_L_T81795.data[32],N[6][2][1].T);
SIGNAL_MAPPING(DATA12,N07_04_1_E,fastbus_1.qdc_L_Q46993.data[76],N[6][3][0].E);
SIGNAL_MAPPING(DATA12,N07_04_1_T,fastbus_2.tdc_L_T81806.data[44],N[6][3][0].T);
SIGNAL_MAPPING(DATA12,N07_04_2_E,fastbus_1.qdc_L_Q46993.data[84],N[6][3][1].E);
SIGNAL_MAPPING(DATA12,N07_04_2_T,fastbus_2.tdc_L_T81795.data[36],N[6][3][1].T);
SIGNAL_MAPPING(DATA12,N07_05_1_E,fastbus_1.qdc_L_Q46993.data[65],N[6][4][0].E);
SIGNAL_MAPPING(DATA12,N07_05_1_T,fastbus_2.tdc_L_T81806.data[33],N[6][4][0].T);
SIGNAL_MAPPING(DATA12,N07_05_2_E,fastbus_1.qdc_L_Q15358.data[57],N[6][4][1].E);
SIGNAL_MAPPING(DATA12,N07_05_2_T,fastbus_2.tdc_L_T81859.data[41],N[6][4][1].T);
SIGNAL_MAPPING(DATA12,N07_06_1_E,fastbus_1.qdc_L_Q46993.data[69],N[6][5][0].E);
SIGNAL_MAPPING(DATA12,N07_06_1_T,fastbus_2.tdc_L_T81806.data[37],N[6][5][0].T);
SIGNAL_MAPPING(DATA12,N07_06_2_E,fastbus_1.qdc_L_Q15358.data[61],N[6][5][1].E);
SIGNAL_MAPPING(DATA12,N07_06_2_T,fastbus_2.tdc_L_T81859.data[45],N[6][5][1].T);
SIGNAL_MAPPING(DATA12,N07_07_1_E,fastbus_1.qdc_L_Q46993.data[73],N[6][6][0].E);
SIGNAL_MAPPING(DATA12,N07_07_1_T,fastbus_2.tdc_L_T81806.data[41],N[6][6][0].T);
SIGNAL_MAPPING(DATA12,N07_07_2_E,fastbus_1.qdc_L_Q46993.data[88],N[6][6][1].E);
SIGNAL_MAPPING(DATA12,N07_07_2_T,fastbus_2.tdc_L_T81795.data[40],N[6][6][1].T);
SIGNAL_MAPPING(DATA12,N07_08_1_E,fastbus_1.qdc_L_Q46993.data[77],N[6][7][0].E);
SIGNAL_MAPPING(DATA12,N07_08_1_T,fastbus_2.tdc_L_T81806.data[45],N[6][7][0].T);
SIGNAL_MAPPING(DATA12,N07_08_2_E,fastbus_1.qdc_L_Q46993.data[92],N[6][7][1].E);
SIGNAL_MAPPING(DATA12,N07_08_2_T,fastbus_2.tdc_L_T81795.data[44],N[6][7][1].T);
SIGNAL_MAPPING(DATA12,N07_09_1_E,fastbus_1.qdc_L_Q46993.data[66],N[6][8][0].E);
SIGNAL_MAPPING(DATA12,N07_09_1_T,fastbus_2.tdc_L_T81806.data[34],N[6][8][0].T);
SIGNAL_MAPPING(DATA12,N07_09_2_E,fastbus_1.qdc_L_Q46993.data[81],N[6][8][1].E);
SIGNAL_MAPPING(DATA12,N07_09_2_T,fastbus_2.tdc_L_T81795.data[33],N[6][8][1].T);
SIGNAL_MAPPING(DATA12,N07_10_1_E,fastbus_1.qdc_L_Q46993.data[70],N[6][9][0].E);
SIGNAL_MAPPING(DATA12,N07_10_1_T,fastbus_2.tdc_L_T81806.data[38],N[6][9][0].T);
SIGNAL_MAPPING(DATA12,N07_10_2_E,fastbus_1.qdc_L_Q46993.data[85],N[6][9][1].E);
SIGNAL_MAPPING(DATA12,N07_10_2_T,fastbus_2.tdc_L_T81795.data[37],N[6][9][1].T);
SIGNAL_MAPPING(DATA12,N07_11_1_E,fastbus_1.qdc_L_Q46993.data[74],N[6][10][0].E);
SIGNAL_MAPPING(DATA12,N07_11_1_T,fastbus_2.tdc_L_T81806.data[42],N[6][10][0].T);
SIGNAL_MAPPING(DATA12,N07_11_2_E,fastbus_1.qdc_L_Q46993.data[89],N[6][10][1].E);
SIGNAL_MAPPING(DATA12,N07_11_2_T,fastbus_2.tdc_L_T81795.data[41],N[6][10][1].T);
SIGNAL_MAPPING(DATA12,N07_12_1_E,fastbus_1.qdc_L_Q46993.data[78],N[6][11][0].E);
SIGNAL_MAPPING(DATA12,N07_12_1_T,fastbus_2.tdc_L_T81806.data[46],N[6][11][0].T);
SIGNAL_MAPPING(DATA12,N07_12_2_E,fastbus_1.qdc_L_Q46993.data[93],N[6][11][1].E);
SIGNAL_MAPPING(DATA12,N07_12_2_T,fastbus_2.tdc_L_T81795.data[45],N[6][11][1].T);
SIGNAL_MAPPING(DATA12,N07_13_1_E,fastbus_1.qdc_L_Q46993.data[67],N[6][12][0].E);
SIGNAL_MAPPING(DATA12,N07_13_1_T,fastbus_2.tdc_L_T81806.data[35],N[6][12][0].T);
SIGNAL_MAPPING(DATA12,N07_13_2_E,fastbus_1.qdc_L_Q46993.data[82],N[6][12][1].E);
SIGNAL_MAPPING(DATA12,N07_13_2_T,fastbus_2.tdc_L_T81795.data[34],N[6][12][1].T);
SIGNAL_MAPPING(DATA12,N07_14_1_E,fastbus_1.qdc_L_Q46993.data[71],N[6][13][0].E);
SIGNAL_MAPPING(DATA12,N07_14_1_T,fastbus_2.tdc_L_T81806.data[39],N[6][13][0].T);
SIGNAL_MAPPING(DATA12,N07_14_2_E,fastbus_1.qdc_L_Q46993.data[86],N[6][13][1].E);
SIGNAL_MAPPING(DATA12,N07_14_2_T,fastbus_2.tdc_L_T81795.data[38],N[6][13][1].T);
SIGNAL_MAPPING(DATA12,N07_15_1_E,fastbus_1.qdc_L_Q15358.data[62],N[6][14][0].E);
SIGNAL_MAPPING(DATA12,N07_15_1_T,fastbus_2.tdc_L_T81859.data[46],N[6][14][0].T);
SIGNAL_MAPPING(DATA12,N07_15_2_E,fastbus_1.qdc_L_Q46993.data[90],N[6][14][1].E);
SIGNAL_MAPPING(DATA12,N07_15_2_T,fastbus_2.tdc_L_T81795.data[42],N[6][14][1].T);
SIGNAL_MAPPING(DATA12,N07_16_1_E,fastbus_1.qdc_L_Q15358.data[58],N[6][15][0].E);
SIGNAL_MAPPING(DATA12,N07_16_1_T,fastbus_2.tdc_L_T81859.data[42],N[6][15][0].T);
SIGNAL_MAPPING(DATA12,N07_16_2_E,fastbus_1.qdc_L_Q46993.data[94],N[6][15][1].E);
SIGNAL_MAPPING(DATA12,N07_16_2_T,fastbus_2.tdc_L_T81795.data[46],N[6][15][1].T);
SIGNAL_MAPPING(DATA12,N07_17_1_E,fastbus_1.qdc_L_Q46993.data[75],N[6][16][0].E);
SIGNAL_MAPPING(DATA12,N07_17_1_T,fastbus_2.tdc_L_T81806.data[43],N[6][16][0].T);
SIGNAL_MAPPING(DATA12,N07_17_2_E,fastbus_1.qdc_L_Q46993.data[83],N[6][16][1].E);
SIGNAL_MAPPING(DATA12,N07_17_2_T,fastbus_2.tdc_L_T81795.data[35],N[6][16][1].T);
SIGNAL_MAPPING(DATA12,N07_18_1_E,fastbus_1.qdc_L_Q46993.data[79],N[6][17][0].E);
SIGNAL_MAPPING(DATA12,N07_18_1_T,fastbus_2.tdc_L_T81806.data[47],N[6][17][0].T);
SIGNAL_MAPPING(DATA12,N07_18_2_E,fastbus_1.qdc_L_Q46993.data[87],N[6][17][1].E);
SIGNAL_MAPPING(DATA12,N07_18_2_T,fastbus_2.tdc_L_T81795.data[39],N[6][17][1].T);
SIGNAL_MAPPING(DATA12,N07_19_1_E,fastbus_1.qdc_L_Q15358.data[63],N[6][18][0].E);
SIGNAL_MAPPING(DATA12,N07_19_1_T,fastbus_2.tdc_L_T81859.data[47],N[6][18][0].T);
SIGNAL_MAPPING(DATA12,N07_19_2_E,fastbus_1.qdc_L_Q46993.data[91],N[6][18][1].E);
SIGNAL_MAPPING(DATA12,N07_19_2_T,fastbus_2.tdc_L_T81795.data[43],N[6][18][1].T);
SIGNAL_MAPPING(DATA12,N07_20_1_E,fastbus_1.qdc_L_Q15358.data[59],N[6][19][0].E);
SIGNAL_MAPPING(DATA12,N07_20_1_T,fastbus_2.tdc_L_T81859.data[43],N[6][19][0].T);
SIGNAL_MAPPING(DATA12,N07_20_2_E,fastbus_1.qdc_L_Q46993.data[95],N[6][19][1].E);
SIGNAL_MAPPING(DATA12,N07_20_2_T,fastbus_2.tdc_L_T81795.data[47],N[6][19][1].T);
SIGNAL_MAPPING(DATA12,N08_01_1_E,fastbus_1.qdc_L_Q15358.data[64],N[7][0][0].E);
SIGNAL_MAPPING(DATA12,N08_01_1_T,fastbus_2.tdc_L_T81808.data[32],N[7][0][0].T);
SIGNAL_MAPPING(DATA12,N08_01_2_E,fastbus_1.qdc_L_Q15358.data[52],N[7][0][1].E);
SIGNAL_MAPPING(DATA12,N08_01_2_T,fastbus_2.tdc_L_T81859.data[36],N[7][0][1].T);
SIGNAL_MAPPING(DATA12,N08_02_1_E,fastbus_1.qdc_L_Q15358.data[68],N[7][1][0].E);
SIGNAL_MAPPING(DATA12,N08_02_1_T,fastbus_2.tdc_L_T81808.data[36],N[7][1][0].T);
SIGNAL_MAPPING(DATA12,N08_02_2_E,fastbus_1.qdc_L_Q15358.data[48],N[7][1][1].E);
SIGNAL_MAPPING(DATA12,N08_02_2_T,fastbus_2.tdc_L_T81859.data[32],N[7][1][1].T);
SIGNAL_MAPPING(DATA12,N08_03_1_E,fastbus_1.qdc_L_Q15358.data[72],N[7][2][0].E);
SIGNAL_MAPPING(DATA12,N08_03_1_T,fastbus_2.tdc_L_T81808.data[40],N[7][2][0].T);
SIGNAL_MAPPING(DATA12,N08_03_2_E,fastbus_1.qdc_L_Q15358.data[80],N[7][2][1].E);
SIGNAL_MAPPING(DATA12,N08_03_2_T,fastbus_2.tdc_L_T48854.data[32],N[7][2][1].T);
SIGNAL_MAPPING(DATA12,N08_04_1_E,fastbus_1.qdc_L_Q15358.data[76],N[7][3][0].E);
SIGNAL_MAPPING(DATA12,N08_04_1_T,fastbus_2.tdc_L_T81808.data[44],N[7][3][0].T);
SIGNAL_MAPPING(DATA12,N08_04_2_E,fastbus_1.qdc_L_Q15358.data[84],N[7][3][1].E);
SIGNAL_MAPPING(DATA12,N08_04_2_T,fastbus_2.tdc_L_T48854.data[36],N[7][3][1].T);
SIGNAL_MAPPING(DATA12,N08_05_1_E,fastbus_1.qdc_L_Q15358.data[65],N[7][4][0].E);
SIGNAL_MAPPING(DATA12,N08_05_1_T,fastbus_2.tdc_L_T81808.data[33],N[7][4][0].T);
SIGNAL_MAPPING(DATA12,N08_05_2_E,fastbus_1.qdc_L_Q15358.data[53],N[7][4][1].E);
SIGNAL_MAPPING(DATA12,N08_05_2_T,fastbus_2.tdc_L_T81859.data[37],N[7][4][1].T);
SIGNAL_MAPPING(DATA12,N08_06_1_E,fastbus_1.qdc_L_Q15358.data[69],N[7][5][0].E);
SIGNAL_MAPPING(DATA12,N08_06_1_T,fastbus_2.tdc_L_T81808.data[37],N[7][5][0].T);
SIGNAL_MAPPING(DATA12,N08_06_2_E,fastbus_1.qdc_L_Q15358.data[49],N[7][5][1].E);
SIGNAL_MAPPING(DATA12,N08_06_2_T,fastbus_2.tdc_L_T81859.data[33],N[7][5][1].T);
SIGNAL_MAPPING(DATA12,N08_07_1_E,fastbus_1.qdc_L_Q15358.data[73],N[7][6][0].E);
SIGNAL_MAPPING(DATA12,N08_07_1_T,fastbus_2.tdc_L_T81808.data[41],N[7][6][0].T);
SIGNAL_MAPPING(DATA12,N08_07_2_E,fastbus_1.qdc_L_Q15358.data[88],N[7][6][1].E);
SIGNAL_MAPPING(DATA12,N08_07_2_T,fastbus_2.tdc_L_T48854.data[40],N[7][6][1].T);
SIGNAL_MAPPING(DATA12,N08_08_1_E,fastbus_1.qdc_L_Q15358.data[77],N[7][7][0].E);
SIGNAL_MAPPING(DATA12,N08_08_1_T,fastbus_2.tdc_L_T81808.data[45],N[7][7][0].T);
SIGNAL_MAPPING(DATA12,N08_08_2_E,fastbus_1.qdc_L_Q15358.data[92],N[7][7][1].E);
SIGNAL_MAPPING(DATA12,N08_08_2_T,fastbus_2.tdc_L_T48854.data[44],N[7][7][1].T);
SIGNAL_MAPPING(DATA12,N08_09_1_E,fastbus_1.qdc_L_Q15358.data[66],N[7][8][0].E);
SIGNAL_MAPPING(DATA12,N08_09_1_T,fastbus_2.tdc_L_T81808.data[34],N[7][8][0].T);
SIGNAL_MAPPING(DATA12,N08_09_2_E,fastbus_1.qdc_L_Q15358.data[81],N[7][8][1].E);
SIGNAL_MAPPING(DATA12,N08_09_2_T,fastbus_2.tdc_L_T48854.data[33],N[7][8][1].T);
SIGNAL_MAPPING(DATA12,N08_10_1_E,fastbus_1.qdc_L_Q15358.data[70],N[7][9][0].E);
SIGNAL_MAPPING(DATA12,N08_10_1_T,fastbus_2.tdc_L_T81808.data[38],N[7][9][0].T);
SIGNAL_MAPPING(DATA12,N08_10_2_E,fastbus_1.qdc_L_Q15358.data[85],N[7][9][1].E);
SIGNAL_MAPPING(DATA12,N08_10_2_T,fastbus_2.tdc_L_T48854.data[37],N[7][9][1].T);
SIGNAL_MAPPING(DATA12,N08_11_1_E,fastbus_1.qdc_L_Q15358.data[74],N[7][10][0].E);
SIGNAL_MAPPING(DATA12,N08_11_1_T,fastbus_2.tdc_L_T81808.data[42],N[7][10][0].T);
SIGNAL_MAPPING(DATA12,N08_11_2_E,fastbus_1.qdc_L_Q15358.data[89],N[7][10][1].E);
SIGNAL_MAPPING(DATA12,N08_11_2_T,fastbus_2.tdc_L_T48854.data[41],N[7][10][1].T);
SIGNAL_MAPPING(DATA12,N08_12_1_E,fastbus_1.qdc_L_Q15358.data[78],N[7][11][0].E);
SIGNAL_MAPPING(DATA12,N08_12_1_T,fastbus_2.tdc_L_T81808.data[46],N[7][11][0].T);
SIGNAL_MAPPING(DATA12,N08_12_2_E,fastbus_1.qdc_L_Q15358.data[93],N[7][11][1].E);
SIGNAL_MAPPING(DATA12,N08_12_2_T,fastbus_2.tdc_L_T48854.data[45],N[7][11][1].T);
SIGNAL_MAPPING(DATA12,N08_13_1_E,fastbus_1.qdc_L_Q15358.data[67],N[7][12][0].E);
SIGNAL_MAPPING(DATA12,N08_13_1_T,fastbus_2.tdc_L_T81808.data[35],N[7][12][0].T);
SIGNAL_MAPPING(DATA12,N08_13_2_E,fastbus_1.qdc_L_Q15358.data[82],N[7][12][1].E);
SIGNAL_MAPPING(DATA12,N08_13_2_T,fastbus_2.tdc_L_T48854.data[34],N[7][12][1].T);
SIGNAL_MAPPING(DATA12,N08_14_1_E,fastbus_1.qdc_L_Q15358.data[71],N[7][13][0].E);
SIGNAL_MAPPING(DATA12,N08_14_1_T,fastbus_2.tdc_L_T81808.data[39],N[7][13][0].T);
SIGNAL_MAPPING(DATA12,N08_14_2_E,fastbus_1.qdc_L_Q15358.data[86],N[7][13][1].E);
SIGNAL_MAPPING(DATA12,N08_14_2_T,fastbus_2.tdc_L_T48854.data[38],N[7][13][1].T);
SIGNAL_MAPPING(DATA12,N08_15_1_E,fastbus_1.qdc_L_Q15358.data[54],N[7][14][0].E);
SIGNAL_MAPPING(DATA12,N08_15_1_T,fastbus_2.tdc_L_T81859.data[38],N[7][14][0].T);
SIGNAL_MAPPING(DATA12,N08_15_2_E,fastbus_1.qdc_L_Q15358.data[90],N[7][14][1].E);
SIGNAL_MAPPING(DATA12,N08_15_2_T,fastbus_2.tdc_L_T48854.data[42],N[7][14][1].T);
SIGNAL_MAPPING(DATA12,N08_16_1_E,fastbus_1.qdc_L_Q15358.data[50],N[7][15][0].E);
SIGNAL_MAPPING(DATA12,N08_16_1_T,fastbus_2.tdc_L_T81859.data[34],N[7][15][0].T);
SIGNAL_MAPPING(DATA12,N08_16_2_E,fastbus_1.qdc_L_Q15358.data[94],N[7][15][1].E);
SIGNAL_MAPPING(DATA12,N08_16_2_T,fastbus_2.tdc_L_T48854.data[46],N[7][15][1].T);
SIGNAL_MAPPING(DATA12,N08_17_1_E,fastbus_1.qdc_L_Q15358.data[75],N[7][16][0].E);
SIGNAL_MAPPING(DATA12,N08_17_1_T,fastbus_2.tdc_L_T81808.data[43],N[7][16][0].T);
SIGNAL_MAPPING(DATA12,N08_17_2_E,fastbus_1.qdc_L_Q15358.data[83],N[7][16][1].E);
SIGNAL_MAPPING(DATA12,N08_17_2_T,fastbus_2.tdc_L_T48854.data[35],N[7][16][1].T);
SIGNAL_MAPPING(DATA12,N08_18_1_E,fastbus_1.qdc_L_Q15358.data[79],N[7][17][0].E);
SIGNAL_MAPPING(DATA12,N08_18_1_T,fastbus_2.tdc_L_T81808.data[47],N[7][17][0].T);
SIGNAL_MAPPING(DATA12,N08_18_2_E,fastbus_1.qdc_L_Q15358.data[87],N[7][17][1].E);
SIGNAL_MAPPING(DATA12,N08_18_2_T,fastbus_2.tdc_L_T48854.data[39],N[7][17][1].T);
SIGNAL_MAPPING(DATA12,N08_19_1_E,fastbus_1.qdc_L_Q15358.data[55],N[7][18][0].E);
SIGNAL_MAPPING(DATA12,N08_19_1_T,fastbus_2.tdc_L_T81859.data[39],N[7][18][0].T);
SIGNAL_MAPPING(DATA12,N08_19_2_E,fastbus_1.qdc_L_Q15358.data[91],N[7][18][1].E);
SIGNAL_MAPPING(DATA12,N08_19_2_T,fastbus_2.tdc_L_T48854.data[43],N[7][18][1].T);
SIGNAL_MAPPING(DATA12,N08_20_1_E,fastbus_1.qdc_L_Q15358.data[51],N[7][19][0].E);
SIGNAL_MAPPING(DATA12,N08_20_1_T,fastbus_2.tdc_L_T81859.data[35],N[7][19][0].T);
SIGNAL_MAPPING(DATA12,N08_20_2_E,fastbus_1.qdc_L_Q15358.data[95],N[7][19][1].E);
SIGNAL_MAPPING(DATA12,N08_20_2_T,fastbus_2.tdc_L_T48854.data[47],N[7][19][1].T);
SIGNAL_MAPPING(DATA12,N09_01_1_E,fastbus_1.qdc_F_Q46962.data[48],N[8][0][0].E);
SIGNAL_MAPPING(DATA12,N09_01_1_T,fastbus_2.tdc_L_T87047.data[32],N[8][0][0].T);
SIGNAL_MAPPING(DATA12,N09_01_2_E,fastbus_1.qdc_F_Q46962.data[92],N[8][0][1].E);
SIGNAL_MAPPING(DATA12,N09_01_2_T,fastbus_2.tdc_L_T81808.data[60],N[8][0][1].T);
SIGNAL_MAPPING(DATA12,N09_02_1_E,fastbus_1.qdc_F_Q46962.data[52],N[8][1][0].E);
SIGNAL_MAPPING(DATA12,N09_02_1_T,fastbus_2.tdc_L_T87047.data[36],N[8][1][0].T);
SIGNAL_MAPPING(DATA12,N09_02_2_E,fastbus_1.qdc_F_Q46962.data[88],N[8][1][1].E);
SIGNAL_MAPPING(DATA12,N09_02_2_T,fastbus_2.tdc_L_T81808.data[56],N[8][1][1].T);
SIGNAL_MAPPING(DATA12,N09_03_1_E,fastbus_1.qdc_F_Q46962.data[56],N[8][2][0].E);
SIGNAL_MAPPING(DATA12,N09_03_1_T,fastbus_2.tdc_L_T87047.data[40],N[8][2][0].T);
SIGNAL_MAPPING(DATA12,N09_03_2_E,fastbus_1.qdc_F_Q46962.data[64],N[8][2][1].E);
SIGNAL_MAPPING(DATA12,N09_03_2_T,fastbus_2.tdc_L_T81859.data[48],N[8][2][1].T);
SIGNAL_MAPPING(DATA12,N09_04_1_E,fastbus_1.qdc_F_Q46962.data[60],N[8][3][0].E);
SIGNAL_MAPPING(DATA12,N09_04_1_T,fastbus_2.tdc_L_T87047.data[44],N[8][3][0].T);
SIGNAL_MAPPING(DATA12,N09_04_2_E,fastbus_1.qdc_F_Q46962.data[68],N[8][3][1].E);
SIGNAL_MAPPING(DATA12,N09_04_2_T,fastbus_2.tdc_L_T81859.data[52],N[8][3][1].T);
SIGNAL_MAPPING(DATA12,N09_05_1_E,fastbus_1.qdc_F_Q46962.data[49],N[8][4][0].E);
SIGNAL_MAPPING(DATA12,N09_05_1_T,fastbus_2.tdc_L_T87047.data[33],N[8][4][0].T);
SIGNAL_MAPPING(DATA12,N09_05_2_E,fastbus_1.qdc_F_Q46962.data[89],N[8][4][1].E);
SIGNAL_MAPPING(DATA12,N09_05_2_T,fastbus_2.tdc_L_T81808.data[57],N[8][4][1].T);
SIGNAL_MAPPING(DATA12,N09_06_1_E,fastbus_1.qdc_F_Q46962.data[53],N[8][5][0].E);
SIGNAL_MAPPING(DATA12,N09_06_1_T,fastbus_2.tdc_L_T87047.data[37],N[8][5][0].T);
SIGNAL_MAPPING(DATA12,N09_06_2_E,fastbus_1.qdc_F_Q46962.data[93],N[8][5][1].E);
SIGNAL_MAPPING(DATA12,N09_06_2_T,fastbus_2.tdc_L_T81808.data[61],N[8][5][1].T);
SIGNAL_MAPPING(DATA12,N09_07_1_E,fastbus_1.qdc_F_Q46962.data[57],N[8][6][0].E);
SIGNAL_MAPPING(DATA12,N09_07_1_T,fastbus_2.tdc_L_T87047.data[41],N[8][6][0].T);
SIGNAL_MAPPING(DATA12,N09_07_2_E,fastbus_1.qdc_F_Q46962.data[72],N[8][6][1].E);
SIGNAL_MAPPING(DATA12,N09_07_2_T,fastbus_2.tdc_L_T81859.data[56],N[8][6][1].T);
SIGNAL_MAPPING(DATA12,N09_08_1_E,fastbus_1.qdc_F_Q46962.data[61],N[8][7][0].E);
SIGNAL_MAPPING(DATA12,N09_08_1_T,fastbus_2.tdc_L_T87047.data[45],N[8][7][0].T);
SIGNAL_MAPPING(DATA12,N09_08_2_E,fastbus_1.qdc_F_Q46962.data[76],N[8][7][1].E);
SIGNAL_MAPPING(DATA12,N09_08_2_T,fastbus_2.tdc_L_T81859.data[60],N[8][7][1].T);
SIGNAL_MAPPING(DATA12,N09_09_1_E,fastbus_1.qdc_F_Q46962.data[50],N[8][8][0].E);
SIGNAL_MAPPING(DATA12,N09_09_1_T,fastbus_2.tdc_L_T87047.data[34],N[8][8][0].T);
SIGNAL_MAPPING(DATA12,N09_09_2_E,fastbus_1.qdc_F_Q46962.data[65],N[8][8][1].E);
SIGNAL_MAPPING(DATA12,N09_09_2_T,fastbus_2.tdc_L_T81859.data[49],N[8][8][1].T);
SIGNAL_MAPPING(DATA12,N09_10_1_E,fastbus_1.qdc_F_Q46962.data[54],N[8][9][0].E);
SIGNAL_MAPPING(DATA12,N09_10_1_T,fastbus_2.tdc_L_T87047.data[38],N[8][9][0].T);
SIGNAL_MAPPING(DATA12,N09_10_2_E,fastbus_1.qdc_F_Q46962.data[69],N[8][9][1].E);
SIGNAL_MAPPING(DATA12,N09_10_2_T,fastbus_2.tdc_L_T81859.data[53],N[8][9][1].T);
SIGNAL_MAPPING(DATA12,N09_11_1_E,fastbus_1.qdc_F_Q46962.data[58],N[8][10][0].E);
SIGNAL_MAPPING(DATA12,N09_11_1_T,fastbus_2.tdc_L_T87047.data[42],N[8][10][0].T);
SIGNAL_MAPPING(DATA12,N09_11_2_E,fastbus_1.qdc_F_Q46962.data[73],N[8][10][1].E);
SIGNAL_MAPPING(DATA12,N09_11_2_T,fastbus_2.tdc_L_T81859.data[57],N[8][10][1].T);
SIGNAL_MAPPING(DATA12,N09_12_1_E,fastbus_1.qdc_F_Q46962.data[62],N[8][11][0].E);
SIGNAL_MAPPING(DATA12,N09_12_1_T,fastbus_2.tdc_L_T87047.data[46],N[8][11][0].T);
SIGNAL_MAPPING(DATA12,N09_12_2_E,fastbus_1.qdc_F_Q46962.data[77],N[8][11][1].E);
SIGNAL_MAPPING(DATA12,N09_12_2_T,fastbus_2.tdc_L_T81859.data[61],N[8][11][1].T);
SIGNAL_MAPPING(DATA12,N09_13_1_E,fastbus_1.qdc_F_Q46962.data[51],N[8][12][0].E);
SIGNAL_MAPPING(DATA12,N09_13_1_T,fastbus_2.tdc_L_T87047.data[35],N[8][12][0].T);
SIGNAL_MAPPING(DATA12,N09_13_2_E,fastbus_1.qdc_F_Q46962.data[66],N[8][12][1].E);
SIGNAL_MAPPING(DATA12,N09_13_2_T,fastbus_2.tdc_L_T81859.data[50],N[8][12][1].T);
SIGNAL_MAPPING(DATA12,N09_14_1_E,fastbus_1.qdc_F_Q46962.data[55],N[8][13][0].E);
SIGNAL_MAPPING(DATA12,N09_14_1_T,fastbus_2.tdc_L_T87047.data[39],N[8][13][0].T);
SIGNAL_MAPPING(DATA12,N09_14_2_E,fastbus_1.qdc_F_Q46962.data[70],N[8][13][1].E);
SIGNAL_MAPPING(DATA12,N09_14_2_T,fastbus_2.tdc_L_T81859.data[54],N[8][13][1].T);
SIGNAL_MAPPING(DATA12,N09_15_1_E,fastbus_1.qdc_F_Q46962.data[94],N[8][14][0].E);
SIGNAL_MAPPING(DATA12,N09_15_1_T,fastbus_2.tdc_L_T81808.data[62],N[8][14][0].T);
SIGNAL_MAPPING(DATA12,N09_15_2_E,fastbus_1.qdc_F_Q46962.data[74],N[8][14][1].E);
SIGNAL_MAPPING(DATA12,N09_15_2_T,fastbus_2.tdc_L_T81859.data[58],N[8][14][1].T);
SIGNAL_MAPPING(DATA12,N09_16_1_E,fastbus_1.qdc_F_Q46962.data[90],N[8][15][0].E);
SIGNAL_MAPPING(DATA12,N09_16_1_T,fastbus_2.tdc_L_T81808.data[58],N[8][15][0].T);
SIGNAL_MAPPING(DATA12,N09_16_2_E,fastbus_1.qdc_F_Q46962.data[78],N[8][15][1].E);
SIGNAL_MAPPING(DATA12,N09_16_2_T,fastbus_2.tdc_L_T81859.data[62],N[8][15][1].T);
SIGNAL_MAPPING(DATA12,N09_17_1_E,fastbus_1.qdc_F_Q46962.data[59],N[8][16][0].E);
SIGNAL_MAPPING(DATA12,N09_17_1_T,fastbus_2.tdc_L_T87047.data[43],N[8][16][0].T);
SIGNAL_MAPPING(DATA12,N09_17_2_E,fastbus_1.qdc_F_Q46962.data[67],N[8][16][1].E);
SIGNAL_MAPPING(DATA12,N09_17_2_T,fastbus_2.tdc_L_T81859.data[51],N[8][16][1].T);
SIGNAL_MAPPING(DATA12,N09_18_1_E,fastbus_1.qdc_F_Q46962.data[63],N[8][17][0].E);
SIGNAL_MAPPING(DATA12,N09_18_1_T,fastbus_2.tdc_L_T87047.data[47],N[8][17][0].T);
SIGNAL_MAPPING(DATA12,N09_18_2_E,fastbus_1.qdc_F_Q46962.data[71],N[8][17][1].E);
SIGNAL_MAPPING(DATA12,N09_18_2_T,fastbus_2.tdc_L_T81859.data[55],N[8][17][1].T);
SIGNAL_MAPPING(DATA12,N09_19_1_E,fastbus_1.qdc_F_Q46962.data[95],N[8][18][0].E);
SIGNAL_MAPPING(DATA12,N09_19_1_T,fastbus_2.tdc_L_T81808.data[63],N[8][18][0].T);
SIGNAL_MAPPING(DATA12,N09_19_2_E,fastbus_1.qdc_F_Q46962.data[75],N[8][18][1].E);
SIGNAL_MAPPING(DATA12,N09_19_2_T,fastbus_2.tdc_L_T81859.data[59],N[8][18][1].T);
SIGNAL_MAPPING(DATA12,N09_20_1_E,fastbus_1.qdc_F_Q46962.data[91],N[8][19][0].E);
SIGNAL_MAPPING(DATA12,N09_20_1_T,fastbus_2.tdc_L_T81808.data[59],N[8][19][0].T);
SIGNAL_MAPPING(DATA12,N09_20_2_E,fastbus_1.qdc_F_Q46962.data[79],N[8][19][1].E);
SIGNAL_MAPPING(DATA12,N09_20_2_T,fastbus_2.tdc_L_T81859.data[63],N[8][19][1].T);
SIGNAL_MAPPING(DATA12,N10_01_1_E,fastbus_1.qdc_L_Q15372.data[64],N[9][0][0].E);
SIGNAL_MAPPING(DATA12,N10_01_1_T,fastbus_2.tdc_L_T48854.data[48],N[9][0][0].T);
SIGNAL_MAPPING(DATA12,N10_01_2_E,fastbus_1.qdc_F_Q46962.data[84],N[9][0][1].E);
SIGNAL_MAPPING(DATA12,N10_01_2_T,fastbus_2.tdc_L_T81808.data[52],N[9][0][1].T);
SIGNAL_MAPPING(DATA12,N10_02_1_E,fastbus_1.qdc_L_Q15372.data[68],N[9][1][0].E);
SIGNAL_MAPPING(DATA12,N10_02_1_T,fastbus_2.tdc_L_T48854.data[52],N[9][1][0].T);
SIGNAL_MAPPING(DATA12,N10_02_2_E,fastbus_1.qdc_F_Q46962.data[80],N[9][1][1].E);
SIGNAL_MAPPING(DATA12,N10_02_2_T,fastbus_2.tdc_L_T81808.data[48],N[9][1][1].T);
SIGNAL_MAPPING(DATA12,N10_03_1_E,fastbus_1.qdc_L_Q15372.data[72],N[9][2][0].E);
SIGNAL_MAPPING(DATA12,N10_03_1_T,fastbus_2.tdc_L_T48854.data[56],N[9][2][0].T);
SIGNAL_MAPPING(DATA12,N10_03_2_E,fastbus_1.qdc_L_Q15372.data[80],N[9][2][1].E);
SIGNAL_MAPPING(DATA12,N10_03_2_T,fastbus_2.tdc_L_T87047.data[48],N[9][2][1].T);
SIGNAL_MAPPING(DATA12,N10_04_1_E,fastbus_1.qdc_L_Q15372.data[76],N[9][3][0].E);
SIGNAL_MAPPING(DATA12,N10_04_1_T,fastbus_2.tdc_L_T48854.data[60],N[9][3][0].T);
SIGNAL_MAPPING(DATA12,N10_04_2_E,fastbus_1.qdc_L_Q15372.data[84],N[9][3][1].E);
SIGNAL_MAPPING(DATA12,N10_04_2_T,fastbus_2.tdc_L_T87047.data[52],N[9][3][1].T);
SIGNAL_MAPPING(DATA12,N10_05_1_E,fastbus_1.qdc_L_Q15372.data[65],N[9][4][0].E);
SIGNAL_MAPPING(DATA12,N10_05_1_T,fastbus_2.tdc_L_T48854.data[49],N[9][4][0].T);
SIGNAL_MAPPING(DATA12,N10_05_2_E,fastbus_1.qdc_F_Q46962.data[85],N[9][4][1].E);
SIGNAL_MAPPING(DATA12,N10_05_2_T,fastbus_2.tdc_L_T81808.data[53],N[9][4][1].T);
SIGNAL_MAPPING(DATA12,N10_06_1_E,fastbus_1.qdc_L_Q15372.data[69],N[9][5][0].E);
SIGNAL_MAPPING(DATA12,N10_06_1_T,fastbus_2.tdc_L_T48854.data[53],N[9][5][0].T);
SIGNAL_MAPPING(DATA12,N10_06_2_E,fastbus_1.qdc_F_Q46962.data[81],N[9][5][1].E);
SIGNAL_MAPPING(DATA12,N10_06_2_T,fastbus_2.tdc_L_T81808.data[49],N[9][5][1].T);
SIGNAL_MAPPING(DATA12,N10_07_1_E,fastbus_1.qdc_L_Q15372.data[73],N[9][6][0].E);
SIGNAL_MAPPING(DATA12,N10_07_1_T,fastbus_2.tdc_L_T48854.data[57],N[9][6][0].T);
SIGNAL_MAPPING(DATA12,N10_07_2_E,fastbus_1.qdc_L_Q15372.data[88],N[9][6][1].E);
SIGNAL_MAPPING(DATA12,N10_07_2_T,fastbus_2.tdc_L_T87047.data[56],N[9][6][1].T);
SIGNAL_MAPPING(DATA12,N10_08_1_E,fastbus_1.qdc_L_Q15372.data[77],N[9][7][0].E);
SIGNAL_MAPPING(DATA12,N10_08_1_T,fastbus_2.tdc_L_T48854.data[61],N[9][7][0].T);
SIGNAL_MAPPING(DATA12,N10_08_2_E,fastbus_1.qdc_L_Q15372.data[92],N[9][7][1].E);
SIGNAL_MAPPING(DATA12,N10_08_2_T,fastbus_2.tdc_L_T87047.data[60],N[9][7][1].T);
SIGNAL_MAPPING(DATA12,N10_09_1_E,fastbus_1.qdc_L_Q15372.data[66],N[9][8][0].E);
SIGNAL_MAPPING(DATA12,N10_09_1_T,fastbus_2.tdc_L_T48854.data[50],N[9][8][0].T);
SIGNAL_MAPPING(DATA12,N10_09_2_E,fastbus_1.qdc_L_Q15372.data[81],N[9][8][1].E);
SIGNAL_MAPPING(DATA12,N10_09_2_T,fastbus_2.tdc_L_T87047.data[49],N[9][8][1].T);
SIGNAL_MAPPING(DATA12,N10_10_1_E,fastbus_1.qdc_L_Q15372.data[70],N[9][9][0].E);
SIGNAL_MAPPING(DATA12,N10_10_1_T,fastbus_2.tdc_L_T48854.data[54],N[9][9][0].T);
SIGNAL_MAPPING(DATA12,N10_10_2_E,fastbus_1.qdc_L_Q15372.data[85],N[9][9][1].E);
SIGNAL_MAPPING(DATA12,N10_10_2_T,fastbus_2.tdc_L_T87047.data[53],N[9][9][1].T);
SIGNAL_MAPPING(DATA12,N10_11_1_E,fastbus_1.qdc_L_Q15372.data[74],N[9][10][0].E);
SIGNAL_MAPPING(DATA12,N10_11_1_T,fastbus_2.tdc_L_T48854.data[58],N[9][10][0].T);
SIGNAL_MAPPING(DATA12,N10_11_2_E,fastbus_1.qdc_L_Q15372.data[89],N[9][10][1].E);
SIGNAL_MAPPING(DATA12,N10_11_2_T,fastbus_2.tdc_L_T87047.data[57],N[9][10][1].T);
SIGNAL_MAPPING(DATA12,N10_12_1_E,fastbus_1.qdc_L_Q15372.data[79],N[9][11][0].E);
SIGNAL_MAPPING(DATA12,N10_12_1_T,fastbus_2.tdc_L_T48854.data[63],N[9][11][0].T);
SIGNAL_MAPPING(DATA12,N10_12_2_E,fastbus_1.qdc_L_Q15372.data[93],N[9][11][1].E);
SIGNAL_MAPPING(DATA12,N10_12_2_T,fastbus_2.tdc_L_T87047.data[61],N[9][11][1].T);
SIGNAL_MAPPING(DATA12,N10_13_1_E,fastbus_1.qdc_L_Q15372.data[67],N[9][12][0].E);
SIGNAL_MAPPING(DATA12,N10_13_1_T,fastbus_2.tdc_L_T48854.data[51],N[9][12][0].T);
SIGNAL_MAPPING(DATA12,N10_13_2_E,fastbus_1.qdc_L_Q15372.data[82],N[9][12][1].E);
SIGNAL_MAPPING(DATA12,N10_13_2_T,fastbus_2.tdc_L_T87047.data[50],N[9][12][1].T);
SIGNAL_MAPPING(DATA12,N10_14_1_E,fastbus_1.qdc_L_Q15372.data[71],N[9][13][0].E);
SIGNAL_MAPPING(DATA12,N10_14_1_T,fastbus_2.tdc_L_T48854.data[55],N[9][13][0].T);
SIGNAL_MAPPING(DATA12,N10_14_2_E,fastbus_1.qdc_L_Q15372.data[86],N[9][13][1].E);
SIGNAL_MAPPING(DATA12,N10_14_2_T,fastbus_2.tdc_L_T87047.data[54],N[9][13][1].T);
SIGNAL_MAPPING(DATA12,N10_15_1_E,fastbus_1.qdc_F_Q46962.data[86],N[9][14][0].E);
SIGNAL_MAPPING(DATA12,N10_15_1_T,fastbus_2.tdc_L_T81808.data[54],N[9][14][0].T);
SIGNAL_MAPPING(DATA12,N10_15_2_E,fastbus_1.qdc_L_Q15372.data[90],N[9][14][1].E);
SIGNAL_MAPPING(DATA12,N10_15_2_T,fastbus_2.tdc_L_T87047.data[58],N[9][14][1].T);
SIGNAL_MAPPING(DATA12,N10_16_1_E,fastbus_1.qdc_F_Q46962.data[82],N[9][15][0].E);
SIGNAL_MAPPING(DATA12,N10_16_1_T,fastbus_2.tdc_L_T81808.data[50],N[9][15][0].T);
SIGNAL_MAPPING(DATA12,N10_16_2_E,fastbus_1.qdc_L_Q15372.data[94],N[9][15][1].E);
SIGNAL_MAPPING(DATA12,N10_16_2_T,fastbus_2.tdc_L_T87047.data[62],N[9][15][1].T);
SIGNAL_MAPPING(DATA12,N10_17_1_E,fastbus_1.qdc_L_Q15372.data[75],N[9][16][0].E);
SIGNAL_MAPPING(DATA12,N10_17_1_T,fastbus_2.tdc_L_T48854.data[59],N[9][16][0].T);
SIGNAL_MAPPING(DATA12,N10_17_2_E,fastbus_1.qdc_L_Q15372.data[83],N[9][16][1].E);
SIGNAL_MAPPING(DATA12,N10_17_2_T,fastbus_2.tdc_L_T87047.data[51],N[9][16][1].T);
SIGNAL_MAPPING(DATA12,N10_18_1_E,fastbus_1.qdc_L_Q15372.data[78],N[9][17][0].E);
SIGNAL_MAPPING(DATA12,N10_18_1_T,fastbus_2.tdc_L_T48854.data[62],N[9][17][0].T);
SIGNAL_MAPPING(DATA12,N10_18_2_E,fastbus_1.qdc_L_Q15372.data[87],N[9][17][1].E);
SIGNAL_MAPPING(DATA12,N10_18_2_T,fastbus_2.tdc_L_T87047.data[55],N[9][17][1].T);
SIGNAL_MAPPING(DATA12,N10_19_1_E,fastbus_1.qdc_F_Q46962.data[87],N[9][18][0].E);
SIGNAL_MAPPING(DATA12,N10_19_1_T,fastbus_2.tdc_L_T81808.data[55],N[9][18][0].T);
SIGNAL_MAPPING(DATA12,N10_19_2_E,fastbus_1.qdc_L_Q15372.data[91],N[9][18][1].E);
SIGNAL_MAPPING(DATA12,N10_19_2_T,fastbus_2.tdc_L_T87047.data[59],N[9][18][1].T);
SIGNAL_MAPPING(DATA12,N10_20_1_E,fastbus_1.qdc_F_Q46962.data[83],N[9][19][0].E);
SIGNAL_MAPPING(DATA12,N10_20_1_T,fastbus_2.tdc_L_T81808.data[51],N[9][19][0].T);
SIGNAL_MAPPING(DATA12,N10_20_2_E,fastbus_1.qdc_L_Q15372.data[95],N[9][19][1].E);
SIGNAL_MAPPING(DATA12,N10_20_2_T,fastbus_2.tdc_L_T87047.data[63],N[9][19][1].T);
SIGNAL_MAPPING(DATA12,NTF01_1_E,fastbus_1.qdc_L_Q17320.data[32],NTF[0][0].E);
SIGNAL_MAPPING(DATA12,NTF01_1_T,fastbus_1.tdc_L_T81855.data[48],NTF[0][0].T);
SIGNAL_MAPPING(DATA12,NTF01_2_E,fastbus_1.qdc_L_Q17320.data[40],NTF[0][1].E);
SIGNAL_MAPPING(DATA12,NTF01_2_T,fastbus_1.tdc_L_T81855.data[56],NTF[0][1].T);
SIGNAL_MAPPING(DATA12,NTF02_1_E,fastbus_1.qdc_L_Q17320.data[37],NTF[1][0].E);
SIGNAL_MAPPING(DATA12,NTF02_1_T,fastbus_1.tdc_L_T81855.data[53],NTF[1][0].T);
SIGNAL_MAPPING(DATA12,NTF02_2_E,fastbus_1.qdc_L_Q17320.data[45],NTF[1][1].E);
SIGNAL_MAPPING(DATA12,NTF02_2_T,fastbus_1.tdc_L_T81855.data[61],NTF[1][1].T);
SIGNAL_MAPPING(DATA12,NTF03_1_E,fastbus_1.qdc_L_Q17320.data[34],NTF[2][0].E);
SIGNAL_MAPPING(DATA12,NTF03_1_T,fastbus_1.tdc_L_T81855.data[50],NTF[2][0].T);
SIGNAL_MAPPING(DATA12,NTF03_2_E,fastbus_1.qdc_L_Q17320.data[42],NTF[2][1].E);
SIGNAL_MAPPING(DATA12,NTF03_2_T,fastbus_1.tdc_L_T81855.data[58],NTF[2][1].T);
SIGNAL_MAPPING(DATA12,NTF04_1_E,fastbus_1.qdc_L_Q17320.data[39],NTF[3][0].E);
SIGNAL_MAPPING(DATA12,NTF04_1_T,fastbus_1.tdc_L_T81855.data[55],NTF[3][0].T);
SIGNAL_MAPPING(DATA12,NTF04_2_E,fastbus_1.qdc_L_Q17320.data[47],NTF[3][1].E);
SIGNAL_MAPPING(DATA12,NTF04_2_T,fastbus_1.tdc_L_T81855.data[63],NTF[3][1].T);
SIGNAL_MAPPING(DATA12,NTF05_1_E,fastbus_1.qdc_L_Q17320.data[36],NTF[4][0].E);
SIGNAL_MAPPING(DATA12,NTF05_1_T,fastbus_1.tdc_L_T81855.data[52],NTF[4][0].T);
SIGNAL_MAPPING(DATA12,NTF05_2_E,fastbus_1.qdc_L_Q17320.data[44],NTF[4][1].E);
SIGNAL_MAPPING(DATA12,NTF05_2_T,fastbus_1.tdc_L_T81855.data[60],NTF[4][1].T);
SIGNAL_MAPPING(DATA12,NTF06_1_E,fastbus_1.qdc_L_Q17320.data[33],NTF[5][0].E);
SIGNAL_MAPPING(DATA12,NTF06_1_T,fastbus_1.tdc_L_T81855.data[49],NTF[5][0].T);
SIGNAL_MAPPING(DATA12,NTF06_2_E,fastbus_1.qdc_L_Q17320.data[41],NTF[5][1].E);
SIGNAL_MAPPING(DATA12,NTF06_2_T,fastbus_1.tdc_L_T81855.data[57],NTF[5][1].T);
SIGNAL_MAPPING(DATA12,NTF07_1_E,fastbus_1.qdc_L_Q17320.data[38],NTF[6][0].E);
SIGNAL_MAPPING(DATA12,NTF07_1_T,fastbus_1.tdc_L_T81855.data[54],NTF[6][0].T);
SIGNAL_MAPPING(DATA12,NTF07_2_E,fastbus_1.qdc_L_Q17320.data[46],NTF[6][1].E);
SIGNAL_MAPPING(DATA12,NTF07_2_T,fastbus_1.tdc_L_T81855.data[62],NTF[6][1].T);
SIGNAL_MAPPING(DATA12,NTF08_1_E,fastbus_1.qdc_L_Q17320.data[35],NTF[7][0].E);
SIGNAL_MAPPING(DATA12,NTF08_1_T,fastbus_1.tdc_L_T81855.data[51],NTF[7][0].T);
SIGNAL_MAPPING(DATA12,NTF08_2_E,fastbus_1.qdc_L_Q17320.data[43],NTF[7][1].E);
SIGNAL_MAPPING(DATA12,NTF08_2_T,fastbus_1.tdc_L_T81855.data[59],NTF[7][1].T);
SIGNAL_MAPPING(DATA12,NTF09_1_E,fastbus_1.qdc_L_Q17320.data[48],NTF[8][0].E);
SIGNAL_MAPPING(DATA12,NTF09_1_T,fastbus_1.tdc_L_T81855.data[0],NTF[8][0].T);
SIGNAL_MAPPING(DATA12,NTF09_2_E,fastbus_1.qdc_L_Q17320.data[56],NTF[8][1].E);
SIGNAL_MAPPING(DATA12,NTF09_2_T,fastbus_1.tdc_L_T81855.data[8],NTF[8][1].T);
SIGNAL_MAPPING(DATA12,NTF10_1_E,fastbus_1.qdc_L_Q17320.data[53],NTF[9][0].E);
SIGNAL_MAPPING(DATA12,NTF10_1_T,fastbus_1.tdc_L_T81855.data[5],NTF[9][0].T);
SIGNAL_MAPPING(DATA12,NTF10_2_E,fastbus_1.qdc_L_Q17320.data[61],NTF[9][1].E);
SIGNAL_MAPPING(DATA12,NTF10_2_T,fastbus_1.tdc_L_T81855.data[13],NTF[9][1].T);
SIGNAL_MAPPING(DATA12,NTF11_1_E,fastbus_1.qdc_L_Q17320.data[50],NTF[10][0].E);
SIGNAL_MAPPING(DATA12,NTF11_1_T,fastbus_1.tdc_L_T81855.data[2],NTF[10][0].T);
SIGNAL_MAPPING(DATA12,NTF11_2_E,fastbus_1.qdc_L_Q17320.data[58],NTF[10][1].E);
SIGNAL_MAPPING(DATA12,NTF11_2_T,fastbus_1.tdc_L_T81855.data[10],NTF[10][1].T);
SIGNAL_MAPPING(DATA12,NTF12_1_E,fastbus_1.qdc_L_Q17320.data[55],NTF[11][0].E);
SIGNAL_MAPPING(DATA12,NTF12_1_T,fastbus_1.tdc_L_T81855.data[7],NTF[11][0].T);
SIGNAL_MAPPING(DATA12,NTF12_2_E,fastbus_1.qdc_L_Q17320.data[63],NTF[11][1].E);
SIGNAL_MAPPING(DATA12,NTF12_2_T,fastbus_1.tdc_L_T81855.data[15],NTF[11][1].T);
SIGNAL_MAPPING(DATA12,NTF13_1_E,fastbus_1.qdc_L_Q17320.data[52],NTF[12][0].E);
SIGNAL_MAPPING(DATA12,NTF13_1_T,fastbus_1.tdc_L_T81855.data[4],NTF[12][0].T);
SIGNAL_MAPPING(DATA12,NTF13_2_E,fastbus_1.qdc_L_Q17320.data[60],NTF[12][1].E);
SIGNAL_MAPPING(DATA12,NTF13_2_T,fastbus_1.tdc_L_T81855.data[12],NTF[12][1].T);
SIGNAL_MAPPING(DATA12,NTF14_1_E,fastbus_1.qdc_L_Q17320.data[49],NTF[13][0].E);
SIGNAL_MAPPING(DATA12,NTF14_1_T,fastbus_1.tdc_L_T81855.data[1],NTF[13][0].T);
SIGNAL_MAPPING(DATA12,NTF14_2_E,fastbus_1.qdc_L_Q17320.data[57],NTF[13][1].E);
SIGNAL_MAPPING(DATA12,NTF14_2_T,fastbus_1.tdc_L_T81855.data[9],NTF[13][1].T);
SIGNAL_MAPPING(DATA12,NTF15_1_E,fastbus_1.qdc_L_Q17320.data[54],NTF[14][0].E);
SIGNAL_MAPPING(DATA12,NTF15_1_T,fastbus_1.tdc_L_T81855.data[6],NTF[14][0].T);
SIGNAL_MAPPING(DATA12,NTF15_2_E,fastbus_1.qdc_L_Q17320.data[62],NTF[14][1].E);
SIGNAL_MAPPING(DATA12,NTF15_2_T,fastbus_1.tdc_L_T81855.data[14],NTF[14][1].T);
SIGNAL_MAPPING(DATA12,NTF16_1_E,fastbus_1.qdc_L_Q17320.data[51],NTF[15][0].E);
SIGNAL_MAPPING(DATA12,NTF16_1_T,fastbus_1.tdc_L_T81855.data[3],NTF[15][0].T);
SIGNAL_MAPPING(DATA12,NTF16_2_E,fastbus_1.qdc_L_Q17320.data[59],NTF[15][1].E);
SIGNAL_MAPPING(DATA12,NTF16_2_T,fastbus_1.tdc_L_T81855.data[11],NTF[15][1].T);
SIGNAL_MAPPING(DATA12,POS01_01_E,camac.qdc_SIA0429.data[0],POS[0][0].E);
SIGNAL_MAPPING(DATA12,POS01_01_T,camac.tdc_SIA0426.data[0],POS[0][0].T);
SIGNAL_MAPPING(DATA12,POS01_02_E,camac.qdc_SIA0429.data[1],POS[0][1].E);
SIGNAL_MAPPING(DATA12,POS01_02_T,camac.tdc_SIA0426.data[1],POS[0][1].T);
SIGNAL_MAPPING(DATA12,POS01_03_E,camac.qdc_SIA0429.data[2],POS[0][2].E);
SIGNAL_MAPPING(DATA12,POS01_03_T,camac.tdc_SIA0426.data[2],POS[0][2].T);
SIGNAL_MAPPING(DATA12,POS01_04_E,camac.qdc_SIA0429.data[3],POS[0][3].E);
SIGNAL_MAPPING(DATA12,POS01_04_T,camac.tdc_SIA0426.data[3],POS[0][3].T);
SIGNAL_MAPPING(DATA12,ROL01_01_E,camac.qdc_SIA0429.data[4],ROL[0][0].E);
SIGNAL_MAPPING(DATA12,ROL01_02_E,camac.qdc_SIA0429.data[5],ROL[0][1].E);
SIGNAL_MAPPING(DATA12,ROL01_03_E,camac.qdc_SIA0429.data[6],ROL[0][2].E);
SIGNAL_MAPPING(DATA12,ROL01_04_E,camac.qdc_SIA0429.data[7],ROL[0][3].E);
SIGNAL_MAPPING(DATA12,ROL02_01_E,camac.qdc_SIA0458.data[4],ROL[1][0].E);
SIGNAL_MAPPING(DATA12,ROL02_02_E,camac.qdc_SIA0458.data[5],ROL[1][1].E);
SIGNAL_MAPPING(DATA12,ROL02_03_E,camac.qdc_SIA0458.data[6],ROL[1][2].E);
SIGNAL_MAPPING(DATA12,ROL02_04_E,camac.qdc_SIA0458.data[7],ROL[1][3].E);
SIGNAL_MAPPING(DATA12,RPC01_01_E,camac.qdc_SIA0416.data[0],RPC[0][0].E);
SIGNAL_MAPPING(DATA12,RPC01_01_T,camac.tdc_SIA0400.data[0],RPC[0][0].T);
SIGNAL_MAPPING(DATA12,RPC01_02_E,camac.qdc_SIA0416.data[4],RPC[0][1].E);
SIGNAL_MAPPING(DATA12,RPC01_02_T,camac.tdc_SIA0400.data[5],RPC[0][1].T);
SIGNAL_MAPPING(DATA12,RPC02_01_E,camac.qdc_SIA0416.data[1],RPC[1][0].E);
SIGNAL_MAPPING(DATA12,RPC02_01_T,camac.tdc_SIA0400.data[1],RPC[1][0].T);
SIGNAL_MAPPING(DATA12,RPC02_02_E,camac.qdc_SIA0416.data[5],RPC[1][1].E);
SIGNAL_MAPPING(DATA12,RPC02_02_T,camac.tdc_SIA0400.data[6],RPC[1][1].T);
SIGNAL_MAPPING(DATA12,RPC03_01_E,camac.qdc_SIA0416.data[2],RPC[2][0].E);
SIGNAL_MAPPING(DATA12,RPC03_01_T,camac.tdc_SIA0400.data[3],RPC[2][0].T);
SIGNAL_MAPPING(DATA12,RPC03_02_E,camac.qdc_SIA0416.data[6],RPC[2][1].E);
SIGNAL_MAPPING(DATA12,RPC03_02_T,camac.tdc_SIA0400.data[7],RPC[2][1].T);
SIGNAL_MAPPING(DATA12,RPC04_01_E,camac.qdc_SIA0416.data[3],RPC[3][0].E);
SIGNAL_MAPPING(DATA12,RPC04_01_T,camac.tdc_SIA0400.data[4],RPC[3][0].T);
SIGNAL_MAPPING(DATA12,RPC04_02_E,camac.qdc_SIA0416.data[7],RPC[3][1].E);
SIGNAL_MAPPING(DATA12,RPC04_02_T,camac.tdc_SIA0401.data[0],RPC[3][1].T);
SIGNAL_MAPPING(DATA12,SCI01_01_E,camac.qdc_SIA0458.data[0],SCI[0][0].E);
SIGNAL_MAPPING(DATA12,SCI01_01_T,camac.tdc_SIA8035.data[0],SCI[0][0].T);
SIGNAL_MAPPING(DATA12,SCI01_02_E,camac.qdc_SIA0458.data[1],SCI[0][1].E);
SIGNAL_MAPPING(DATA12,SCI01_02_T,camac.tdc_SIA8035.data[1],SCI[0][1].T);
SIGNAL_MAPPING(DATA12,SCI02_01_E,camac.qdc_SIA0458.data[2],SCI[1][0].E);
SIGNAL_MAPPING(DATA12,SCI02_01_T,camac.tdc_SIA8035.data[2],SCI[1][0].T);
SIGNAL_MAPPING(DATA12,SCI02_02_E,camac.qdc_SIA0458.data[3],SCI[1][1].E);
SIGNAL_MAPPING(DATA12,SCI02_02_T,camac.tdc_SIA8035.data[3],SCI[1][1].T);
SIGNAL_MAPPING(DATA12,TFW09_1_E,fastbus_1.qdc_L_Q17320.data[16],TFW[8][0].E);
SIGNAL_MAPPING(DATA12,TFW09_1_T,fastbus_1.tdc_L_T81855.data[32],TFW[8][0].T);
SIGNAL_MAPPING(DATA12,TFW09_2_E,fastbus_1.qdc_L_Q17320.data[18],TFW[8][1].E);
SIGNAL_MAPPING(DATA12,TFW09_2_T,fastbus_1.tdc_L_T81855.data[34],TFW[8][1].T);
SIGNAL_MAPPING(DATA12,TFW10_1_E,fastbus_1.qdc_L_Q17320.data[20],TFW[9][0].E);
SIGNAL_MAPPING(DATA12,TFW10_1_T,fastbus_1.tdc_L_T81855.data[36],TFW[9][0].T);
SIGNAL_MAPPING(DATA12,TFW10_2_E,fastbus_1.qdc_L_Q17320.data[22],TFW[9][1].E);
SIGNAL_MAPPING(DATA12,TFW10_2_T,fastbus_1.tdc_L_T81855.data[38],TFW[9][1].T);
SIGNAL_MAPPING(DATA12,TFW11_1_E,fastbus_1.qdc_L_Q17320.data[24],TFW[10][0].E);
SIGNAL_MAPPING(DATA12,TFW11_1_T,fastbus_1.tdc_L_T81855.data[40],TFW[10][0].T);
SIGNAL_MAPPING(DATA12,TFW11_2_E,fastbus_1.qdc_L_Q17320.data[26],TFW[10][1].E);
SIGNAL_MAPPING(DATA12,TFW11_2_T,fastbus_1.tdc_L_T81855.data[42],TFW[10][1].T);
SIGNAL_MAPPING(DATA12,TFW12_1_E,fastbus_1.qdc_L_Q17320.data[28],TFW[11][0].E);
SIGNAL_MAPPING(DATA12,TFW12_1_T,fastbus_1.tdc_L_T81855.data[44],TFW[11][0].T);
SIGNAL_MAPPING(DATA12,TFW12_2_E,fastbus_1.qdc_L_Q17320.data[30],TFW[11][1].E);
SIGNAL_MAPPING(DATA12,TFW12_2_T,fastbus_1.tdc_L_T81855.data[46],TFW[11][1].T);
SIGNAL_MAPPING(DATA12,TFW13_1_E,fastbus_1.qdc_L_Q17320.data[17],TFW[12][0].E);
SIGNAL_MAPPING(DATA12,TFW13_1_T,fastbus_1.tdc_L_T81855.data[33],TFW[12][0].T);
SIGNAL_MAPPING(DATA12,TFW13_2_E,fastbus_1.qdc_L_Q17320.data[19],TFW[12][1].E);
SIGNAL_MAPPING(DATA12,TFW13_2_T,fastbus_1.tdc_L_T81855.data[35],TFW[12][1].T);
SIGNAL_MAPPING(DATA12,TFW14_1_E,fastbus_1.qdc_L_Q17320.data[21],TFW[13][0].E);
SIGNAL_MAPPING(DATA12,TFW14_1_T,fastbus_1.tdc_L_T81855.data[37],TFW[13][0].T);
SIGNAL_MAPPING(DATA12,TFW14_2_E,fastbus_1.qdc_L_Q17320.data[23],TFW[13][1].E);
SIGNAL_MAPPING(DATA12,TFW14_2_T,fastbus_1.tdc_L_T81855.data[39],TFW[13][1].T);
SIGNAL_MAPPING(DATA12,TFW15_1_E,fastbus_1.qdc_L_Q17320.data[25],TFW[14][0].E);
SIGNAL_MAPPING(DATA12,TFW15_1_T,fastbus_1.tdc_L_T81855.data[41],TFW[14][0].T);
SIGNAL_MAPPING(DATA12,TFW15_2_E,fastbus_1.qdc_L_Q17320.data[27],TFW[14][1].E);
SIGNAL_MAPPING(DATA12,TFW15_2_T,fastbus_1.tdc_L_T81855.data[43],TFW[14][1].T);
SIGNAL_MAPPING(DATA12,TFW16_1_E,fastbus_1.qdc_L_Q17320.data[29],TFW[15][0].E);
SIGNAL_MAPPING(DATA12,TFW16_1_T,fastbus_1.tdc_L_T81855.data[45],TFW[15][0].T);
SIGNAL_MAPPING(DATA12,TFW16_2_E,fastbus_1.qdc_L_Q17320.data[31],TFW[15][1].E);
SIGNAL_MAPPING(DATA12,TFW16_2_T,fastbus_1.tdc_L_T81855.data[47],TFW[15][1].T);
SIGNAL_MAPPING(DATA12,TFW17_1_E,fastbus_1.qdc_L_Q17320.data[64],TFW[16][0].E);
SIGNAL_MAPPING(DATA12,TFW17_1_T,fastbus_1.tdc_L_T81855.data[16],TFW[16][0].T);
SIGNAL_MAPPING(DATA12,TFW17_2_E,fastbus_1.qdc_L_Q17320.data[66],TFW[16][1].E);
SIGNAL_MAPPING(DATA12,TFW17_2_T,fastbus_1.tdc_L_T81855.data[18],TFW[16][1].T);
SIGNAL_MAPPING(DATA12,TFW18_1_E,fastbus_1.qdc_L_Q17320.data[68],TFW[17][0].E);
SIGNAL_MAPPING(DATA12,TFW18_1_T,fastbus_1.tdc_L_T81855.data[20],TFW[17][0].T);
SIGNAL_MAPPING(DATA12,TFW18_2_E,fastbus_1.qdc_L_Q17320.data[70],TFW[17][1].E);
SIGNAL_MAPPING(DATA12,TFW18_2_T,fastbus_1.tdc_L_T81855.data[22],TFW[17][1].T);
SIGNAL_MAPPING(DATA12,TFW19_1_E,fastbus_1.qdc_L_Q17320.data[72],TFW[18][0].E);
SIGNAL_MAPPING(DATA12,TFW19_1_T,fastbus_1.tdc_L_T81855.data[24],TFW[18][0].T);
SIGNAL_MAPPING(DATA12,TFW19_2_E,fastbus_1.qdc_L_Q17320.data[74],TFW[18][1].E);
SIGNAL_MAPPING(DATA12,TFW19_2_T,fastbus_1.tdc_L_T81855.data[26],TFW[18][1].T);
SIGNAL_MAPPING(DATA12,TFW20_1_E,fastbus_1.qdc_L_Q17320.data[76],TFW[19][0].E);
SIGNAL_MAPPING(DATA12,TFW20_1_T,fastbus_1.tdc_L_T81855.data[28],TFW[19][0].T);
SIGNAL_MAPPING(DATA12,TFW20_2_E,fastbus_1.qdc_L_Q17320.data[78],TFW[19][1].E);
SIGNAL_MAPPING(DATA12,TFW20_2_T,fastbus_1.tdc_L_T81855.data[30],TFW[19][1].T);
SIGNAL_MAPPING(DATA12,TFW21_1_E,fastbus_1.qdc_L_Q17320.data[65],TFW[20][0].E);
SIGNAL_MAPPING(DATA12,TFW21_1_T,fastbus_1.tdc_L_T81855.data[17],TFW[20][0].T);
SIGNAL_MAPPING(DATA12,TFW21_2_E,fastbus_1.qdc_L_Q17320.data[67],TFW[20][1].E);
SIGNAL_MAPPING(DATA12,TFW21_2_T,fastbus_1.tdc_L_T81855.data[19],TFW[20][1].T);
SIGNAL_MAPPING(DATA12,TFW22_1_E,fastbus_1.qdc_L_Q17320.data[69],TFW[21][0].E);
SIGNAL_MAPPING(DATA12,TFW22_1_T,fastbus_1.tdc_L_T81855.data[21],TFW[21][0].T);
SIGNAL_MAPPING(DATA12,TFW22_2_E,fastbus_1.qdc_L_Q17320.data[71],TFW[21][1].E);
SIGNAL_MAPPING(DATA12,TFW22_2_T,fastbus_1.tdc_L_T81855.data[23],TFW[21][1].T);
SIGNAL_MAPPING(DATA12,TFW23_1_E,fastbus_1.qdc_L_Q17320.data[73],TFW[22][0].E);
SIGNAL_MAPPING(DATA12,TFW23_1_T,fastbus_1.tdc_L_T81855.data[25],TFW[22][0].T);
SIGNAL_MAPPING(DATA12,TFW23_2_E,fastbus_1.qdc_L_Q17320.data[75],TFW[22][1].E);
SIGNAL_MAPPING(DATA12,TFW23_2_T,fastbus_1.tdc_L_T81855.data[27],TFW[22][1].T);
SIGNAL_MAPPING(DATA12,TFW24_1_E,fastbus_1.qdc_L_Q17320.data[77],TFW[23][0].E);
SIGNAL_MAPPING(DATA12,TFW24_1_T,fastbus_1.tdc_L_T81855.data[29],TFW[23][0].T);
SIGNAL_MAPPING(DATA12,TFW24_2_E,fastbus_1.qdc_L_Q17320.data[79],TFW[23][1].E);
SIGNAL_MAPPING(DATA12,TFW24_2_T,fastbus_1.tdc_L_T81855.data[31],TFW[23][1].T);
SIGNAL_MAPPING(DATA12,V1_01_1_E,fastbus_1.qdc_L_Q15372.data[48],V[0][0][0].E);
SIGNAL_MAPPING(DATA12,V1_01_1_T,fastbus_2.tdc_L_T81795.data[48],V[0][0][0].T);
SIGNAL_MAPPING(DATA12,V1_01_2_E,fastbus_1.qdc_L_Q17320.data[1],V[0][0][1].E);
SIGNAL_MAPPING(DATA12,V1_01_2_T,fastbus_1.tdc_L_T87024.data[49],V[0][0][1].T);
SIGNAL_MAPPING(DATA12,V1_02_1_E,fastbus_1.qdc_L_Q15372.data[52],V[0][1][0].E);
SIGNAL_MAPPING(DATA12,V1_02_1_T,fastbus_2.tdc_L_T81795.data[52],V[0][1][0].T);
SIGNAL_MAPPING(DATA12,V1_02_2_E,fastbus_1.qdc_L_Q17320.data[3],V[0][1][1].E);
SIGNAL_MAPPING(DATA12,V1_02_2_T,fastbus_1.tdc_L_T87024.data[51],V[0][1][1].T);
SIGNAL_MAPPING(DATA12,V1_03_1_E,fastbus_1.qdc_L_Q15372.data[56],V[0][2][0].E);
SIGNAL_MAPPING(DATA12,V1_03_1_T,fastbus_2.tdc_L_T81795.data[56],V[0][2][0].T);
SIGNAL_MAPPING(DATA12,V1_03_2_E,fastbus_1.qdc_L_Q47315.data[32],V[0][2][1].E);
SIGNAL_MAPPING(DATA12,V1_03_2_T,fastbus_1.tdc_L_T87044.data[48],V[0][2][1].T);
SIGNAL_MAPPING(DATA12,V1_04_1_E,fastbus_1.qdc_L_Q15372.data[60],V[0][3][0].E);
SIGNAL_MAPPING(DATA12,V1_04_1_T,fastbus_2.tdc_L_T81795.data[60],V[0][3][0].T);
SIGNAL_MAPPING(DATA12,V1_04_2_E,fastbus_1.qdc_L_Q47315.data[36],V[0][3][1].E);
SIGNAL_MAPPING(DATA12,V1_04_2_T,fastbus_1.tdc_L_T87044.data[52],V[0][3][1].T);
SIGNAL_MAPPING(DATA12,V1_05_1_E,fastbus_1.qdc_L_Q15372.data[49],V[0][4][0].E);
SIGNAL_MAPPING(DATA12,V1_05_1_T,fastbus_2.tdc_L_T81795.data[49],V[0][4][0].T);
SIGNAL_MAPPING(DATA12,V1_05_2_E,fastbus_1.qdc_L_Q17320.data[5],V[0][4][1].E);
SIGNAL_MAPPING(DATA12,V1_05_2_T,fastbus_1.tdc_L_T87024.data[53],V[0][4][1].T);
SIGNAL_MAPPING(DATA12,V1_06_1_E,fastbus_1.qdc_L_Q15372.data[53],V[0][5][0].E);
SIGNAL_MAPPING(DATA12,V1_06_1_T,fastbus_2.tdc_L_T81795.data[53],V[0][5][0].T);
SIGNAL_MAPPING(DATA12,V1_06_2_E,fastbus_1.qdc_L_Q17320.data[7],V[0][5][1].E);
SIGNAL_MAPPING(DATA12,V1_06_2_T,fastbus_1.tdc_L_T87024.data[55],V[0][5][1].T);
SIGNAL_MAPPING(DATA12,V1_07_1_E,fastbus_1.qdc_L_Q15372.data[57],V[0][6][0].E);
SIGNAL_MAPPING(DATA12,V1_07_1_T,fastbus_2.tdc_L_T81795.data[57],V[0][6][0].T);
SIGNAL_MAPPING(DATA12,V1_07_2_E,fastbus_1.qdc_L_Q47315.data[40],V[0][6][1].E);
SIGNAL_MAPPING(DATA12,V1_07_2_T,fastbus_1.tdc_L_T87044.data[56],V[0][6][1].T);
SIGNAL_MAPPING(DATA12,V1_08_1_E,fastbus_1.qdc_L_Q15372.data[61],V[0][7][0].E);
SIGNAL_MAPPING(DATA12,V1_08_1_T,fastbus_2.tdc_L_T81795.data[61],V[0][7][0].T);
SIGNAL_MAPPING(DATA12,V1_08_2_E,fastbus_1.qdc_L_Q47315.data[44],V[0][7][1].E);
SIGNAL_MAPPING(DATA12,V1_08_2_T,fastbus_1.tdc_L_T87044.data[60],V[0][7][1].T);
SIGNAL_MAPPING(DATA12,V1_09_1_E,fastbus_1.qdc_L_Q15372.data[50],V[0][8][0].E);
SIGNAL_MAPPING(DATA12,V1_09_1_T,fastbus_2.tdc_L_T81795.data[50],V[0][8][0].T);
SIGNAL_MAPPING(DATA12,V1_09_2_E,fastbus_1.qdc_L_Q47315.data[33],V[0][8][1].E);
SIGNAL_MAPPING(DATA12,V1_09_2_T,fastbus_1.tdc_L_T87044.data[49],V[0][8][1].T);
SIGNAL_MAPPING(DATA12,V1_10_1_E,fastbus_1.qdc_L_Q15372.data[54],V[0][9][0].E);
SIGNAL_MAPPING(DATA12,V1_10_1_T,fastbus_2.tdc_L_T81795.data[54],V[0][9][0].T);
SIGNAL_MAPPING(DATA12,V1_10_2_E,fastbus_1.qdc_L_Q47315.data[37],V[0][9][1].E);
SIGNAL_MAPPING(DATA12,V1_10_2_T,fastbus_1.tdc_L_T87044.data[53],V[0][9][1].T);
SIGNAL_MAPPING(DATA12,V1_11_1_E,fastbus_1.qdc_L_Q15372.data[58],V[0][10][0].E);
SIGNAL_MAPPING(DATA12,V1_11_1_T,fastbus_2.tdc_L_T81795.data[58],V[0][10][0].T);
SIGNAL_MAPPING(DATA12,V1_11_2_E,fastbus_1.qdc_L_Q47315.data[41],V[0][10][1].E);
SIGNAL_MAPPING(DATA12,V1_11_2_T,fastbus_1.tdc_L_T87044.data[57],V[0][10][1].T);
SIGNAL_MAPPING(DATA12,V1_12_1_E,fastbus_1.qdc_L_Q15372.data[62],V[0][11][0].E);
SIGNAL_MAPPING(DATA12,V1_12_1_T,fastbus_2.tdc_L_T81795.data[62],V[0][11][0].T);
SIGNAL_MAPPING(DATA12,V1_12_2_E,fastbus_1.qdc_L_Q47315.data[45],V[0][11][1].E);
SIGNAL_MAPPING(DATA12,V1_12_2_T,fastbus_1.tdc_L_T87044.data[61],V[0][11][1].T);
SIGNAL_MAPPING(DATA12,V1_13_1_E,fastbus_1.qdc_L_Q15372.data[51],V[0][12][0].E);
SIGNAL_MAPPING(DATA12,V1_13_1_T,fastbus_2.tdc_L_T81795.data[51],V[0][12][0].T);
SIGNAL_MAPPING(DATA12,V1_13_2_E,fastbus_1.qdc_L_Q47315.data[34],V[0][12][1].E);
SIGNAL_MAPPING(DATA12,V1_13_2_T,fastbus_1.tdc_L_T87044.data[50],V[0][12][1].T);
SIGNAL_MAPPING(DATA12,V1_14_1_E,fastbus_1.qdc_L_Q15372.data[55],V[0][13][0].E);
SIGNAL_MAPPING(DATA12,V1_14_1_T,fastbus_2.tdc_L_T81795.data[55],V[0][13][0].T);
SIGNAL_MAPPING(DATA12,V1_14_2_E,fastbus_1.qdc_L_Q47315.data[38],V[0][13][1].E);
SIGNAL_MAPPING(DATA12,V1_14_2_T,fastbus_1.tdc_L_T87044.data[54],V[0][13][1].T);
SIGNAL_MAPPING(DATA12,V1_15_1_E,fastbus_1.qdc_L_Q17320.data[0],V[0][14][0].E);
SIGNAL_MAPPING(DATA12,V1_15_1_T,fastbus_1.tdc_L_T87024.data[48],V[0][14][0].T);
SIGNAL_MAPPING(DATA12,V1_15_2_E,fastbus_1.qdc_L_Q47315.data[42],V[0][14][1].E);
SIGNAL_MAPPING(DATA12,V1_15_2_T,fastbus_1.tdc_L_T87044.data[58],V[0][14][1].T);
SIGNAL_MAPPING(DATA12,V1_16_1_E,fastbus_1.qdc_L_Q17320.data[2],V[0][15][0].E);
SIGNAL_MAPPING(DATA12,V1_16_1_T,fastbus_1.tdc_L_T87024.data[50],V[0][15][0].T);
SIGNAL_MAPPING(DATA12,V1_16_2_E,fastbus_1.qdc_L_Q47315.data[46],V[0][15][1].E);
SIGNAL_MAPPING(DATA12,V1_16_2_T,fastbus_1.tdc_L_T87044.data[62],V[0][15][1].T);
SIGNAL_MAPPING(DATA12,V1_17_1_E,fastbus_1.qdc_L_Q15372.data[59],V[0][16][0].E);
SIGNAL_MAPPING(DATA12,V1_17_1_T,fastbus_2.tdc_L_T81795.data[59],V[0][16][0].T);
SIGNAL_MAPPING(DATA12,V1_17_2_E,fastbus_1.qdc_L_Q47315.data[35],V[0][16][1].E);
SIGNAL_MAPPING(DATA12,V1_17_2_T,fastbus_1.tdc_L_T87044.data[51],V[0][16][1].T);
SIGNAL_MAPPING(DATA12,V1_18_1_E,fastbus_1.qdc_L_Q15372.data[63],V[0][17][0].E);
SIGNAL_MAPPING(DATA12,V1_18_1_T,fastbus_2.tdc_L_T81795.data[63],V[0][17][0].T);
SIGNAL_MAPPING(DATA12,V1_18_2_E,fastbus_1.qdc_L_Q47315.data[39],V[0][17][1].E);
SIGNAL_MAPPING(DATA12,V1_18_2_T,fastbus_1.tdc_L_T87044.data[55],V[0][17][1].T);
SIGNAL_MAPPING(DATA12,V1_19_1_E,fastbus_1.qdc_L_Q17320.data[4],V[0][18][0].E);
SIGNAL_MAPPING(DATA12,V1_19_1_T,fastbus_1.tdc_L_T87024.data[52],V[0][18][0].T);
SIGNAL_MAPPING(DATA12,V1_19_2_E,fastbus_1.qdc_L_Q47315.data[43],V[0][18][1].E);
SIGNAL_MAPPING(DATA12,V1_19_2_T,fastbus_1.tdc_L_T87044.data[59],V[0][18][1].T);
SIGNAL_MAPPING(DATA12,V1_20_1_E,fastbus_1.qdc_L_Q17320.data[6],V[0][19][0].E);
SIGNAL_MAPPING(DATA12,V1_20_1_T,fastbus_1.tdc_L_T87024.data[54],V[0][19][0].T);
SIGNAL_MAPPING(DATA12,V1_20_2_E,fastbus_1.qdc_L_Q47315.data[47],V[0][19][1].E);
SIGNAL_MAPPING(DATA12,V1_20_2_T,fastbus_1.tdc_L_T87044.data[63],V[0][19][1].T);
SIGNAL_MAPPING(DATA12,XB1_001_E,fastbus_1.qdc_L_Q11111.data[0],XB[0][0].E);
SIGNAL_MAPPING(DATA12,XB1_001_T,fastbus_1.tdc_L_T81800.data[24],XB[0][0].T);
SIGNAL_MAPPING(DATA12,XB1_002_E,fastbus_1.qdc_L_Q11111.data[2],XB[0][1].E);
SIGNAL_MAPPING(DATA12,XB1_002_T,fastbus_1.tdc_L_T81800.data[26],XB[0][1].T);
SIGNAL_MAPPING(DATA12,XB1_003_E,fastbus_1.qdc_L_Q11111.data[4],XB[0][2].E);
SIGNAL_MAPPING(DATA12,XB1_003_T,fastbus_1.tdc_L_T81800.data[28],XB[0][2].T);
SIGNAL_MAPPING(DATA12,XB1_004_E,fastbus_1.qdc_L_Q11111.data[6],XB[0][3].E);
SIGNAL_MAPPING(DATA12,XB1_004_T,fastbus_1.tdc_L_T81800.data[30],XB[0][3].T);
SIGNAL_MAPPING(DATA12,XB1_005_E,fastbus_1.qdc_L_Q11111.data[8],XB[0][4].E);
SIGNAL_MAPPING(DATA12,XB1_005_T,fastbus_1.tdc_L_T81800.data[32],XB[0][4].T);
SIGNAL_MAPPING(DATA12,XB1_006_E,fastbus_1.qdc_L_Q11111.data[10],XB[0][5].E);
SIGNAL_MAPPING(DATA12,XB1_006_T,fastbus_1.tdc_L_T81800.data[34],XB[0][5].T);
SIGNAL_MAPPING(DATA12,XB1_007_E,fastbus_1.qdc_L_Q11111.data[12],XB[0][6].E);
SIGNAL_MAPPING(DATA12,XB1_007_T,fastbus_1.tdc_L_T81800.data[36],XB[0][6].T);
SIGNAL_MAPPING(DATA12,XB1_008_E,fastbus_1.qdc_L_Q11111.data[14],XB[0][7].E);
SIGNAL_MAPPING(DATA12,XB1_008_T,fastbus_1.tdc_L_T81800.data[38],XB[0][7].T);
SIGNAL_MAPPING(DATA12,XB1_009_E,fastbus_1.qdc_L_Q11111.data[16],XB[0][8].E);
SIGNAL_MAPPING(DATA12,XB1_009_T,fastbus_1.tdc_L_T87044.data[32],XB[0][8].T);
SIGNAL_MAPPING(DATA12,XB1_010_E,fastbus_1.qdc_L_Q11111.data[18],XB[0][9].E);
SIGNAL_MAPPING(DATA12,XB1_010_T,fastbus_1.tdc_L_T87044.data[34],XB[0][9].T);
SIGNAL_MAPPING(DATA12,XB1_011_E,fastbus_1.qdc_L_Q11111.data[20],XB[0][10].E);
SIGNAL_MAPPING(DATA12,XB1_011_T,fastbus_1.tdc_L_T87044.data[36],XB[0][10].T);
SIGNAL_MAPPING(DATA12,XB1_012_E,fastbus_1.qdc_L_Q11111.data[22],XB[0][11].E);
SIGNAL_MAPPING(DATA12,XB1_012_T,fastbus_1.tdc_L_T87044.data[38],XB[0][11].T);
SIGNAL_MAPPING(DATA12,XB1_013_E,fastbus_1.qdc_L_Q11111.data[24],XB[0][12].E);
SIGNAL_MAPPING(DATA12,XB1_013_T,fastbus_1.tdc_L_T81800.data[8],XB[0][12].T);
SIGNAL_MAPPING(DATA12,XB1_014_E,fastbus_1.qdc_L_Q11111.data[26],XB[0][13].E);
SIGNAL_MAPPING(DATA12,XB1_014_T,fastbus_1.tdc_L_T81800.data[10],XB[0][13].T);
SIGNAL_MAPPING(DATA12,XB1_015_E,fastbus_1.qdc_L_Q11111.data[28],XB[0][14].E);
SIGNAL_MAPPING(DATA12,XB1_015_T,fastbus_1.tdc_L_T81800.data[12],XB[0][14].T);
SIGNAL_MAPPING(DATA12,XB1_016_E,fastbus_1.qdc_L_Q11111.data[30],XB[0][15].E);
SIGNAL_MAPPING(DATA12,XB1_016_T,fastbus_1.tdc_L_T81800.data[14],XB[0][15].T);
SIGNAL_MAPPING(DATA12,XB1_017_E,fastbus_1.qdc_L_Q11111.data[32],XB[0][16].E);
SIGNAL_MAPPING(DATA12,XB1_017_T,fastbus_1.tdc_L_T87044.data[0],XB[0][16].T);
SIGNAL_MAPPING(DATA12,XB1_018_E,fastbus_1.qdc_L_Q11111.data[34],XB[0][17].E);
SIGNAL_MAPPING(DATA12,XB1_018_T,fastbus_1.tdc_L_T87044.data[2],XB[0][17].T);
SIGNAL_MAPPING(DATA12,XB1_019_E,fastbus_1.qdc_L_Q11111.data[36],XB[0][18].E);
SIGNAL_MAPPING(DATA12,XB1_019_T,fastbus_1.tdc_L_T87044.data[4],XB[0][18].T);
SIGNAL_MAPPING(DATA12,XB1_020_E,fastbus_1.qdc_L_Q11111.data[38],XB[0][19].E);
SIGNAL_MAPPING(DATA12,XB1_020_T,fastbus_1.tdc_L_T87044.data[6],XB[0][19].T);
SIGNAL_MAPPING(DATA12,XB1_021_E,fastbus_1.qdc_L_Q11111.data[40],XB[0][20].E);
SIGNAL_MAPPING(DATA12,XB1_021_T,fastbus_1.tdc_L_T87044.data[8],XB[0][20].T);
SIGNAL_MAPPING(DATA12,XB1_022_E,fastbus_1.qdc_L_Q11111.data[42],XB[0][21].E);
SIGNAL_MAPPING(DATA12,XB1_022_T,fastbus_1.tdc_L_T87044.data[10],XB[0][21].T);
SIGNAL_MAPPING(DATA12,XB1_023_E,fastbus_1.qdc_L_Q11111.data[44],XB[0][22].E);
SIGNAL_MAPPING(DATA12,XB1_023_T,fastbus_1.tdc_L_T87044.data[12],XB[0][22].T);
SIGNAL_MAPPING(DATA12,XB1_024_E,fastbus_1.qdc_L_Q11111.data[46],XB[0][23].E);
SIGNAL_MAPPING(DATA12,XB1_024_T,fastbus_1.tdc_L_T87044.data[14],XB[0][23].T);
SIGNAL_MAPPING(DATA12,XB1_025_E,fastbus_1.qdc_L_Q11111.data[48],XB[0][24].E);
SIGNAL_MAPPING(DATA12,XB1_025_T,fastbus_1.tdc_L_T87024.data[24],XB[0][24].T);
SIGNAL_MAPPING(DATA12,XB1_026_E,fastbus_1.qdc_L_Q11111.data[50],XB[0][25].E);
SIGNAL_MAPPING(DATA12,XB1_026_T,fastbus_1.tdc_L_T87024.data[26],XB[0][25].T);
SIGNAL_MAPPING(DATA12,XB1_027_E,fastbus_1.qdc_L_Q11111.data[52],XB[0][26].E);
SIGNAL_MAPPING(DATA12,XB1_027_T,fastbus_1.tdc_L_T87024.data[28],XB[0][26].T);
SIGNAL_MAPPING(DATA12,XB1_028_E,fastbus_1.qdc_L_Q11111.data[54],XB[0][27].E);
SIGNAL_MAPPING(DATA12,XB1_028_T,fastbus_1.tdc_L_T87024.data[30],XB[0][27].T);
SIGNAL_MAPPING(DATA12,XB1_029_E,fastbus_1.qdc_L_Q11111.data[56],XB[0][28].E);
SIGNAL_MAPPING(DATA12,XB1_029_T,fastbus_1.tdc_L_T87024.data[32],XB[0][28].T);
SIGNAL_MAPPING(DATA12,XB1_030_E,fastbus_1.qdc_L_Q11111.data[58],XB[0][29].E);
SIGNAL_MAPPING(DATA12,XB1_030_T,fastbus_1.tdc_L_T87024.data[34],XB[0][29].T);
SIGNAL_MAPPING(DATA12,XB1_031_E,fastbus_1.qdc_L_Q11111.data[60],XB[0][30].E);
SIGNAL_MAPPING(DATA12,XB1_031_T,fastbus_1.tdc_L_T87024.data[36],XB[0][30].T);
SIGNAL_MAPPING(DATA12,XB1_032_E,fastbus_1.qdc_L_Q11111.data[62],XB[0][31].E);
SIGNAL_MAPPING(DATA12,XB1_032_T,fastbus_1.tdc_L_T87024.data[38],XB[0][31].T);
SIGNAL_MAPPING(DATA12,XB1_033_E,fastbus_1.qdc_L_Q11111.data[33],XB[0][32].E);
SIGNAL_MAPPING(DATA12,XB1_033_T,fastbus_1.tdc_L_T87044.data[1],XB[0][32].T);
SIGNAL_MAPPING(DATA12,XB1_034_E,fastbus_1.qdc_L_Q11111.data[35],XB[0][33].E);
SIGNAL_MAPPING(DATA12,XB1_034_T,fastbus_1.tdc_L_T87044.data[3],XB[0][33].T);
SIGNAL_MAPPING(DATA12,XB1_035_E,fastbus_1.qdc_L_Q11111.data[37],XB[0][34].E);
SIGNAL_MAPPING(DATA12,XB1_035_T,fastbus_1.tdc_L_T87044.data[5],XB[0][34].T);
SIGNAL_MAPPING(DATA12,XB1_036_E,fastbus_1.qdc_L_Q11111.data[39],XB[0][35].E);
SIGNAL_MAPPING(DATA12,XB1_036_T,fastbus_1.tdc_L_T87044.data[7],XB[0][35].T);
SIGNAL_MAPPING(DATA12,XB1_037_E,fastbus_1.qdc_L_Q11111.data[41],XB[0][36].E);
SIGNAL_MAPPING(DATA12,XB1_037_T,fastbus_1.tdc_L_T87044.data[9],XB[0][36].T);
SIGNAL_MAPPING(DATA12,XB1_038_E,fastbus_1.qdc_L_Q11111.data[43],XB[0][37].E);
SIGNAL_MAPPING(DATA12,XB1_038_T,fastbus_1.tdc_L_T87044.data[11],XB[0][37].T);
SIGNAL_MAPPING(DATA12,XB1_039_E,fastbus_1.qdc_L_Q11111.data[45],XB[0][38].E);
SIGNAL_MAPPING(DATA12,XB1_039_T,fastbus_1.tdc_L_T87044.data[13],XB[0][38].T);
SIGNAL_MAPPING(DATA12,XB1_040_E,fastbus_1.qdc_L_Q11111.data[47],XB[0][39].E);
SIGNAL_MAPPING(DATA12,XB1_040_T,fastbus_1.tdc_L_T87044.data[15],XB[0][39].T);
SIGNAL_MAPPING(DATA12,XB1_041_E,fastbus_1.qdc_L_Q11111.data[17],XB[0][40].E);
SIGNAL_MAPPING(DATA12,XB1_041_T,fastbus_1.tdc_L_T87044.data[33],XB[0][40].T);
SIGNAL_MAPPING(DATA12,XB1_042_E,fastbus_1.qdc_L_Q11111.data[19],XB[0][41].E);
SIGNAL_MAPPING(DATA12,XB1_042_T,fastbus_1.tdc_L_T87044.data[35],XB[0][41].T);
SIGNAL_MAPPING(DATA12,XB1_043_E,fastbus_1.qdc_L_Q11111.data[21],XB[0][42].E);
SIGNAL_MAPPING(DATA12,XB1_043_T,fastbus_1.tdc_L_T87044.data[37],XB[0][42].T);
SIGNAL_MAPPING(DATA12,XB1_044_E,fastbus_1.qdc_L_Q11111.data[23],XB[0][43].E);
SIGNAL_MAPPING(DATA12,XB1_044_T,fastbus_1.tdc_L_T87044.data[39],XB[0][43].T);
SIGNAL_MAPPING(DATA12,XB1_045_E,fastbus_1.qdc_L_Q11111.data[25],XB[0][44].E);
SIGNAL_MAPPING(DATA12,XB1_045_T,fastbus_1.tdc_L_T81800.data[9],XB[0][44].T);
SIGNAL_MAPPING(DATA12,XB1_046_E,fastbus_1.qdc_L_Q11111.data[27],XB[0][45].E);
SIGNAL_MAPPING(DATA12,XB1_046_T,fastbus_1.tdc_L_T81800.data[11],XB[0][45].T);
SIGNAL_MAPPING(DATA12,XB1_047_E,fastbus_1.qdc_L_Q11111.data[29],XB[0][46].E);
SIGNAL_MAPPING(DATA12,XB1_047_T,fastbus_1.tdc_L_T81800.data[13],XB[0][46].T);
SIGNAL_MAPPING(DATA12,XB1_048_E,fastbus_1.qdc_L_Q11111.data[31],XB[0][47].E);
SIGNAL_MAPPING(DATA12,XB1_048_T,fastbus_1.tdc_L_T81800.data[15],XB[0][47].T);
SIGNAL_MAPPING(DATA12,XB1_049_E,fastbus_1.qdc_L_Q11111.data[1],XB[0][48].E);
SIGNAL_MAPPING(DATA12,XB1_049_T,fastbus_1.tdc_L_T81800.data[25],XB[0][48].T);
SIGNAL_MAPPING(DATA12,XB1_050_E,fastbus_1.qdc_L_Q11111.data[3],XB[0][49].E);
SIGNAL_MAPPING(DATA12,XB1_050_T,fastbus_1.tdc_L_T81800.data[27],XB[0][49].T);
SIGNAL_MAPPING(DATA12,XB1_051_E,fastbus_1.qdc_L_Q11111.data[5],XB[0][50].E);
SIGNAL_MAPPING(DATA12,XB1_051_T,fastbus_1.tdc_L_T81800.data[29],XB[0][50].T);
SIGNAL_MAPPING(DATA12,XB1_052_E,fastbus_1.qdc_L_Q11111.data[7],XB[0][51].E);
SIGNAL_MAPPING(DATA12,XB1_052_T,fastbus_1.tdc_L_T81800.data[31],XB[0][51].T);
SIGNAL_MAPPING(DATA12,XB1_053_E,fastbus_1.qdc_L_Q11111.data[9],XB[0][52].E);
SIGNAL_MAPPING(DATA12,XB1_053_T,fastbus_1.tdc_L_T81800.data[33],XB[0][52].T);
SIGNAL_MAPPING(DATA12,XB1_054_E,fastbus_1.qdc_L_Q11111.data[11],XB[0][53].E);
SIGNAL_MAPPING(DATA12,XB1_054_T,fastbus_1.tdc_L_T81800.data[35],XB[0][53].T);
SIGNAL_MAPPING(DATA12,XB1_055_E,fastbus_1.qdc_L_Q11111.data[13],XB[0][54].E);
SIGNAL_MAPPING(DATA12,XB1_055_T,fastbus_1.tdc_L_T81800.data[37],XB[0][54].T);
SIGNAL_MAPPING(DATA12,XB1_056_E,fastbus_1.qdc_L_Q11111.data[15],XB[0][55].E);
SIGNAL_MAPPING(DATA12,XB1_056_T,fastbus_1.tdc_L_T81800.data[39],XB[0][55].T);
SIGNAL_MAPPING(DATA12,XB1_057_E,fastbus_1.qdc_L_Q47342.data[64],XB[0][56].E);
SIGNAL_MAPPING(DATA12,XB1_057_T,fastbus_1.tdc_L_T87024.data[0],XB[0][56].T);
SIGNAL_MAPPING(DATA12,XB1_058_E,fastbus_1.qdc_L_Q47342.data[66],XB[0][57].E);
SIGNAL_MAPPING(DATA12,XB1_058_T,fastbus_1.tdc_L_T87024.data[2],XB[0][57].T);
SIGNAL_MAPPING(DATA12,XB1_059_E,fastbus_1.qdc_L_Q47342.data[68],XB[0][58].E);
SIGNAL_MAPPING(DATA12,XB1_059_T,fastbus_1.tdc_L_T87024.data[4],XB[0][58].T);
SIGNAL_MAPPING(DATA12,XB1_060_E,fastbus_1.qdc_L_Q47342.data[70],XB[0][59].E);
SIGNAL_MAPPING(DATA12,XB1_060_T,fastbus_1.tdc_L_T87024.data[6],XB[0][59].T);
SIGNAL_MAPPING(DATA12,XB1_061_E,fastbus_1.qdc_L_Q47342.data[72],XB[0][60].E);
SIGNAL_MAPPING(DATA12,XB1_061_T,fastbus_1.tdc_L_T87024.data[8],XB[0][60].T);
SIGNAL_MAPPING(DATA12,XB1_062_E,fastbus_1.qdc_L_Q47342.data[74],XB[0][61].E);
SIGNAL_MAPPING(DATA12,XB1_062_T,fastbus_1.tdc_L_T87024.data[10],XB[0][61].T);
SIGNAL_MAPPING(DATA12,XB1_063_E,fastbus_1.qdc_L_Q47342.data[76],XB[0][62].E);
SIGNAL_MAPPING(DATA12,XB1_063_T,fastbus_1.tdc_L_T87024.data[12],XB[0][62].T);
SIGNAL_MAPPING(DATA12,XB1_064_E,fastbus_1.qdc_L_Q47342.data[78],XB[0][63].E);
SIGNAL_MAPPING(DATA12,XB1_064_T,fastbus_1.tdc_L_T87024.data[14],XB[0][63].T);
SIGNAL_MAPPING(DATA12,XB1_065_E,fastbus_1.qdc_L_Q11111.data[64],XB[0][64].E);
SIGNAL_MAPPING(DATA12,XB1_065_T,fastbus_1.tdc_L_T81800.data[40],XB[0][64].T);
SIGNAL_MAPPING(DATA12,XB1_066_E,fastbus_1.qdc_L_Q11111.data[66],XB[0][65].E);
SIGNAL_MAPPING(DATA12,XB1_066_T,fastbus_1.tdc_L_T81800.data[42],XB[0][65].T);
SIGNAL_MAPPING(DATA12,XB1_067_E,fastbus_1.qdc_L_Q11111.data[68],XB[0][66].E);
SIGNAL_MAPPING(DATA12,XB1_067_T,fastbus_1.tdc_L_T81800.data[44],XB[0][66].T);
SIGNAL_MAPPING(DATA12,XB1_068_E,fastbus_1.qdc_L_Q11111.data[70],XB[0][67].E);
SIGNAL_MAPPING(DATA12,XB1_068_T,fastbus_1.tdc_L_T81800.data[46],XB[0][67].T);
SIGNAL_MAPPING(DATA12,XB1_069_E,fastbus_1.qdc_L_Q11111.data[72],XB[0][68].E);
SIGNAL_MAPPING(DATA12,XB1_069_T,fastbus_1.tdc_L_T87024.data[40],XB[0][68].T);
SIGNAL_MAPPING(DATA12,XB1_070_E,fastbus_1.qdc_L_Q11111.data[74],XB[0][69].E);
SIGNAL_MAPPING(DATA12,XB1_070_T,fastbus_1.tdc_L_T87024.data[42],XB[0][69].T);
SIGNAL_MAPPING(DATA12,XB1_071_E,fastbus_1.qdc_L_Q11111.data[76],XB[0][70].E);
SIGNAL_MAPPING(DATA12,XB1_071_T,fastbus_1.tdc_L_T87024.data[44],XB[0][70].T);
SIGNAL_MAPPING(DATA12,XB1_072_E,fastbus_1.qdc_L_Q11111.data[78],XB[0][71].E);
SIGNAL_MAPPING(DATA12,XB1_072_T,fastbus_1.tdc_L_T87024.data[46],XB[0][71].T);
SIGNAL_MAPPING(DATA12,XB1_073_E,fastbus_1.qdc_L_Q46848.data[57],XB[0][72].E);
SIGNAL_MAPPING(DATA12,XB1_073_T,fastbus_1.tdc_L_T81800.data[52],XB[0][72].T);
SIGNAL_MAPPING(DATA12,XB1_074_E,fastbus_1.qdc_L_Q46848.data[51],XB[0][73].E);
SIGNAL_MAPPING(DATA12,XB1_074_T,fastbus_1.tdc_L_T81800.data[63],XB[0][73].T);
SIGNAL_MAPPING(DATA12,XB1_075_E,fastbus_1.qdc_L_Q46848.data[53],XB[0][74].E);
SIGNAL_MAPPING(DATA12,XB1_075_T,fastbus_1.tdc_L_T81800.data[49],XB[0][74].T);
SIGNAL_MAPPING(DATA12,XB1_076_E,fastbus_1.qdc_L_Q46848.data[55],XB[0][75].E);
SIGNAL_MAPPING(DATA12,XB1_076_T,fastbus_1.tdc_L_T81800.data[51],XB[0][75].T);
SIGNAL_MAPPING(DATA12,XB1_078_E,fastbus_1.qdc_L_Q46848.data[59],XB[0][77].E);
SIGNAL_MAPPING(DATA12,XB1_078_T,fastbus_1.tdc_L_T81800.data[56],XB[0][77].T);
SIGNAL_MAPPING(DATA12,XB1_079_E,fastbus_1.qdc_L_Q46848.data[61],XB[0][78].E);
SIGNAL_MAPPING(DATA12,XB1_079_T,fastbus_1.tdc_L_T81800.data[57],XB[0][78].T);
SIGNAL_MAPPING(DATA12,XB1_080_E,fastbus_1.qdc_L_Q46848.data[63],XB[0][79].E);
SIGNAL_MAPPING(DATA12,XB1_080_T,fastbus_1.tdc_L_T81800.data[58],XB[0][79].T);
SIGNAL_MAPPING(DATA12,XB1_083_E,fastbus_1.qdc_L_Q11111.data[53],XB[0][82].E);
SIGNAL_MAPPING(DATA12,XB1_083_T,fastbus_1.tdc_L_T87024.data[29],XB[0][82].T);
SIGNAL_MAPPING(DATA12,XB1_084_E,fastbus_1.qdc_L_Q11111.data[55],XB[0][83].E);
SIGNAL_MAPPING(DATA12,XB1_084_T,fastbus_1.tdc_L_T87024.data[31],XB[0][83].T);
SIGNAL_MAPPING(DATA12,XB1_085_E,fastbus_1.qdc_L_Q11111.data[57],XB[0][84].E);
SIGNAL_MAPPING(DATA12,XB1_085_T,fastbus_1.tdc_L_T87024.data[33],XB[0][84].T);
SIGNAL_MAPPING(DATA12,XB1_086_E,fastbus_1.qdc_L_Q11111.data[59],XB[0][85].E);
SIGNAL_MAPPING(DATA12,XB1_086_T,fastbus_1.tdc_L_T87024.data[35],XB[0][85].T);
SIGNAL_MAPPING(DATA12,XB1_087_E,fastbus_1.qdc_L_Q11111.data[61],XB[0][86].E);
SIGNAL_MAPPING(DATA12,XB1_087_T,fastbus_1.tdc_L_T87024.data[37],XB[0][86].T);
SIGNAL_MAPPING(DATA12,XB1_088_E,fastbus_1.qdc_L_Q11111.data[63],XB[0][87].E);
SIGNAL_MAPPING(DATA12,XB1_088_T,fastbus_1.tdc_L_T87024.data[39],XB[0][87].T);
SIGNAL_MAPPING(DATA12,XB1_089_E,fastbus_1.qdc_L_Q47342.data[16],XB[0][88].E);
SIGNAL_MAPPING(DATA12,XB1_089_T,fastbus_1.tdc_L_T87044.data[24],XB[0][88].T);
SIGNAL_MAPPING(DATA12,XB1_090_E,fastbus_1.qdc_L_Q47342.data[18],XB[0][89].E);
SIGNAL_MAPPING(DATA12,XB1_090_T,fastbus_1.tdc_L_T87044.data[26],XB[0][89].T);
SIGNAL_MAPPING(DATA12,XB1_091_E,fastbus_1.qdc_L_Q47342.data[20],XB[0][90].E);
SIGNAL_MAPPING(DATA12,XB1_091_T,fastbus_1.tdc_L_T87044.data[28],XB[0][90].T);
SIGNAL_MAPPING(DATA12,XB1_092_E,fastbus_1.qdc_L_Q47342.data[22],XB[0][91].E);
SIGNAL_MAPPING(DATA12,XB1_092_T,fastbus_1.tdc_L_T87044.data[30],XB[0][91].T);
SIGNAL_MAPPING(DATA12,XB1_093_E,fastbus_1.qdc_L_Q47342.data[24],XB[0][92].E);
SIGNAL_MAPPING(DATA12,XB1_093_T,fastbus_1.tdc_L_T87044.data[40],XB[0][92].T);
SIGNAL_MAPPING(DATA12,XB1_094_E,fastbus_1.qdc_L_Q47342.data[26],XB[0][93].E);
SIGNAL_MAPPING(DATA12,XB1_094_T,fastbus_1.tdc_L_T87044.data[42],XB[0][93].T);
SIGNAL_MAPPING(DATA12,XB1_095_E,fastbus_1.qdc_L_Q47342.data[28],XB[0][94].E);
SIGNAL_MAPPING(DATA12,XB1_095_T,fastbus_1.tdc_L_T87044.data[44],XB[0][94].T);
SIGNAL_MAPPING(DATA12,XB1_096_E,fastbus_1.qdc_L_Q47342.data[30],XB[0][95].E);
SIGNAL_MAPPING(DATA12,XB1_096_T,fastbus_1.tdc_L_T87044.data[46],XB[0][95].T);
SIGNAL_MAPPING(DATA12,XB1_097_E,fastbus_1.qdc_L_Q47342.data[48],XB[0][96].E);
SIGNAL_MAPPING(DATA12,XB1_097_T,fastbus_1.tdc_L_T87024.data[16],XB[0][96].T);
SIGNAL_MAPPING(DATA12,XB1_098_E,fastbus_1.qdc_L_Q47342.data[50],XB[0][97].E);
SIGNAL_MAPPING(DATA12,XB1_098_T,fastbus_1.tdc_L_T87024.data[18],XB[0][97].T);
SIGNAL_MAPPING(DATA12,XB1_099_E,fastbus_1.qdc_L_Q47342.data[52],XB[0][98].E);
SIGNAL_MAPPING(DATA12,XB1_099_T,fastbus_1.tdc_L_T87024.data[20],XB[0][98].T);
SIGNAL_MAPPING(DATA12,XB1_104_E,fastbus_1.qdc_L_Q47342.data[62],XB[0][103].E);
SIGNAL_MAPPING(DATA12,XB1_104_T,fastbus_1.tdc_L_T81800.data[22],XB[0][103].T);
SIGNAL_MAPPING(DATA12,XB1_105_E,fastbus_1.qdc_L_Q47342.data[33],XB[0][104].E);
SIGNAL_MAPPING(DATA12,XB1_105_T,fastbus_1.tdc_L_T87044.data[17],XB[0][104].T);
SIGNAL_MAPPING(DATA12,XB1_106_E,fastbus_1.qdc_L_Q47342.data[35],XB[0][105].E);
SIGNAL_MAPPING(DATA12,XB1_106_T,fastbus_1.tdc_L_T87044.data[19],XB[0][105].T);
SIGNAL_MAPPING(DATA12,XB1_107_E,fastbus_1.qdc_L_Q47342.data[37],XB[0][106].E);
SIGNAL_MAPPING(DATA12,XB1_107_T,fastbus_1.tdc_L_T87044.data[21],XB[0][106].T);
SIGNAL_MAPPING(DATA12,XB1_108_E,fastbus_1.qdc_L_Q47342.data[39],XB[0][107].E);
SIGNAL_MAPPING(DATA12,XB1_108_T,fastbus_1.tdc_L_T87044.data[23],XB[0][107].T);
SIGNAL_MAPPING(DATA12,XB1_109_E,fastbus_1.qdc_L_Q47342.data[41],XB[0][108].E);
SIGNAL_MAPPING(DATA12,XB1_109_T,fastbus_1.tdc_L_T81800.data[1],XB[0][108].T);
SIGNAL_MAPPING(DATA12,XB1_110_E,fastbus_1.qdc_L_Q47342.data[43],XB[0][109].E);
SIGNAL_MAPPING(DATA12,XB1_110_T,fastbus_1.tdc_L_T81800.data[3],XB[0][109].T);
SIGNAL_MAPPING(DATA12,XB1_111_E,fastbus_1.qdc_L_Q47342.data[45],XB[0][110].E);
SIGNAL_MAPPING(DATA12,XB1_111_T,fastbus_1.tdc_L_T81800.data[5],XB[0][110].T);
SIGNAL_MAPPING(DATA12,XB1_112_E,fastbus_1.qdc_L_Q47342.data[47],XB[0][111].E);
SIGNAL_MAPPING(DATA12,XB1_112_T,fastbus_1.tdc_L_T81800.data[7],XB[0][111].T);
SIGNAL_MAPPING(DATA12,XB1_113_E,fastbus_1.qdc_L_Q47342.data[65],XB[0][112].E);
SIGNAL_MAPPING(DATA12,XB1_113_T,fastbus_1.tdc_L_T87024.data[1],XB[0][112].T);
SIGNAL_MAPPING(DATA12,XB1_114_E,fastbus_1.qdc_L_Q47342.data[67],XB[0][113].E);
SIGNAL_MAPPING(DATA12,XB1_114_T,fastbus_1.tdc_L_T87024.data[3],XB[0][113].T);
SIGNAL_MAPPING(DATA12,XB1_115_E,fastbus_1.qdc_L_Q47342.data[69],XB[0][114].E);
SIGNAL_MAPPING(DATA12,XB1_115_T,fastbus_1.tdc_L_T87024.data[5],XB[0][114].T);
SIGNAL_MAPPING(DATA12,XB1_116_E,fastbus_1.qdc_L_Q47342.data[71],XB[0][115].E);
SIGNAL_MAPPING(DATA12,XB1_116_T,fastbus_1.tdc_L_T87024.data[7],XB[0][115].T);
SIGNAL_MAPPING(DATA12,XB1_117_E,fastbus_1.qdc_L_Q47342.data[73],XB[0][116].E);
SIGNAL_MAPPING(DATA12,XB1_117_T,fastbus_1.tdc_L_T87024.data[9],XB[0][116].T);
SIGNAL_MAPPING(DATA12,XB1_118_E,fastbus_1.qdc_L_Q47342.data[75],XB[0][117].E);
SIGNAL_MAPPING(DATA12,XB1_118_T,fastbus_1.tdc_L_T87024.data[11],XB[0][117].T);
SIGNAL_MAPPING(DATA12,XB1_119_E,fastbus_1.qdc_L_Q47342.data[77],XB[0][118].E);
SIGNAL_MAPPING(DATA12,XB1_119_T,fastbus_1.tdc_L_T87024.data[13],XB[0][118].T);
SIGNAL_MAPPING(DATA12,XB1_120_E,fastbus_1.qdc_L_Q47342.data[79],XB[0][119].E);
SIGNAL_MAPPING(DATA12,XB1_120_T,fastbus_1.tdc_L_T87024.data[15],XB[0][119].T);
SIGNAL_MAPPING(DATA12,XB1_121_E,fastbus_1.qdc_L_Q47342.data[17],XB[0][120].E);
SIGNAL_MAPPING(DATA12,XB1_121_T,fastbus_1.tdc_L_T87044.data[25],XB[0][120].T);
SIGNAL_MAPPING(DATA12,XB1_122_E,fastbus_1.qdc_L_Q47342.data[19],XB[0][121].E);
SIGNAL_MAPPING(DATA12,XB1_122_T,fastbus_1.tdc_L_T87044.data[27],XB[0][121].T);
SIGNAL_MAPPING(DATA12,XB1_123_E,fastbus_1.qdc_L_Q47342.data[21],XB[0][122].E);
SIGNAL_MAPPING(DATA12,XB1_123_T,fastbus_1.tdc_L_T87044.data[29],XB[0][122].T);
SIGNAL_MAPPING(DATA12,XB1_124_E,fastbus_1.qdc_L_Q47342.data[23],XB[0][123].E);
SIGNAL_MAPPING(DATA12,XB1_124_T,fastbus_1.tdc_L_T87044.data[31],XB[0][123].T);
SIGNAL_MAPPING(DATA12,XB1_125_E,fastbus_1.qdc_L_Q47342.data[25],XB[0][124].E);
SIGNAL_MAPPING(DATA12,XB1_125_T,fastbus_1.tdc_L_T87044.data[41],XB[0][124].T);
SIGNAL_MAPPING(DATA12,XB1_126_E,fastbus_1.qdc_L_Q47342.data[27],XB[0][125].E);
SIGNAL_MAPPING(DATA12,XB1_126_T,fastbus_1.tdc_L_T87044.data[43],XB[0][125].T);
SIGNAL_MAPPING(DATA12,XB1_127_E,fastbus_1.qdc_L_Q47342.data[29],XB[0][126].E);
SIGNAL_MAPPING(DATA12,XB1_127_T,fastbus_1.tdc_L_T87044.data[45],XB[0][126].T);
SIGNAL_MAPPING(DATA12,XB1_128_E,fastbus_1.qdc_L_Q47342.data[31],XB[0][127].E);
SIGNAL_MAPPING(DATA12,XB1_128_T,fastbus_1.tdc_L_T87044.data[47],XB[0][127].T);
SIGNAL_MAPPING(DATA12,XB1_129_E,fastbus_1.qdc_L_Q46848.data[48],XB[0][128].E);
SIGNAL_MAPPING(DATA12,XB1_129_T,fastbus_1.tdc_L_T81800.data[60],XB[0][128].T);
SIGNAL_MAPPING(DATA12,XB1_130_E,fastbus_1.qdc_L_Q46848.data[50],XB[0][129].E);
SIGNAL_MAPPING(DATA12,XB1_130_T,fastbus_1.tdc_L_T81800.data[62],XB[0][129].T);
SIGNAL_MAPPING(DATA12,XB1_131_E,fastbus_1.qdc_L_Q46848.data[52],XB[0][130].E);
SIGNAL_MAPPING(DATA12,XB1_131_T,fastbus_1.tdc_L_T81800.data[48],XB[0][130].T);
SIGNAL_MAPPING(DATA12,XB1_132_E,fastbus_1.qdc_L_Q46848.data[54],XB[0][131].E);
SIGNAL_MAPPING(DATA12,XB1_132_T,fastbus_1.tdc_L_T81800.data[50],XB[0][131].T);
SIGNAL_MAPPING(DATA12,XB1_133_E,fastbus_1.qdc_L_Q46848.data[56],XB[0][132].E);
SIGNAL_MAPPING(DATA12,XB1_133_T,fastbus_1.tdc_L_T81800.data[61],XB[0][132].T);
SIGNAL_MAPPING(DATA12,XB1_134_E,fastbus_1.qdc_L_Q46848.data[58],XB[0][133].E);
SIGNAL_MAPPING(DATA12,XB1_134_T,fastbus_1.tdc_L_T81800.data[53],XB[0][133].T);
SIGNAL_MAPPING(DATA12,XB1_135_E,fastbus_1.qdc_L_Q46848.data[60],XB[0][134].E);
SIGNAL_MAPPING(DATA12,XB1_135_T,fastbus_1.tdc_L_T81800.data[55],XB[0][134].T);
SIGNAL_MAPPING(DATA12,XB1_136_E,fastbus_1.qdc_L_Q46848.data[62],XB[0][135].E);
SIGNAL_MAPPING(DATA12,XB1_136_T,fastbus_1.tdc_L_T81800.data[54],XB[0][135].T);
SIGNAL_MAPPING(DATA12,XB1_137_E,fastbus_1.qdc_L_Q11111.data[65],XB[0][136].E);
SIGNAL_MAPPING(DATA12,XB1_137_T,fastbus_1.tdc_L_T81800.data[41],XB[0][136].T);
SIGNAL_MAPPING(DATA12,XB1_138_E,fastbus_1.qdc_L_Q11111.data[67],XB[0][137].E);
SIGNAL_MAPPING(DATA12,XB1_138_T,fastbus_1.tdc_L_T81800.data[43],XB[0][137].T);
SIGNAL_MAPPING(DATA12,XB1_139_E,fastbus_1.qdc_L_Q11111.data[69],XB[0][138].E);
SIGNAL_MAPPING(DATA12,XB1_139_T,fastbus_1.tdc_L_T81800.data[45],XB[0][138].T);
SIGNAL_MAPPING(DATA12,XB1_140_E,fastbus_1.qdc_L_Q11111.data[71],XB[0][139].E);
SIGNAL_MAPPING(DATA12,XB1_140_T,fastbus_1.tdc_L_T81800.data[47],XB[0][139].T);
SIGNAL_MAPPING(DATA12,XB1_141_E,fastbus_1.qdc_L_Q11111.data[73],XB[0][140].E);
SIGNAL_MAPPING(DATA12,XB1_141_T,fastbus_1.tdc_L_T87024.data[41],XB[0][140].T);
SIGNAL_MAPPING(DATA12,XB1_142_E,fastbus_1.qdc_L_Q11111.data[75],XB[0][141].E);
SIGNAL_MAPPING(DATA12,XB1_142_T,fastbus_1.tdc_L_T87024.data[43],XB[0][141].T);
SIGNAL_MAPPING(DATA12,XB1_143_E,fastbus_1.qdc_L_Q11111.data[77],XB[0][142].E);
SIGNAL_MAPPING(DATA12,XB1_143_T,fastbus_1.tdc_L_T87024.data[45],XB[0][142].T);
SIGNAL_MAPPING(DATA12,XB1_144_E,fastbus_1.qdc_L_Q11111.data[79],XB[0][143].E);
SIGNAL_MAPPING(DATA12,XB1_144_T,fastbus_1.tdc_L_T87024.data[47],XB[0][143].T);
SIGNAL_MAPPING(DATA12,XB1_145_E,fastbus_1.qdc_L_Q47342.data[32],XB[0][144].E);
SIGNAL_MAPPING(DATA12,XB1_145_T,fastbus_1.tdc_L_T87044.data[16],XB[0][144].T);
SIGNAL_MAPPING(DATA12,XB1_146_E,fastbus_1.qdc_L_Q47342.data[34],XB[0][145].E);
SIGNAL_MAPPING(DATA12,XB1_146_T,fastbus_1.tdc_L_T87044.data[18],XB[0][145].T);
SIGNAL_MAPPING(DATA12,XB1_147_E,fastbus_1.qdc_L_Q47342.data[36],XB[0][146].E);
SIGNAL_MAPPING(DATA12,XB1_147_T,fastbus_1.tdc_L_T87044.data[20],XB[0][146].T);
SIGNAL_MAPPING(DATA12,XB1_148_E,fastbus_1.qdc_L_Q47342.data[38],XB[0][147].E);
SIGNAL_MAPPING(DATA12,XB1_148_T,fastbus_1.tdc_L_T87044.data[22],XB[0][147].T);
SIGNAL_MAPPING(DATA12,XB1_149_E,fastbus_1.qdc_L_Q47342.data[40],XB[0][148].E);
SIGNAL_MAPPING(DATA12,XB1_149_T,fastbus_1.tdc_L_T81800.data[0],XB[0][148].T);
SIGNAL_MAPPING(DATA12,XB1_150_E,fastbus_1.qdc_L_Q47342.data[42],XB[0][149].E);
SIGNAL_MAPPING(DATA12,XB1_150_T,fastbus_1.tdc_L_T81800.data[2],XB[0][149].T);
SIGNAL_MAPPING(DATA12,XB1_151_E,fastbus_1.qdc_L_Q47342.data[44],XB[0][150].E);
SIGNAL_MAPPING(DATA12,XB1_151_T,fastbus_1.tdc_L_T81800.data[4],XB[0][150].T);
SIGNAL_MAPPING(DATA12,XB1_152_E,fastbus_1.qdc_L_Q47342.data[46],XB[0][151].E);
SIGNAL_MAPPING(DATA12,XB1_152_T,fastbus_1.tdc_L_T81800.data[6],XB[0][151].T);
SIGNAL_MAPPING(DATA12,XB1_153_E,fastbus_1.qdc_L_Q47342.data[49],XB[0][152].E);
SIGNAL_MAPPING(DATA12,XB1_153_T,fastbus_1.tdc_L_T87024.data[17],XB[0][152].T);
SIGNAL_MAPPING(DATA12,XB1_154_E,fastbus_1.qdc_L_Q47342.data[51],XB[0][153].E);
SIGNAL_MAPPING(DATA12,XB1_154_T,fastbus_1.tdc_L_T87024.data[19],XB[0][153].T);
SIGNAL_MAPPING(DATA12,XB1_155_E,fastbus_1.qdc_L_Q47342.data[53],XB[0][154].E);
SIGNAL_MAPPING(DATA12,XB1_155_T,fastbus_1.tdc_L_T87024.data[21],XB[0][154].T);
SIGNAL_MAPPING(DATA12,XB1_156_E,fastbus_1.qdc_L_Q47342.data[55],XB[0][155].E);
SIGNAL_MAPPING(DATA12,XB1_156_T,fastbus_1.tdc_L_T87024.data[23],XB[0][155].T);
SIGNAL_MAPPING(DATA12,XB1_157_E,fastbus_1.qdc_L_Q47342.data[57],XB[0][156].E);
SIGNAL_MAPPING(DATA12,XB1_157_T,fastbus_1.tdc_L_T81800.data[17],XB[0][156].T);
SIGNAL_MAPPING(DATA12,XB1_158_E,fastbus_1.qdc_L_Q47342.data[59],XB[0][157].E);
SIGNAL_MAPPING(DATA12,XB1_158_T,fastbus_1.tdc_L_T81800.data[19],XB[0][157].T);
SIGNAL_MAPPING(DATA12,XB1_159_E,fastbus_1.qdc_L_Q47342.data[61],XB[0][158].E);
SIGNAL_MAPPING(DATA12,XB1_159_T,fastbus_1.tdc_L_T81800.data[21],XB[0][158].T);
SIGNAL_MAPPING(DATA12,XB1_160_E,fastbus_1.qdc_L_Q47342.data[63],XB[0][159].E);
SIGNAL_MAPPING(DATA12,XB1_160_T,fastbus_1.tdc_L_T81800.data[23],XB[0][159].T);
SIGNAL_MAPPING(DATA12,XB1_161_E,fastbus_1.qdc_L_Q11111.data[49],XB[0][160].E);
SIGNAL_MAPPING(DATA12,XB1_161_T,fastbus_1.tdc_L_T87024.data[25],XB[0][160].T);
SIGNAL_MAPPING(DATA12,XB1_162_E,fastbus_1.qdc_L_Q11111.data[51],XB[0][161].E);
SIGNAL_MAPPING(DATA12,XB1_162_T,fastbus_1.tdc_L_T87024.data[27],XB[0][161].T);

/** END_EVENT_DATA_MAPPING ********************************************/


/** BEGIN_EVENT_DATA_MAPPING *******************************************
 *
 * Event data mapping.
 *
 * Do not edit - automatically generated.
 */

// The order in this file does not matter.
// This information parsed once and not treated eventwise,
// it is used to initialize a structure.


/** END_EVENT_DATA_MAPPING ********************************************/

/**********************************************************/

/** BEGIN_LOCATIONS ****************************************************
 *
 * File and line locations from the parsed specification files.
 *
 * Do not edit - automatically generated.
 */

// It's left to the compiler to only store one copy of each
// unique string.

location spec_locations[] =
{ 
  { 2, 1, "gen_land/reparse.uce" },
  { 3, 1, "<built-in>" },
  { 4, 1, "<command-line>" },
  { 5, 1, "/usr/include/stdc-predef.h" },
  { 6, 1, "<command-line>" },
  { 7, 1, "gen_land/reparse.uce" },
  { 8, 12, "gen_land/reparse.uce" },
  { 668, 680, "gen_land/reparse.uce" },
};

/** END_LOCATIONS *****************************************************/

