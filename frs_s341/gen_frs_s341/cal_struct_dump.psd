
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

class cal_event_MW
{
  float AN;
  float XR;
  float XL;
  float YU;
  float YD;
} ;
class cal_event_TOF
{
  float L;
  float R;
} ;
class cal_event_TPC
{
  float A[4];
  float AR[2];
  float AL[2];
  float DT[4];
  float LT[2];
  float RT[2];
} ;
class cal_event_SC
{
  float DT;
  float DEL;
  float DER;
} ;
class cal_event : public cal_event_base
{
  cal_event_MW MW[2];
  cal_event_TOF TOF;
  cal_event_TPC TPC[3];
  cal_event_SC SC[3];
} ;
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/


/** BEGIN_MIRROR_STRUCT ************************************************
 *
 * Mirror (1 to 1) structure.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

#ifndef USER_DEF_cal_event_MW
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(cal_event_MW)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(AN);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(AN);
  STRUCT_MIRROR_ITEM_CTRL(XR);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(XR);
  STRUCT_MIRROR_ITEM_CTRL(XL);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(XL);
  STRUCT_MIRROR_ITEM_CTRL(YU);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(YU);
  STRUCT_MIRROR_ITEM_CTRL(YD);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(YD);
  STRUCT_MIRROR_FCNS_DECL(cal_event_MW);
};
#endif//USER_DEF_cal_event_MW

#ifndef USER_DEF_cal_event_TOF
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(cal_event_TOF)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(L);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(L);
  STRUCT_MIRROR_ITEM_CTRL(R);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(R);
  STRUCT_MIRROR_FCNS_DECL(cal_event_TOF);
};
#endif//USER_DEF_cal_event_TOF

#ifndef USER_DEF_cal_event_TPC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(cal_event_TPC)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(A);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(A__i0,,4);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(A[4]);
  STRUCT_MIRROR_ITEM_CTRL(AR);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(AR__i0,,2);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(AR[2]);
  STRUCT_MIRROR_ITEM_CTRL(AL);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(AL__i0,,2);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(AL[2]);
  STRUCT_MIRROR_ITEM_CTRL(DT);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(DT__i0,,4);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(DT[4]);
  STRUCT_MIRROR_ITEM_CTRL(LT);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(LT__i0,,2);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(LT[2]);
  STRUCT_MIRROR_ITEM_CTRL(RT);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(RT__i0,,2);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(RT[2]);
  STRUCT_MIRROR_FCNS_DECL(cal_event_TPC);
};
#endif//USER_DEF_cal_event_TPC

#ifndef USER_DEF_cal_event_SC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(cal_event_SC)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(DT);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(DT);
  STRUCT_MIRROR_ITEM_CTRL(DEL);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(DEL);
  STRUCT_MIRROR_ITEM_CTRL(DER);
  STRUCT_MIRROR_TYPE(float) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(DER);
  STRUCT_MIRROR_FCNS_DECL(cal_event_SC);
};
#endif//USER_DEF_cal_event_SC

#ifndef USER_DEF_cal_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(cal_event) : public STRUCT_MIRROR_BASE(cal_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(cal_event_base);
  STRUCT_MIRROR_ITEM_CTRL(MW);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(MW__i0,,2);
  STRUCT_MIRROR_TYPE(cal_event_MW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(MW[2]);
  STRUCT_MIRROR_ITEM_CTRL(TOF);
  STRUCT_MIRROR_TYPE(cal_event_TOF) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(TOF);
  STRUCT_MIRROR_ITEM_CTRL(TPC);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(TPC__i0,,3);
  STRUCT_MIRROR_TYPE(cal_event_TPC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(TPC[3]);
  STRUCT_MIRROR_ITEM_CTRL(SC);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(SC__i0,,3);
  STRUCT_MIRROR_TYPE(cal_event_SC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(SC[3]);
  STRUCT_MIRROR_FCNS_DECL(cal_event);
};
#endif//USER_DEF_cal_event

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_STRUCT *************************************************/


/** BEGIN_MIRROR_DECL_STRUCT *******************************************
 *
 * Mirror structure names.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(cal_event_MW);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(cal_event_TOF);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(cal_event_TPC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(cal_event_SC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(cal_event);

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_DECL_STRUCT ********************************************/


/** BEGIN_FUNCTION_CALL_PER_MEMBER *************************************
 *
 * Recursive function calls per member.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_fcncall_define.hh"

#ifndef USER_DEF_cal_event_MW
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(cal_event_MW)::FCNCALL_NAME(cal_event_MW)
{
  FCNCALL_INIT;
  // float AN;
  {
  FCNCALL_SUBNAME("AN");
  { FCNCALL_CALL_CTRL_WRAP(AN,FCNCALL_CALL_TYPE(float,AN)); }
  FCNCALL_SUBNAME_END;
  }
  // float XR;
  {
  FCNCALL_SUBNAME("XR");
  { FCNCALL_CALL_CTRL_WRAP(XR,FCNCALL_CALL_TYPE(float,XR)); }
  FCNCALL_SUBNAME_END;
  }
  // float XL;
  {
  FCNCALL_SUBNAME("XL");
  { FCNCALL_CALL_CTRL_WRAP(XL,FCNCALL_CALL_TYPE(float,XL)); }
  FCNCALL_SUBNAME_END;
  }
  // float YU;
  {
  FCNCALL_SUBNAME("YU");
  { FCNCALL_CALL_CTRL_WRAP(YU,FCNCALL_CALL_TYPE(float,YU)); }
  FCNCALL_SUBNAME_END;
  }
  // float YD;
  {
  FCNCALL_SUBNAME("YD");
  { FCNCALL_CALL_CTRL_WRAP(YD,FCNCALL_CALL_TYPE(float,YD)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_cal_event_MW

#ifndef USER_DEF_cal_event_TOF
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(cal_event_TOF)::FCNCALL_NAME(cal_event_TOF)
{
  FCNCALL_INIT;
  // float L;
  {
  FCNCALL_SUBNAME("L");
  { FCNCALL_CALL_CTRL_WRAP(L,FCNCALL_CALL_TYPE(float,L)); }
  FCNCALL_SUBNAME_END;
  }
  // float R;
  {
  FCNCALL_SUBNAME("R");
  { FCNCALL_CALL_CTRL_WRAP(R,FCNCALL_CALL_TYPE(float,R)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_cal_event_TOF

#ifndef USER_DEF_cal_event_TPC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(cal_event_TPC)::FCNCALL_NAME(cal_event_TPC)
{
  FCNCALL_INIT;
  // float A[4];
  {
  FCNCALL_SUBNAME("A");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(A__i0,,__i0,FCNCALL_CALL_TYPE(float,A[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // float AR[2];
  {
  FCNCALL_SUBNAME("AR");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(AR__i0,,__i0,FCNCALL_CALL_TYPE(float,AR[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // float AL[2];
  {
  FCNCALL_SUBNAME("AL");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(AL__i0,,__i0,FCNCALL_CALL_TYPE(float,AL[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // float DT[4];
  {
  FCNCALL_SUBNAME("DT");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(DT__i0,,__i0,FCNCALL_CALL_TYPE(float,DT[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // float LT[2];
  {
  FCNCALL_SUBNAME("LT");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(LT__i0,,__i0,FCNCALL_CALL_TYPE(float,LT[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // float RT[2];
  {
  FCNCALL_SUBNAME("RT");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(RT__i0,,__i0,FCNCALL_CALL_TYPE(float,RT[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_cal_event_TPC

#ifndef USER_DEF_cal_event_SC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(cal_event_SC)::FCNCALL_NAME(cal_event_SC)
{
  FCNCALL_INIT;
  // float DT;
  {
  FCNCALL_SUBNAME("DT");
  { FCNCALL_CALL_CTRL_WRAP(DT,FCNCALL_CALL_TYPE(float,DT)); }
  FCNCALL_SUBNAME_END;
  }
  // float DEL;
  {
  FCNCALL_SUBNAME("DEL");
  { FCNCALL_CALL_CTRL_WRAP(DEL,FCNCALL_CALL_TYPE(float,DEL)); }
  FCNCALL_SUBNAME_END;
  }
  // float DER;
  {
  FCNCALL_SUBNAME("DER");
  { FCNCALL_CALL_CTRL_WRAP(DER,FCNCALL_CALL_TYPE(float,DER)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_cal_event_SC

#ifndef USER_DEF_cal_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(cal_event)::FCNCALL_NAME(cal_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(cal_event_base,FCNCALL_CLASS_NAME(cal_event_base)::FCNCALL_CALL_BASE());
  // cal_event_MW MW[2];
  {
  FCNCALL_SUBNAME("MW");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(MW__i0,,__i0,MW[__i0].FCNCALL_CALL(MW[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // cal_event_TOF TOF;
  {
  FCNCALL_SUBNAME("TOF");
  { FCNCALL_CALL_CTRL_WRAP(TOF,TOF.FCNCALL_CALL(TOF)); }
  FCNCALL_SUBNAME_END;
  }
  // cal_event_TPC TPC[3];
  {
  FCNCALL_SUBNAME("TPC");
  FCNCALL_FOR(__i0,3)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(TPC__i0,,__i0,TPC[__i0].FCNCALL_CALL(TPC[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // cal_event_SC SC[3];
  {
  FCNCALL_SUBNAME("SC");
  FCNCALL_FOR(__i0,3)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(SC__i0,,__i0,SC[__i0].FCNCALL_CALL(SC[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_cal_event

#include "gen/default_fcncall_undef.hh"


/** END_FUNCTION_CALL_PER_MEMBER **************************************/


/** BEGIN_CORR_STRUCT **************************************************
 *
 * Correlation structure.
 *
 * Do not edit - automatically generated.
 */

// Corr struct for: cal_event_MW
// float  .AN
  // ---
// float  .XR
  // ---
// float  .XL
  // ---
// float  .YU
  // ---
// float  .YD
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event_MW
// .cal_event_MW// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event_MW
// .cal_event_MW// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event_MW
// .cal_event_MW
// Corr struct for: cal_event_TOF
// float  .L
  // ---
// float  .R
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event_TOF
// .cal_event_TOF// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event_TOF
// .cal_event_TOF// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event_TOF
// .cal_event_TOF
// Corr struct for: cal_event_TPC
// float  .A[4]
  // ---
// float  .AR[2]
  // ---
// float  .AL[2]
  // ---
// float  .DT[4]
  // ---
// float  .LT[2]
  // ---
// float  .RT[2]
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event_TPC
// .cal_event_TPC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event_TPC
// .cal_event_TPC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event_TPC
// .cal_event_TPC
// Corr struct for: cal_event_SC
// float  .DT
  // ---
// float  .DEL
  // ---
// float  .DER
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event_SC
// .cal_event_SC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event_SC
// .cal_event_SC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event_SC
// .cal_event_SC
// Corr struct for: cal_event
//  : public cal_event_base
// ---
// cal_event_MW  .MW[2]
  // float  .AN
    // ---
  // float  .XR
    // ---
  // float  .XL
    // ---
  // float  .YU
    // ---
  // float  .YD
    // ---
// cal_event_TOF  .TOF
  // float  .L
    // ---
  // float  .R
    // ---
// cal_event_TPC  .TPC[3]
  // float  .A[4]
    // ---
  // float  .AR[2]
    // ---
  // float  .AL[2]
    // ---
  // float  .DT[4]
    // ---
  // float  .LT[2]
    // ---
  // float  .RT[2]
    // ---
// cal_event_SC  .SC[3]
  // float  .DT
    // ---
  // float  .DEL
    // ---
  // float  .DER
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event
// .cal_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event
// .cal_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: cal_event
// .cal_event

/** END_CORR_STRUCT ***************************************************/

