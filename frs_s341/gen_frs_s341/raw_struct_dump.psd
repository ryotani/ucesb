
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

class raw_event_MW
{
  DATA12_OVERFLOW AN;
  DATA12_OVERFLOW XR;
  DATA12_OVERFLOW XL;
  DATA12_OVERFLOW YU;
  DATA12_OVERFLOW YD;
} ;
class raw_event_TOF
{
  DATA12_OVERFLOW L;
  DATA12_OVERFLOW R;
} ;
class raw_event_TPC
{
  DATA12_OVERFLOW A[4];
  DATA12_OVERFLOW AR[2];
  DATA12_OVERFLOW AL[2];
  DATA12_OVERFLOW DT[4];
  DATA12_OVERFLOW LT[2];
  DATA12_OVERFLOW RT[2];
} ;
class raw_event_SC
{
  DATA12_OVERFLOW DT;
  DATA12_OVERFLOW DEL;
  DATA12_OVERFLOW DER;
} ;
class raw_event : public raw_event_base
{
  raw_event_MW MW[2];
  DATA32 PATTERN;
  DATA32 MULTIP;
  DATA32 SCALER[2][18];
  raw_event_TOF TOF;
  raw_event_TPC TPC[3];
  raw_event_SC SC[3];
} ;
class raw_sticky : public raw_sticky_base
{
  ;
} ;
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/


/** BEGIN_MIRROR_STRUCT ************************************************
 *
 * Mirror (1 to 1) structure.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

#ifndef USER_DEF_raw_event_MW
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_MW)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(AN);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(AN);
  STRUCT_MIRROR_ITEM_CTRL(XR);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(XR);
  STRUCT_MIRROR_ITEM_CTRL(XL);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(XL);
  STRUCT_MIRROR_ITEM_CTRL(YU);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(YU);
  STRUCT_MIRROR_ITEM_CTRL(YD);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(YD);
  STRUCT_MIRROR_FCNS_DECL(raw_event_MW);
};
#endif//USER_DEF_raw_event_MW

#ifndef USER_DEF_raw_event_TOF
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_TOF)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(L);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(L);
  STRUCT_MIRROR_ITEM_CTRL(R);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(R);
  STRUCT_MIRROR_FCNS_DECL(raw_event_TOF);
};
#endif//USER_DEF_raw_event_TOF

#ifndef USER_DEF_raw_event_TPC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_TPC)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(A);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(A__i0,,4);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(A[4]);
  STRUCT_MIRROR_ITEM_CTRL(AR);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(AR__i0,,2);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(AR[2]);
  STRUCT_MIRROR_ITEM_CTRL(AL);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(AL__i0,,2);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(AL[2]);
  STRUCT_MIRROR_ITEM_CTRL(DT);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(DT__i0,,4);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(DT[4]);
  STRUCT_MIRROR_ITEM_CTRL(LT);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(LT__i0,,2);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(LT[2]);
  STRUCT_MIRROR_ITEM_CTRL(RT);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(RT__i0,,2);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(RT[2]);
  STRUCT_MIRROR_FCNS_DECL(raw_event_TPC);
};
#endif//USER_DEF_raw_event_TPC

#ifndef USER_DEF_raw_event_SC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_SC)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(DT);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(DT);
  STRUCT_MIRROR_ITEM_CTRL(DEL);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(DEL);
  STRUCT_MIRROR_ITEM_CTRL(DER);
  STRUCT_MIRROR_TYPE(DATA12_OVERFLOW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(DER);
  STRUCT_MIRROR_FCNS_DECL(raw_event_SC);
};
#endif//USER_DEF_raw_event_SC

#ifndef USER_DEF_raw_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event) : public STRUCT_MIRROR_BASE(raw_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(raw_event_base);
  STRUCT_MIRROR_ITEM_CTRL(MW);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(MW__i0,,2);
  STRUCT_MIRROR_TYPE(raw_event_MW) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(MW[2]);
  STRUCT_MIRROR_ITEM_CTRL(PATTERN);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(PATTERN);
  STRUCT_MIRROR_ITEM_CTRL(MULTIP);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(MULTIP);
  STRUCT_MIRROR_ITEM_CTRL(SCALER);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(SCALER__i0,,2);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(SCALER__i0__i1,[2],18);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(SCALER[2][18]);
  STRUCT_MIRROR_ITEM_CTRL(TOF);
  STRUCT_MIRROR_TYPE(raw_event_TOF) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(TOF);
  STRUCT_MIRROR_ITEM_CTRL(TPC);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(TPC__i0,,3);
  STRUCT_MIRROR_TYPE(raw_event_TPC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(TPC[3]);
  STRUCT_MIRROR_ITEM_CTRL(SC);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(SC__i0,,3);
  STRUCT_MIRROR_TYPE(raw_event_SC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(SC[3]);
  STRUCT_MIRROR_FCNS_DECL(raw_event);
};
#endif//USER_DEF_raw_event

#ifndef USER_DEF_raw_sticky
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_sticky) : public STRUCT_MIRROR_BASE(raw_sticky_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(raw_sticky_base);
  STRUCT_MIRROR_FCNS_DECL(raw_sticky);
};
#endif//USER_DEF_raw_sticky

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_STRUCT *************************************************/


/** BEGIN_MIRROR_DECL_STRUCT *******************************************
 *
 * Mirror structure names.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_MW);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_TOF);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_TPC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_SC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_sticky);

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_DECL_STRUCT ********************************************/


/** BEGIN_FUNCTION_CALL_PER_MEMBER *************************************
 *
 * Recursive function calls per member.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_fcncall_define.hh"

#ifndef USER_DEF_raw_event_MW
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_MW)::FCNCALL_NAME(raw_event_MW)
{
  FCNCALL_INIT;
  // DATA12_OVERFLOW AN;
  {
  FCNCALL_SUBNAME("AN");
  { FCNCALL_CALL_CTRL_WRAP(AN,AN.FCNCALL_CALL(AN)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12_OVERFLOW XR;
  {
  FCNCALL_SUBNAME("XR");
  { FCNCALL_CALL_CTRL_WRAP(XR,XR.FCNCALL_CALL(XR)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12_OVERFLOW XL;
  {
  FCNCALL_SUBNAME("XL");
  { FCNCALL_CALL_CTRL_WRAP(XL,XL.FCNCALL_CALL(XL)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12_OVERFLOW YU;
  {
  FCNCALL_SUBNAME("YU");
  { FCNCALL_CALL_CTRL_WRAP(YU,YU.FCNCALL_CALL(YU)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12_OVERFLOW YD;
  {
  FCNCALL_SUBNAME("YD");
  { FCNCALL_CALL_CTRL_WRAP(YD,YD.FCNCALL_CALL(YD)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_MW

#ifndef USER_DEF_raw_event_TOF
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_TOF)::FCNCALL_NAME(raw_event_TOF)
{
  FCNCALL_INIT;
  // DATA12_OVERFLOW L;
  {
  FCNCALL_SUBNAME("L");
  { FCNCALL_CALL_CTRL_WRAP(L,L.FCNCALL_CALL(L)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12_OVERFLOW R;
  {
  FCNCALL_SUBNAME("R");
  { FCNCALL_CALL_CTRL_WRAP(R,R.FCNCALL_CALL(R)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_TOF

#ifndef USER_DEF_raw_event_TPC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_TPC)::FCNCALL_NAME(raw_event_TPC)
{
  FCNCALL_INIT;
  // DATA12_OVERFLOW A[4];
  {
  FCNCALL_SUBNAME("A");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(A__i0,,__i0,A[__i0].FCNCALL_CALL(A[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // DATA12_OVERFLOW AR[2];
  {
  FCNCALL_SUBNAME("AR");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(AR__i0,,__i0,AR[__i0].FCNCALL_CALL(AR[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // DATA12_OVERFLOW AL[2];
  {
  FCNCALL_SUBNAME("AL");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(AL__i0,,__i0,AL[__i0].FCNCALL_CALL(AL[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // DATA12_OVERFLOW DT[4];
  {
  FCNCALL_SUBNAME("DT");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(DT__i0,,__i0,DT[__i0].FCNCALL_CALL(DT[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // DATA12_OVERFLOW LT[2];
  {
  FCNCALL_SUBNAME("LT");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(LT__i0,,__i0,LT[__i0].FCNCALL_CALL(LT[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // DATA12_OVERFLOW RT[2];
  {
  FCNCALL_SUBNAME("RT");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(RT__i0,,__i0,RT[__i0].FCNCALL_CALL(RT[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_TPC

#ifndef USER_DEF_raw_event_SC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_SC)::FCNCALL_NAME(raw_event_SC)
{
  FCNCALL_INIT;
  // DATA12_OVERFLOW DT;
  {
  FCNCALL_SUBNAME("DT");
  { FCNCALL_CALL_CTRL_WRAP(DT,DT.FCNCALL_CALL(DT)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12_OVERFLOW DEL;
  {
  FCNCALL_SUBNAME("DEL");
  { FCNCALL_CALL_CTRL_WRAP(DEL,DEL.FCNCALL_CALL(DEL)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12_OVERFLOW DER;
  {
  FCNCALL_SUBNAME("DER");
  { FCNCALL_CALL_CTRL_WRAP(DER,DER.FCNCALL_CALL(DER)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_SC

#ifndef USER_DEF_raw_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event)::FCNCALL_NAME(raw_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(raw_event_base,FCNCALL_CLASS_NAME(raw_event_base)::FCNCALL_CALL_BASE());
  // raw_event_MW MW[2];
  {
  FCNCALL_SUBNAME("MW");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(MW__i0,,__i0,MW[__i0].FCNCALL_CALL(MW[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 PATTERN;
  {
  FCNCALL_SUBNAME("PATTERN");
  { FCNCALL_CALL_CTRL_WRAP(PATTERN,PATTERN.FCNCALL_CALL(PATTERN)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 MULTIP;
  {
  FCNCALL_SUBNAME("MULTIP");
  { FCNCALL_CALL_CTRL_WRAP(MULTIP,MULTIP.FCNCALL_CALL(MULTIP)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 SCALER[2][18];
  {
  FCNCALL_SUBNAME("SCALER");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    FCNCALL_FOR(__i1,18)
    {
      FCNCALL_SUBINDEX(__i1);
      { FCNCALL_CALL_CTRL_WRAP_ARRAY(SCALER__i0__i1,[__i0],__i1,SCALER[__i0][__i1].FCNCALL_CALL(SCALER[__i0][__i1])); }
      FCNCALL_SUBINDEX_END(__i1);
    }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_TOF TOF;
  {
  FCNCALL_SUBNAME("TOF");
  { FCNCALL_CALL_CTRL_WRAP(TOF,TOF.FCNCALL_CALL(TOF)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_TPC TPC[3];
  {
  FCNCALL_SUBNAME("TPC");
  FCNCALL_FOR(__i0,3)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(TPC__i0,,__i0,TPC[__i0].FCNCALL_CALL(TPC[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_SC SC[3];
  {
  FCNCALL_SUBNAME("SC");
  FCNCALL_FOR(__i0,3)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(SC__i0,,__i0,SC[__i0].FCNCALL_CALL(SC[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event

#ifndef USER_DEF_raw_sticky
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_sticky)::FCNCALL_NAME(raw_sticky)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(raw_sticky_base,FCNCALL_CLASS_NAME(raw_sticky_base)::FCNCALL_CALL_BASE());
  FCNCALL_RET;
}
#endif//USER_DEF_raw_sticky

#include "gen/default_fcncall_undef.hh"


/** END_FUNCTION_CALL_PER_MEMBER **************************************/


/** BEGIN_CORR_STRUCT **************************************************
 *
 * Correlation structure.
 *
 * Do not edit - automatically generated.
 */

// Corr struct for: raw_event_MW
// DATA12_OVERFLOW  .AN
// DATA12_OVERFLOW  .XR
// DATA12_OVERFLOW  .XL
// DATA12_OVERFLOW  .YU
// DATA12_OVERFLOW  .YD
// DATA12_OVERFLOW .AN
// DATA12_OVERFLOW .XR
// DATA12_OVERFLOW .XL
// DATA12_OVERFLOW .YU
// DATA12_OVERFLOW .YD
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: raw_event_MW
  // DATA12_OVERFLOW .AN
  // DATA12_OVERFLOW .XR
  // DATA12_OVERFLOW .XL
  // DATA12_OVERFLOW .YU
  // DATA12_OVERFLOW .YD
// .raw_event_MW/5/.AN
                // .XR
                // .XL
                // .YU
                // .YD// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_MW
// .raw_event_MW// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_MW
// .raw_event_MW
// Corr struct for: raw_event_TOF
// DATA12_OVERFLOW  .L
// DATA12_OVERFLOW  .R
// DATA12_OVERFLOW .L
// DATA12_OVERFLOW .R
// 
// size= 1  chunks=  2  mem=   2  line=4  total=8
// size= 2  chunks=  1  mem=   2  line=3  total=6
// 
// corr structure: raw_event_TOF
  // DATA12_OVERFLOW .L
  // DATA12_OVERFLOW .R
// .raw_event_TOF/2/.L
                 // .R// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TOF
// .raw_event_TOF// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TOF
// .raw_event_TOF
// Corr struct for: raw_event_TPC
// DATA12_OVERFLOW  .A[4]
// DATA12_OVERFLOW  .AR[2]
// DATA12_OVERFLOW  .AL[2]
// DATA12_OVERFLOW  .DT[4]
// DATA12_OVERFLOW  .LT[2]
// DATA12_OVERFLOW  .RT[2]
// DATA12_OVERFLOW .A[4]
// DATA12_OVERFLOW .AR[2]
// DATA12_OVERFLOW .AL[2]
// DATA12_OVERFLOW .DT[4]
// DATA12_OVERFLOW .LT[2]
// DATA12_OVERFLOW .RT[2]
// 
// size= 1  chunks= 16  mem=  16  line=32  total=512
// size= 2  chunks= 12  mem=  24  line=36  total=576
// size= 4  chunks=  6  mem=  24  line=30  total=480
// size=16  chunks=  1  mem=  16  line=17  total=272
// 
// corr structure: raw_event_TPC
  // DATA12_OVERFLOW .A[4]
  // DATA12_OVERFLOW .AR[2]
  // DATA12_OVERFLOW .AL[2]
  // DATA12_OVERFLOW .DT[4]
  // DATA12_OVERFLOW .LT[2]
  // DATA12_OVERFLOW .RT[2]
// .raw_event_TPC/16/.A/4/[4]
                  // .AR/2/[2]
                  // .AL/2/[2]
                  // .DT/4/[4]
                  // .LT/2/[2]
                  // .RT/2/[2]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TPC
// .raw_event_TPC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TPC
// .raw_event_TPC
// Corr struct for: raw_event_SC
// DATA12_OVERFLOW  .DT
// DATA12_OVERFLOW  .DEL
// DATA12_OVERFLOW  .DER
// DATA12_OVERFLOW .DT
// DATA12_OVERFLOW .DEL
// DATA12_OVERFLOW .DER
// 
// size= 1  chunks=  3  mem=   3  line=6  total=18
// size= 3  chunks=  1  mem=   3  line=4  total=12
// 
// corr structure: raw_event_SC
  // DATA12_OVERFLOW .DT
  // DATA12_OVERFLOW .DEL
  // DATA12_OVERFLOW .DER
// .raw_event_SC/3/.DT
                // .DEL
                // .DER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_SC
// .raw_event_SC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_SC
// .raw_event_SC
// Corr struct for: raw_event
//  : public raw_event_base
// ---
// raw_event_MW  .MW[2]
  // DATA12_OVERFLOW  .AN
  // DATA12_OVERFLOW  .XR
  // DATA12_OVERFLOW  .XL
  // DATA12_OVERFLOW  .YU
  // DATA12_OVERFLOW  .YD
// DATA32  .PATTERN
  // ---
// DATA32  .MULTIP
  // ---
// DATA32  .SCALER[2][18]
  // ---
// raw_event_TOF  .TOF
  // DATA12_OVERFLOW  .L
  // DATA12_OVERFLOW  .R
// raw_event_TPC  .TPC[3]
  // DATA12_OVERFLOW  .A[4]
  // DATA12_OVERFLOW  .AR[2]
  // DATA12_OVERFLOW  .AL[2]
  // DATA12_OVERFLOW  .DT[4]
  // DATA12_OVERFLOW  .LT[2]
  // DATA12_OVERFLOW  .RT[2]
// raw_event_SC  .SC[3]
  // DATA12_OVERFLOW  .DT
  // DATA12_OVERFLOW  .DEL
  // DATA12_OVERFLOW  .DER
// DATA12_OVERFLOW .MW[2].AN
// DATA12_OVERFLOW .MW[2].XR
// DATA12_OVERFLOW .MW[2].XL
// DATA12_OVERFLOW .MW[2].YU
// DATA12_OVERFLOW .MW[2].YD
// DATA12_OVERFLOW .TOF.L
// DATA12_OVERFLOW .TOF.R
// DATA12_OVERFLOW .TPC[3].A[4]
// DATA12_OVERFLOW .TPC[3].AR[2]
// DATA12_OVERFLOW .TPC[3].AL[2]
// DATA12_OVERFLOW .TPC[3].DT[4]
// DATA12_OVERFLOW .TPC[3].LT[2]
// DATA12_OVERFLOW .TPC[3].RT[2]
// DATA12_OVERFLOW .SC[3].DT
// DATA12_OVERFLOW .SC[3].DEL
// DATA12_OVERFLOW .SC[3].DER
// 
// size= 1  chunks= 69  mem=  69  line=138  total=9522
// size= 2  chunks= 56  mem= 112  line=168  total=11592
// size= 3  chunks= 50  mem= 150  line=200  total=13800
// size= 4  chunks= 32  mem= 128  line=160  total=11040
// size= 5  chunks= 24  mem= 120  line=144  total=9936
// size= 9  chunks= 22  mem= 198  line=220  total=15180
// size=10  chunks= 21  mem= 210  line=231  total=15939
// size=16  chunks=  6  mem=  96  line=102  total=7038
// size=48  chunks=  4  mem= 192  line=196  total=13524
// size=69  chunks=  1  mem=  69  line=70  total=4830
// 
// corr structure: raw_event
  // DATA12_OVERFLOW .MW[2].AN
  // DATA12_OVERFLOW .MW[2].XR
  // DATA12_OVERFLOW .MW[2].XL
  // DATA12_OVERFLOW .MW[2].YU
  // DATA12_OVERFLOW .MW[2].YD
  // DATA12_OVERFLOW .TOF.L
  // DATA12_OVERFLOW .TOF.R
  // DATA12_OVERFLOW .TPC[3].A[4]
  // DATA12_OVERFLOW .TPC[3].AR[2]
  // DATA12_OVERFLOW .TPC[3].AL[2]
  // DATA12_OVERFLOW .TPC[3].DT[4]
  // DATA12_OVERFLOW .TPC[3].LT[2]
  // DATA12_OVERFLOW .TPC[3].RT[2]
  // DATA12_OVERFLOW .SC[3].DT
  // DATA12_OVERFLOW .SC[3].DEL
  // DATA12_OVERFLOW .SC[3].DER
// .raw_event/69/.MW/10/[2]/5/.AN
                           // .XR
                           // .XL
                           // .YU
                           // .YD
              // .TOF/2/.L
                     // .R
              // .TPC/48/[3]/16/.A/4/[4]
                             // .AR/2/[2]
                             // .AL/2/[2]
                             // .DT/4/[4]
                             // .LT/2/[2]
                             // .RT/2/[2]
              // .SC/9/[3]/3/.DT
                          // .DEL
                          // .DER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event
// .raw_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event
// .raw_event
// Corr struct for: raw_sticky
//  : public raw_sticky_base
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky

/** END_CORR_STRUCT ***************************************************/

