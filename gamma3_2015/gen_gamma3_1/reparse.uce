/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

CAEN_V775(geom,crate)
{
  MEMBER(DATA12_OVERFLOW data[32] ZERO_SUPPRESS);
  UINT32 header NOENCODE
  {
     0_07: undefined;
     8_13: count;
    16_23: crate = MATCH(crate);
    24_26: 2;
    27_31: geom = MATCH(geom);
  }
  list(0<=index<header.count)
  {
    UINT32 ch_data NOENCODE
    {
       0_11: value;
         12: overflow;
         13: underflow;
         14: valid;
      16_20: channel;
      24_26: 0;
      27_31: geom = CHECK(geom);
      ENCODE(data[channel],(value=value,overflow=overflow));
    }
  }
  UINT32 eob
  {
     0_23: event_number;
    24_26: 4;
    27_31: geom = CHECK(geom);
  }
}

CAEN_V830_SCALER(id)
{
  MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  UINT32 sc_header
  {
     0_06: count = RANGE(0,31);
    24_31: id = MATCH(id);
  }
  UINT32 header
  {
     0_15: event_number;
    16_17: ts;
    18_23: count;
    24_25: undefined;
       26: 1;
    27_31: geom;
  }
  list(0<=index<header.count)
  {
    UINT32 sc NOENCODE
    {
       0_25: value;
         26: 0;
      27_31: channel;
      ENCODE(data[channel],(value=value));
    }
  }
}

CAMAC_LECROY_4434(channels)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS);
  list(0<=index<channels)
  {
    UINT32 ch_data NOENCODE
    {
       0_23: value;
      24_31: 0;
      ENCODE(data[index],(value=value));
    }
  }
}

CAMAC_PHILLIPS_7164(channels,mark_channel_no)
{
  MEMBER(DATA12 data[16] ZERO_SUPPRESS);
  list(0<=index<channels)
  {
    if(mark_channel_no)
    {
      UINT16 ch_data NOENCODE
      {
         0_11: value;
        12_15: channel = CHECK(index);
        ENCODE(data[index],(value=value));
      }
    }
    else
    {
      UINT16 ch_data NOENCODE
      {
         0_11: value;
        ENCODE(data[index],(value=value));
      }
    }
  }
}

CAMAC_SILENA_4418(channels,mark_channel_no)
{
  MEMBER(DATA12_OVERFLOW data[8] ZERO_SUPPRESS);
  list(0<=index<channels)
  {
    if(mark_channel_no)
    {
      UINT16 ch_data NOENCODE
      {
         0_11: value;
        12_14: channel = CHECK(index);
           15: overflow;
        ENCODE(data[index],(value=value,overflow=overflow));
      }
    }
    else
    {
      UINT16 ch_data NOENCODE
      {
         0_11: value;
           15: overflow;
        ENCODE(data[index],(value=value,overflow=overflow));
      }
    }
  }
}

FASTBUS_LECROY_1875(geom,channels)
{
  MEMBER(DATA12_RANGE data[64] ZERO_SUPPRESS);
  UINT32 ch_data NOENCODE
  {
     0_11: value;
    16_21: channel = RANGE(0,(channels - 1));
       23: range;
    24_26: n = CHECK(0);
    27_31: geom = MATCH(geom);
    ENCODE(data[channel],(value=value,range=range));
  }
}

FASTBUS_LECROY_1885(geom,channels)
{
  MEMBER(DATA12_RANGE data[96] ZERO_SUPPRESS);
  UINT32 ch_data NOENCODE
  {
     0_11: value;
    16_22: channel = RANGE(0,(channels - 1));
       23: range;
    24_26: n = CHECK(0);
    27_31: geom = MATCH(geom);
    ENCODE(data[channel],(value=value,range=range));
  }
}

LAND_STD_VME()
{
  MEMBER(DATA32 timestamp);
  UINT32 failure
  {
        0: fail_general;
        1: fail_data_corrupt;
        2: fail_data_missing;
        3: fail_data_too_much;
        4: fail_event_counter_mismatch;
        5: fail_readout_error_driver;
        6: fail_unexpected_trigger;
       26: has_scaler_data;
       27: has_no_zero_suppression;
       28: has_multi_adctdc_counter0;
       29: has_multi_scaler_counter0;
       30: has_multi_event;
       31: has_time_stamp;
  }
  if(failure.has_time_stamp)
  {
    UINT32 time_stamp
    {
       0_31: value;
      ENCODE(timestamp,(value=value));
    }
  }
  if(failure.has_multi_event)
  {
    UINT32 multi_events;
  }
  if(failure.has_multi_scaler_counter0)
  {
    UINT32 multi_scaler_counter0;
  }
  if(failure.has_multi_adctdc_counter0)
  {
    UINT32 multi_adctdc_counter0;
  }
}

SERIAL_TS()
{
  UINT32 header NOENCODE
  {
     0_31: multi_events;
  }
  list(0<=i<header.multi_events)
  {
    multi event = SERIAL_TS_EVENT();
  }
}

SERIAL_TS_EVENT()
{
  MEMBER(DATA32 ts_hi);
  MEMBER(DATA32 ts_lo);
  UINT32 ts_lsb NOENCODE
  {
     0_31: t_lsb;
    ENCODE(ts_lo,(value=t_lsb));
  }
  UINT32 ts_msb NOENCODE
  {
     0_30: t_msb;
       31: missed_event;
    ENCODE(ts_hi,(value=t_msb));
  }
}

TIMESTAMP_WHITERABBIT(id)
{
  MEMBER(DATA12 subsystem_id);
  MEMBER(DATA16 t1);
  MEMBER(DATA16 t2);
  MEMBER(DATA16 t3);
  MEMBER(DATA16 t4);
  UINT32 header NOENCODE
  {
     0_11: id = MATCH(id);
    12_15: 0;
       16: error_bit;
    17_31: 0;
    ENCODE(subsystem_id,(value=id));
  }
  UINT32 d1 NOENCODE
  {
     0_15: t1;
    16_31: 0x3e1;
    ENCODE(t1,(value=t1));
  }
  UINT32 d2 NOENCODE
  {
     0_15: t2;
    16_31: 0x4e1;
    ENCODE(t2,(value=t2));
  }
  UINT32 d3 NOENCODE
  {
     0_15: t3;
    16_31: 0x5e1;
    ENCODE(t3,(value=t3));
  }
  UINT32 d4 NOENCODE
  {
     0_15: t4;
    16_31: 0x6e1;
    ENCODE(t4,(value=t4));
  }
}

TRIGBUF(multi_events)
{
  UINT32 header
  {
     0_11: entries;
    12_31: multi_events;
  }
  list(0<=i<multi_events)
  {
    multi entry = TRIGBUF_ENTRY();
  }
}

TRIGBUF_ENTRY()
{
  MEMBER(DATA32 ts_hi);
  MEMBER(DATA32 ts_lo);
  MEMBER(DATA32 tpat);
  MEMBER(DATA8 trig);
  UINT32 ts_lsb NOENCODE
  {
     0_31: t_lsb;
    ENCODE(ts_lo,(value=t_lsb));
  }
  UINT32 ts_msb NOENCODE
  {
     0_30: t_msb;
       31: missed_event;
    ENCODE(ts_hi,(value=t_msb));
  }
  UINT32 info NOENCODE
  {
     0_23: tpat;
    24_27: trig;
    28_31: cnt;
    ENCODE(tpat,(value=tpat));
    ENCODE(trig,(value=trig));
  }
}

TRLO(id,multi_events)
{
  wr_ts = TIMESTAMP_WHITERABBIT(id=id);
  serial_ts = SERIAL_TS();
  trigbuf = TRIGBUF(multi_events=multi_events);
}

TRLO_EVENT_TRIGGER()
{
  UINT32 time_lo
  {
     0_31: val;
  }
  UINT32 time_hi
  {
     0_30: val;
       31: missed_event;
  }
  UINT32 status
  {
     0_23: tpat;
    24_27: trig;
    28_31: count;
  }
}

TRLO_SAMPLER(id)
{
  MEMBER(DATA32 stamps[512] NO_INDEX_LIST);
  UINT32 header
  {
     0_09: count;
       10: missing_at_end;
    24_31: id = MATCH(id);
  }
  list(0<=index<header.count)
  {
    UINT32 data NOENCODE
    {
       0_31: stamp;
      ENCODE(stamps APPEND_LIST,(value=stamp));
    }
  }
}

TRLO_TRIG_SCALER(id)
{
  MEMBER(DATA32 before_lmu[16] ZERO_SUPPRESS);
  MEMBER(DATA32 before_lmu_mux[1] ZERO_SUPPRESS);
  MEMBER(DATA32 before_lmu_aux[4] ZERO_SUPPRESS);
  MEMBER(DATA32 before_deadtime[16] ZERO_SUPPRESS);
  MEMBER(DATA32 after_deadtime[16] ZERO_SUPPRESS);
  MEMBER(DATA32 after_reduction[16] ZERO_SUPPRESS);
  UINT32 header
  {
     0_05: before_lmu = RANGE(0,16);
     6_10: before_lmu_mux = RANGE(0,1);
    11_15: before_lmu_aux = RANGE(0,4);
    16_21: after_lmu = RANGE(0,16);
    24_31: id = MATCH(id);
  }
  list(0<=index<header.before_lmu)
  {
    UINT32 b_lmu NOENCODE
    {
       0_31: value;
      ENCODE(before_lmu[index],(value=value));
    }
  }
  list(0<=index<header.before_lmu_mux)
  {
    UINT32 b_lmu_mux NOENCODE
    {
       0_31: value;
      ENCODE(before_lmu_mux[index],(value=value));
    }
  }
  list(0<=index<header.before_lmu_aux)
  {
    UINT32 b_lmu_aux NOENCODE
    {
       0_31: value;
      ENCODE(before_lmu_aux[index],(value=value));
    }
  }
  list(0<=index<header.after_lmu)
  {
    UINT32 b_deadtime NOENCODE
    {
       0_31: value;
      ENCODE(before_deadtime[index],(value=value));
    }
  }
  list(0<=index<header.after_lmu)
  {
    UINT32 a_deadtime NOENCODE
    {
       0_31: value;
      ENCODE(after_deadtime[index],(value=value));
    }
  }
  list(0<=index<header.after_lmu)
  {
    UINT32 a_reduction NOENCODE
    {
       0_31: value;
      ENCODE(after_reduction[index],(value=value));
    }
  }
  list(0<=index<16)
  {
    UINT32 val;
  }
}

VME_CAEN_V1190(geom)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(v1190_start);
  UINT32 header
  {
     0_04: geom = MATCH(geom);
     5_26: event_number;
    27_31: 8;
  }
  select several
  {
    tdc[0] = VME_CAEN_V1190_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[1] = VME_CAEN_V1190_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[2] = VME_CAEN_V1190_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[3] = VME_CAEN_V1190_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   data=data);
  }
  UINT32 trigger
  {
     0_26: time_tag;
    27_31: 17;
  }
  MARK_COUNT(v1190_end);
  UINT32 trailer
  {
     0_04: geom = CHECK(geom);
     5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
       24: tdc_error;
       25: buffer_overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V1190_SHORT(geom)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(v1190_start);
  UINT32 header
  {
     0_04: geom = MATCH(geom);
     5_26: event_number;
    27_31: 8;
  }
  select several
  {
    tdc[0] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[1] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[2] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[3] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         data=data);
    norevisit err[0] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=0);
    norevisit err[1] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=1);
    norevisit err[2] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=2);
    norevisit err[3] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=3);
  }
  UINT32 trigger
  {
     0_26: time_tag;
    27_31: 17;
  }
  MARK_COUNT(v1190_end);
  UINT32 trailer
  {
     0_04: geom = CHECK(geom);
     5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
       24: tdc_error;
       25: buffer_overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V1190_SHORT_SUBTDC(tdc,event_id,data)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  UINT32 ch_data NOENCODE
  {
     0_18: value;
    19_23: channel_low;
    24_25: tdc = CHECK(tdc);
       26: trailing;
    27_31: 0;
    ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  }
}

VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc)
{
  UINT32 error_flags
  {
     0_14: flags;
    24_25: tdc = CHECK(tdc);
    27_31: 4;
  }
}

VME_CAEN_V1190_SUBTDC(tdc,event_id,data)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(tdc_start);
  UINT32 header
  {
     0_11: bunch_id;
    12_23: event_id = CHECK(event_id);
    24_25: tdc = MATCH(tdc);
    27_31: 1;
  }
  several UINT32 ch_data NOENCODE
  {
     0_18: value;
    19_23: channel_low;
    24_25: tdc = CHECK(tdc);
       26: trailing;
    27_31: 0;
    ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  }
  optional UINT32 error_flags
  {
     0_14: flags;
    24_25: tdc = CHECK(tdc);
    27_31: 4;
  }
  MARK_COUNT(tdc_end);
  UINT32 trailer
  {
     0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    12_23: event_id = CHECK(header.event_id);
    24_25: tdc = CHECK(tdc);
    27_31: 3;
  }
}

VME_CAEN_V1290(geom)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(v1190_start);
  UINT32 header
  {
     0_04: geom = MATCH(geom);
     5_26: event_number;
    27_31: 8;
  }
  select several
  {
    tdc[0] = VME_CAEN_V1290_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[1] = VME_CAEN_V1290_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[2] = VME_CAEN_V1290_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[3] = VME_CAEN_V1290_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   data=data);
  }
  UINT32 trigger
  {
     0_26: time_tag;
    27_31: 17;
  }
  MARK_COUNT(v1190_end);
  UINT32 trailer
  {
     0_04: geom = CHECK(geom);
     5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
       24: tdc_error;
       25: buffer_overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V1290_SHORT(geom)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(v1190_start);
  UINT32 header
  {
     0_04: geom = MATCH(geom);
     5_26: event_number;
    27_31: 8;
  }
  select several
  {
    tdc[0] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[1] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[2] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[3] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         data=data);
    norevisit err[0] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=0);
    norevisit err[1] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=1);
    norevisit err[2] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=2);
    norevisit err[3] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=3);
  }
  UINT32 trigger
  {
     0_26: time_tag;
    27_31: 17;
  }
  MARK_COUNT(v1190_end);
  UINT32 trailer
  {
     0_04: geom = CHECK(geom);
     5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
       24: tdc_error;
       25: buffer_overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V1290_SHORT_SUBTDC(tdc,event_id,data)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  UINT32 ch_data NOENCODE
  {
     0_20: value;
    21_23: channel_low;
    24_25: tdc = CHECK(tdc);
       26: trailing;
    27_31: 0;
    ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  }
}

VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc)
{
  UINT32 error_flags
  {
     0_14: flags;
    24_25: tdc = CHECK(tdc);
    27_31: 4;
  }
}

VME_CAEN_V1290_SUBTDC(tdc,event_id,data)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(tdc_start);
  UINT32 header
  {
     0_11: bunch_id;
    12_23: event_id = CHECK(event_id);
    24_25: tdc = MATCH(tdc);
    27_31: 1;
  }
  several UINT32 ch_data NOENCODE
  {
     0_20: value;
    21_23: channel_low;
    24_25: tdc = CHECK(tdc);
       26: trailing;
    27_31: 0;
    ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  }
  optional UINT32 error_flags
  {
     0_14: flags;
    24_25: tdc = CHECK(tdc);
    27_31: 4;
  }
  MARK_COUNT(tdc_end);
  UINT32 trailer
  {
     0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    12_23: event_id = CHECK(header.event_id);
    24_25: tdc = CHECK(tdc);
    27_31: 3;
  }
}

VME_CAEN_V775(geom,crate)
{
  MEMBER(DATA12_OVERFLOW data[32] ZERO_SUPPRESS);
  UINT32 header NOENCODE
  {
     8_13: count;
    16_23: crate = MATCH(crate);
    24_26: 2;
    27_31: geom = MATCH(geom);
  }
  list(0<=index<header.count)
  {
    UINT32 ch_data NOENCODE
    {
       0_11: value;
         12: overflow;
         13: underflow;
         14: valid;
      16_20: channel;
      24_26: 0;
      27_31: geom = CHECK(geom);
      ENCODE(data[channel],(value=value,overflow=overflow));
    }
  }
  UINT32 eob
  {
     0_23: event_number;
    24_26: 4;
    27_31: geom = CHECK(geom);
  }
}

VME_CAEN_V830(geom)
{
  MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  UINT32 header
  {
     0_15: event_number;
    16_17: ts;
    18_23: count;
       26: 1;
    27_31: geom = MATCH(geom);
  }
  list(0<=index<header.count)
  {
    UINT32 ch_data NOENCODE
    {
       0_25: value;
         26: 0;
      27_31: channel;
      ENCODE(data[channel],(value=value));
    }
  }
}

VME_MESYTEC_MADC32(geom)
{
  MEMBER(DATA14_OVERFLOW data[32] ZERO_SUPPRESS);
  MARK_COUNT(start);
  UINT32 header NOENCODE
  {
     0_11: word_number;
    12_14: adc_resol;
       15: out_form;
    16_23: geom = MATCH(geom);
    24_29: 0;
    30_31: 1;
  }
  several UINT32 ch_data NOENCODE
  {
     0_12: value;
       14: outofrange;
    16_20: channel;
    21_29: 32;
    30_31: 0;
    ENCODE(data[channel],(value=value,overflow=outofrange));
  }
  optional UINT32 filler NOENCODE
  {
     0_31: 0;
  }
  UINT32 end_of_event
  {
     0_29: counter;
    30_31: 3;
  }
  MARK_COUNT(end);
  CHECK_COUNT(header.word_number,start,end,( - 4),4)
}

VME_MESYTEC_MDPP16(geom)
{
  MEMBER(DATA16_OVERFLOW data[34] ZERO_SUPPRESS_MULTI(100));
  MARK_COUNT(start);
  UINT32 header NOENCODE
  {
     0_09: word_number;
    10_12: adc_res;
    13_15: tdc_res;
    16_23: geom = MATCH(geom);
    24_29: 0;
    30_31: 1;
  }
  several UINT32 ch_data NOENCODE
  {
     0_15: value;
    16_21: channel;
       22: overflow;
       23: pileup;
    24_27: 0;
    28_31: 1;
    ENCODE(data[channel],(value=value,overflow=overflow,pileup=pileup));
  }
  several UINT32 fill_word NOENCODE
  {
     0_31: 0;
  }
  UINT32 end_of_event
  {
     0_29: counter;
    30_31: 3;
  }
  MARK_COUNT(end);
  CHECK_COUNT(header.word_number,start,end,( - 4),4)
}

VME_MESY_MADC32(geom)
{
  MEMBER(DATA16 data[32] ZERO_SUPPRESS);
  UINT32 header NOENCODE
  {
     0_11: word_number;
    12_14: adc_resol;
       15: out_form;
    16_23: geom = MATCH(geom);
    24_29: 0;
    30_31: 1;
  }
  list(0<=index<(header.word_number - 1))
  {
    UINT32 ch_data NOENCODE
    {
       0_12: value;
         14: outofrange;
      16_20: channel;
      21_29: 32;
      30_31: 0;
      ENCODE(data[channel],(value=value));
    }
  }
  UINT32 end_of_event NOENCODE
  {
     0_29: counter;
    30_31: 3;
  }
}

VME_MESY_MADC32_PADDING()
{
  UINT32 padding NOENCODE
  {
     0_31: value = MATCH(0x32323232);
  }
}

VME_STRUCK_SIS3316(id)
{
  MEMBER(DATA8 n_ch);
  UINT32 header NOENCODE
  {
     0_07: id = MATCH(id);
     8_15: nofCH;
    16_31: module = MATCH(0x3316);
    ENCODE(n_ch,(value=nofCH));
  }
  select several
  {
    channel[0] = VME_STRUCK_SIS3316_CHANNEL(ch=0,id=id);
    channel[1] = VME_STRUCK_SIS3316_CHANNEL(ch=1,id=id);
    channel[2] = VME_STRUCK_SIS3316_CHANNEL(ch=2,id=id);
    channel[3] = VME_STRUCK_SIS3316_CHANNEL(ch=3,id=id);
    channel[4] = VME_STRUCK_SIS3316_CHANNEL(ch=4,id=id);
    channel[5] = VME_STRUCK_SIS3316_CHANNEL(ch=5,id=id);
    channel[6] = VME_STRUCK_SIS3316_CHANNEL(ch=6,id=id);
    channel[7] = VME_STRUCK_SIS3316_CHANNEL(ch=7,id=id);
    channel[8] = VME_STRUCK_SIS3316_CHANNEL(ch=8,id=id);
    channel[9] = VME_STRUCK_SIS3316_CHANNEL(ch=9,id=id);
    channel[10] = VME_STRUCK_SIS3316_CHANNEL(ch=10,id=id);
    channel[11] = VME_STRUCK_SIS3316_CHANNEL(ch=11,id=id);
    channel[12] = VME_STRUCK_SIS3316_CHANNEL(ch=12,id=id);
    channel[13] = VME_STRUCK_SIS3316_CHANNEL(ch=13,id=id);
    channel[14] = VME_STRUCK_SIS3316_CHANNEL(ch=14,id=id);
    channel[15] = VME_STRUCK_SIS3316_CHANNEL(ch=15,id=id);
  }
}

VME_STRUCK_SIS3316_CHANNEL(id,ch)
{
  UINT32 channel_header NOENCODE
  {
     0_07: id = MATCH(id);
     8_11: ch = MATCH(ch);
    12_15: padding_words;
    16_31: module = MATCH(0x3316);
  }
  list(0<=n<channel_header.padding_words)
  {
    UINT32 padding NOENCODE
    {
       0_07: id = MATCH(id);
       8_15: ch = MATCH(ch);
      16_31: module = MATCH(0x3316);
    }
  }
  select several
  {
    multi data = VME_STRUCK_SIS3316_CHANNEL_DATA(id=id,ch=ch);
  }
}

VME_STRUCK_SIS3316_CHANNEL_DATA(id,ch)
{
  MEMBER(DATA32 ts[2] ZERO_SUPPRESS);
  MEMBER(DATA32 gate[8] ZERO_SUPPRESS);
  MEMBER(DATA32 maw[3] ZERO_SUPPRESS);
  MEMBER(DATA32 maxe[2] ZERO_SUPPRESS);
  UINT32 header0
  {
        0: has_acc6;
        1: has_acc2;
        2: has_maw;
        3: has_e;
     4_07: chanNo = MATCH(ch);
     8_15: id = MATCH(id);
    16_31: timeS;
    ENCODE(ts[0],(value=timeS));
  }
  UINT32 header2
  {
     0_31: timeS;
    ENCODE(ts[1],(value=timeS));
  }
  if(header0.has_acc6)
  {
    UINT32 peak NOENCODE
    {
       0_15: peakValue;
      16_31: peakIndex;
    }
    UINT32 gate_group_1
    {
       0_23: sum;
      24_27: reserved;
         28: has_pileup;
         29: has_repileup;
         30: has_underflow;
         31: has_overflow;
      ENCODE(gate[0],(value=sum));
    }
    list(1<=i<6)
    {
      UINT32 gate_group_2_6
      {
         0_27: sum;
        28_31: 0;
        ENCODE(gate[i],(value=sum));
      }
    }
  }
  if(header0.has_acc2)
  {
    list(6<=i<8)
    {
      UINT32 gate_group_7_8
      {
         0_27: sum;
        28_31: 0;
        ENCODE(gate[i],(value=sum));
      }
    }
  }
  if(header0.has_maw)
  {
    UINT32 maw1
    {
       0_31: max;
      ENCODE(maw[0],(value=max));
    }
    UINT32 maw2
    {
       0_31: after;
      ENCODE(maw[1],(value=after));
    }
    UINT32 maw3
    {
       0_31: before;
      ENCODE(maw[2],(value=before));
    }
  }
  if(header0.has_e)
  {
    UINT32 maxe1
    {
       0_31: start;
      ENCODE(maxe[0],(value=(start + 0x08000000)));
    }
    UINT32 maxe2
    {
       0_31: max;
      ENCODE(maxe[1],(value=(max + 0x08000000)));
    }
  }
  UINT32 header3
  {
     0_25: sampleLength;
       26: pileup;
       27: mawFlag;
    28_31: 14;
  }
}

WR_MULTI()
{
  MEMBER(DATA32 time_hi);
  MEMBER(DATA32 time_lo);
  UINT32 hi NOENCODE
  {
     0_31: time;
    ENCODE(time_hi,(value=time));
  }
  UINT32 lo NOENCODE
  {
     0_31: time;
    ENCODE(time_lo,(value=time));
  }
}

SUBEVENT(SCALERS)
{
  select several
  {
    trlo = TRLO_TRIG_SCALER(id=18);
    caen_scaler = VME_CAEN_V830(geom=31);
  }
}

SUBEVENT(TS)
{
  trlo = TRLO(id=2,multi_events=29);
}

SUBEVENT(VME)
{
  header = LAND_STD_VME();
  select several
  {
    sis3316[0] = VME_STRUCK_SIS3316(id=3);
    sis3316[1] = VME_STRUCK_SIS3316(id=4);
    sis3316[2] = VME_STRUCK_SIS3316(id=5);
    multi tdc = CAEN_V775(geom=31,crate=0);
    mesy_padding = VME_MESY_MADC32_PADDING();
    multi adc = VME_MESY_MADC32(geom=6);
  }
}

/**********************************************************
 * The event definition:
 */

EVENT
{
  ts = TS(type=10,subtype=1,control=5,subcrate=1);
  vme = VME(type=88,subtype=0x2260,control=5,subcrate=1);
  scalers = SCALERS(type=12,subtype=0xd80,control=5,subcrate=1);
  ignore_unknown_subevent;
}

/**********************************************************
 * The sticky_event definition:
 */

/**********************************************************
 * Signal name mappings:
 */

SIGNAL(ADC1CH13MAXE1,vme.sis3316[0].channel[12].data.maxe[0],DATA32);
SIGNAL(ADC1CH13MAXE2,vme.sis3316[0].channel[12].data.maxe[1],DATA32);
SIGNAL(ADC1CH13T1,vme.sis3316[0].channel[12].data.maw[0],DATA32);
SIGNAL(ADC1CH13T2,vme.sis3316[0].channel[12].data.maw[1],DATA32);
SIGNAL(ADC1CH13T3,vme.sis3316[0].channel[12].data.maw[2],DATA32);
SIGNAL(ADC1CH1MAXE1,vme.sis3316[0].channel[0].data.maxe[0],DATA32);
SIGNAL(ADC1CH1MAXE2,vme.sis3316[0].channel[0].data.maxe[1],DATA32);
SIGNAL(ADC1CH1T1,vme.sis3316[0].channel[0].data.maw[0],DATA32);
SIGNAL(ADC1CH1T2,vme.sis3316[0].channel[0].data.maw[1],DATA32);
SIGNAL(ADC1CH1T3,vme.sis3316[0].channel[0].data.maw[2],DATA32);
SIGNAL(ADC1CH5MAXE1,vme.sis3316[0].channel[4].data.maxe[0],DATA32);
SIGNAL(ADC1CH5MAXE2,vme.sis3316[0].channel[4].data.maxe[1],DATA32);
SIGNAL(ADC1CH5T1,vme.sis3316[0].channel[4].data.maw[0],DATA32);
SIGNAL(ADC1CH5T2,vme.sis3316[0].channel[4].data.maw[1],DATA32);
SIGNAL(ADC1CH5T3,vme.sis3316[0].channel[4].data.maw[2],DATA32);
SIGNAL(ADC1CH9MAXE1,vme.sis3316[0].channel[8].data.maxe[0],DATA32);
SIGNAL(ADC1CH9MAXE2,vme.sis3316[0].channel[8].data.maxe[1],DATA32);
SIGNAL(ADC1CH9T1,vme.sis3316[0].channel[8].data.maw[0],DATA32);
SIGNAL(ADC1CH9T2,vme.sis3316[0].channel[8].data.maw[1],DATA32);
SIGNAL(ADC1CH9T3,vme.sis3316[0].channel[8].data.maw[2],DATA32);
SIGNAL(ADC1TS10H,vme.sis3316[0].channel[9].data.ts[0],DATA32);
SIGNAL(ADC1TS10L,vme.sis3316[0].channel[9].data.ts[1],DATA32);
SIGNAL(ADC1TS11H,vme.sis3316[0].channel[10].data.ts[0],DATA32);
SIGNAL(ADC1TS11L,vme.sis3316[0].channel[10].data.ts[1],DATA32);
SIGNAL(ADC1TS12H,vme.sis3316[0].channel[11].data.ts[0],DATA32);
SIGNAL(ADC1TS12L,vme.sis3316[0].channel[11].data.ts[1],DATA32);
SIGNAL(ADC1TS13H,vme.sis3316[0].channel[12].data.ts[0],DATA32);
SIGNAL(ADC1TS13L,vme.sis3316[0].channel[12].data.ts[1],DATA32);
SIGNAL(ADC1TS14H,vme.sis3316[0].channel[13].data.ts[0],DATA32);
SIGNAL(ADC1TS14L,vme.sis3316[0].channel[13].data.ts[1],DATA32);
SIGNAL(ADC1TS15H,vme.sis3316[0].channel[14].data.ts[0],DATA32);
SIGNAL(ADC1TS15L,vme.sis3316[0].channel[14].data.ts[1],DATA32);
SIGNAL(ADC1TS16H,vme.sis3316[0].channel[15].data.ts[0],DATA32);
SIGNAL(ADC1TS16L,vme.sis3316[0].channel[15].data.ts[1],DATA32);
SIGNAL(ADC1TS1H,vme.sis3316[0].channel[0].data.ts[0],DATA32);
SIGNAL(ADC1TS1L,vme.sis3316[0].channel[0].data.ts[1],DATA32);
SIGNAL(ADC1TS2H,vme.sis3316[0].channel[1].data.ts[0],DATA32);
SIGNAL(ADC1TS2L,vme.sis3316[0].channel[1].data.ts[1],DATA32);
SIGNAL(ADC1TS3H,vme.sis3316[0].channel[2].data.ts[0],DATA32);
SIGNAL(ADC1TS3L,vme.sis3316[0].channel[2].data.ts[1],DATA32);
SIGNAL(ADC1TS4H,vme.sis3316[0].channel[3].data.ts[0],DATA32);
SIGNAL(ADC1TS4L,vme.sis3316[0].channel[3].data.ts[1],DATA32);
SIGNAL(ADC1TS5H,vme.sis3316[0].channel[4].data.ts[0],DATA32);
SIGNAL(ADC1TS5L,vme.sis3316[0].channel[4].data.ts[1],DATA32);
SIGNAL(ADC1TS6H,vme.sis3316[0].channel[5].data.ts[0],DATA32);
SIGNAL(ADC1TS6L,vme.sis3316[0].channel[5].data.ts[1],DATA32);
SIGNAL(ADC1TS7H,vme.sis3316[0].channel[6].data.ts[0],DATA32);
SIGNAL(ADC1TS7L,vme.sis3316[0].channel[6].data.ts[1],DATA32);
SIGNAL(ADC1TS8H,vme.sis3316[0].channel[7].data.ts[0],DATA32);
SIGNAL(ADC1TS8L,vme.sis3316[0].channel[7].data.ts[1],DATA32);
SIGNAL(ADC1TS9H,vme.sis3316[0].channel[8].data.ts[0],DATA32);
SIGNAL(ADC1TS9L,vme.sis3316[0].channel[8].data.ts[1],DATA32);
SIGNAL(ADC2CH10GATE1,vme.sis3316[1].channel[9].data.gate[0],DATA32);
SIGNAL(ADC2CH10GATE2,vme.sis3316[1].channel[9].data.gate[1],DATA32);
SIGNAL(ADC2CH10GATE3,vme.sis3316[1].channel[9].data.gate[2],DATA32);
SIGNAL(ADC2CH10GATE4,vme.sis3316[1].channel[9].data.gate[3],DATA32);
SIGNAL(ADC2CH10GATE5,vme.sis3316[1].channel[9].data.gate[4],DATA32);
SIGNAL(ADC2CH10GATE6,vme.sis3316[1].channel[9].data.gate[5],DATA32);
SIGNAL(ADC2CH10GATE7,vme.sis3316[1].channel[9].data.gate[6],DATA32);
SIGNAL(ADC2CH10GATE8,vme.sis3316[1].channel[9].data.gate[7],DATA32);
SIGNAL(ADC2CH10MAXE1,vme.sis3316[1].channel[9].data.maxe[0],DATA32);
SIGNAL(ADC2CH10MAXE2,vme.sis3316[1].channel[9].data.maxe[1],DATA32);
SIGNAL(ADC2CH10T1,vme.sis3316[1].channel[9].data.maw[0],DATA32);
SIGNAL(ADC2CH10T2,vme.sis3316[1].channel[9].data.maw[1],DATA32);
SIGNAL(ADC2CH10T3,vme.sis3316[1].channel[9].data.maw[2],DATA32);
SIGNAL(ADC2CH13GATE1,vme.sis3316[1].channel[12].data.gate[0],DATA32);
SIGNAL(ADC2CH13GATE2,vme.sis3316[1].channel[12].data.gate[1],DATA32);
SIGNAL(ADC2CH13GATE3,vme.sis3316[1].channel[12].data.gate[2],DATA32);
SIGNAL(ADC2CH13GATE4,vme.sis3316[1].channel[12].data.gate[3],DATA32);
SIGNAL(ADC2CH13GATE5,vme.sis3316[1].channel[12].data.gate[4],DATA32);
SIGNAL(ADC2CH13GATE6,vme.sis3316[1].channel[12].data.gate[5],DATA32);
SIGNAL(ADC2CH13GATE7,vme.sis3316[1].channel[12].data.gate[6],DATA32);
SIGNAL(ADC2CH13GATE8,vme.sis3316[1].channel[12].data.gate[7],DATA32);
SIGNAL(ADC2CH13MAXE1,vme.sis3316[1].channel[12].data.maxe[0],DATA32);
SIGNAL(ADC2CH13MAXE2,vme.sis3316[1].channel[12].data.maxe[1],DATA32);
SIGNAL(ADC2CH13T1,vme.sis3316[1].channel[12].data.maw[0],DATA32);
SIGNAL(ADC2CH13T2,vme.sis3316[1].channel[12].data.maw[1],DATA32);
SIGNAL(ADC2CH13T3,vme.sis3316[1].channel[12].data.maw[2],DATA32);
SIGNAL(ADC2CH14GATE1,vme.sis3316[1].channel[13].data.gate[0],DATA32);
SIGNAL(ADC2CH14GATE2,vme.sis3316[1].channel[13].data.gate[1],DATA32);
SIGNAL(ADC2CH14GATE3,vme.sis3316[1].channel[13].data.gate[2],DATA32);
SIGNAL(ADC2CH14GATE4,vme.sis3316[1].channel[13].data.gate[3],DATA32);
SIGNAL(ADC2CH14GATE5,vme.sis3316[1].channel[13].data.gate[4],DATA32);
SIGNAL(ADC2CH14GATE6,vme.sis3316[1].channel[13].data.gate[5],DATA32);
SIGNAL(ADC2CH14GATE7,vme.sis3316[1].channel[13].data.gate[6],DATA32);
SIGNAL(ADC2CH14GATE8,vme.sis3316[1].channel[13].data.gate[7],DATA32);
SIGNAL(ADC2CH14MAXE1,vme.sis3316[1].channel[13].data.maxe[0],DATA32);
SIGNAL(ADC2CH14MAXE2,vme.sis3316[1].channel[13].data.maxe[1],DATA32);
SIGNAL(ADC2CH14T1,vme.sis3316[1].channel[13].data.maw[0],DATA32);
SIGNAL(ADC2CH14T2,vme.sis3316[1].channel[13].data.maw[1],DATA32);
SIGNAL(ADC2CH14T3,vme.sis3316[1].channel[13].data.maw[2],DATA32);
SIGNAL(ADC2CH1GATE1,vme.sis3316[1].channel[0].data.gate[0],DATA32);
SIGNAL(ADC2CH1GATE2,vme.sis3316[1].channel[0].data.gate[1],DATA32);
SIGNAL(ADC2CH1GATE3,vme.sis3316[1].channel[0].data.gate[2],DATA32);
SIGNAL(ADC2CH1GATE4,vme.sis3316[1].channel[0].data.gate[3],DATA32);
SIGNAL(ADC2CH1GATE5,vme.sis3316[1].channel[0].data.gate[4],DATA32);
SIGNAL(ADC2CH1GATE6,vme.sis3316[1].channel[0].data.gate[5],DATA32);
SIGNAL(ADC2CH1GATE7,vme.sis3316[1].channel[0].data.gate[6],DATA32);
SIGNAL(ADC2CH1GATE8,vme.sis3316[1].channel[0].data.gate[7],DATA32);
SIGNAL(ADC2CH1MAXE1,vme.sis3316[1].channel[0].data.maxe[0],DATA32);
SIGNAL(ADC2CH1MAXE2,vme.sis3316[1].channel[0].data.maxe[1],DATA32);
SIGNAL(ADC2CH1T1,vme.sis3316[1].channel[0].data.maw[0],DATA32);
SIGNAL(ADC2CH1T2,vme.sis3316[1].channel[0].data.maw[1],DATA32);
SIGNAL(ADC2CH1T3,vme.sis3316[1].channel[0].data.maw[2],DATA32);
SIGNAL(ADC2CH2GATE1,vme.sis3316[1].channel[1].data.gate[0],DATA32);
SIGNAL(ADC2CH2GATE2,vme.sis3316[1].channel[1].data.gate[1],DATA32);
SIGNAL(ADC2CH2GATE3,vme.sis3316[1].channel[1].data.gate[2],DATA32);
SIGNAL(ADC2CH2GATE4,vme.sis3316[1].channel[1].data.gate[3],DATA32);
SIGNAL(ADC2CH2GATE5,vme.sis3316[1].channel[1].data.gate[4],DATA32);
SIGNAL(ADC2CH2GATE6,vme.sis3316[1].channel[1].data.gate[5],DATA32);
SIGNAL(ADC2CH2GATE7,vme.sis3316[1].channel[1].data.gate[6],DATA32);
SIGNAL(ADC2CH2GATE8,vme.sis3316[1].channel[1].data.gate[7],DATA32);
SIGNAL(ADC2CH2MAXE1,vme.sis3316[1].channel[1].data.maxe[0],DATA32);
SIGNAL(ADC2CH2MAXE2,vme.sis3316[1].channel[1].data.maxe[1],DATA32);
SIGNAL(ADC2CH2T1,vme.sis3316[1].channel[1].data.maw[0],DATA32);
SIGNAL(ADC2CH2T2,vme.sis3316[1].channel[1].data.maw[1],DATA32);
SIGNAL(ADC2CH2T3,vme.sis3316[1].channel[1].data.maw[2],DATA32);
SIGNAL(ADC2CH5GATE1,vme.sis3316[1].channel[4].data.gate[0],DATA32);
SIGNAL(ADC2CH5GATE2,vme.sis3316[1].channel[4].data.gate[1],DATA32);
SIGNAL(ADC2CH5GATE3,vme.sis3316[1].channel[4].data.gate[2],DATA32);
SIGNAL(ADC2CH5GATE4,vme.sis3316[1].channel[4].data.gate[3],DATA32);
SIGNAL(ADC2CH5GATE5,vme.sis3316[1].channel[4].data.gate[4],DATA32);
SIGNAL(ADC2CH5GATE6,vme.sis3316[1].channel[4].data.gate[5],DATA32);
SIGNAL(ADC2CH5GATE7,vme.sis3316[1].channel[4].data.gate[6],DATA32);
SIGNAL(ADC2CH5GATE8,vme.sis3316[1].channel[4].data.gate[7],DATA32);
SIGNAL(ADC2CH5MAXE1,vme.sis3316[1].channel[4].data.maxe[0],DATA32);
SIGNAL(ADC2CH5MAXE2,vme.sis3316[1].channel[4].data.maxe[1],DATA32);
SIGNAL(ADC2CH5T1,vme.sis3316[1].channel[4].data.maw[0],DATA32);
SIGNAL(ADC2CH5T2,vme.sis3316[1].channel[4].data.maw[1],DATA32);
SIGNAL(ADC2CH5T3,vme.sis3316[1].channel[4].data.maw[2],DATA32);
SIGNAL(ADC2CH6GATE1,vme.sis3316[1].channel[5].data.gate[0],DATA32);
SIGNAL(ADC2CH6GATE2,vme.sis3316[1].channel[5].data.gate[1],DATA32);
SIGNAL(ADC2CH6GATE3,vme.sis3316[1].channel[5].data.gate[2],DATA32);
SIGNAL(ADC2CH6GATE4,vme.sis3316[1].channel[5].data.gate[3],DATA32);
SIGNAL(ADC2CH6GATE5,vme.sis3316[1].channel[5].data.gate[4],DATA32);
SIGNAL(ADC2CH6GATE6,vme.sis3316[1].channel[5].data.gate[5],DATA32);
SIGNAL(ADC2CH6GATE7,vme.sis3316[1].channel[5].data.gate[6],DATA32);
SIGNAL(ADC2CH6GATE8,vme.sis3316[1].channel[5].data.gate[7],DATA32);
SIGNAL(ADC2CH6MAXE1,vme.sis3316[1].channel[5].data.maxe[0],DATA32);
SIGNAL(ADC2CH6MAXE2,vme.sis3316[1].channel[5].data.maxe[1],DATA32);
SIGNAL(ADC2CH6T1,vme.sis3316[1].channel[5].data.maw[0],DATA32);
SIGNAL(ADC2CH6T2,vme.sis3316[1].channel[5].data.maw[1],DATA32);
SIGNAL(ADC2CH6T3,vme.sis3316[1].channel[5].data.maw[2],DATA32);
SIGNAL(ADC2CH9GATE1,vme.sis3316[1].channel[8].data.gate[0],DATA32);
SIGNAL(ADC2CH9GATE2,vme.sis3316[1].channel[8].data.gate[1],DATA32);
SIGNAL(ADC2CH9GATE3,vme.sis3316[1].channel[8].data.gate[2],DATA32);
SIGNAL(ADC2CH9GATE4,vme.sis3316[1].channel[8].data.gate[3],DATA32);
SIGNAL(ADC2CH9GATE5,vme.sis3316[1].channel[8].data.gate[4],DATA32);
SIGNAL(ADC2CH9GATE6,vme.sis3316[1].channel[8].data.gate[5],DATA32);
SIGNAL(ADC2CH9GATE7,vme.sis3316[1].channel[8].data.gate[6],DATA32);
SIGNAL(ADC2CH9GATE8,vme.sis3316[1].channel[8].data.gate[7],DATA32);
SIGNAL(ADC2CH9MAXE1,vme.sis3316[1].channel[8].data.maxe[0],DATA32);
SIGNAL(ADC2CH9MAXE2,vme.sis3316[1].channel[8].data.maxe[1],DATA32);
SIGNAL(ADC2CH9T1,vme.sis3316[1].channel[8].data.maw[0],DATA32);
SIGNAL(ADC2CH9T2,vme.sis3316[1].channel[8].data.maw[1],DATA32);
SIGNAL(ADC2CH9T3,vme.sis3316[1].channel[8].data.maw[2],DATA32);
SIGNAL(ADC2TS10H,vme.sis3316[1].channel[9].data.ts[0],DATA32);
SIGNAL(ADC2TS10L,vme.sis3316[1].channel[9].data.ts[1],DATA32);
SIGNAL(ADC2TS11H,vme.sis3316[1].channel[10].data.ts[0],DATA32);
SIGNAL(ADC2TS11L,vme.sis3316[1].channel[10].data.ts[1],DATA32);
SIGNAL(ADC2TS12H,vme.sis3316[1].channel[11].data.ts[0],DATA32);
SIGNAL(ADC2TS12L,vme.sis3316[1].channel[11].data.ts[1],DATA32);
SIGNAL(ADC2TS13H,vme.sis3316[1].channel[12].data.ts[0],DATA32);
SIGNAL(ADC2TS13L,vme.sis3316[1].channel[12].data.ts[1],DATA32);
SIGNAL(ADC2TS14H,vme.sis3316[1].channel[13].data.ts[0],DATA32);
SIGNAL(ADC2TS14L,vme.sis3316[1].channel[13].data.ts[1],DATA32);
SIGNAL(ADC2TS15H,vme.sis3316[1].channel[14].data.ts[0],DATA32);
SIGNAL(ADC2TS15L,vme.sis3316[1].channel[14].data.ts[1],DATA32);
SIGNAL(ADC2TS16H,vme.sis3316[1].channel[15].data.ts[0],DATA32);
SIGNAL(ADC2TS16L,vme.sis3316[1].channel[15].data.ts[1],DATA32);
SIGNAL(ADC2TS1H,vme.sis3316[1].channel[0].data.ts[0],DATA32);
SIGNAL(ADC2TS1L,vme.sis3316[1].channel[0].data.ts[1],DATA32);
SIGNAL(ADC2TS2H,vme.sis3316[1].channel[1].data.ts[0],DATA32);
SIGNAL(ADC2TS2L,vme.sis3316[1].channel[1].data.ts[1],DATA32);
SIGNAL(ADC2TS3H,vme.sis3316[1].channel[2].data.ts[0],DATA32);
SIGNAL(ADC2TS3L,vme.sis3316[1].channel[2].data.ts[1],DATA32);
SIGNAL(ADC2TS4H,vme.sis3316[1].channel[3].data.ts[0],DATA32);
SIGNAL(ADC2TS4L,vme.sis3316[1].channel[3].data.ts[1],DATA32);
SIGNAL(ADC2TS5H,vme.sis3316[1].channel[4].data.ts[0],DATA32);
SIGNAL(ADC2TS5L,vme.sis3316[1].channel[4].data.ts[1],DATA32);
SIGNAL(ADC2TS6H,vme.sis3316[1].channel[5].data.ts[0],DATA32);
SIGNAL(ADC2TS6L,vme.sis3316[1].channel[5].data.ts[1],DATA32);
SIGNAL(ADC2TS7H,vme.sis3316[1].channel[6].data.ts[0],DATA32);
SIGNAL(ADC2TS7L,vme.sis3316[1].channel[6].data.ts[1],DATA32);
SIGNAL(ADC2TS8H,vme.sis3316[1].channel[7].data.ts[0],DATA32);
SIGNAL(ADC2TS8L,vme.sis3316[1].channel[7].data.ts[1],DATA32);
SIGNAL(ADC2TS9H,vme.sis3316[1].channel[8].data.ts[0],DATA32);
SIGNAL(ADC2TS9L,vme.sis3316[1].channel[8].data.ts[1],DATA32);
SIGNAL(ADC3CH13MAXE1,vme.sis3316[2].channel[12].data.maxe[0],DATA32);
SIGNAL(ADC3CH13MAXE2,vme.sis3316[2].channel[12].data.maxe[1],DATA32);
SIGNAL(ADC3CH13T1,vme.sis3316[2].channel[12].data.maw[0],DATA32);
SIGNAL(ADC3CH13T2,vme.sis3316[2].channel[12].data.maw[1],DATA32);
SIGNAL(ADC3CH13T3,vme.sis3316[2].channel[12].data.maw[2],DATA32);
SIGNAL(ADC3CH1MAXE1,vme.sis3316[2].channel[0].data.maxe[0],DATA32);
SIGNAL(ADC3CH1MAXE2,vme.sis3316[2].channel[0].data.maxe[1],DATA32);
SIGNAL(ADC3CH1T1,vme.sis3316[2].channel[0].data.maw[0],DATA32);
SIGNAL(ADC3CH1T2,vme.sis3316[2].channel[0].data.maw[1],DATA32);
SIGNAL(ADC3CH1T3,vme.sis3316[2].channel[0].data.maw[2],DATA32);
SIGNAL(ADC3CH5MAXE1,vme.sis3316[2].channel[4].data.maxe[0],DATA32);
SIGNAL(ADC3CH5MAXE2,vme.sis3316[2].channel[4].data.maxe[1],DATA32);
SIGNAL(ADC3CH5T1,vme.sis3316[2].channel[4].data.maw[0],DATA32);
SIGNAL(ADC3CH5T2,vme.sis3316[2].channel[4].data.maw[1],DATA32);
SIGNAL(ADC3CH5T3,vme.sis3316[2].channel[4].data.maw[2],DATA32);
SIGNAL(ADC3CH9MAXE1,vme.sis3316[2].channel[8].data.maxe[0],DATA32);
SIGNAL(ADC3CH9MAXE2,vme.sis3316[2].channel[8].data.maxe[1],DATA32);
SIGNAL(ADC3CH9T1,vme.sis3316[2].channel[8].data.maw[0],DATA32);
SIGNAL(ADC3CH9T2,vme.sis3316[2].channel[8].data.maw[1],DATA32);
SIGNAL(ADC3CH9T3,vme.sis3316[2].channel[8].data.maw[2],DATA32);
SIGNAL(ADC3TS10H,vme.sis3316[2].channel[9].data.ts[0],DATA32);
SIGNAL(ADC3TS10L,vme.sis3316[2].channel[9].data.ts[1],DATA32);
SIGNAL(ADC3TS11H,vme.sis3316[2].channel[10].data.ts[0],DATA32);
SIGNAL(ADC3TS11L,vme.sis3316[2].channel[10].data.ts[1],DATA32);
SIGNAL(ADC3TS12H,vme.sis3316[2].channel[11].data.ts[0],DATA32);
SIGNAL(ADC3TS12L,vme.sis3316[2].channel[11].data.ts[1],DATA32);
SIGNAL(ADC3TS13H,vme.sis3316[2].channel[12].data.ts[0],DATA32);
SIGNAL(ADC3TS13L,vme.sis3316[2].channel[12].data.ts[1],DATA32);
SIGNAL(ADC3TS14H,vme.sis3316[2].channel[13].data.ts[0],DATA32);
SIGNAL(ADC3TS14L,vme.sis3316[2].channel[13].data.ts[1],DATA32);
SIGNAL(ADC3TS15H,vme.sis3316[2].channel[14].data.ts[0],DATA32);
SIGNAL(ADC3TS15L,vme.sis3316[2].channel[14].data.ts[1],DATA32);
SIGNAL(ADC3TS16H,vme.sis3316[2].channel[15].data.ts[0],DATA32);
SIGNAL(ADC3TS16L,vme.sis3316[2].channel[15].data.ts[1],DATA32);
SIGNAL(ADC3TS1H,vme.sis3316[2].channel[0].data.ts[0],DATA32);
SIGNAL(ADC3TS1L,vme.sis3316[2].channel[0].data.ts[1],DATA32);
SIGNAL(ADC3TS2H,vme.sis3316[2].channel[1].data.ts[0],DATA32);
SIGNAL(ADC3TS2L,vme.sis3316[2].channel[1].data.ts[1],DATA32);
SIGNAL(ADC3TS3H,vme.sis3316[2].channel[2].data.ts[0],DATA32);
SIGNAL(ADC3TS3L,vme.sis3316[2].channel[2].data.ts[1],DATA32);
SIGNAL(ADC3TS4H,vme.sis3316[2].channel[3].data.ts[0],DATA32);
SIGNAL(ADC3TS4L,vme.sis3316[2].channel[3].data.ts[1],DATA32);
SIGNAL(ADC3TS5H,vme.sis3316[2].channel[4].data.ts[0],DATA32);
SIGNAL(ADC3TS5L,vme.sis3316[2].channel[4].data.ts[1],DATA32);
SIGNAL(ADC3TS6H,vme.sis3316[2].channel[5].data.ts[0],DATA32);
SIGNAL(ADC3TS6L,vme.sis3316[2].channel[5].data.ts[1],DATA32);
SIGNAL(ADC3TS7H,vme.sis3316[2].channel[6].data.ts[0],DATA32);
SIGNAL(ADC3TS7L,vme.sis3316[2].channel[6].data.ts[1],DATA32);
SIGNAL(ADC3TS8H,vme.sis3316[2].channel[7].data.ts[0],DATA32);
SIGNAL(ADC3TS8L,vme.sis3316[2].channel[7].data.ts[1],DATA32);
SIGNAL(ADC3TS9H,vme.sis3316[2].channel[8].data.ts[0],DATA32);
SIGNAL(ADC3TS9L,vme.sis3316[2].channel[8].data.ts[1],DATA32);
SIGNAL(ADC_1_N,vme.sis3316[0].n_ch,DATA8);
SIGNAL(ADC_2_N,vme.sis3316[1].n_ch,DATA8);
SIGNAL(ADC_3_N,vme.sis3316[2].n_ch,DATA8);
SIGNAL(CRM_1,scalers.caen_scaler.data[16],DATA32);
SIGNAL(CRM_2,scalers.caen_scaler.data[17],DATA32);
SIGNAL(CRM_3,scalers.caen_scaler.data[18],DATA32);
SIGNAL(CRM_4,scalers.caen_scaler.data[19],DATA32);
SIGNAL(CRM_5,scalers.caen_scaler.data[20],DATA32);
SIGNAL(CRM_6,scalers.caen_scaler.data[21],DATA32);
SIGNAL(CRM_7,scalers.caen_scaler.data[22],DATA32);
SIGNAL(CRM_8,scalers.caen_scaler.data[23],DATA32);
SIGNAL(HPGEL_1S,scalers.caen_scaler.data[8],DATA32);
SIGNAL(HPGEL_1T,vme.tdc.data[4],DATA12);
SIGNAL(HPGEL_2S,scalers.caen_scaler.data[9],DATA32);
SIGNAL(HPGEL_2T,vme.tdc.data[5],DATA12);
SIGNAL(HPGEL_3S,scalers.caen_scaler.data[10],DATA32);
SIGNAL(HPGEL_3T,vme.tdc.data[6],DATA12);
SIGNAL(HPGEL_4S,scalers.caen_scaler.data[11],DATA32);
SIGNAL(HPGEL_4T,vme.tdc.data[7],DATA12);
SIGNAL(HPGE_1S,scalers.caen_scaler.data[12],DATA32);
SIGNAL(HPGE_2S,scalers.caen_scaler.data[13],DATA32);
SIGNAL(HPGE_3S,scalers.caen_scaler.data[14],DATA32);
SIGNAL(HPGE_4S,scalers.caen_scaler.data[15],DATA32);
SIGNAL(LABRL_1S,scalers.caen_scaler.data[0],DATA32);
SIGNAL(LABRL_1T,vme.tdc.data[0],DATA12);
SIGNAL(LABRL_2S,scalers.caen_scaler.data[1],DATA32);
SIGNAL(LABRL_2T,vme.tdc.data[1],DATA12);
SIGNAL(LABRL_3S,scalers.caen_scaler.data[2],DATA32);
SIGNAL(LABRL_3T,vme.tdc.data[2],DATA12);
SIGNAL(LABRL_4S,scalers.caen_scaler.data[3],DATA32);
SIGNAL(LABRL_4T,vme.tdc.data[3],DATA12);
SIGNAL(LABR_1S,scalers.caen_scaler.data[4],DATA32);
SIGNAL(LABR_2S,scalers.caen_scaler.data[5],DATA32);
SIGNAL(LABR_3S,scalers.caen_scaler.data[6],DATA32);
SIGNAL(LABR_4S,scalers.caen_scaler.data[7],DATA32);
SIGNAL(N_1E,vme.adc.data[0],DATA16);
SIGNAL(N_1P,vme.adc.data[1],DATA16);
SIGNAL(N_1S,scalers.caen_scaler.data[24],DATA32);
SIGNAL(N_1T,vme.tdc.data[8],DATA12);
SIGNAL(N_2E,vme.adc.data[2],DATA16);
SIGNAL(N_2P,vme.adc.data[3],DATA16);
SIGNAL(N_2S,scalers.caen_scaler.data[25],DATA32);
SIGNAL(N_2T,vme.tdc.data[9],DATA12);
SIGNAL(N_3E,vme.adc.data[4],DATA16);
SIGNAL(N_3P,vme.adc.data[5],DATA16);
SIGNAL(N_3S,scalers.caen_scaler.data[26],DATA32);
SIGNAL(N_3T,vme.tdc.data[10],DATA12);
SIGNAL(N_4E,vme.adc.data[6],DATA16);
SIGNAL(N_4P,vme.adc.data[7],DATA16);
SIGNAL(N_4S,scalers.caen_scaler.data[27],DATA32);
SIGNAL(N_4T,vme.tdc.data[11],DATA12);
SIGNAL(N_5E,vme.adc.data[16],DATA16);
SIGNAL(N_5P,vme.adc.data[17],DATA16);
SIGNAL(N_5S,scalers.caen_scaler.data[28],DATA32);
SIGNAL(N_5T,vme.tdc.data[12],DATA12);
SIGNAL(N_6E,vme.adc.data[18],DATA16);
SIGNAL(N_6P,vme.adc.data[19],DATA16);
SIGNAL(N_6S,scalers.caen_scaler.data[29],DATA32);
SIGNAL(N_6T,vme.tdc.data[13],DATA12);
SIGNAL(N_7E,vme.adc.data[20],DATA16);
SIGNAL(N_7P,vme.adc.data[21],DATA16);
SIGNAL(N_7S,scalers.caen_scaler.data[30],DATA32);
SIGNAL(N_7T,vme.tdc.data[14],DATA12);
SIGNAL(N_8E,vme.adc.data[22],DATA16);
SIGNAL(N_8P,vme.adc.data[23],DATA16);
SIGNAL(N_8S,scalers.caen_scaler.data[31],DATA32);
SIGNAL(N_8T,vme.tdc.data[15],DATA12);
SIGNAL(TPAT,ts.trlo.trigbuf.entry.tpat,DATA32);
SIGNAL(TRIG,ts.trlo.trigbuf.entry.trig,DATA8);
SIGNAL(TRIGT_1,vme.tdc.data[16],DATA12);
SIGNAL(TRIGT_10,vme.tdc.data[25],DATA12);
SIGNAL(TRIGT_11,vme.tdc.data[26],DATA12);
SIGNAL(TRIGT_12,vme.tdc.data[27],DATA12);
SIGNAL(TRIGT_2,vme.tdc.data[17],DATA12);
SIGNAL(TRIGT_3,vme.tdc.data[18],DATA12);
SIGNAL(TRIGT_4,vme.tdc.data[19],DATA12);
SIGNAL(TRIGT_5,vme.tdc.data[20],DATA12);
SIGNAL(TRIGT_6,vme.tdc.data[21],DATA12);
SIGNAL(TRIGT_7,vme.tdc.data[22],DATA12);
SIGNAL(TRIGT_8,vme.tdc.data[23],DATA12);
SIGNAL(TRIGT_9,vme.tdc.data[24],DATA12);
SIGNAL(TRLOADT1,scalers.trlo.after_deadtime[0],DATA32);
SIGNAL(TRLOADT10,scalers.trlo.after_deadtime[9],DATA32);
SIGNAL(TRLOADT11,scalers.trlo.after_deadtime[10],DATA32);
SIGNAL(TRLOADT12,scalers.trlo.after_deadtime[11],DATA32);
SIGNAL(TRLOADT13,scalers.trlo.after_deadtime[12],DATA32);
SIGNAL(TRLOADT14,scalers.trlo.after_deadtime[13],DATA32);
SIGNAL(TRLOADT15,scalers.trlo.after_deadtime[14],DATA32);
SIGNAL(TRLOADT16,scalers.trlo.after_deadtime[15],DATA32);
SIGNAL(TRLOADT2,scalers.trlo.after_deadtime[1],DATA32);
SIGNAL(TRLOADT3,scalers.trlo.after_deadtime[2],DATA32);
SIGNAL(TRLOADT4,scalers.trlo.after_deadtime[3],DATA32);
SIGNAL(TRLOADT5,scalers.trlo.after_deadtime[4],DATA32);
SIGNAL(TRLOADT6,scalers.trlo.after_deadtime[5],DATA32);
SIGNAL(TRLOADT7,scalers.trlo.after_deadtime[6],DATA32);
SIGNAL(TRLOADT8,scalers.trlo.after_deadtime[7],DATA32);
SIGNAL(TRLOADT9,scalers.trlo.after_deadtime[8],DATA32);
SIGNAL(TRLOARD1,scalers.trlo.after_reduction[0],DATA32);
SIGNAL(TRLOARD10,scalers.trlo.after_reduction[9],DATA32);
SIGNAL(TRLOARD11,scalers.trlo.after_reduction[10],DATA32);
SIGNAL(TRLOARD12,scalers.trlo.after_reduction[11],DATA32);
SIGNAL(TRLOARD13,scalers.trlo.after_reduction[12],DATA32);
SIGNAL(TRLOARD14,scalers.trlo.after_reduction[13],DATA32);
SIGNAL(TRLOARD15,scalers.trlo.after_reduction[14],DATA32);
SIGNAL(TRLOARD16,scalers.trlo.after_reduction[15],DATA32);
SIGNAL(TRLOARD2,scalers.trlo.after_reduction[1],DATA32);
SIGNAL(TRLOARD3,scalers.trlo.after_reduction[2],DATA32);
SIGNAL(TRLOARD4,scalers.trlo.after_reduction[3],DATA32);
SIGNAL(TRLOARD5,scalers.trlo.after_reduction[4],DATA32);
SIGNAL(TRLOARD6,scalers.trlo.after_reduction[5],DATA32);
SIGNAL(TRLOARD7,scalers.trlo.after_reduction[6],DATA32);
SIGNAL(TRLOARD8,scalers.trlo.after_reduction[7],DATA32);
SIGNAL(TRLOARD9,scalers.trlo.after_reduction[8],DATA32);
SIGNAL(TRLOBDT1,scalers.trlo.before_deadtime[0],DATA32);
SIGNAL(TRLOBDT10,scalers.trlo.before_deadtime[9],DATA32);
SIGNAL(TRLOBDT11,scalers.trlo.before_deadtime[10],DATA32);
SIGNAL(TRLOBDT12,scalers.trlo.before_deadtime[11],DATA32);
SIGNAL(TRLOBDT13,scalers.trlo.before_deadtime[12],DATA32);
SIGNAL(TRLOBDT14,scalers.trlo.before_deadtime[13],DATA32);
SIGNAL(TRLOBDT15,scalers.trlo.before_deadtime[14],DATA32);
SIGNAL(TRLOBDT16,scalers.trlo.before_deadtime[15],DATA32);
SIGNAL(TRLOBDT2,scalers.trlo.before_deadtime[1],DATA32);
SIGNAL(TRLOBDT3,scalers.trlo.before_deadtime[2],DATA32);
SIGNAL(TRLOBDT4,scalers.trlo.before_deadtime[3],DATA32);
SIGNAL(TRLOBDT5,scalers.trlo.before_deadtime[4],DATA32);
SIGNAL(TRLOBDT6,scalers.trlo.before_deadtime[5],DATA32);
SIGNAL(TRLOBDT7,scalers.trlo.before_deadtime[6],DATA32);
SIGNAL(TRLOBDT8,scalers.trlo.before_deadtime[7],DATA32);
SIGNAL(TRLOBDT9,scalers.trlo.before_deadtime[8],DATA32);
SIGNAL(TRLORAW1,scalers.trlo.before_lmu[0],DATA32);
SIGNAL(TRLORAW10,scalers.trlo.before_lmu[9],DATA32);
SIGNAL(TRLORAW11,scalers.trlo.before_lmu[10],DATA32);
SIGNAL(TRLORAW12,scalers.trlo.before_lmu[11],DATA32);
SIGNAL(TRLORAW13,scalers.trlo.before_lmu[12],DATA32);
SIGNAL(TRLORAW14,scalers.trlo.before_lmu[13],DATA32);
SIGNAL(TRLORAW15,scalers.trlo.before_lmu[14],DATA32);
SIGNAL(TRLORAW16,scalers.trlo.before_lmu[15],DATA32);
SIGNAL(TRLORAW2,scalers.trlo.before_lmu[1],DATA32);
SIGNAL(TRLORAW3,scalers.trlo.before_lmu[2],DATA32);
SIGNAL(TRLORAW4,scalers.trlo.before_lmu[3],DATA32);
SIGNAL(TRLORAW5,scalers.trlo.before_lmu[4],DATA32);
SIGNAL(TRLORAW6,scalers.trlo.before_lmu[5],DATA32);
SIGNAL(TRLORAW7,scalers.trlo.before_lmu[6],DATA32);
SIGNAL(TRLORAW8,scalers.trlo.before_lmu[7],DATA32);
SIGNAL(TRLORAW9,scalers.trlo.before_lmu[8],DATA32);
SIGNAL(TS_HI,ts.trlo.trigbuf.entry.ts_hi,DATA32);
SIGNAL(TS_LO,ts.trlo.trigbuf.entry.ts_lo,DATA32);
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/
