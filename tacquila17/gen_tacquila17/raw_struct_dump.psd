
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

class raw_event_tac
{
  DATA12 t[16];
  DATA12 q[16];
} ;
class raw_event : public raw_event_base
{
  raw_event_tac tac[2];
} ;
class raw_sticky : public raw_sticky_base
{
  ;
} ;
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/


/** BEGIN_MIRROR_STRUCT ************************************************
 *
 * Mirror (1 to 1) structure.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

#ifndef USER_DEF_raw_event_tac
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_tac)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(t);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(t__i0,,16);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(t[16]);
  STRUCT_MIRROR_ITEM_CTRL(q);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(q__i0,,16);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(q[16]);
  STRUCT_MIRROR_FCNS_DECL(raw_event_tac);
};
#endif//USER_DEF_raw_event_tac

#ifndef USER_DEF_raw_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event) : public STRUCT_MIRROR_BASE(raw_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(raw_event_base);
  STRUCT_MIRROR_ITEM_CTRL(tac);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(tac__i0,,2);
  STRUCT_MIRROR_TYPE(raw_event_tac) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tac[2]);
  STRUCT_MIRROR_FCNS_DECL(raw_event);
};
#endif//USER_DEF_raw_event

#ifndef USER_DEF_raw_sticky
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_sticky) : public STRUCT_MIRROR_BASE(raw_sticky_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(raw_sticky_base);
  STRUCT_MIRROR_FCNS_DECL(raw_sticky);
};
#endif//USER_DEF_raw_sticky

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_STRUCT *************************************************/


/** BEGIN_MIRROR_DECL_STRUCT *******************************************
 *
 * Mirror structure names.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_tac);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_sticky);

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_DECL_STRUCT ********************************************/


/** BEGIN_FUNCTION_CALL_PER_MEMBER *************************************
 *
 * Recursive function calls per member.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_fcncall_define.hh"

#ifndef USER_DEF_raw_event_tac
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_tac)::FCNCALL_NAME(raw_event_tac)
{
  FCNCALL_INIT;
  // DATA12 t[16];
  {
  FCNCALL_SUBNAME("t");
  FCNCALL_FOR(__i0,16)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(t__i0,,__i0,t[__i0].FCNCALL_CALL(t[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // DATA12 q[16];
  {
  FCNCALL_SUBNAME("q");
  FCNCALL_FOR(__i0,16)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(q__i0,,__i0,q[__i0].FCNCALL_CALL(q[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_tac

#ifndef USER_DEF_raw_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event)::FCNCALL_NAME(raw_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(raw_event_base,FCNCALL_CLASS_NAME(raw_event_base)::FCNCALL_CALL_BASE());
  // raw_event_tac tac[2];
  {
  FCNCALL_SUBNAME("tac");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(tac__i0,,__i0,tac[__i0].FCNCALL_CALL(tac[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event

#ifndef USER_DEF_raw_sticky
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_sticky)::FCNCALL_NAME(raw_sticky)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(raw_sticky_base,FCNCALL_CLASS_NAME(raw_sticky_base)::FCNCALL_CALL_BASE());
  FCNCALL_RET;
}
#endif//USER_DEF_raw_sticky

#include "gen/default_fcncall_undef.hh"


/** END_FUNCTION_CALL_PER_MEMBER **************************************/


/** BEGIN_CORR_STRUCT **************************************************
 *
 * Correlation structure.
 *
 * Do not edit - automatically generated.
 */

// Corr struct for: raw_event_tac
// DATA12  .t[16]
// DATA12  .q[16]
// DATA12 .t[16]
// DATA12 .q[16]
// 
// size= 1  chunks= 32  mem=  32  line=64  total=2048
// size=16  chunks=  2  mem=  32  line=34  total=1088
// size=32  chunks=  1  mem=  32  line=33  total=1056
// 
// corr structure: raw_event_tac
  // DATA12 .t[16]
  // DATA12 .q[16]
// .raw_event_tac/32/.t/16/[16]
                  // .q/16/[16]// 
// size= 1  chunks= 16  mem=  16  line=32  total=512
// size=16  chunks=  1  mem=  16  line=17  total=272
// 
// corr structure: raw_event_tac
  // DATA12 .t[16]
// .raw_event_tac/16/.t/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_tac
// .raw_event_tac
// Corr struct for: raw_event
//  : public raw_event_base
// ---
// raw_event_tac  .tac[2]
  // DATA12  .t[16]
  // DATA12  .q[16]
// DATA12 .tac[2].t[16]
// DATA12 .tac[2].q[16]
// 
// size= 1  chunks= 64  mem=  64  line=128  total=8192
// size=16  chunks=  4  mem=  64  line=68  total=4352
// size=32  chunks=  2  mem=  64  line=66  total=4224
// size=64  chunks=  1  mem=  64  line=65  total=4160
// 
// corr structure: raw_event
  // DATA12 .tac[2].t[16]
  // DATA12 .tac[2].q[16]
// .raw_event/64/.tac/64/[2]/32/.t/16/[16]
                             // .q/16/[16]// 
// size= 1  chunks= 32  mem=  32  line=64  total=2048
// size=16  chunks=  2  mem=  32  line=34  total=1088
// size=32  chunks=  1  mem=  32  line=33  total=1056
// 
// corr structure: raw_event
  // DATA12 .tac[2].t[16]
// .raw_event/32/.tac/32/[2]/16/.t/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event
// .raw_event
// Corr struct for: raw_sticky
//  : public raw_sticky_base
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky

/** END_CORR_STRUCT ***************************************************/

