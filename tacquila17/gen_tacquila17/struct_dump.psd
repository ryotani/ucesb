
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

class TACQUILA_GTB
{
  raw_array_zero_suppress<DATA12,DATA12,16> tac[2];
  raw_array_zero_suppress<DATA12,DATA12,16> adc[2];
  union 
  {
    struct 
    {
      uint32 count : 9;
      uint32 dummy_9_11 : 3;
      uint32 trigger_tacquila : 4;
      uint32 trigger_sam : 4;
      uint32 local_event_counter : 4;
      uint32 gtb : 4;
      uint32 sam : 4;
    } ;
    uint32 u32;
  } header;
} ;
class TACQUILA_RPC : public unpack_subevent_base
{
  TACQUILA_GTB tacq;
} ;
class unpack_event : public unpack_event_base
{
  TACQUILA_RPC rpc;
} ;
class unpack_sticky_event : public unpack_sticky_event_base
{
  ;
} ;
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/


/** BEGIN_MIRROR_STRUCT ************************************************
 *
 * Mirror (1 to 1) structure.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

#ifndef USER_DEF_TACQUILA_GTB
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TACQUILA_GTB)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(tac);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(tac__i0,,2);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),16> STRUCT_MIRROR_NAME(tac[2]);
  STRUCT_MIRROR_ITEM_CTRL(adc);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(adc__i0,,2);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),16> STRUCT_MIRROR_NAME(adc[2]);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(count);
      STRUCT_MIRROR_ITEM_CTRL(dummy_9_11);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_9_11);
      STRUCT_MIRROR_ITEM_CTRL(trigger_tacquila);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_tacquila);
      STRUCT_MIRROR_ITEM_CTRL(trigger_sam);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_sam);
      STRUCT_MIRROR_ITEM_CTRL(local_event_counter);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(local_event_counter);
      STRUCT_MIRROR_ITEM_CTRL(gtb);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(gtb);
      STRUCT_MIRROR_ITEM_CTRL(sam);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sam);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_FCNS_DECL(TACQUILA_GTB);
};
#endif//USER_DEF_TACQUILA_GTB

#ifndef USER_DEF_TACQUILA_RPC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TACQUILA_RPC) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(tacq);
  STRUCT_MIRROR_TYPE(TACQUILA_GTB) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tacq);
  STRUCT_MIRROR_FCNS_DECL(TACQUILA_RPC);
};
#endif//USER_DEF_TACQUILA_RPC

#ifndef USER_DEF_unpack_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(unpack_event) : public STRUCT_MIRROR_BASE(unpack_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_event_base);
  STRUCT_MIRROR_ITEM_CTRL(rpc);
  STRUCT_MIRROR_TYPE(TACQUILA_RPC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(rpc);
  STRUCT_MIRROR_FCNS_DECL(unpack_event);
};
#endif//USER_DEF_unpack_event

#ifndef USER_DEF_unpack_sticky_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(unpack_sticky_event) : public STRUCT_MIRROR_BASE(unpack_sticky_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_sticky_event_base);
  STRUCT_MIRROR_FCNS_DECL(unpack_sticky_event);
};
#endif//USER_DEF_unpack_sticky_event

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_STRUCT *************************************************/


/** BEGIN_MIRROR_DECL_STRUCT *******************************************
 *
 * Mirror structure names.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TACQUILA_GTB);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TACQUILA_RPC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(unpack_event);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(unpack_sticky_event);

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_DECL_STRUCT ********************************************/


/** BEGIN_FUNCTION_CALL_PER_MEMBER *************************************
 *
 * Recursive function calls per member.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_fcncall_define.hh"

#ifndef USER_DEF_TACQUILA_GTB
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TACQUILA_GTB)::FCNCALL_NAME(TACQUILA_GTB)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12,DATA12,16> tac[2];
  {
  FCNCALL_SUBNAME("tac");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(tac__i0,,__i0,tac[__i0].FCNCALL_CALL(tac[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA12,DATA12,16> adc[2];
  {
  FCNCALL_SUBNAME("adc");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(adc__i0,,__i0,adc[__i0].FCNCALL_CALL(adc[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 count : 9;
      // uint32 dummy_9_11 : 3;
      // uint32 trigger_tacquila : 4;
      // uint32 trigger_sam : 4;
      // uint32 local_event_counter : 4;
      // uint32 gtb : 4;
      // uint32 sam : 4;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 count : 9;
    // uint32 dummy_9_11 : 3;
    // uint32 trigger_tacquila : 4;
    // uint32 trigger_sam : 4;
    // uint32 local_event_counter : 4;
    // uint32 gtb : 4;
    // uint32 sam : 4;
  // } ;
  // uint32 count : 9;
  {
  FCNCALL_SUBNAME("count");
  { FCNCALL_CALL_CTRL_WRAP(header.count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_9_11 : 3;
  {
  FCNCALL_SUBNAME("dummy_9_11");
  { FCNCALL_CALL_CTRL_WRAP(header.dummy_9_11,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.dummy_9_11)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_tacquila : 4;
  {
  FCNCALL_SUBNAME("trigger_tacquila");
  { FCNCALL_CALL_CTRL_WRAP(header.trigger_tacquila,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.trigger_tacquila)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_sam : 4;
  {
  FCNCALL_SUBNAME("trigger_sam");
  { FCNCALL_CALL_CTRL_WRAP(header.trigger_sam,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.trigger_sam)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 local_event_counter : 4;
  {
  FCNCALL_SUBNAME("local_event_counter");
  { FCNCALL_CALL_CTRL_WRAP(header.local_event_counter,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.local_event_counter)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 gtb : 4;
  {
  FCNCALL_SUBNAME("gtb");
  { FCNCALL_CALL_CTRL_WRAP(header.gtb,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.gtb)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 sam : 4;
  {
  FCNCALL_SUBNAME("sam");
  { FCNCALL_CALL_CTRL_WRAP(header.sam,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.sam)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TACQUILA_GTB

#ifndef USER_DEF_TACQUILA_RPC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TACQUILA_RPC)::FCNCALL_NAME(TACQUILA_RPC)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TACQUILA_GTB tacq;
  {
  FCNCALL_SUBNAME("tacq");
  { FCNCALL_CALL_CTRL_WRAP(tacq,tacq.FCNCALL_CALL(tacq)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TACQUILA_RPC

#ifndef USER_DEF_unpack_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(unpack_event)::FCNCALL_NAME(unpack_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_event_base,FCNCALL_CLASS_NAME(unpack_event_base)::FCNCALL_CALL_BASE());
  // TACQUILA_RPC rpc;
  {
  FCNCALL_SUBNAME("rpc");
  { FCNCALL_CALL_CTRL_WRAP(rpc,rpc.FCNCALL_CALL(rpc)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_unpack_event

#ifndef USER_DEF_unpack_sticky_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(unpack_sticky_event)::FCNCALL_NAME(unpack_sticky_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_sticky_event_base,FCNCALL_CLASS_NAME(unpack_sticky_event_base)::FCNCALL_CALL_BASE());
  FCNCALL_RET;
}
#endif//USER_DEF_unpack_sticky_event

#include "gen/default_fcncall_undef.hh"


/** END_FUNCTION_CALL_PER_MEMBER **************************************/


/** BEGIN_CORR_STRUCT **************************************************
 *
 * Correlation structure.
 *
 * Do not edit - automatically generated.
 */

// Corr struct for: TACQUILA_GTB
// raw_array_zero_suppress  .tac[2](DATA12)[16]
// raw_array_zero_suppress  .adc[2](DATA12)[16]
// uint32  .count
  // ---
// uint32  .dummy_9_11
  // ---
// uint32  .trigger_tacquila
  // ---
// uint32  .trigger_sam
  // ---
// uint32  .local_event_counter
  // ---
// uint32  .gtb
  // ---
// uint32  .sam
  // ---
// uint32  .u32
  // ---
// DATA12 .tac[2][16]
// DATA12 .adc[2][16]
// 
// size= 1  chunks= 64  mem=  64  line=128  total=8192
// size=16  chunks=  4  mem=  64  line=68  total=4352
// size=32  chunks=  2  mem=  64  line=66  total=4224
// size=64  chunks=  1  mem=  64  line=65  total=4160
// 
// corr structure: TACQUILA_GTB
  // DATA12 .tac[2][16]
  // DATA12 .adc[2][16]
// .TACQUILA_GTB/64/.tac/32/[2]/16/[16]
                 // .adc/32/[2]/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TACQUILA_GTB
// .TACQUILA_GTB// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TACQUILA_GTB
// .TACQUILA_GTB
// Corr struct for: TACQUILA_RPC
//  : public unpack_subevent_base
// ---
// TACQUILA_GTB  .tacq
  // raw_array_zero_suppress  .tac[2](DATA12)[16]
  // raw_array_zero_suppress  .adc[2](DATA12)[16]
  // uint32  .count
    // ---
  // uint32  .dummy_9_11
    // ---
  // uint32  .trigger_tacquila
    // ---
  // uint32  .trigger_sam
    // ---
  // uint32  .local_event_counter
    // ---
  // uint32  .gtb
    // ---
  // uint32  .sam
    // ---
  // uint32  .u32
    // ---
// DATA12 .tacq.tac[2][16]
// DATA12 .tacq.adc[2][16]
// 
// size= 1  chunks= 64  mem=  64  line=128  total=8192
// size=16  chunks=  4  mem=  64  line=68  total=4352
// size=32  chunks=  2  mem=  64  line=66  total=4224
// size=64  chunks=  1  mem=  64  line=65  total=4160
// 
// corr structure: TACQUILA_RPC
  // DATA12 .tacq.tac[2][16]
  // DATA12 .tacq.adc[2][16]
// .TACQUILA_RPC/64/.tacq/64/.tac/32/[2]/16/[16]
                          // .adc/32/[2]/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TACQUILA_RPC
// .TACQUILA_RPC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TACQUILA_RPC
// .TACQUILA_RPC
// Corr struct for: unpack_event
//  : public unpack_event_base
// ---
// TACQUILA_RPC  .rpc
  //  : public unpack_subevent_base
  // ---
  // TACQUILA_GTB  .tacq
    // raw_array_zero_suppress  .tac[2](DATA12)[16]
    // raw_array_zero_suppress  .adc[2](DATA12)[16]
    // uint32  .count
      // ---
    // uint32  .dummy_9_11
      // ---
    // uint32  .trigger_tacquila
      // ---
    // uint32  .trigger_sam
      // ---
    // uint32  .local_event_counter
      // ---
    // uint32  .gtb
      // ---
    // uint32  .sam
      // ---
    // uint32  .u32
      // ---
// DATA12 .rpc.tacq.tac[2][16]
// DATA12 .rpc.tacq.adc[2][16]
// 
// size= 1  chunks= 64  mem=  64  line=128  total=8192
// size=16  chunks=  4  mem=  64  line=68  total=4352
// size=32  chunks=  2  mem=  64  line=66  total=4224
// size=64  chunks=  1  mem=  64  line=65  total=4160
// 
// corr structure: unpack_event
  // DATA12 .rpc.tacq.tac[2][16]
  // DATA12 .rpc.tacq.adc[2][16]
// .unpack_event/64/.rpc/64/.tacq/64/.tac/32/[2]/16/[16]
                                  // .adc/32/[2]/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_event
// .unpack_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_event
// .unpack_event
// Corr struct for: unpack_sticky_event
//  : public unpack_sticky_event_base
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event

/** END_CORR_STRUCT ***************************************************/

