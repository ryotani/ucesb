
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

class raw_event_CS
{
  DATA12 E;
  DATA12 T;
} ;
class raw_event_CV
{
  DATA12 E;
  DATA12 T;
} ;
class raw_event_GFI
{
  DATA12 E;
} ;
class raw_event_N
{
  DATA12 E;
  DATA12 T;
} ;
class raw_event_NTF
{
  DATA12 E;
  DATA12 T;
} ;
class raw_event_POS
{
  DATA12 E;
  DATA12 T;
} ;
class raw_event_PSP
{
  DATA12 E;
} ;
class raw_event_ROL
{
  DATA12 E;
} ;
class raw_event_PIX
{
  DATA12 E;
  DATA12 T;
} ;
class raw_event_TFW
{
  DATA12 E;
  DATA12 T;
} ;
class raw_event_V
{
  DATA12 E;
  DATA12 T;
} ;
class raw_event_ZST
{
  DATA12 T;
} ;
class raw_event : public raw_event_base
{
  raw_array_zero_suppress<raw_event_CS,raw_event_CS,144> CS[1];
  raw_array_zero_suppress<raw_event_CV,raw_event_CV,12> CV[1];
  raw_array_zero_suppress<raw_event_GFI,raw_event_GFI,34> GFI[3];
  raw_array_zero_suppress_1<raw_event_N,raw_event_N[2],20,2> N[10];
  raw_array_zero_suppress_1<raw_event_NTF,raw_event_NTF[2],8,2> NTF;
  raw_event_POS POS[1][4];
  raw_event_PSP PSP[3][5];
  raw_event_ROL ROL[1][4];
  raw_event_PIX PIX[3][1];
  raw_array_zero_suppress_1<raw_event_TFW,raw_event_TFW[2],32,2> TFW;
  raw_array_zero_suppress_1<raw_event_V,raw_event_V[2],20,2> V[1];
  raw_event_ZST ZST[4][5];
} ;
class raw_sticky : public raw_sticky_base
{
  ;
} ;
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/


/** BEGIN_MIRROR_STRUCT ************************************************
 *
 * Mirror (1 to 1) structure.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

#ifndef USER_DEF_raw_event_CS
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_CS)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(E);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(E);
  STRUCT_MIRROR_ITEM_CTRL(T);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T);
  STRUCT_MIRROR_FCNS_DECL(raw_event_CS);
};
#endif//USER_DEF_raw_event_CS

#ifndef USER_DEF_raw_event_CV
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_CV)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(E);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(E);
  STRUCT_MIRROR_ITEM_CTRL(T);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T);
  STRUCT_MIRROR_FCNS_DECL(raw_event_CV);
};
#endif//USER_DEF_raw_event_CV

#ifndef USER_DEF_raw_event_GFI
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_GFI)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(E);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(E);
  STRUCT_MIRROR_FCNS_DECL(raw_event_GFI);
};
#endif//USER_DEF_raw_event_GFI

#ifndef USER_DEF_raw_event_N
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_N)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(E);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(E);
  STRUCT_MIRROR_ITEM_CTRL(T);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T);
  STRUCT_MIRROR_FCNS_DECL(raw_event_N);
};
#endif//USER_DEF_raw_event_N

#ifndef USER_DEF_raw_event_NTF
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_NTF)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(E);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(E);
  STRUCT_MIRROR_ITEM_CTRL(T);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T);
  STRUCT_MIRROR_FCNS_DECL(raw_event_NTF);
};
#endif//USER_DEF_raw_event_NTF

#ifndef USER_DEF_raw_event_POS
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_POS)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(E);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(E);
  STRUCT_MIRROR_ITEM_CTRL(T);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T);
  STRUCT_MIRROR_FCNS_DECL(raw_event_POS);
};
#endif//USER_DEF_raw_event_POS

#ifndef USER_DEF_raw_event_PSP
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_PSP)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(E);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(E);
  STRUCT_MIRROR_FCNS_DECL(raw_event_PSP);
};
#endif//USER_DEF_raw_event_PSP

#ifndef USER_DEF_raw_event_ROL
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_ROL)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(E);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(E);
  STRUCT_MIRROR_FCNS_DECL(raw_event_ROL);
};
#endif//USER_DEF_raw_event_ROL

#ifndef USER_DEF_raw_event_PIX
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_PIX)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(E);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(E);
  STRUCT_MIRROR_ITEM_CTRL(T);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T);
  STRUCT_MIRROR_FCNS_DECL(raw_event_PIX);
};
#endif//USER_DEF_raw_event_PIX

#ifndef USER_DEF_raw_event_TFW
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_TFW)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(E);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(E);
  STRUCT_MIRROR_ITEM_CTRL(T);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T);
  STRUCT_MIRROR_FCNS_DECL(raw_event_TFW);
};
#endif//USER_DEF_raw_event_TFW

#ifndef USER_DEF_raw_event_V
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_V)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(E);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(E);
  STRUCT_MIRROR_ITEM_CTRL(T);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T);
  STRUCT_MIRROR_FCNS_DECL(raw_event_V);
};
#endif//USER_DEF_raw_event_V

#ifndef USER_DEF_raw_event_ZST
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_ZST)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(T);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T);
  STRUCT_MIRROR_FCNS_DECL(raw_event_ZST);
};
#endif//USER_DEF_raw_event_ZST

#ifndef USER_DEF_raw_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event) : public STRUCT_MIRROR_BASE(raw_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(raw_event_base);
  STRUCT_MIRROR_ITEM_CTRL(CS);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(CS__i0,,1);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(raw_event_CS),STRUCT_MIRROR_TEMPLATE_ARG(raw_event_CS),144> STRUCT_MIRROR_NAME(CS[1]);
  STRUCT_MIRROR_ITEM_CTRL(CV);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(CV__i0,,1);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(raw_event_CV),STRUCT_MIRROR_TEMPLATE_ARG(raw_event_CV),12> STRUCT_MIRROR_NAME(CV[1]);
  STRUCT_MIRROR_ITEM_CTRL(GFI);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(GFI__i0,,3);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(raw_event_GFI),STRUCT_MIRROR_TEMPLATE_ARG(raw_event_GFI),34> STRUCT_MIRROR_NAME(GFI[3]);
  STRUCT_MIRROR_ITEM_CTRL(N);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(N__i0,,10);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress_1) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(raw_event_N),STRUCT_MIRROR_TEMPLATE_ARG_N(raw_event_N,[2]),20,2> STRUCT_MIRROR_NAME(N[10]);
  STRUCT_MIRROR_ITEM_CTRL(NTF);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress_1) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(raw_event_NTF),STRUCT_MIRROR_TEMPLATE_ARG_N(raw_event_NTF,[2]),8,2> STRUCT_MIRROR_NAME(NTF);
  STRUCT_MIRROR_ITEM_CTRL(POS);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(POS__i0,,1);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(POS__i0__i1,[1],4);
  STRUCT_MIRROR_TYPE(raw_event_POS) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(POS[1][4]);
  STRUCT_MIRROR_ITEM_CTRL(PSP);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(PSP__i0,,3);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(PSP__i0__i1,[3],5);
  STRUCT_MIRROR_TYPE(raw_event_PSP) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(PSP[3][5]);
  STRUCT_MIRROR_ITEM_CTRL(ROL);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(ROL__i0,,1);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(ROL__i0__i1,[1],4);
  STRUCT_MIRROR_TYPE(raw_event_ROL) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ROL[1][4]);
  STRUCT_MIRROR_ITEM_CTRL(PIX);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(PIX__i0,,3);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(PIX__i0__i1,[3],1);
  STRUCT_MIRROR_TYPE(raw_event_PIX) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(PIX[3][1]);
  STRUCT_MIRROR_ITEM_CTRL(TFW);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress_1) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(raw_event_TFW),STRUCT_MIRROR_TEMPLATE_ARG_N(raw_event_TFW,[2]),32,2> STRUCT_MIRROR_NAME(TFW);
  STRUCT_MIRROR_ITEM_CTRL(V);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(V__i0,,1);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress_1) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(raw_event_V),STRUCT_MIRROR_TEMPLATE_ARG_N(raw_event_V,[2]),20,2> STRUCT_MIRROR_NAME(V[1]);
  STRUCT_MIRROR_ITEM_CTRL(ZST);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(ZST__i0,,4);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(ZST__i0__i1,[4],5);
  STRUCT_MIRROR_TYPE(raw_event_ZST) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ZST[4][5]);
  STRUCT_MIRROR_FCNS_DECL(raw_event);
};
#endif//USER_DEF_raw_event

#ifndef USER_DEF_raw_sticky
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_sticky) : public STRUCT_MIRROR_BASE(raw_sticky_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(raw_sticky_base);
  STRUCT_MIRROR_FCNS_DECL(raw_sticky);
};
#endif//USER_DEF_raw_sticky

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_STRUCT *************************************************/


/** BEGIN_MIRROR_DECL_STRUCT *******************************************
 *
 * Mirror structure names.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_CS);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_CV);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_GFI);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_N);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_NTF);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_POS);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_PSP);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_ROL);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_PIX);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_TFW);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_V);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_ZST);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_sticky);

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_DECL_STRUCT ********************************************/


/** BEGIN_FUNCTION_CALL_PER_MEMBER *************************************
 *
 * Recursive function calls per member.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_fcncall_define.hh"

#ifndef USER_DEF_raw_event_CS
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_CS)::FCNCALL_NAME(raw_event_CS)
{
  FCNCALL_INIT;
  // DATA12 E;
  {
  FCNCALL_SUBNAME("E");
  { FCNCALL_CALL_CTRL_WRAP(E,E.FCNCALL_CALL(E)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12 T;
  {
  FCNCALL_SUBNAME("T");
  { FCNCALL_CALL_CTRL_WRAP(T,T.FCNCALL_CALL(T)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_CS

#ifndef USER_DEF_raw_event_CV
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_CV)::FCNCALL_NAME(raw_event_CV)
{
  FCNCALL_INIT;
  // DATA12 E;
  {
  FCNCALL_SUBNAME("E");
  { FCNCALL_CALL_CTRL_WRAP(E,E.FCNCALL_CALL(E)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12 T;
  {
  FCNCALL_SUBNAME("T");
  { FCNCALL_CALL_CTRL_WRAP(T,T.FCNCALL_CALL(T)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_CV

#ifndef USER_DEF_raw_event_GFI
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_GFI)::FCNCALL_NAME(raw_event_GFI)
{
  FCNCALL_INIT;
  // DATA12 E;
  {
  FCNCALL_SUBNAME("E");
  { FCNCALL_CALL_CTRL_WRAP(E,E.FCNCALL_CALL(E)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_GFI

#ifndef USER_DEF_raw_event_N
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_N)::FCNCALL_NAME(raw_event_N)
{
  FCNCALL_INIT;
  // DATA12 E;
  {
  FCNCALL_SUBNAME("E");
  { FCNCALL_CALL_CTRL_WRAP(E,E.FCNCALL_CALL(E)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12 T;
  {
  FCNCALL_SUBNAME("T");
  { FCNCALL_CALL_CTRL_WRAP(T,T.FCNCALL_CALL(T)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_N

#ifndef USER_DEF_raw_event_NTF
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_NTF)::FCNCALL_NAME(raw_event_NTF)
{
  FCNCALL_INIT;
  // DATA12 E;
  {
  FCNCALL_SUBNAME("E");
  { FCNCALL_CALL_CTRL_WRAP(E,E.FCNCALL_CALL(E)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12 T;
  {
  FCNCALL_SUBNAME("T");
  { FCNCALL_CALL_CTRL_WRAP(T,T.FCNCALL_CALL(T)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_NTF

#ifndef USER_DEF_raw_event_POS
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_POS)::FCNCALL_NAME(raw_event_POS)
{
  FCNCALL_INIT;
  // DATA12 E;
  {
  FCNCALL_SUBNAME("E");
  { FCNCALL_CALL_CTRL_WRAP(E,E.FCNCALL_CALL(E)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12 T;
  {
  FCNCALL_SUBNAME("T");
  { FCNCALL_CALL_CTRL_WRAP(T,T.FCNCALL_CALL(T)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_POS

#ifndef USER_DEF_raw_event_PSP
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_PSP)::FCNCALL_NAME(raw_event_PSP)
{
  FCNCALL_INIT;
  // DATA12 E;
  {
  FCNCALL_SUBNAME("E");
  { FCNCALL_CALL_CTRL_WRAP(E,E.FCNCALL_CALL(E)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_PSP

#ifndef USER_DEF_raw_event_ROL
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_ROL)::FCNCALL_NAME(raw_event_ROL)
{
  FCNCALL_INIT;
  // DATA12 E;
  {
  FCNCALL_SUBNAME("E");
  { FCNCALL_CALL_CTRL_WRAP(E,E.FCNCALL_CALL(E)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_ROL

#ifndef USER_DEF_raw_event_PIX
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_PIX)::FCNCALL_NAME(raw_event_PIX)
{
  FCNCALL_INIT;
  // DATA12 E;
  {
  FCNCALL_SUBNAME("E");
  { FCNCALL_CALL_CTRL_WRAP(E,E.FCNCALL_CALL(E)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12 T;
  {
  FCNCALL_SUBNAME("T");
  { FCNCALL_CALL_CTRL_WRAP(T,T.FCNCALL_CALL(T)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_PIX

#ifndef USER_DEF_raw_event_TFW
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_TFW)::FCNCALL_NAME(raw_event_TFW)
{
  FCNCALL_INIT;
  // DATA12 E;
  {
  FCNCALL_SUBNAME("E");
  { FCNCALL_CALL_CTRL_WRAP(E,E.FCNCALL_CALL(E)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12 T;
  {
  FCNCALL_SUBNAME("T");
  { FCNCALL_CALL_CTRL_WRAP(T,T.FCNCALL_CALL(T)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_TFW

#ifndef USER_DEF_raw_event_V
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_V)::FCNCALL_NAME(raw_event_V)
{
  FCNCALL_INIT;
  // DATA12 E;
  {
  FCNCALL_SUBNAME("E");
  { FCNCALL_CALL_CTRL_WRAP(E,E.FCNCALL_CALL(E)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA12 T;
  {
  FCNCALL_SUBNAME("T");
  { FCNCALL_CALL_CTRL_WRAP(T,T.FCNCALL_CALL(T)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_V

#ifndef USER_DEF_raw_event_ZST
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_ZST)::FCNCALL_NAME(raw_event_ZST)
{
  FCNCALL_INIT;
  // DATA12 T;
  {
  FCNCALL_SUBNAME("T");
  { FCNCALL_CALL_CTRL_WRAP(T,T.FCNCALL_CALL(T)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_ZST

#ifndef USER_DEF_raw_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event)::FCNCALL_NAME(raw_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(raw_event_base,FCNCALL_CLASS_NAME(raw_event_base)::FCNCALL_CALL_BASE());
  // raw_array_zero_suppress<raw_event_CS,raw_event_CS,144> CS[1];
  {
  FCNCALL_SUBNAME("CS");
  FCNCALL_FOR(__i0,1)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(CS__i0,,__i0,CS[__i0].FCNCALL_CALL(CS[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<raw_event_CV,raw_event_CV,12> CV[1];
  {
  FCNCALL_SUBNAME("CV");
  FCNCALL_FOR(__i0,1)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(CV__i0,,__i0,CV[__i0].FCNCALL_CALL(CV[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<raw_event_GFI,raw_event_GFI,34> GFI[3];
  {
  FCNCALL_SUBNAME("GFI");
  FCNCALL_FOR(__i0,3)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(GFI__i0,,__i0,GFI[__i0].FCNCALL_CALL(GFI[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress_1<raw_event_N,raw_event_N[2],20,2> N[10];
  {
  FCNCALL_SUBNAME("N");
  FCNCALL_FOR(__i0,10)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(N__i0,,__i0,N[__i0].FCNCALL_CALL(N[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress_1<raw_event_NTF,raw_event_NTF[2],8,2> NTF;
  {
  FCNCALL_SUBNAME("NTF");
  { FCNCALL_CALL_CTRL_WRAP(NTF,NTF.FCNCALL_CALL(NTF)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_POS POS[1][4];
  {
  FCNCALL_SUBNAME("POS");
  FCNCALL_FOR(__i0,1)
  {
    FCNCALL_SUBINDEX(__i0);
    FCNCALL_FOR(__i1,4)
    {
      FCNCALL_SUBINDEX(__i1);
      { FCNCALL_CALL_CTRL_WRAP_ARRAY(POS__i0__i1,[__i0],__i1,POS[__i0][__i1].FCNCALL_CALL(POS[__i0][__i1])); }
      FCNCALL_SUBINDEX_END(__i1);
    }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_PSP PSP[3][5];
  {
  FCNCALL_SUBNAME("PSP");
  FCNCALL_FOR(__i0,3)
  {
    FCNCALL_SUBINDEX(__i0);
    FCNCALL_FOR(__i1,5)
    {
      FCNCALL_SUBINDEX(__i1);
      { FCNCALL_CALL_CTRL_WRAP_ARRAY(PSP__i0__i1,[__i0],__i1,PSP[__i0][__i1].FCNCALL_CALL(PSP[__i0][__i1])); }
      FCNCALL_SUBINDEX_END(__i1);
    }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_ROL ROL[1][4];
  {
  FCNCALL_SUBNAME("ROL");
  FCNCALL_FOR(__i0,1)
  {
    FCNCALL_SUBINDEX(__i0);
    FCNCALL_FOR(__i1,4)
    {
      FCNCALL_SUBINDEX(__i1);
      { FCNCALL_CALL_CTRL_WRAP_ARRAY(ROL__i0__i1,[__i0],__i1,ROL[__i0][__i1].FCNCALL_CALL(ROL[__i0][__i1])); }
      FCNCALL_SUBINDEX_END(__i1);
    }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_PIX PIX[3][1];
  {
  FCNCALL_SUBNAME("PIX");
  FCNCALL_FOR(__i0,3)
  {
    FCNCALL_SUBINDEX(__i0);
    FCNCALL_FOR(__i1,1)
    {
      FCNCALL_SUBINDEX(__i1);
      { FCNCALL_CALL_CTRL_WRAP_ARRAY(PIX__i0__i1,[__i0],__i1,PIX[__i0][__i1].FCNCALL_CALL(PIX[__i0][__i1])); }
      FCNCALL_SUBINDEX_END(__i1);
    }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress_1<raw_event_TFW,raw_event_TFW[2],32,2> TFW;
  {
  FCNCALL_SUBNAME("TFW");
  { FCNCALL_CALL_CTRL_WRAP(TFW,TFW.FCNCALL_CALL(TFW)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress_1<raw_event_V,raw_event_V[2],20,2> V[1];
  {
  FCNCALL_SUBNAME("V");
  FCNCALL_FOR(__i0,1)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(V__i0,,__i0,V[__i0].FCNCALL_CALL(V[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_ZST ZST[4][5];
  {
  FCNCALL_SUBNAME("ZST");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    FCNCALL_FOR(__i1,5)
    {
      FCNCALL_SUBINDEX(__i1);
      { FCNCALL_CALL_CTRL_WRAP_ARRAY(ZST__i0__i1,[__i0],__i1,ZST[__i0][__i1].FCNCALL_CALL(ZST[__i0][__i1])); }
      FCNCALL_SUBINDEX_END(__i1);
    }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event

#ifndef USER_DEF_raw_sticky
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_sticky)::FCNCALL_NAME(raw_sticky)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(raw_sticky_base,FCNCALL_CLASS_NAME(raw_sticky_base)::FCNCALL_CALL_BASE());
  FCNCALL_RET;
}
#endif//USER_DEF_raw_sticky

#include "gen/default_fcncall_undef.hh"


/** END_FUNCTION_CALL_PER_MEMBER **************************************/


/** BEGIN_CORR_STRUCT **************************************************
 *
 * Correlation structure.
 *
 * Do not edit - automatically generated.
 */

// Corr struct for: raw_event_CS
// DATA12  .E
// DATA12  .T
// DATA12 .E
// DATA12 .T
// 
// size= 1  chunks=  2  mem=   2  line=4  total=8
// size= 2  chunks=  1  mem=   2  line=3  total=6
// 
// corr structure: raw_event_CS
  // DATA12 .E
  // DATA12 .T
// .raw_event_CS/2/.E
                // .T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_CS
  // DATA12 .T
// .raw_event_CS/1/.T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_CS
  // DATA12 .E
// .raw_event_CS/1/.E
// Corr struct for: raw_event_CV
// DATA12  .E
// DATA12  .T
// DATA12 .E
// DATA12 .T
// 
// size= 1  chunks=  2  mem=   2  line=4  total=8
// size= 2  chunks=  1  mem=   2  line=3  total=6
// 
// corr structure: raw_event_CV
  // DATA12 .E
  // DATA12 .T
// .raw_event_CV/2/.E
                // .T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_CV
  // DATA12 .T
// .raw_event_CV/1/.T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_CV
  // DATA12 .E
// .raw_event_CV/1/.E
// Corr struct for: raw_event_GFI
// DATA12  .E
// DATA12 .E
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_GFI
  // DATA12 .E
// .raw_event_GFI/1/.E// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_GFI
// .raw_event_GFI// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_GFI
  // DATA12 .E
// .raw_event_GFI/1/.E
// Corr struct for: raw_event_N
// DATA12  .E
// DATA12  .T
// DATA12 .E
// DATA12 .T
// 
// size= 1  chunks=  2  mem=   2  line=4  total=8
// size= 2  chunks=  1  mem=   2  line=3  total=6
// 
// corr structure: raw_event_N
  // DATA12 .E
  // DATA12 .T
// .raw_event_N/2/.E
               // .T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_N
  // DATA12 .T
// .raw_event_N/1/.T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_N
  // DATA12 .E
// .raw_event_N/1/.E
// Corr struct for: raw_event_NTF
// DATA12  .E
// DATA12  .T
// DATA12 .E
// DATA12 .T
// 
// size= 1  chunks=  2  mem=   2  line=4  total=8
// size= 2  chunks=  1  mem=   2  line=3  total=6
// 
// corr structure: raw_event_NTF
  // DATA12 .E
  // DATA12 .T
// .raw_event_NTF/2/.E
                 // .T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_NTF
  // DATA12 .T
// .raw_event_NTF/1/.T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_NTF
  // DATA12 .E
// .raw_event_NTF/1/.E
// Corr struct for: raw_event_POS
// DATA12  .E
// DATA12  .T
// DATA12 .E
// DATA12 .T
// 
// size= 1  chunks=  2  mem=   2  line=4  total=8
// size= 2  chunks=  1  mem=   2  line=3  total=6
// 
// corr structure: raw_event_POS
  // DATA12 .E
  // DATA12 .T
// .raw_event_POS/2/.E
                 // .T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_POS
  // DATA12 .T
// .raw_event_POS/1/.T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_POS
  // DATA12 .E
// .raw_event_POS/1/.E
// Corr struct for: raw_event_PSP
// DATA12  .E
// DATA12 .E
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_PSP
  // DATA12 .E
// .raw_event_PSP/1/.E// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_PSP
// .raw_event_PSP// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_PSP
  // DATA12 .E
// .raw_event_PSP/1/.E
// Corr struct for: raw_event_ROL
// DATA12  .E
// DATA12 .E
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_ROL
  // DATA12 .E
// .raw_event_ROL/1/.E// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_ROL
// .raw_event_ROL// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_ROL
  // DATA12 .E
// .raw_event_ROL/1/.E
// Corr struct for: raw_event_PIX
// DATA12  .E
// DATA12  .T
// DATA12 .E
// DATA12 .T
// 
// size= 1  chunks=  2  mem=   2  line=4  total=8
// size= 2  chunks=  1  mem=   2  line=3  total=6
// 
// corr structure: raw_event_PIX
  // DATA12 .E
  // DATA12 .T
// .raw_event_PIX/2/.E
                 // .T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_PIX
  // DATA12 .T
// .raw_event_PIX/1/.T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_PIX
  // DATA12 .E
// .raw_event_PIX/1/.E
// Corr struct for: raw_event_TFW
// DATA12  .E
// DATA12  .T
// DATA12 .E
// DATA12 .T
// 
// size= 1  chunks=  2  mem=   2  line=4  total=8
// size= 2  chunks=  1  mem=   2  line=3  total=6
// 
// corr structure: raw_event_TFW
  // DATA12 .E
  // DATA12 .T
// .raw_event_TFW/2/.E
                 // .T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TFW
  // DATA12 .T
// .raw_event_TFW/1/.T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TFW
  // DATA12 .E
// .raw_event_TFW/1/.E
// Corr struct for: raw_event_V
// DATA12  .E
// DATA12  .T
// DATA12 .E
// DATA12 .T
// 
// size= 1  chunks=  2  mem=   2  line=4  total=8
// size= 2  chunks=  1  mem=   2  line=3  total=6
// 
// corr structure: raw_event_V
  // DATA12 .E
  // DATA12 .T
// .raw_event_V/2/.E
               // .T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_V
  // DATA12 .T
// .raw_event_V/1/.T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_V
  // DATA12 .E
// .raw_event_V/1/.E
// Corr struct for: raw_event_ZST
// DATA12  .T
// DATA12 .T
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_ZST
  // DATA12 .T
// .raw_event_ZST/1/.T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_ZST
  // DATA12 .T
// .raw_event_ZST/1/.T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_ZST
// .raw_event_ZST
// Corr struct for: raw_event
//  : public raw_event_base
// ---
// raw_array_zero_suppress  .CS[1](raw_event_CS)[144]
  // DATA12  .E
  // DATA12  .T
// raw_array_zero_suppress  .CV[1](raw_event_CV)[12]
  // DATA12  .E
  // DATA12  .T
// raw_array_zero_suppress  .GFI[3](raw_event_GFI)[34]
  // DATA12  .E
// raw_array_zero_suppress_1  .N[10](raw_event_N)[20][2]
  // DATA12  .E
  // DATA12  .T
// raw_array_zero_suppress_1  .NTF(raw_event_NTF)[8][2]
  // DATA12  .E
  // DATA12  .T
// raw_event_POS  .POS[1][4]
  // DATA12  .E
  // DATA12  .T
// raw_event_PSP  .PSP[3][5]
  // DATA12  .E
// raw_event_ROL  .ROL[1][4]
  // DATA12  .E
// raw_event_PIX  .PIX[3][1]
  // DATA12  .E
  // DATA12  .T
// raw_array_zero_suppress_1  .TFW(raw_event_TFW)[32][2]
  // DATA12  .E
  // DATA12  .T
// raw_array_zero_suppress_1  .V[1](raw_event_V)[20][2]
  // DATA12  .E
  // DATA12  .T
// raw_event_ZST  .ZST[4][5]
  // DATA12  .T
// DATA12 .CS[1][144].E
// DATA12 .CS[1][144].T
// DATA12 .CV[1][12].E
// DATA12 .CV[1][12].T
// DATA12 .GFI[3][34].E
// DATA12 .N[10][20][2].E
// DATA12 .N[10][20][2].T
// DATA12 .NTF[8][2].E
// DATA12 .NTF[8][2].T
// DATA12 .POS[1][4].E
// DATA12 .POS[1][4].T
// DATA12 .PSP[3][5].E
// DATA12 .ROL[1][4].E
// DATA12 .PIX[3][1].E
// DATA12 .PIX[3][1].T
// DATA12 .TFW[32][2].E
// DATA12 .TFW[32][2].T
// DATA12 .V[1][20][2].E
// DATA12 .V[1][20][2].T
// DATA12 .ZST[4][5].T
// 
// size= 1  chunks=1507  mem=1507  line=3014  total=4542098
// size= 2  chunks=824  mem=1648  line=2472  total=3725304
// size= 4  chunks=561  mem=2244  line=2805  total=4227135
// size= 5  chunks=533  mem=2665  line=3198  total=4819386
// size= 6  chunks=531  mem=3186  line=3717  total=5601519
// size= 8  chunks=528  mem=4224  line=4752  total=7161264
// size=15  chunks=526  mem=7890  line=8416  total=12682912
// size=20  chunks=523  mem=10460  line=10983  total=16551381
// size=24  chunks=512  mem=12288  line=12800  total=19289600
// size=32  chunks=505  mem=16160  line=16665  total=25114155
// size=34  chunks=406  mem=13804  line=14210  total=21414470
// size=80  chunks=197  mem=15760  line=15957  total=24047199
// size=102  chunks=195  mem=19890  line=20085  total=30268095
// size=128  chunks=164  mem=20992  line=21156  total=31882092
// size=288  chunks= 21  mem=6048  line=6069  total=9145983
// size=800  chunks= 12  mem=9600  line=9612  total=14485284
// size=1507  chunks=  1  mem=1507  line=1508  total=2272556
// 
// corr structure: raw_event
  // DATA12 .CS[1][144].E
  // DATA12 .CS[1][144].T
  // DATA12 .CV[1][12].E
  // DATA12 .CV[1][12].T
  // DATA12 .GFI[3][34].E
  // DATA12 .N[10][20][2].E
  // DATA12 .N[10][20][2].T
  // DATA12 .NTF[8][2].E
  // DATA12 .NTF[8][2].T
  // DATA12 .POS[1][4].E
  // DATA12 .POS[1][4].T
  // DATA12 .PSP[3][5].E
  // DATA12 .ROL[1][4].E
  // DATA12 .PIX[3][1].E
  // DATA12 .PIX[3][1].T
  // DATA12 .TFW[32][2].E
  // DATA12 .TFW[32][2].T
  // DATA12 .V[1][20][2].E
  // DATA12 .V[1][20][2].T
  // DATA12 .ZST[4][5].T
// .raw_event/1507/.CS/288/[1]/288/[144]/2/.E
                                        // .T
                // .CV/24/[1]/24/[12]/2/.E
                                     // .T
                // .GFI/102/[3]/34/[34]/1/.E
                // .N/800/[10]/80/[20]/4/[2]/2/.E
                                            // .T
                // .NTF/32/[8]/4/[2]/2/.E
                                    // .T
                // .POS/8/[1]/8/[4]/2/.E
                                   // .T
                // .PSP/15/[3]/5/[5]/1/.E
                // .ROL/4/[1]/4/[4]/1/.E
                // .PIX/6/[3]/2/[1]/2/.E
                                   // .T
                // .TFW/128/[32]/4/[2]/2/.E
                                      // .T
                // .V/80/[1]/80/[20]/4/[2]/2/.E
                                          // .T
                // .ZST/20/[4]/5/[5]/1/.T// 
// size= 1  chunks=703  mem= 703  line=1406  total=988418
// size= 2  chunks=443  mem= 886  line=1329  total=934287
// size= 3  chunks=441  mem=1323  line=1764  total=1240092
// size= 4  chunks=438  mem=1752  line=2190  total=1539570
// size= 5  chunks=422  mem=2110  line=2532  total=1779996
// size=12  chunks=411  mem=4932  line=5343  total=3756129
// size=16  chunks=404  mem=6464  line=6868  total=4828204
// size=20  chunks=401  mem=8020  line=8421  total=5919963
// size=40  chunks=192  mem=7680  line=7872  total=5534016
// size=64  chunks=161  mem=10304  line=10465  total=7356895
// size=144  chunks= 18  mem=2592  line=2610  total=1834830
// size=400  chunks=  9  mem=3600  line=3609  total=2537127
// size=703  chunks=  1  mem= 703  line=704  total=494912
// 
// corr structure: raw_event
  // DATA12 .CS[1][144].T
  // DATA12 .CV[1][12].T
  // DATA12 .N[10][20][2].T
  // DATA12 .NTF[8][2].T
  // DATA12 .POS[1][4].T
  // DATA12 .PIX[3][1].T
  // DATA12 .TFW[32][2].T
  // DATA12 .V[1][20][2].T
  // DATA12 .ZST[4][5].T
// .raw_event/703/.CS/144/[1]/144/[144]/1/.T
               // .CV/12/[1]/12/[12]/1/.T
               // .N/400/[10]/40/[20]/2/[2]/1/.T
               // .NTF/16/[8]/2/[2]/1/.T
               // .POS/4/[1]/4/[4]/1/.T
               // .PIX/3/[3]/1/[1]/1/.T
               // .TFW/64/[32]/2/[2]/1/.T
               // .V/40/[1]/40/[20]/2/[2]/1/.T
               // .ZST/20/[4]/5/[5]/1/.T// 
// size= 1  chunks=804  mem= 804  line=1608  total=1292832
// size= 2  chunks=544  mem=1088  line=1632  total=1312128
// size= 3  chunks=542  mem=1626  line=2168  total=1743072
// size= 4  chunks=536  mem=2144  line=2680  total=2154720
// size= 5  chunks=524  mem=2620  line=3144  total=2527776
// size=12  chunks=513  mem=6156  line=6669  total=5361876
// size=15  chunks=511  mem=7665  line=8176  total=6573504
// size=16  chunks=504  mem=8064  line=8568  total=6888672
// size=34  chunks=405  mem=13770  line=14175  total=11396700
// size=40  chunks=196  mem=7840  line=8036  total=6460944
// size=64  chunks=165  mem=10560  line=10725  total=8622900
// size=102  chunks=163  mem=16626  line=16789  total=13498356
// size=144  chunks= 20  mem=2880  line=2900  total=2331600
// size=400  chunks= 11  mem=4400  line=4411  total=3546444
// size=804  chunks=  1  mem= 804  line=805  total=647220
// 
// corr structure: raw_event
  // DATA12 .CS[1][144].E
  // DATA12 .CV[1][12].E
  // DATA12 .GFI[3][34].E
  // DATA12 .N[10][20][2].E
  // DATA12 .NTF[8][2].E
  // DATA12 .POS[1][4].E
  // DATA12 .PSP[3][5].E
  // DATA12 .ROL[1][4].E
  // DATA12 .PIX[3][1].E
  // DATA12 .TFW[32][2].E
  // DATA12 .V[1][20][2].E
// .raw_event/804/.CS/144/[1]/144/[144]/1/.E
               // .CV/12/[1]/12/[12]/1/.E
               // .GFI/102/[3]/34/[34]/1/.E
               // .N/400/[10]/40/[20]/2/[2]/1/.E
               // .NTF/16/[8]/2/[2]/1/.E
               // .POS/4/[1]/4/[4]/1/.E
               // .PSP/15/[3]/5/[5]/1/.E
               // .ROL/4/[1]/4/[4]/1/.E
               // .PIX/3/[3]/1/[1]/1/.E
               // .TFW/64/[32]/2/[2]/1/.E
               // .V/40/[1]/40/[20]/2/[2]/1/.E
// Corr struct for: raw_sticky
//  : public raw_sticky_base
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky

/** END_CORR_STRUCT ***************************************************/

