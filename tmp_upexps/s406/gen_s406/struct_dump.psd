
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

class CAMAC_LECROY_2277_1CH_HACK
{
  raw_list_ii_zero_suppress<DATA16,DATA16,16> data;
} ;
class CAMAC_LECROY_4434
{
  raw_array_zero_suppress<DATA24,DATA24,32> data;
} ;
class CAMAC_PHILLIPS_7164
{
  raw_array_zero_suppress<DATA12,DATA12,16> data;
} ;
class CAMAC_SILENA_4418
{
  raw_array_zero_suppress<DATA12_OVERFLOW,DATA12_OVERFLOW,8> data;
} ;
class CROS3_REWRITE
{
  raw_array_zero_suppress<WIRE_START_END,WIRE_START_END,32768> data;
  union 
  {
    struct 
    {
      uint32 data_size : 16;
      uint32 threshold_curve : 1;
      uint32 leading_edge : 1;
      uint32 data : 1;
      uint32 dummy_19 : 1;
      uint32 trigger_time : 4;
      uint32 ccb_id : 4;
      uint32 event_counter : 4;
    } ;
    uint32 u32;
  } h1;
  union 
  {
    struct 
    {
      uint32 read_out_mode : 2;
      uint32 dummy_2_3 : 2;
      uint32 pulser_enabled : 1;
      uint32 dummy_5_7 : 3;
      uint32 statistics : 3;
      uint32 both_edges : 1;
      uint32 slices : 8;
      uint32 scale : 2;
      uint32 dummy_22_30 : 9;
      uint32 odd_length16 : 1;
    } ;
    uint32 u32;
  } h2;
  union 
  {
    struct 
    {
      uint32 read_out_mode : 2;
      uint32 dummy_2_3 : 2;
      uint32 pulser_enabled : 1;
      uint32 dummy_5_7 : 3;
      uint32 statistics : 3;
      uint32 both_edges : 1;
      uint32 threshold_start : 8;
      uint32 threshold_step : 4;
      uint32 boards : 5;
      uint32 dummy_29_31 : 3;
    } ;
    uint32 u32;
  } trc_h2;
} ;
class DUMMY_WORD
{
  uint32 dummy_word;
} ;
class FASTBUS_LECROY_1875
{
  raw_array_zero_suppress<DATA12_RANGE,DATA12_RANGE,64> data;
} ;
class FASTBUS_LECROY_1885
{
  raw_array_zero_suppress<DATA12_RANGE,DATA12_RANGE,96> data;
} ;
class LAND_STD_VME
{
  union 
  {
    struct 
    {
      uint32 fail_general : 1;
      uint32 fail_data_corrupt : 1;
      uint32 fail_data_missing : 1;
      uint32 fail_data_too_much : 1;
      uint32 fail_event_counter_mismatch : 1;
      uint32 fail_readout_error_driver : 1;
      uint32 fail_unexpected_trigger : 1;
      uint32 fail_firmware_mismatch : 1;
      uint32 dummy_8_21 : 14;
      uint32 has_multi_trlo_ii_counter0 : 1;
      uint32 has_clock_counter_stamp : 1;
      uint32 has_continous_event_counter : 1;
      uint32 has_update_qdc_iped_value : 1;
      uint32 spurious_start_before_tcal : 1;
      uint32 has_no_zero_suppression : 1;
      uint32 has_multi_adctdc_counter0 : 1;
      uint32 has_multi_scaler_counter0 : 1;
      uint32 has_multi_event : 1;
      uint32 has_time_stamp : 1;
    } ;
    uint32 u32;
  } failure;
  uint32 continous_event_counter;
  uint32 time_stamp;
  uint32 clock_counter_stamp;
  uint32 iped;
  uint32 multi_events;
  uint32 multi_trlo_ii_counter0;
  uint32 multi_scaler_counter0;
  uint32 multi_adctdc_counter0;
} ;
class NTP64_TIME
{
  uint32 sec;
  uint32 frac;
} ;
class NTP_MESSAGE
{
  union 
  {
    struct 
    {
      uint32 word_count : 16;
      uint32 quick_burst : 1;
      uint32 dummy_17_23 : 7;
      uint32 id : 8;
    } ;
    uint32 u32;
  } header;
  uint32 server_id;
  union 
  {
    struct 
    {
      uint32 precision : 8;
      uint32 poll : 8;
      uint32 stratum : 4;
      uint32 dummy_20_23 : 4;
      uint32 mode : 3;
      uint32 version : 3;
      uint32 leap : 2;
    } ;
    uint32 u32;
  } sspp;
  union 
  {
    struct 
    {
      uint32 frac : 16;
      uint32 sec : 16;
    } ;
    uint32 u32;
  } root_dly;
  union 
  {
    struct 
    {
      uint32 frac : 16;
      uint32 sec : 16;
    } ;
    uint32 u32;
  } root_disp;
  uint32 refid;
  NTP64_TIME orig2time;
  NTP64_TIME tmit2time;
  NTP64_TIME rec2time;
  NTP64_TIME rx2time;
  NTP64_TIME reftime;
  NTP64_TIME origtime;
  NTP64_TIME rectime;
  NTP64_TIME tmittime;
  NTP64_TIME rxtime;
} ;
class RANDOM_TCAL_TSTAMP_CLOCK
{
  uint32 soft_latches;
  uint32 hard_latches;
  uint32 clock_ticks;
  NTP64_TIME before;
  NTP64_TIME after;
} ;
class RANDOM_TCAL
{
  union 
  {
    struct 
    {
      uint32 word_count : 8;
      uint32 pulses : 4;
      uint32 clock_bits : 6;
      uint32 has_tstamp1 : 1;
      uint32 has_tstamp2 : 1;
      uint32 dummy_20_23 : 4;
      uint32 id : 8;
    } ;
    uint32 u32;
  } header;
  RANDOM_TCAL_TSTAMP_CLOCK tstamp1;
  RANDOM_TCAL_TSTAMP_CLOCK tstamp2;
} ;
class SIDEREM_BLOCK
{
  raw_array_zero_suppress<DATA12,DATA12,512> data[4];
  union 
  {
    struct 
    {
      uint32 count : 12;
      uint32 local_event_counter : 4;
      uint32 local_trigger : 4;
      uint32 siderem : 4;
      uint32 gtb : 4;
      uint32 sam : 4;
    } ;
    uint32 u32;
  } header;
} ;
class SOFT_SCALER32
{
  raw_array_zero_suppress<DATA32,DATA32,32> data;
} ;
class TACQUILA_DATA
{
  raw_array_zero_suppress<DATA12,DATA12,17> tac[30];
  raw_array_zero_suppress<DATA12,DATA12,17> adc[30];
  raw_array_zero_suppress<DATA12,DATA12,17> clk[30];
  union 
  {
    struct 
    {
      uint32 count : 9;
      uint32 dummy1 : 3;
      uint32 trigger_tac : 4;
      uint32 trigger_sam : 4;
      uint32 lec : 4;
      uint32 gtb : 4;
      uint32 sam : 4;
    } ;
    uint32 u32;
  } header;
} ;
class TRLO_SAMPLER
{
  raw_list_ii_zero_suppress<DATA32,DATA32,512> stamps;
  union 
  {
    struct 
    {
      uint32 count : 10;
      uint32 dummy_10_23 : 14;
      uint32 id : 8;
    } ;
    uint32 u32;
  } header;
} ;
class VME_CAEN_V1190_SUBTDC
{
  union 
  {
    struct 
    {
      uint32 bunch_id : 12;
      uint32 event_id : 12;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } header;
  union 
  {
    struct 
    {
      uint32 flags : 15;
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } error_flags;
  union 
  {
    struct 
    {
      uint32 word_count : 12;
      uint32 event_id : 12;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trailer;
} ;
class VME_CAEN_V1190
{
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 event_number : 22;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } header;
  VME_CAEN_V1190_SUBTDC tdc[4];
  union 
  {
    struct 
    {
      uint32 time_tag : 27;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trigger;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 word_count : 15;
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1;
      uint32 buffer_overflow : 1;
      uint32 trigger_lost : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trailer;
} ;
class VME_CAEN_V1190_SHORT_SUBTDC
{
  ;
} ;
class VME_CAEN_V1190_SHORT_SUBTDC_ERROR
{
  union 
  {
    struct 
    {
      uint32 flags : 15;
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } error_flags;
} ;
class VME_CAEN_V1190_SHORT
{
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 event_number : 22;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } header;
  VME_CAEN_V1190_SHORT_SUBTDC tdc[4];
  VME_CAEN_V1190_SHORT_SUBTDC_ERROR err[4];
  union 
  {
    struct 
    {
      uint32 time_tag : 27;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trigger;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 word_count : 15;
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1;
      uint32 buffer_overflow : 1;
      uint32 trigger_lost : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trailer;
} ;
class VME_CAEN_V1290_SUBTDC
{
  union 
  {
    struct 
    {
      uint32 bunch_id : 12;
      uint32 event_id : 12;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } header;
  union 
  {
    struct 
    {
      uint32 flags : 15;
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } error_flags;
  union 
  {
    struct 
    {
      uint32 word_count : 12;
      uint32 event_id : 12;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trailer;
} ;
class VME_CAEN_V1290
{
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 event_number : 22;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } header;
  VME_CAEN_V1290_SUBTDC tdc[4];
  union 
  {
    struct 
    {
      uint32 time_tag : 27;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trigger;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 word_count : 15;
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1;
      uint32 buffer_overflow : 1;
      uint32 trigger_lost : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trailer;
} ;
class VME_CAEN_V1290_SHORT_SUBTDC
{
  ;
} ;
class VME_CAEN_V1290_SHORT_SUBTDC_ERROR
{
  union 
  {
    struct 
    {
      uint32 flags : 15;
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } error_flags;
} ;
class VME_CAEN_V1290_SHORT
{
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 event_number : 22;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } header;
  VME_CAEN_V1290_SHORT_SUBTDC tdc[4];
  VME_CAEN_V1290_SHORT_SUBTDC_ERROR err[4];
  union 
  {
    struct 
    {
      uint32 time_tag : 27;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trigger;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 word_count : 15;
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1;
      uint32 buffer_overflow : 1;
      uint32 trigger_lost : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trailer;
} ;
class VME_CAEN_V775
{
  raw_array_zero_suppress<DATA12_OVERFLOW,DATA12_OVERFLOW,32> data;
  union 
  {
    struct 
    {
      uint32 event_number : 24;
      uint32 unnamed_24_26 : 3;
      uint32 geom : 5;
    } ;
    uint32 u32;
  } eob;
} ;
class VME_CAEN_V830
{
  raw_array_zero_suppress<DATA32,DATA32,32> data;
  union 
  {
    struct 
    {
      uint32 event_number : 16;
      uint32 ts : 2;
      uint32 count : 6;
      uint32 dummy_24_25 : 2;
      uint32 unnamed_26_26 : 1;
      uint32 geom : 5;
    } ;
    uint32 u32;
  } header;
} ;
class VME_MESYTEC_MADC32
{
  raw_array_zero_suppress<DATA14_OVERFLOW,DATA14_OVERFLOW,32> data;
  union 
  {
    struct 
    {
      uint32 counter : 30;
      uint32 unnamed_30_31 : 2;
    } ;
    uint32 u32;
  } end_of_event;
} ;
class VME_MESYTEC_MDPP16
{
  raw_array_multi_zero_suppress<DATA16_OVERFLOW,DATA16_OVERFLOW,34,100> data;
  union 
  {
    struct 
    {
      uint32 counter : 30;
      uint32 unnamed_30_31 : 2;
    } ;
    uint32 u32;
  } end_of_event;
} ;
class VME_VUPROM_V35
{
  raw_array_zero_suppress<DATA12,DATA12,192> data;
} ;
class CB_VME_LEFT : public unpack_subevent_base
{
  VME_VUPROM_V35 tdc;
  VME_MESYTEC_MADC32 adc[4];
  VME_MESYTEC_MADC32 madc0_psp;
  LAND_STD_VME vme;
} ;
class CB_VME_RIGHT : public unpack_subevent_base
{
  VME_VUPROM_V35 tdc;
  VME_MESYTEC_MADC32 adc[4];
  LAND_STD_VME vme;
} ;
class CROS3_REWRITE_SUBEVENT : public unpack_subevent_base
{
  CROS3_REWRITE ccb[2];
} ;
class CROS3_SUBEVENT : public unpack_subevent_base
{
  EXT_CROS3 ccb[2];
} ;
class DUMMY : public unpack_subevent_base
{
  DUMMY_WORD d;
} ;
class LAND_CAMAC_CONVERTER : public unpack_subevent_base
{
  uint16 tpat;
  uint16 tprev;
  uint16 tnext;
  uint16 tprev2;
} ;
class LAND_CAMAC_PILEUP : public unpack_subevent_base
{
  CAMAC_LECROY_2277_1CH_HACK tdc;
  CAMAC_LECROY_2277_1CH_HACK tcal;
} ;
class LAND_CAMAC_SCALER : public unpack_subevent_base
{
  uint32 timestamp;
  union 
  {
    struct 
    {
      uint32 unnamed_0_31 : 32;
    } ;
    uint32 u32;
  } endianess;
  CAMAC_LECROY_4434 scaler0;
  CAMAC_LECROY_4434 scaler2;
  CAMAC_LECROY_4434 scaler1;
  SOFT_SCALER32 scaler3;
} ;
class LAND_CAMAC_START_STOP_STAMP : public unpack_subevent_base
{
  uint32 timestamp;
  union 
  {
    struct 
    {
      uint32 unnamed_0_31 : 32;
    } ;
    uint32 u32;
  } endianess;
} ;
class LAND_CAMAC_TCAL_INFO : public unpack_subevent_base
{
  uint32 info;
  RANDOM_TCAL rtcal;
  NTP_MESSAGE ntp;
} ;
class MASTER_VME : public unpack_subevent_base
{
  TRLO_SAMPLER sampler_pos;
  TRLO_SAMPLER sampler_cb_sum;
  LAND_STD_VME vme;
} ;
class SIDEREM01_VME : public unpack_subevent_base
{
  EXT_SST sst[8];
  union 
  {
    struct 
    {
      uint32 unnamed_0_31 : 32;
    } ;
    uint32 u32;
  } error_marker;
  union 
  {
    struct 
    {
      uint32 unnamed_0_31 : 32;
    } ;
    uint32 u32;
  } error_marker2;
} ;
class TACQUILA_LAND_SUBEVENT : public unpack_subevent_base
{
  TACQUILA_DATA data_sam5_gtb0;
  TACQUILA_DATA data_sam6_gtb1;
  TACQUILA_DATA data_sam6_gtb0;
} ;
class TACQUILA_NEULAND_SUBEVENT : public unpack_subevent_base
{
  TACQUILA_DATA data_sam7_gtb0;
  TACQUILA_DATA data_sam7_gtb1;
} ;
class VME_CRATE1 : public unpack_subevent_base
{
  VME_CAEN_V775 qdc792POS_ROLU;
  VME_CAEN_V775 qdc792PIXEL;
  VME_CAEN_V775 tdc775POS_ROLU;
  VME_CAEN_V830 scaler;
  LAND_STD_VME vme;
} ;
class VME_CRATE2 : public unpack_subevent_base
{
  VME_CAEN_V830 scaler;
  VME_CAEN_V775 qdc792TFW1;
  VME_CAEN_V775 tdc775TFW1;
  VME_CAEN_V775 qdc792TFW2;
  VME_CAEN_V775 tdc775TFW2;
  VME_CAEN_V775 tdc775NTF;
  VME_CAEN_V775 qdc792NTF;
  VME_CAEN_V775 qdc792GFI1;
  VME_CAEN_V775 qdc792GFI2;
  VME_CAEN_V775 qdc792GFI3;
  VME_CAEN_V775 qdc792MFITEST;
  LAND_STD_VME vme;
} ;
class unpack_event : public unpack_event_base
{
  LAND_CAMAC_PILEUP pileup;
  SIDEREM01_VME sst;
  CROS3_SUBEVENT cros3;
  CROS3_REWRITE_SUBEVENT cros3_rewrite;
  LAND_CAMAC_CONVERTER camac;
  DUMMY acq;
  VME_CRATE1 vme1;
  VME_CRATE2 vme2;
  CB_VME_RIGHT vme_cbr;
  CB_VME_LEFT vme_cbl;
  MASTER_VME vme_master;
  LAND_CAMAC_TCAL_INFO camac_tcal_info;
  LAND_CAMAC_SCALER camac_scalers;
  TACQUILA_LAND_SUBEVENT tacquila;
  TACQUILA_NEULAND_SUBEVENT neuland;
} ;
class unpack_sticky_event : public unpack_sticky_event_base
{
  ;
} ;
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/


/** BEGIN_MIRROR_STRUCT ************************************************
 *
 * Mirror (1 to 1) structure.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

#ifndef USER_DEF_CAMAC_LECROY_2277_1CH_HACK
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CAMAC_LECROY_2277_1CH_HACK)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),16> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(CAMAC_LECROY_2277_1CH_HACK);
};
#endif//USER_DEF_CAMAC_LECROY_2277_1CH_HACK

#ifndef USER_DEF_CAMAC_LECROY_4434
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CAMAC_LECROY_4434)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA24),STRUCT_MIRROR_TEMPLATE_ARG(DATA24),32> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(CAMAC_LECROY_4434);
};
#endif//USER_DEF_CAMAC_LECROY_4434

#ifndef USER_DEF_CAMAC_PHILLIPS_7164
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CAMAC_PHILLIPS_7164)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),16> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(CAMAC_PHILLIPS_7164);
};
#endif//USER_DEF_CAMAC_PHILLIPS_7164

#ifndef USER_DEF_CAMAC_SILENA_4418
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CAMAC_SILENA_4418)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12_OVERFLOW),STRUCT_MIRROR_TEMPLATE_ARG(DATA12_OVERFLOW),8> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(CAMAC_SILENA_4418);
};
#endif//USER_DEF_CAMAC_SILENA_4418

#ifndef USER_DEF_CROS3_REWRITE
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CROS3_REWRITE)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(WIRE_START_END),STRUCT_MIRROR_TEMPLATE_ARG(WIRE_START_END),32768> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(data_size);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data_size);
      STRUCT_MIRROR_ITEM_CTRL(threshold_curve);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(threshold_curve);
      STRUCT_MIRROR_ITEM_CTRL(leading_edge);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(leading_edge);
      STRUCT_MIRROR_ITEM_CTRL(data);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
      STRUCT_MIRROR_ITEM_CTRL(dummy_19);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_19);
      STRUCT_MIRROR_ITEM_CTRL(trigger_time);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_time);
      STRUCT_MIRROR_ITEM_CTRL(ccb_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ccb_id);
      STRUCT_MIRROR_ITEM_CTRL(event_counter);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_counter);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(h1);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(read_out_mode);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(read_out_mode);
      STRUCT_MIRROR_ITEM_CTRL(dummy_2_3);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_2_3);
      STRUCT_MIRROR_ITEM_CTRL(pulser_enabled);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(pulser_enabled);
      STRUCT_MIRROR_ITEM_CTRL(dummy_5_7);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_5_7);
      STRUCT_MIRROR_ITEM_CTRL(statistics);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(statistics);
      STRUCT_MIRROR_ITEM_CTRL(both_edges);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(both_edges);
      STRUCT_MIRROR_ITEM_CTRL(slices);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(slices);
      STRUCT_MIRROR_ITEM_CTRL(scale);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scale);
      STRUCT_MIRROR_ITEM_CTRL(dummy_22_30);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_22_30);
      STRUCT_MIRROR_ITEM_CTRL(odd_length16);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(odd_length16);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(h2);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(read_out_mode);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(read_out_mode);
      STRUCT_MIRROR_ITEM_CTRL(dummy_2_3);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_2_3);
      STRUCT_MIRROR_ITEM_CTRL(pulser_enabled);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(pulser_enabled);
      STRUCT_MIRROR_ITEM_CTRL(dummy_5_7);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_5_7);
      STRUCT_MIRROR_ITEM_CTRL(statistics);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(statistics);
      STRUCT_MIRROR_ITEM_CTRL(both_edges);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(both_edges);
      STRUCT_MIRROR_ITEM_CTRL(threshold_start);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(threshold_start);
      STRUCT_MIRROR_ITEM_CTRL(threshold_step);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(threshold_step);
      STRUCT_MIRROR_ITEM_CTRL(boards);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(boards);
      STRUCT_MIRROR_ITEM_CTRL(dummy_29_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_29_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trc_h2);
  STRUCT_MIRROR_FCNS_DECL(CROS3_REWRITE);
};
#endif//USER_DEF_CROS3_REWRITE

#ifndef USER_DEF_DUMMY_WORD
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(DUMMY_WORD)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(dummy_word);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_word);
  STRUCT_MIRROR_FCNS_DECL(DUMMY_WORD);
};
#endif//USER_DEF_DUMMY_WORD

#ifndef USER_DEF_FASTBUS_LECROY_1875
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FASTBUS_LECROY_1875)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12_RANGE),STRUCT_MIRROR_TEMPLATE_ARG(DATA12_RANGE),64> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(FASTBUS_LECROY_1875);
};
#endif//USER_DEF_FASTBUS_LECROY_1875

#ifndef USER_DEF_FASTBUS_LECROY_1885
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FASTBUS_LECROY_1885)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12_RANGE),STRUCT_MIRROR_TEMPLATE_ARG(DATA12_RANGE),96> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(FASTBUS_LECROY_1885);
};
#endif//USER_DEF_FASTBUS_LECROY_1885

#ifndef USER_DEF_LAND_STD_VME
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_STD_VME)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(fail_general);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_general);
      STRUCT_MIRROR_ITEM_CTRL(fail_data_corrupt);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_data_corrupt);
      STRUCT_MIRROR_ITEM_CTRL(fail_data_missing);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_data_missing);
      STRUCT_MIRROR_ITEM_CTRL(fail_data_too_much);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_data_too_much);
      STRUCT_MIRROR_ITEM_CTRL(fail_event_counter_mismatch);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_event_counter_mismatch);
      STRUCT_MIRROR_ITEM_CTRL(fail_readout_error_driver);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_readout_error_driver);
      STRUCT_MIRROR_ITEM_CTRL(fail_unexpected_trigger);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_unexpected_trigger);
      STRUCT_MIRROR_ITEM_CTRL(fail_firmware_mismatch);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_firmware_mismatch);
      STRUCT_MIRROR_ITEM_CTRL(dummy_8_21);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_8_21);
      STRUCT_MIRROR_ITEM_CTRL(has_multi_trlo_ii_counter0);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_multi_trlo_ii_counter0);
      STRUCT_MIRROR_ITEM_CTRL(has_clock_counter_stamp);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_clock_counter_stamp);
      STRUCT_MIRROR_ITEM_CTRL(has_continous_event_counter);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_continous_event_counter);
      STRUCT_MIRROR_ITEM_CTRL(has_update_qdc_iped_value);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_update_qdc_iped_value);
      STRUCT_MIRROR_ITEM_CTRL(spurious_start_before_tcal);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(spurious_start_before_tcal);
      STRUCT_MIRROR_ITEM_CTRL(has_no_zero_suppression);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_no_zero_suppression);
      STRUCT_MIRROR_ITEM_CTRL(has_multi_adctdc_counter0);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_multi_adctdc_counter0);
      STRUCT_MIRROR_ITEM_CTRL(has_multi_scaler_counter0);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_multi_scaler_counter0);
      STRUCT_MIRROR_ITEM_CTRL(has_multi_event);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_multi_event);
      STRUCT_MIRROR_ITEM_CTRL(has_time_stamp);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_time_stamp);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(failure);
  STRUCT_MIRROR_ITEM_CTRL(continous_event_counter);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(continous_event_counter);
  STRUCT_MIRROR_ITEM_CTRL(time_stamp);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_stamp);
  STRUCT_MIRROR_ITEM_CTRL(clock_counter_stamp);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(clock_counter_stamp);
  STRUCT_MIRROR_ITEM_CTRL(iped);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(iped);
  STRUCT_MIRROR_ITEM_CTRL(multi_events);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(multi_events);
  STRUCT_MIRROR_ITEM_CTRL(multi_trlo_ii_counter0);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(multi_trlo_ii_counter0);
  STRUCT_MIRROR_ITEM_CTRL(multi_scaler_counter0);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(multi_scaler_counter0);
  STRUCT_MIRROR_ITEM_CTRL(multi_adctdc_counter0);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(multi_adctdc_counter0);
  STRUCT_MIRROR_FCNS_DECL(LAND_STD_VME);
};
#endif//USER_DEF_LAND_STD_VME

#ifndef USER_DEF_NTP64_TIME
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(NTP64_TIME)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(sec);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sec);
  STRUCT_MIRROR_ITEM_CTRL(frac);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(frac);
  STRUCT_MIRROR_FCNS_DECL(NTP64_TIME);
};
#endif//USER_DEF_NTP64_TIME

#ifndef USER_DEF_NTP_MESSAGE
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(NTP_MESSAGE)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(quick_burst);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(quick_burst);
      STRUCT_MIRROR_ITEM_CTRL(dummy_17_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_17_23);
      STRUCT_MIRROR_ITEM_CTRL(id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(id);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_ITEM_CTRL(server_id);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(server_id);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(precision);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(precision);
      STRUCT_MIRROR_ITEM_CTRL(poll);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(poll);
      STRUCT_MIRROR_ITEM_CTRL(stratum);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(stratum);
      STRUCT_MIRROR_ITEM_CTRL(dummy_20_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_20_23);
      STRUCT_MIRROR_ITEM_CTRL(mode);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(mode);
      STRUCT_MIRROR_ITEM_CTRL(version);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(version);
      STRUCT_MIRROR_ITEM_CTRL(leap);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(leap);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(sspp);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(frac);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(frac);
      STRUCT_MIRROR_ITEM_CTRL(sec);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sec);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(root_dly);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(frac);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(frac);
      STRUCT_MIRROR_ITEM_CTRL(sec);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sec);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(root_disp);
  STRUCT_MIRROR_ITEM_CTRL(refid);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(refid);
  STRUCT_MIRROR_ITEM_CTRL(orig2time);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(orig2time);
  STRUCT_MIRROR_ITEM_CTRL(tmit2time);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tmit2time);
  STRUCT_MIRROR_ITEM_CTRL(rec2time);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(rec2time);
  STRUCT_MIRROR_ITEM_CTRL(rx2time);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(rx2time);
  STRUCT_MIRROR_ITEM_CTRL(reftime);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(reftime);
  STRUCT_MIRROR_ITEM_CTRL(origtime);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(origtime);
  STRUCT_MIRROR_ITEM_CTRL(rectime);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(rectime);
  STRUCT_MIRROR_ITEM_CTRL(tmittime);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tmittime);
  STRUCT_MIRROR_ITEM_CTRL(rxtime);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(rxtime);
  STRUCT_MIRROR_FCNS_DECL(NTP_MESSAGE);
};
#endif//USER_DEF_NTP_MESSAGE

#ifndef USER_DEF_RANDOM_TCAL_TSTAMP_CLOCK
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(RANDOM_TCAL_TSTAMP_CLOCK)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(soft_latches);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(soft_latches);
  STRUCT_MIRROR_ITEM_CTRL(hard_latches);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(hard_latches);
  STRUCT_MIRROR_ITEM_CTRL(clock_ticks);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(clock_ticks);
  STRUCT_MIRROR_ITEM_CTRL(before);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(before);
  STRUCT_MIRROR_ITEM_CTRL(after);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(after);
  STRUCT_MIRROR_FCNS_DECL(RANDOM_TCAL_TSTAMP_CLOCK);
};
#endif//USER_DEF_RANDOM_TCAL_TSTAMP_CLOCK

#ifndef USER_DEF_RANDOM_TCAL
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(RANDOM_TCAL)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(pulses);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(pulses);
      STRUCT_MIRROR_ITEM_CTRL(clock_bits);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(clock_bits);
      STRUCT_MIRROR_ITEM_CTRL(has_tstamp1);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_tstamp1);
      STRUCT_MIRROR_ITEM_CTRL(has_tstamp2);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_tstamp2);
      STRUCT_MIRROR_ITEM_CTRL(dummy_20_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_20_23);
      STRUCT_MIRROR_ITEM_CTRL(id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(id);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_ITEM_CTRL(tstamp1);
  STRUCT_MIRROR_TYPE(RANDOM_TCAL_TSTAMP_CLOCK) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tstamp1);
  STRUCT_MIRROR_ITEM_CTRL(tstamp2);
  STRUCT_MIRROR_TYPE(RANDOM_TCAL_TSTAMP_CLOCK) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tstamp2);
  STRUCT_MIRROR_FCNS_DECL(RANDOM_TCAL);
};
#endif//USER_DEF_RANDOM_TCAL

#ifndef USER_DEF_SIDEREM_BLOCK
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(SIDEREM_BLOCK)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(data__i0,,4);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),512> STRUCT_MIRROR_NAME(data[4]);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(count);
      STRUCT_MIRROR_ITEM_CTRL(local_event_counter);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(local_event_counter);
      STRUCT_MIRROR_ITEM_CTRL(local_trigger);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(local_trigger);
      STRUCT_MIRROR_ITEM_CTRL(siderem);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(siderem);
      STRUCT_MIRROR_ITEM_CTRL(gtb);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(gtb);
      STRUCT_MIRROR_ITEM_CTRL(sam);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sam);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_FCNS_DECL(SIDEREM_BLOCK);
};
#endif//USER_DEF_SIDEREM_BLOCK

#ifndef USER_DEF_SOFT_SCALER32
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(SOFT_SCALER32)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),32> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(SOFT_SCALER32);
};
#endif//USER_DEF_SOFT_SCALER32

#ifndef USER_DEF_TACQUILA_DATA
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TACQUILA_DATA)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(tac);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(tac__i0,,30);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),17> STRUCT_MIRROR_NAME(tac[30]);
  STRUCT_MIRROR_ITEM_CTRL(adc);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(adc__i0,,30);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),17> STRUCT_MIRROR_NAME(adc[30]);
  STRUCT_MIRROR_ITEM_CTRL(clk);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(clk__i0,,30);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),17> STRUCT_MIRROR_NAME(clk[30]);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(count);
      STRUCT_MIRROR_ITEM_CTRL(dummy1);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy1);
      STRUCT_MIRROR_ITEM_CTRL(trigger_tac);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_tac);
      STRUCT_MIRROR_ITEM_CTRL(trigger_sam);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_sam);
      STRUCT_MIRROR_ITEM_CTRL(lec);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(lec);
      STRUCT_MIRROR_ITEM_CTRL(gtb);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(gtb);
      STRUCT_MIRROR_ITEM_CTRL(sam);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sam);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_FCNS_DECL(TACQUILA_DATA);
};
#endif//USER_DEF_TACQUILA_DATA

#ifndef USER_DEF_TRLO_SAMPLER
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TRLO_SAMPLER)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(stamps);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),512> STRUCT_MIRROR_NAME(stamps);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(count);
      STRUCT_MIRROR_ITEM_CTRL(dummy_10_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_10_23);
      STRUCT_MIRROR_ITEM_CTRL(id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(id);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_FCNS_DECL(TRLO_SAMPLER);
};
#endif//USER_DEF_TRLO_SAMPLER

#ifndef USER_DEF_VME_CAEN_V1190_SUBTDC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SUBTDC)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(bunch_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(bunch_id);
      STRUCT_MIRROR_ITEM_CTRL(event_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_id);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(flags);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(flags);
      STRUCT_MIRROR_ITEM_CTRL(dummy_15_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_15_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(error_flags);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(event_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_id);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trailer);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1190_SUBTDC);
};
#endif//USER_DEF_VME_CAEN_V1190_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1190
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1190)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA24),STRUCT_MIRROR_TEMPLATE_ARG(DATA24),32,128> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(event_number);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_number);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_ITEM_CTRL(tdc);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(tdc__i0,,4);
  STRUCT_MIRROR_TYPE(VME_CAEN_V1190_SUBTDC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc[4]);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(time_tag);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_tag);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trigger);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(dummy_20_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_20_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc_error);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc_error);
      STRUCT_MIRROR_ITEM_CTRL(buffer_overflow);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(buffer_overflow);
      STRUCT_MIRROR_ITEM_CTRL(trigger_lost);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_lost);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trailer);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1190);
};
#endif//USER_DEF_VME_CAEN_V1190

#ifndef USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SHORT_SUBTDC)
{
public:
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1190_SHORT_SUBTDC);
};
#endif//USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC_ERROR
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SHORT_SUBTDC_ERROR)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(flags);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(flags);
      STRUCT_MIRROR_ITEM_CTRL(dummy_15_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_15_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(error_flags);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1190_SHORT_SUBTDC_ERROR);
};
#endif//USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC_ERROR

#ifndef USER_DEF_VME_CAEN_V1190_SHORT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SHORT)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA24),STRUCT_MIRROR_TEMPLATE_ARG(DATA24),32,128> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(event_number);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_number);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_ITEM_CTRL(tdc);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(tdc__i0,,4);
  STRUCT_MIRROR_TYPE(VME_CAEN_V1190_SHORT_SUBTDC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc[4]);
  STRUCT_MIRROR_ITEM_CTRL(err);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(err__i0,,4);
  STRUCT_MIRROR_TYPE(VME_CAEN_V1190_SHORT_SUBTDC_ERROR) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(err[4]);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(time_tag);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_tag);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trigger);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(dummy_20_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_20_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc_error);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc_error);
      STRUCT_MIRROR_ITEM_CTRL(buffer_overflow);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(buffer_overflow);
      STRUCT_MIRROR_ITEM_CTRL(trigger_lost);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_lost);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trailer);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1190_SHORT);
};
#endif//USER_DEF_VME_CAEN_V1190_SHORT

#ifndef USER_DEF_VME_CAEN_V1290_SUBTDC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SUBTDC)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(bunch_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(bunch_id);
      STRUCT_MIRROR_ITEM_CTRL(event_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_id);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(flags);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(flags);
      STRUCT_MIRROR_ITEM_CTRL(dummy_15_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_15_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(error_flags);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(event_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_id);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trailer);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1290_SUBTDC);
};
#endif//USER_DEF_VME_CAEN_V1290_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1290
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1290)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA24),STRUCT_MIRROR_TEMPLATE_ARG(DATA24),32,128> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(event_number);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_number);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_ITEM_CTRL(tdc);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(tdc__i0,,4);
  STRUCT_MIRROR_TYPE(VME_CAEN_V1290_SUBTDC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc[4]);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(time_tag);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_tag);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trigger);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(dummy_20_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_20_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc_error);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc_error);
      STRUCT_MIRROR_ITEM_CTRL(buffer_overflow);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(buffer_overflow);
      STRUCT_MIRROR_ITEM_CTRL(trigger_lost);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_lost);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trailer);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1290);
};
#endif//USER_DEF_VME_CAEN_V1290

#ifndef USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SHORT_SUBTDC)
{
public:
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1290_SHORT_SUBTDC);
};
#endif//USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC_ERROR
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SHORT_SUBTDC_ERROR)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(flags);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(flags);
      STRUCT_MIRROR_ITEM_CTRL(dummy_15_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_15_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(error_flags);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1290_SHORT_SUBTDC_ERROR);
};
#endif//USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC_ERROR

#ifndef USER_DEF_VME_CAEN_V1290_SHORT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SHORT)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA24),STRUCT_MIRROR_TEMPLATE_ARG(DATA24),32,128> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(event_number);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_number);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_ITEM_CTRL(tdc);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(tdc__i0,,4);
  STRUCT_MIRROR_TYPE(VME_CAEN_V1290_SHORT_SUBTDC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc[4]);
  STRUCT_MIRROR_ITEM_CTRL(err);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(err__i0,,4);
  STRUCT_MIRROR_TYPE(VME_CAEN_V1290_SHORT_SUBTDC_ERROR) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(err[4]);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(time_tag);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_tag);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trigger);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(dummy_20_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_20_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc_error);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc_error);
      STRUCT_MIRROR_ITEM_CTRL(buffer_overflow);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(buffer_overflow);
      STRUCT_MIRROR_ITEM_CTRL(trigger_lost);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_lost);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trailer);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1290_SHORT);
};
#endif//USER_DEF_VME_CAEN_V1290_SHORT

#ifndef USER_DEF_VME_CAEN_V775
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V775)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12_OVERFLOW),STRUCT_MIRROR_TEMPLATE_ARG(DATA12_OVERFLOW),32> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(event_number);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_number);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_24_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_24_26);
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(eob);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V775);
};
#endif//USER_DEF_VME_CAEN_V775

#ifndef USER_DEF_VME_CAEN_V830
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V830)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),32> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(event_number);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_number);
      STRUCT_MIRROR_ITEM_CTRL(ts);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
      STRUCT_MIRROR_ITEM_CTRL(count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(count);
      STRUCT_MIRROR_ITEM_CTRL(dummy_24_25);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_24_25);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_26_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_26_26);
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V830);
};
#endif//USER_DEF_VME_CAEN_V830

#ifndef USER_DEF_VME_MESYTEC_MADC32
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_MESYTEC_MADC32)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA14_OVERFLOW),STRUCT_MIRROR_TEMPLATE_ARG(DATA14_OVERFLOW),32> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(counter);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(counter);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_30_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_30_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(end_of_event);
  STRUCT_MIRROR_FCNS_DECL(VME_MESYTEC_MADC32);
};
#endif//USER_DEF_VME_MESYTEC_MADC32

#ifndef USER_DEF_VME_MESYTEC_MDPP16
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_MESYTEC_MDPP16)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16_OVERFLOW),STRUCT_MIRROR_TEMPLATE_ARG(DATA16_OVERFLOW),34,100> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(counter);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(counter);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_30_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_30_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(end_of_event);
  STRUCT_MIRROR_FCNS_DECL(VME_MESYTEC_MDPP16);
};
#endif//USER_DEF_VME_MESYTEC_MDPP16

#ifndef USER_DEF_VME_VUPROM_V35
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_VUPROM_V35)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),192> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(VME_VUPROM_V35);
};
#endif//USER_DEF_VME_VUPROM_V35

#ifndef USER_DEF_CB_VME_LEFT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CB_VME_LEFT) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(tdc);
  STRUCT_MIRROR_TYPE(VME_VUPROM_V35) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
  STRUCT_MIRROR_ITEM_CTRL(adc);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(adc__i0,,4);
  STRUCT_MIRROR_TYPE(VME_MESYTEC_MADC32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(adc[4]);
  STRUCT_MIRROR_ITEM_CTRL(madc0_psp);
  STRUCT_MIRROR_TYPE(VME_MESYTEC_MADC32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(madc0_psp);
  STRUCT_MIRROR_ITEM_CTRL(vme);
  STRUCT_MIRROR_TYPE(LAND_STD_VME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(vme);
  STRUCT_MIRROR_FCNS_DECL(CB_VME_LEFT);
};
#endif//USER_DEF_CB_VME_LEFT

#ifndef USER_DEF_CB_VME_RIGHT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CB_VME_RIGHT) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(tdc);
  STRUCT_MIRROR_TYPE(VME_VUPROM_V35) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
  STRUCT_MIRROR_ITEM_CTRL(adc);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(adc__i0,,4);
  STRUCT_MIRROR_TYPE(VME_MESYTEC_MADC32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(adc[4]);
  STRUCT_MIRROR_ITEM_CTRL(vme);
  STRUCT_MIRROR_TYPE(LAND_STD_VME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(vme);
  STRUCT_MIRROR_FCNS_DECL(CB_VME_RIGHT);
};
#endif//USER_DEF_CB_VME_RIGHT

#ifndef USER_DEF_CROS3_REWRITE_SUBEVENT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CROS3_REWRITE_SUBEVENT) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ccb);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(ccb__i0,,2);
  STRUCT_MIRROR_TYPE(CROS3_REWRITE) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ccb[2]);
  STRUCT_MIRROR_FCNS_DECL(CROS3_REWRITE_SUBEVENT);
};
#endif//USER_DEF_CROS3_REWRITE_SUBEVENT

#ifndef USER_DEF_CROS3_SUBEVENT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CROS3_SUBEVENT) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ccb);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(ccb__i0,,2);
  STRUCT_MIRROR_TYPE(EXT_CROS3) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ccb[2]);
  STRUCT_MIRROR_FCNS_DECL(CROS3_SUBEVENT);
};
#endif//USER_DEF_CROS3_SUBEVENT

#ifndef USER_DEF_DUMMY
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(DUMMY) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(d);
  STRUCT_MIRROR_TYPE(DUMMY_WORD) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(d);
  STRUCT_MIRROR_FCNS_DECL(DUMMY);
};
#endif//USER_DEF_DUMMY

#ifndef USER_DEF_LAND_CAMAC_CONVERTER
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_CAMAC_CONVERTER) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(tpat);
  STRUCT_MIRROR_TYPE(uint16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tpat);
  STRUCT_MIRROR_ITEM_CTRL(tprev);
  STRUCT_MIRROR_TYPE(uint16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tprev);
  STRUCT_MIRROR_ITEM_CTRL(tnext);
  STRUCT_MIRROR_TYPE(uint16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tnext);
  STRUCT_MIRROR_ITEM_CTRL(tprev2);
  STRUCT_MIRROR_TYPE(uint16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tprev2);
  STRUCT_MIRROR_FCNS_DECL(LAND_CAMAC_CONVERTER);
};
#endif//USER_DEF_LAND_CAMAC_CONVERTER

#ifndef USER_DEF_LAND_CAMAC_PILEUP
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_CAMAC_PILEUP) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(tdc);
  STRUCT_MIRROR_TYPE(CAMAC_LECROY_2277_1CH_HACK) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
  STRUCT_MIRROR_ITEM_CTRL(tcal);
  STRUCT_MIRROR_TYPE(CAMAC_LECROY_2277_1CH_HACK) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tcal);
  STRUCT_MIRROR_FCNS_DECL(LAND_CAMAC_PILEUP);
};
#endif//USER_DEF_LAND_CAMAC_PILEUP

#ifndef USER_DEF_LAND_CAMAC_SCALER
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_CAMAC_SCALER) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(timestamp);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(timestamp);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(unnamed_0_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_0_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(endianess);
  STRUCT_MIRROR_ITEM_CTRL(scaler0);
  STRUCT_MIRROR_TYPE(CAMAC_LECROY_4434) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scaler0);
  STRUCT_MIRROR_ITEM_CTRL(scaler2);
  STRUCT_MIRROR_TYPE(CAMAC_LECROY_4434) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scaler2);
  STRUCT_MIRROR_ITEM_CTRL(scaler1);
  STRUCT_MIRROR_TYPE(CAMAC_LECROY_4434) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scaler1);
  STRUCT_MIRROR_ITEM_CTRL(scaler3);
  STRUCT_MIRROR_TYPE(SOFT_SCALER32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scaler3);
  STRUCT_MIRROR_FCNS_DECL(LAND_CAMAC_SCALER);
};
#endif//USER_DEF_LAND_CAMAC_SCALER

#ifndef USER_DEF_LAND_CAMAC_START_STOP_STAMP
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_CAMAC_START_STOP_STAMP) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(timestamp);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(timestamp);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(unnamed_0_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_0_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(endianess);
  STRUCT_MIRROR_FCNS_DECL(LAND_CAMAC_START_STOP_STAMP);
};
#endif//USER_DEF_LAND_CAMAC_START_STOP_STAMP

#ifndef USER_DEF_LAND_CAMAC_TCAL_INFO
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_CAMAC_TCAL_INFO) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(info);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(info);
  STRUCT_MIRROR_ITEM_CTRL(rtcal);
  STRUCT_MIRROR_TYPE(RANDOM_TCAL) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(rtcal);
  STRUCT_MIRROR_ITEM_CTRL(ntp);
  STRUCT_MIRROR_TYPE(NTP_MESSAGE) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ntp);
  STRUCT_MIRROR_FCNS_DECL(LAND_CAMAC_TCAL_INFO);
};
#endif//USER_DEF_LAND_CAMAC_TCAL_INFO

#ifndef USER_DEF_MASTER_VME
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(MASTER_VME) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(sampler_pos);
  STRUCT_MIRROR_TYPE(TRLO_SAMPLER) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sampler_pos);
  STRUCT_MIRROR_ITEM_CTRL(sampler_cb_sum);
  STRUCT_MIRROR_TYPE(TRLO_SAMPLER) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sampler_cb_sum);
  STRUCT_MIRROR_ITEM_CTRL(vme);
  STRUCT_MIRROR_TYPE(LAND_STD_VME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(vme);
  STRUCT_MIRROR_FCNS_DECL(MASTER_VME);
};
#endif//USER_DEF_MASTER_VME

#ifndef USER_DEF_SIDEREM01_VME
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(SIDEREM01_VME) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(sst);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(sst__i0,,8);
  STRUCT_MIRROR_TYPE(EXT_SST) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sst[8]);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(unnamed_0_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_0_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(error_marker);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(unnamed_0_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_0_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(error_marker2);
  STRUCT_MIRROR_FCNS_DECL(SIDEREM01_VME);
};
#endif//USER_DEF_SIDEREM01_VME

#ifndef USER_DEF_TACQUILA_LAND_SUBEVENT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TACQUILA_LAND_SUBEVENT) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(data_sam5_gtb0);
  STRUCT_MIRROR_TYPE(TACQUILA_DATA) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data_sam5_gtb0);
  STRUCT_MIRROR_ITEM_CTRL(data_sam6_gtb1);
  STRUCT_MIRROR_TYPE(TACQUILA_DATA) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data_sam6_gtb1);
  STRUCT_MIRROR_ITEM_CTRL(data_sam6_gtb0);
  STRUCT_MIRROR_TYPE(TACQUILA_DATA) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data_sam6_gtb0);
  STRUCT_MIRROR_FCNS_DECL(TACQUILA_LAND_SUBEVENT);
};
#endif//USER_DEF_TACQUILA_LAND_SUBEVENT

#ifndef USER_DEF_TACQUILA_NEULAND_SUBEVENT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(TACQUILA_NEULAND_SUBEVENT) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(data_sam7_gtb0);
  STRUCT_MIRROR_TYPE(TACQUILA_DATA) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data_sam7_gtb0);
  STRUCT_MIRROR_ITEM_CTRL(data_sam7_gtb1);
  STRUCT_MIRROR_TYPE(TACQUILA_DATA) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data_sam7_gtb1);
  STRUCT_MIRROR_FCNS_DECL(TACQUILA_NEULAND_SUBEVENT);
};
#endif//USER_DEF_TACQUILA_NEULAND_SUBEVENT

#ifndef USER_DEF_VME_CRATE1
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CRATE1) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(qdc792POS_ROLU);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(qdc792POS_ROLU);
  STRUCT_MIRROR_ITEM_CTRL(qdc792PIXEL);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(qdc792PIXEL);
  STRUCT_MIRROR_ITEM_CTRL(tdc775POS_ROLU);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc775POS_ROLU);
  STRUCT_MIRROR_ITEM_CTRL(scaler);
  STRUCT_MIRROR_TYPE(VME_CAEN_V830) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scaler);
  STRUCT_MIRROR_ITEM_CTRL(vme);
  STRUCT_MIRROR_TYPE(LAND_STD_VME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(vme);
  STRUCT_MIRROR_FCNS_DECL(VME_CRATE1);
};
#endif//USER_DEF_VME_CRATE1

#ifndef USER_DEF_VME_CRATE2
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CRATE2) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(scaler);
  STRUCT_MIRROR_TYPE(VME_CAEN_V830) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scaler);
  STRUCT_MIRROR_ITEM_CTRL(qdc792TFW1);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(qdc792TFW1);
  STRUCT_MIRROR_ITEM_CTRL(tdc775TFW1);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc775TFW1);
  STRUCT_MIRROR_ITEM_CTRL(qdc792TFW2);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(qdc792TFW2);
  STRUCT_MIRROR_ITEM_CTRL(tdc775TFW2);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc775TFW2);
  STRUCT_MIRROR_ITEM_CTRL(tdc775NTF);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc775NTF);
  STRUCT_MIRROR_ITEM_CTRL(qdc792NTF);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(qdc792NTF);
  STRUCT_MIRROR_ITEM_CTRL(qdc792GFI1);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(qdc792GFI1);
  STRUCT_MIRROR_ITEM_CTRL(qdc792GFI2);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(qdc792GFI2);
  STRUCT_MIRROR_ITEM_CTRL(qdc792GFI3);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(qdc792GFI3);
  STRUCT_MIRROR_ITEM_CTRL(qdc792MFITEST);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(qdc792MFITEST);
  STRUCT_MIRROR_ITEM_CTRL(vme);
  STRUCT_MIRROR_TYPE(LAND_STD_VME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(vme);
  STRUCT_MIRROR_FCNS_DECL(VME_CRATE2);
};
#endif//USER_DEF_VME_CRATE2

#ifndef USER_DEF_unpack_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(unpack_event) : public STRUCT_MIRROR_BASE(unpack_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_event_base);
  STRUCT_MIRROR_ITEM_CTRL(pileup);
  STRUCT_MIRROR_TYPE(LAND_CAMAC_PILEUP) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(pileup);
  STRUCT_MIRROR_ITEM_CTRL(sst);
  STRUCT_MIRROR_TYPE(SIDEREM01_VME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sst);
  STRUCT_MIRROR_ITEM_CTRL(cros3);
  STRUCT_MIRROR_TYPE(CROS3_SUBEVENT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(cros3);
  STRUCT_MIRROR_ITEM_CTRL(cros3_rewrite);
  STRUCT_MIRROR_TYPE(CROS3_REWRITE_SUBEVENT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(cros3_rewrite);
  STRUCT_MIRROR_ITEM_CTRL(camac);
  STRUCT_MIRROR_TYPE(LAND_CAMAC_CONVERTER) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(camac);
  STRUCT_MIRROR_ITEM_CTRL(acq);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(acq);
  STRUCT_MIRROR_ITEM_CTRL(vme1);
  STRUCT_MIRROR_TYPE(VME_CRATE1) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(vme1);
  STRUCT_MIRROR_ITEM_CTRL(vme2);
  STRUCT_MIRROR_TYPE(VME_CRATE2) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(vme2);
  STRUCT_MIRROR_ITEM_CTRL(vme_cbr);
  STRUCT_MIRROR_TYPE(CB_VME_RIGHT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(vme_cbr);
  STRUCT_MIRROR_ITEM_CTRL(vme_cbl);
  STRUCT_MIRROR_TYPE(CB_VME_LEFT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(vme_cbl);
  STRUCT_MIRROR_ITEM_CTRL(vme_master);
  STRUCT_MIRROR_TYPE(MASTER_VME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(vme_master);
  STRUCT_MIRROR_ITEM_CTRL(camac_tcal_info);
  STRUCT_MIRROR_TYPE(LAND_CAMAC_TCAL_INFO) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(camac_tcal_info);
  STRUCT_MIRROR_ITEM_CTRL(camac_scalers);
  STRUCT_MIRROR_TYPE(LAND_CAMAC_SCALER) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(camac_scalers);
  STRUCT_MIRROR_ITEM_CTRL(tacquila);
  STRUCT_MIRROR_TYPE(TACQUILA_LAND_SUBEVENT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tacquila);
  STRUCT_MIRROR_ITEM_CTRL(neuland);
  STRUCT_MIRROR_TYPE(TACQUILA_NEULAND_SUBEVENT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(neuland);
  STRUCT_MIRROR_FCNS_DECL(unpack_event);
};
#endif//USER_DEF_unpack_event

#ifndef USER_DEF_unpack_sticky_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(unpack_sticky_event) : public STRUCT_MIRROR_BASE(unpack_sticky_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_sticky_event_base);
  STRUCT_MIRROR_FCNS_DECL(unpack_sticky_event);
};
#endif//USER_DEF_unpack_sticky_event

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_STRUCT *************************************************/


/** BEGIN_MIRROR_DECL_STRUCT *******************************************
 *
 * Mirror structure names.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CAMAC_LECROY_2277_1CH_HACK);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CAMAC_LECROY_4434);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CAMAC_PHILLIPS_7164);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CAMAC_SILENA_4418);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CROS3_REWRITE);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(DUMMY_WORD);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FASTBUS_LECROY_1875);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FASTBUS_LECROY_1885);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_STD_VME);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(NTP64_TIME);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(NTP_MESSAGE);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(RANDOM_TCAL_TSTAMP_CLOCK);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(RANDOM_TCAL);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(SIDEREM_BLOCK);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(SOFT_SCALER32);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TACQUILA_DATA);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TRLO_SAMPLER);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SUBTDC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1190);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SHORT_SUBTDC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SHORT_SUBTDC_ERROR);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SHORT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SUBTDC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1290);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SHORT_SUBTDC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SHORT_SUBTDC_ERROR);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SHORT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V775);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V830);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_MESYTEC_MADC32);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_MESYTEC_MDPP16);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_VUPROM_V35);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CB_VME_LEFT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CB_VME_RIGHT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CROS3_REWRITE_SUBEVENT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CROS3_SUBEVENT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(DUMMY);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_CAMAC_CONVERTER);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_CAMAC_PILEUP);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_CAMAC_SCALER);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_CAMAC_START_STOP_STAMP);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_CAMAC_TCAL_INFO);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(MASTER_VME);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(SIDEREM01_VME);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TACQUILA_LAND_SUBEVENT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(TACQUILA_NEULAND_SUBEVENT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CRATE1);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CRATE2);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(unpack_event);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(unpack_sticky_event);

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_DECL_STRUCT ********************************************/


/** BEGIN_FUNCTION_CALL_PER_MEMBER *************************************
 *
 * Recursive function calls per member.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_fcncall_define.hh"

#ifndef USER_DEF_CAMAC_LECROY_2277_1CH_HACK
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CAMAC_LECROY_2277_1CH_HACK)::FCNCALL_NAME(CAMAC_LECROY_2277_1CH_HACK)
{
  FCNCALL_INIT;
  // raw_list_ii_zero_suppress<DATA16,DATA16,16> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CAMAC_LECROY_2277_1CH_HACK

#ifndef USER_DEF_CAMAC_LECROY_4434
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CAMAC_LECROY_4434)::FCNCALL_NAME(CAMAC_LECROY_4434)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA24,DATA24,32> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CAMAC_LECROY_4434

#ifndef USER_DEF_CAMAC_PHILLIPS_7164
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CAMAC_PHILLIPS_7164)::FCNCALL_NAME(CAMAC_PHILLIPS_7164)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12,DATA12,16> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CAMAC_PHILLIPS_7164

#ifndef USER_DEF_CAMAC_SILENA_4418
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CAMAC_SILENA_4418)::FCNCALL_NAME(CAMAC_SILENA_4418)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12_OVERFLOW,DATA12_OVERFLOW,8> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CAMAC_SILENA_4418

#ifndef USER_DEF_CROS3_REWRITE
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CROS3_REWRITE)::FCNCALL_NAME(CROS3_REWRITE)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<WIRE_START_END,WIRE_START_END,32768> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 data_size : 16;
      // uint32 threshold_curve : 1;
      // uint32 leading_edge : 1;
      // uint32 data : 1;
      // uint32 dummy_19 : 1;
      // uint32 trigger_time : 4;
      // uint32 ccb_id : 4;
      // uint32 event_counter : 4;
    // } ;
    // uint32 u32;
  // } h1;
  {
  FCNCALL_SUBNAME("h1");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 data_size : 16;
    // uint32 threshold_curve : 1;
    // uint32 leading_edge : 1;
    // uint32 data : 1;
    // uint32 dummy_19 : 1;
    // uint32 trigger_time : 4;
    // uint32 ccb_id : 4;
    // uint32 event_counter : 4;
  // } ;
  // uint32 data_size : 16;
  {
  FCNCALL_SUBNAME("data_size");
  { FCNCALL_CALL_CTRL_WRAP(h1.data_size,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.data_size)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 threshold_curve : 1;
  {
  FCNCALL_SUBNAME("threshold_curve");
  { FCNCALL_CALL_CTRL_WRAP(h1.threshold_curve,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.threshold_curve)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 leading_edge : 1;
  {
  FCNCALL_SUBNAME("leading_edge");
  { FCNCALL_CALL_CTRL_WRAP(h1.leading_edge,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.leading_edge)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 data : 1;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(h1.data,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.data)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_19 : 1;
  {
  FCNCALL_SUBNAME("dummy_19");
  { FCNCALL_CALL_CTRL_WRAP(h1.dummy_19,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.dummy_19)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_time : 4;
  {
  FCNCALL_SUBNAME("trigger_time");
  { FCNCALL_CALL_CTRL_WRAP(h1.trigger_time,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.trigger_time)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 ccb_id : 4;
  {
  FCNCALL_SUBNAME("ccb_id");
  { FCNCALL_CALL_CTRL_WRAP(h1.ccb_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.ccb_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_counter : 4;
  {
  FCNCALL_SUBNAME("event_counter");
  { FCNCALL_CALL_CTRL_WRAP(h1.event_counter,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.event_counter)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(h1.u32,FCNCALL_CALL_TYPE(uint32,h1.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 read_out_mode : 2;
      // uint32 dummy_2_3 : 2;
      // uint32 pulser_enabled : 1;
      // uint32 dummy_5_7 : 3;
      // uint32 statistics : 3;
      // uint32 both_edges : 1;
      // uint32 slices : 8;
      // uint32 scale : 2;
      // uint32 dummy_22_30 : 9;
      // uint32 odd_length16 : 1;
    // } ;
    // uint32 u32;
  // } h2;
  {
  FCNCALL_SUBNAME("h2");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 read_out_mode : 2;
    // uint32 dummy_2_3 : 2;
    // uint32 pulser_enabled : 1;
    // uint32 dummy_5_7 : 3;
    // uint32 statistics : 3;
    // uint32 both_edges : 1;
    // uint32 slices : 8;
    // uint32 scale : 2;
    // uint32 dummy_22_30 : 9;
    // uint32 odd_length16 : 1;
  // } ;
  // uint32 read_out_mode : 2;
  {
  FCNCALL_SUBNAME("read_out_mode");
  { FCNCALL_CALL_CTRL_WRAP(h2.read_out_mode,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.read_out_mode)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_2_3 : 2;
  {
  FCNCALL_SUBNAME("dummy_2_3");
  { FCNCALL_CALL_CTRL_WRAP(h2.dummy_2_3,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.dummy_2_3)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 pulser_enabled : 1;
  {
  FCNCALL_SUBNAME("pulser_enabled");
  { FCNCALL_CALL_CTRL_WRAP(h2.pulser_enabled,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.pulser_enabled)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_5_7 : 3;
  {
  FCNCALL_SUBNAME("dummy_5_7");
  { FCNCALL_CALL_CTRL_WRAP(h2.dummy_5_7,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.dummy_5_7)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 statistics : 3;
  {
  FCNCALL_SUBNAME("statistics");
  { FCNCALL_CALL_CTRL_WRAP(h2.statistics,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.statistics)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 both_edges : 1;
  {
  FCNCALL_SUBNAME("both_edges");
  { FCNCALL_CALL_CTRL_WRAP(h2.both_edges,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.both_edges)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 slices : 8;
  {
  FCNCALL_SUBNAME("slices");
  { FCNCALL_CALL_CTRL_WRAP(h2.slices,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.slices)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 scale : 2;
  {
  FCNCALL_SUBNAME("scale");
  { FCNCALL_CALL_CTRL_WRAP(h2.scale,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.scale)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_22_30 : 9;
  {
  FCNCALL_SUBNAME("dummy_22_30");
  { FCNCALL_CALL_CTRL_WRAP(h2.dummy_22_30,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.dummy_22_30)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 odd_length16 : 1;
  {
  FCNCALL_SUBNAME("odd_length16");
  { FCNCALL_CALL_CTRL_WRAP(h2.odd_length16,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.odd_length16)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(h2.u32,FCNCALL_CALL_TYPE(uint32,h2.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 read_out_mode : 2;
      // uint32 dummy_2_3 : 2;
      // uint32 pulser_enabled : 1;
      // uint32 dummy_5_7 : 3;
      // uint32 statistics : 3;
      // uint32 both_edges : 1;
      // uint32 threshold_start : 8;
      // uint32 threshold_step : 4;
      // uint32 boards : 5;
      // uint32 dummy_29_31 : 3;
    // } ;
    // uint32 u32;
  // } trc_h2;
  {
  FCNCALL_SUBNAME("trc_h2");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 read_out_mode : 2;
    // uint32 dummy_2_3 : 2;
    // uint32 pulser_enabled : 1;
    // uint32 dummy_5_7 : 3;
    // uint32 statistics : 3;
    // uint32 both_edges : 1;
    // uint32 threshold_start : 8;
    // uint32 threshold_step : 4;
    // uint32 boards : 5;
    // uint32 dummy_29_31 : 3;
  // } ;
  // uint32 read_out_mode : 2;
  {
  FCNCALL_SUBNAME("read_out_mode");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.read_out_mode,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.read_out_mode)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_2_3 : 2;
  {
  FCNCALL_SUBNAME("dummy_2_3");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.dummy_2_3,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.dummy_2_3)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 pulser_enabled : 1;
  {
  FCNCALL_SUBNAME("pulser_enabled");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.pulser_enabled,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.pulser_enabled)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_5_7 : 3;
  {
  FCNCALL_SUBNAME("dummy_5_7");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.dummy_5_7,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.dummy_5_7)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 statistics : 3;
  {
  FCNCALL_SUBNAME("statistics");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.statistics,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.statistics)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 both_edges : 1;
  {
  FCNCALL_SUBNAME("both_edges");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.both_edges,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.both_edges)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 threshold_start : 8;
  {
  FCNCALL_SUBNAME("threshold_start");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.threshold_start,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.threshold_start)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 threshold_step : 4;
  {
  FCNCALL_SUBNAME("threshold_step");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.threshold_step,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.threshold_step)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 boards : 5;
  {
  FCNCALL_SUBNAME("boards");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.boards,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.boards)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_29_31 : 3;
  {
  FCNCALL_SUBNAME("dummy_29_31");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.dummy_29_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.dummy_29_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.u32,FCNCALL_CALL_TYPE(uint32,trc_h2.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CROS3_REWRITE

#ifndef USER_DEF_DUMMY_WORD
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(DUMMY_WORD)::FCNCALL_NAME(DUMMY_WORD)
{
  FCNCALL_INIT;
  // uint32 dummy_word;
  {
  FCNCALL_SUBNAME("dummy_word");
  { FCNCALL_CALL_CTRL_WRAP(dummy_word,FCNCALL_CALL_TYPE(uint32,dummy_word)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_DUMMY_WORD

#ifndef USER_DEF_FASTBUS_LECROY_1875
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FASTBUS_LECROY_1875)::FCNCALL_NAME(FASTBUS_LECROY_1875)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12_RANGE,DATA12_RANGE,64> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_FASTBUS_LECROY_1875

#ifndef USER_DEF_FASTBUS_LECROY_1885
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FASTBUS_LECROY_1885)::FCNCALL_NAME(FASTBUS_LECROY_1885)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12_RANGE,DATA12_RANGE,96> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_FASTBUS_LECROY_1885

#ifndef USER_DEF_LAND_STD_VME
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_STD_VME)::FCNCALL_NAME(LAND_STD_VME)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 fail_general : 1;
      // uint32 fail_data_corrupt : 1;
      // uint32 fail_data_missing : 1;
      // uint32 fail_data_too_much : 1;
      // uint32 fail_event_counter_mismatch : 1;
      // uint32 fail_readout_error_driver : 1;
      // uint32 fail_unexpected_trigger : 1;
      // uint32 fail_firmware_mismatch : 1;
      // uint32 dummy_8_21 : 14;
      // uint32 has_multi_trlo_ii_counter0 : 1;
      // uint32 has_clock_counter_stamp : 1;
      // uint32 has_continous_event_counter : 1;
      // uint32 has_update_qdc_iped_value : 1;
      // uint32 spurious_start_before_tcal : 1;
      // uint32 has_no_zero_suppression : 1;
      // uint32 has_multi_adctdc_counter0 : 1;
      // uint32 has_multi_scaler_counter0 : 1;
      // uint32 has_multi_event : 1;
      // uint32 has_time_stamp : 1;
    // } ;
    // uint32 u32;
  // } failure;
  {
  FCNCALL_SUBNAME("failure");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 fail_general : 1;
    // uint32 fail_data_corrupt : 1;
    // uint32 fail_data_missing : 1;
    // uint32 fail_data_too_much : 1;
    // uint32 fail_event_counter_mismatch : 1;
    // uint32 fail_readout_error_driver : 1;
    // uint32 fail_unexpected_trigger : 1;
    // uint32 fail_firmware_mismatch : 1;
    // uint32 dummy_8_21 : 14;
    // uint32 has_multi_trlo_ii_counter0 : 1;
    // uint32 has_clock_counter_stamp : 1;
    // uint32 has_continous_event_counter : 1;
    // uint32 has_update_qdc_iped_value : 1;
    // uint32 spurious_start_before_tcal : 1;
    // uint32 has_no_zero_suppression : 1;
    // uint32 has_multi_adctdc_counter0 : 1;
    // uint32 has_multi_scaler_counter0 : 1;
    // uint32 has_multi_event : 1;
    // uint32 has_time_stamp : 1;
  // } ;
  // uint32 fail_general : 1;
  {
  FCNCALL_SUBNAME("fail_general");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_general,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_general)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_data_corrupt : 1;
  {
  FCNCALL_SUBNAME("fail_data_corrupt");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_data_corrupt,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_data_corrupt)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_data_missing : 1;
  {
  FCNCALL_SUBNAME("fail_data_missing");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_data_missing,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_data_missing)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_data_too_much : 1;
  {
  FCNCALL_SUBNAME("fail_data_too_much");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_data_too_much,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_data_too_much)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_event_counter_mismatch : 1;
  {
  FCNCALL_SUBNAME("fail_event_counter_mismatch");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_event_counter_mismatch,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_event_counter_mismatch)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_readout_error_driver : 1;
  {
  FCNCALL_SUBNAME("fail_readout_error_driver");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_readout_error_driver,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_readout_error_driver)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_unexpected_trigger : 1;
  {
  FCNCALL_SUBNAME("fail_unexpected_trigger");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_unexpected_trigger,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_unexpected_trigger)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_firmware_mismatch : 1;
  {
  FCNCALL_SUBNAME("fail_firmware_mismatch");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_firmware_mismatch,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_firmware_mismatch)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_8_21 : 14;
  {
  FCNCALL_SUBNAME("dummy_8_21");
  { FCNCALL_CALL_CTRL_WRAP(failure.dummy_8_21,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.dummy_8_21)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_multi_trlo_ii_counter0 : 1;
  {
  FCNCALL_SUBNAME("has_multi_trlo_ii_counter0");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_multi_trlo_ii_counter0,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_multi_trlo_ii_counter0)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_clock_counter_stamp : 1;
  {
  FCNCALL_SUBNAME("has_clock_counter_stamp");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_clock_counter_stamp,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_clock_counter_stamp)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_continous_event_counter : 1;
  {
  FCNCALL_SUBNAME("has_continous_event_counter");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_continous_event_counter,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_continous_event_counter)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_update_qdc_iped_value : 1;
  {
  FCNCALL_SUBNAME("has_update_qdc_iped_value");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_update_qdc_iped_value,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_update_qdc_iped_value)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 spurious_start_before_tcal : 1;
  {
  FCNCALL_SUBNAME("spurious_start_before_tcal");
  { FCNCALL_CALL_CTRL_WRAP(failure.spurious_start_before_tcal,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.spurious_start_before_tcal)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_no_zero_suppression : 1;
  {
  FCNCALL_SUBNAME("has_no_zero_suppression");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_no_zero_suppression,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_no_zero_suppression)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_multi_adctdc_counter0 : 1;
  {
  FCNCALL_SUBNAME("has_multi_adctdc_counter0");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_multi_adctdc_counter0,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_multi_adctdc_counter0)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_multi_scaler_counter0 : 1;
  {
  FCNCALL_SUBNAME("has_multi_scaler_counter0");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_multi_scaler_counter0,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_multi_scaler_counter0)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_multi_event : 1;
  {
  FCNCALL_SUBNAME("has_multi_event");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_multi_event,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_multi_event)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_time_stamp : 1;
  {
  FCNCALL_SUBNAME("has_time_stamp");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_time_stamp,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_time_stamp)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(failure.u32,FCNCALL_CALL_TYPE(uint32,failure.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // uint32 continous_event_counter;
  {
  FCNCALL_SUBNAME("continous_event_counter");
  { FCNCALL_CALL_CTRL_WRAP(continous_event_counter,FCNCALL_CALL_TYPE(uint32,continous_event_counter)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 time_stamp;
  {
  FCNCALL_SUBNAME("time_stamp");
  { FCNCALL_CALL_CTRL_WRAP(time_stamp,FCNCALL_CALL_TYPE(uint32,time_stamp)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 clock_counter_stamp;
  {
  FCNCALL_SUBNAME("clock_counter_stamp");
  { FCNCALL_CALL_CTRL_WRAP(clock_counter_stamp,FCNCALL_CALL_TYPE(uint32,clock_counter_stamp)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 iped;
  {
  FCNCALL_SUBNAME("iped");
  { FCNCALL_CALL_CTRL_WRAP(iped,FCNCALL_CALL_TYPE(uint32,iped)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 multi_events;
  {
  FCNCALL_SUBNAME("multi_events");
  { FCNCALL_CALL_CTRL_WRAP(multi_events,FCNCALL_CALL_TYPE(uint32,multi_events)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 multi_trlo_ii_counter0;
  {
  FCNCALL_SUBNAME("multi_trlo_ii_counter0");
  { FCNCALL_CALL_CTRL_WRAP(multi_trlo_ii_counter0,FCNCALL_CALL_TYPE(uint32,multi_trlo_ii_counter0)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 multi_scaler_counter0;
  {
  FCNCALL_SUBNAME("multi_scaler_counter0");
  { FCNCALL_CALL_CTRL_WRAP(multi_scaler_counter0,FCNCALL_CALL_TYPE(uint32,multi_scaler_counter0)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 multi_adctdc_counter0;
  {
  FCNCALL_SUBNAME("multi_adctdc_counter0");
  { FCNCALL_CALL_CTRL_WRAP(multi_adctdc_counter0,FCNCALL_CALL_TYPE(uint32,multi_adctdc_counter0)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_STD_VME

#ifndef USER_DEF_NTP64_TIME
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(NTP64_TIME)::FCNCALL_NAME(NTP64_TIME)
{
  FCNCALL_INIT;
  // uint32 sec;
  {
  FCNCALL_SUBNAME("sec");
  { FCNCALL_CALL_CTRL_WRAP(sec,FCNCALL_CALL_TYPE(uint32,sec)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 frac;
  {
  FCNCALL_SUBNAME("frac");
  { FCNCALL_CALL_CTRL_WRAP(frac,FCNCALL_CALL_TYPE(uint32,frac)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_NTP64_TIME

#ifndef USER_DEF_NTP_MESSAGE
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(NTP_MESSAGE)::FCNCALL_NAME(NTP_MESSAGE)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 word_count : 16;
      // uint32 quick_burst : 1;
      // uint32 dummy_17_23 : 7;
      // uint32 id : 8;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 word_count : 16;
    // uint32 quick_burst : 1;
    // uint32 dummy_17_23 : 7;
    // uint32 id : 8;
  // } ;
  // uint32 word_count : 16;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(header.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 quick_burst : 1;
  {
  FCNCALL_SUBNAME("quick_burst");
  { FCNCALL_CALL_CTRL_WRAP(header.quick_burst,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.quick_burst)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_17_23 : 7;
  {
  FCNCALL_SUBNAME("dummy_17_23");
  { FCNCALL_CALL_CTRL_WRAP(header.dummy_17_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.dummy_17_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 id : 8;
  {
  FCNCALL_SUBNAME("id");
  { FCNCALL_CALL_CTRL_WRAP(header.id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.id)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // uint32 server_id;
  {
  FCNCALL_SUBNAME("server_id");
  { FCNCALL_CALL_CTRL_WRAP(server_id,FCNCALL_CALL_TYPE(uint32,server_id)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 precision : 8;
      // uint32 poll : 8;
      // uint32 stratum : 4;
      // uint32 dummy_20_23 : 4;
      // uint32 mode : 3;
      // uint32 version : 3;
      // uint32 leap : 2;
    // } ;
    // uint32 u32;
  // } sspp;
  {
  FCNCALL_SUBNAME("sspp");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 precision : 8;
    // uint32 poll : 8;
    // uint32 stratum : 4;
    // uint32 dummy_20_23 : 4;
    // uint32 mode : 3;
    // uint32 version : 3;
    // uint32 leap : 2;
  // } ;
  // uint32 precision : 8;
  {
  FCNCALL_SUBNAME("precision");
  { FCNCALL_CALL_CTRL_WRAP(sspp.precision,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.precision)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 poll : 8;
  {
  FCNCALL_SUBNAME("poll");
  { FCNCALL_CALL_CTRL_WRAP(sspp.poll,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.poll)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 stratum : 4;
  {
  FCNCALL_SUBNAME("stratum");
  { FCNCALL_CALL_CTRL_WRAP(sspp.stratum,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.stratum)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_20_23 : 4;
  {
  FCNCALL_SUBNAME("dummy_20_23");
  { FCNCALL_CALL_CTRL_WRAP(sspp.dummy_20_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.dummy_20_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 mode : 3;
  {
  FCNCALL_SUBNAME("mode");
  { FCNCALL_CALL_CTRL_WRAP(sspp.mode,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.mode)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 version : 3;
  {
  FCNCALL_SUBNAME("version");
  { FCNCALL_CALL_CTRL_WRAP(sspp.version,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.version)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 leap : 2;
  {
  FCNCALL_SUBNAME("leap");
  { FCNCALL_CALL_CTRL_WRAP(sspp.leap,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.leap)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(sspp.u32,FCNCALL_CALL_TYPE(uint32,sspp.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 frac : 16;
      // uint32 sec : 16;
    // } ;
    // uint32 u32;
  // } root_dly;
  {
  FCNCALL_SUBNAME("root_dly");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 frac : 16;
    // uint32 sec : 16;
  // } ;
  // uint32 frac : 16;
  {
  FCNCALL_SUBNAME("frac");
  { FCNCALL_CALL_CTRL_WRAP(root_dly.frac,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,root_dly.frac)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 sec : 16;
  {
  FCNCALL_SUBNAME("sec");
  { FCNCALL_CALL_CTRL_WRAP(root_dly.sec,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,root_dly.sec)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(root_dly.u32,FCNCALL_CALL_TYPE(uint32,root_dly.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 frac : 16;
      // uint32 sec : 16;
    // } ;
    // uint32 u32;
  // } root_disp;
  {
  FCNCALL_SUBNAME("root_disp");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 frac : 16;
    // uint32 sec : 16;
  // } ;
  // uint32 frac : 16;
  {
  FCNCALL_SUBNAME("frac");
  { FCNCALL_CALL_CTRL_WRAP(root_disp.frac,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,root_disp.frac)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 sec : 16;
  {
  FCNCALL_SUBNAME("sec");
  { FCNCALL_CALL_CTRL_WRAP(root_disp.sec,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,root_disp.sec)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(root_disp.u32,FCNCALL_CALL_TYPE(uint32,root_disp.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // uint32 refid;
  {
  FCNCALL_SUBNAME("refid");
  { FCNCALL_CALL_CTRL_WRAP(refid,FCNCALL_CALL_TYPE(uint32,refid)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME orig2time;
  {
  FCNCALL_SUBNAME("orig2time");
  { FCNCALL_CALL_CTRL_WRAP(orig2time,orig2time.FCNCALL_CALL(orig2time)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME tmit2time;
  {
  FCNCALL_SUBNAME("tmit2time");
  { FCNCALL_CALL_CTRL_WRAP(tmit2time,tmit2time.FCNCALL_CALL(tmit2time)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME rec2time;
  {
  FCNCALL_SUBNAME("rec2time");
  { FCNCALL_CALL_CTRL_WRAP(rec2time,rec2time.FCNCALL_CALL(rec2time)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME rx2time;
  {
  FCNCALL_SUBNAME("rx2time");
  { FCNCALL_CALL_CTRL_WRAP(rx2time,rx2time.FCNCALL_CALL(rx2time)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME reftime;
  {
  FCNCALL_SUBNAME("reftime");
  { FCNCALL_CALL_CTRL_WRAP(reftime,reftime.FCNCALL_CALL(reftime)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME origtime;
  {
  FCNCALL_SUBNAME("origtime");
  { FCNCALL_CALL_CTRL_WRAP(origtime,origtime.FCNCALL_CALL(origtime)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME rectime;
  {
  FCNCALL_SUBNAME("rectime");
  { FCNCALL_CALL_CTRL_WRAP(rectime,rectime.FCNCALL_CALL(rectime)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME tmittime;
  {
  FCNCALL_SUBNAME("tmittime");
  { FCNCALL_CALL_CTRL_WRAP(tmittime,tmittime.FCNCALL_CALL(tmittime)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME rxtime;
  {
  FCNCALL_SUBNAME("rxtime");
  { FCNCALL_CALL_CTRL_WRAP(rxtime,rxtime.FCNCALL_CALL(rxtime)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_NTP_MESSAGE

#ifndef USER_DEF_RANDOM_TCAL_TSTAMP_CLOCK
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(RANDOM_TCAL_TSTAMP_CLOCK)::FCNCALL_NAME(RANDOM_TCAL_TSTAMP_CLOCK)
{
  FCNCALL_INIT;
  // uint32 soft_latches;
  {
  FCNCALL_SUBNAME("soft_latches");
  { FCNCALL_CALL_CTRL_WRAP(soft_latches,FCNCALL_CALL_TYPE(uint32,soft_latches)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 hard_latches;
  {
  FCNCALL_SUBNAME("hard_latches");
  { FCNCALL_CALL_CTRL_WRAP(hard_latches,FCNCALL_CALL_TYPE(uint32,hard_latches)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 clock_ticks;
  {
  FCNCALL_SUBNAME("clock_ticks");
  { FCNCALL_CALL_CTRL_WRAP(clock_ticks,FCNCALL_CALL_TYPE(uint32,clock_ticks)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME before;
  {
  FCNCALL_SUBNAME("before");
  { FCNCALL_CALL_CTRL_WRAP(before,before.FCNCALL_CALL(before)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME after;
  {
  FCNCALL_SUBNAME("after");
  { FCNCALL_CALL_CTRL_WRAP(after,after.FCNCALL_CALL(after)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_RANDOM_TCAL_TSTAMP_CLOCK

#ifndef USER_DEF_RANDOM_TCAL
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(RANDOM_TCAL)::FCNCALL_NAME(RANDOM_TCAL)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 word_count : 8;
      // uint32 pulses : 4;
      // uint32 clock_bits : 6;
      // uint32 has_tstamp1 : 1;
      // uint32 has_tstamp2 : 1;
      // uint32 dummy_20_23 : 4;
      // uint32 id : 8;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 word_count : 8;
    // uint32 pulses : 4;
    // uint32 clock_bits : 6;
    // uint32 has_tstamp1 : 1;
    // uint32 has_tstamp2 : 1;
    // uint32 dummy_20_23 : 4;
    // uint32 id : 8;
  // } ;
  // uint32 word_count : 8;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(header.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 pulses : 4;
  {
  FCNCALL_SUBNAME("pulses");
  { FCNCALL_CALL_CTRL_WRAP(header.pulses,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.pulses)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 clock_bits : 6;
  {
  FCNCALL_SUBNAME("clock_bits");
  { FCNCALL_CALL_CTRL_WRAP(header.clock_bits,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.clock_bits)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_tstamp1 : 1;
  {
  FCNCALL_SUBNAME("has_tstamp1");
  { FCNCALL_CALL_CTRL_WRAP(header.has_tstamp1,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.has_tstamp1)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_tstamp2 : 1;
  {
  FCNCALL_SUBNAME("has_tstamp2");
  { FCNCALL_CALL_CTRL_WRAP(header.has_tstamp2,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.has_tstamp2)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_20_23 : 4;
  {
  FCNCALL_SUBNAME("dummy_20_23");
  { FCNCALL_CALL_CTRL_WRAP(header.dummy_20_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.dummy_20_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 id : 8;
  {
  FCNCALL_SUBNAME("id");
  { FCNCALL_CALL_CTRL_WRAP(header.id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.id)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // RANDOM_TCAL_TSTAMP_CLOCK tstamp1;
  {
  FCNCALL_SUBNAME("tstamp1");
  { FCNCALL_CALL_CTRL_WRAP(tstamp1,tstamp1.FCNCALL_CALL(tstamp1)); }
  FCNCALL_SUBNAME_END;
  }
  // RANDOM_TCAL_TSTAMP_CLOCK tstamp2;
  {
  FCNCALL_SUBNAME("tstamp2");
  { FCNCALL_CALL_CTRL_WRAP(tstamp2,tstamp2.FCNCALL_CALL(tstamp2)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_RANDOM_TCAL

#ifndef USER_DEF_SIDEREM_BLOCK
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(SIDEREM_BLOCK)::FCNCALL_NAME(SIDEREM_BLOCK)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12,DATA12,512> data[4];
  {
  FCNCALL_SUBNAME("data");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(data__i0,,__i0,data[__i0].FCNCALL_CALL(data[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 count : 12;
      // uint32 local_event_counter : 4;
      // uint32 local_trigger : 4;
      // uint32 siderem : 4;
      // uint32 gtb : 4;
      // uint32 sam : 4;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 count : 12;
    // uint32 local_event_counter : 4;
    // uint32 local_trigger : 4;
    // uint32 siderem : 4;
    // uint32 gtb : 4;
    // uint32 sam : 4;
  // } ;
  // uint32 count : 12;
  {
  FCNCALL_SUBNAME("count");
  { FCNCALL_CALL_CTRL_WRAP(header.count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 local_event_counter : 4;
  {
  FCNCALL_SUBNAME("local_event_counter");
  { FCNCALL_CALL_CTRL_WRAP(header.local_event_counter,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.local_event_counter)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 local_trigger : 4;
  {
  FCNCALL_SUBNAME("local_trigger");
  { FCNCALL_CALL_CTRL_WRAP(header.local_trigger,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.local_trigger)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 siderem : 4;
  {
  FCNCALL_SUBNAME("siderem");
  { FCNCALL_CALL_CTRL_WRAP(header.siderem,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.siderem)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 gtb : 4;
  {
  FCNCALL_SUBNAME("gtb");
  { FCNCALL_CALL_CTRL_WRAP(header.gtb,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.gtb)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 sam : 4;
  {
  FCNCALL_SUBNAME("sam");
  { FCNCALL_CALL_CTRL_WRAP(header.sam,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.sam)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_SIDEREM_BLOCK

#ifndef USER_DEF_SOFT_SCALER32
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(SOFT_SCALER32)::FCNCALL_NAME(SOFT_SCALER32)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA32,DATA32,32> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_SOFT_SCALER32

#ifndef USER_DEF_TACQUILA_DATA
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TACQUILA_DATA)::FCNCALL_NAME(TACQUILA_DATA)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12,DATA12,17> tac[30];
  {
  FCNCALL_SUBNAME("tac");
  FCNCALL_FOR(__i0,30)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(tac__i0,,__i0,tac[__i0].FCNCALL_CALL(tac[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA12,DATA12,17> adc[30];
  {
  FCNCALL_SUBNAME("adc");
  FCNCALL_FOR(__i0,30)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(adc__i0,,__i0,adc[__i0].FCNCALL_CALL(adc[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_zero_suppress<DATA12,DATA12,17> clk[30];
  {
  FCNCALL_SUBNAME("clk");
  FCNCALL_FOR(__i0,30)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(clk__i0,,__i0,clk[__i0].FCNCALL_CALL(clk[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 count : 9;
      // uint32 dummy1 : 3;
      // uint32 trigger_tac : 4;
      // uint32 trigger_sam : 4;
      // uint32 lec : 4;
      // uint32 gtb : 4;
      // uint32 sam : 4;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 count : 9;
    // uint32 dummy1 : 3;
    // uint32 trigger_tac : 4;
    // uint32 trigger_sam : 4;
    // uint32 lec : 4;
    // uint32 gtb : 4;
    // uint32 sam : 4;
  // } ;
  // uint32 count : 9;
  {
  FCNCALL_SUBNAME("count");
  { FCNCALL_CALL_CTRL_WRAP(header.count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy1 : 3;
  {
  FCNCALL_SUBNAME("dummy1");
  { FCNCALL_CALL_CTRL_WRAP(header.dummy1,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.dummy1)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_tac : 4;
  {
  FCNCALL_SUBNAME("trigger_tac");
  { FCNCALL_CALL_CTRL_WRAP(header.trigger_tac,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.trigger_tac)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_sam : 4;
  {
  FCNCALL_SUBNAME("trigger_sam");
  { FCNCALL_CALL_CTRL_WRAP(header.trigger_sam,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.trigger_sam)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 lec : 4;
  {
  FCNCALL_SUBNAME("lec");
  { FCNCALL_CALL_CTRL_WRAP(header.lec,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.lec)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 gtb : 4;
  {
  FCNCALL_SUBNAME("gtb");
  { FCNCALL_CALL_CTRL_WRAP(header.gtb,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.gtb)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 sam : 4;
  {
  FCNCALL_SUBNAME("sam");
  { FCNCALL_CALL_CTRL_WRAP(header.sam,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.sam)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TACQUILA_DATA

#ifndef USER_DEF_TRLO_SAMPLER
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TRLO_SAMPLER)::FCNCALL_NAME(TRLO_SAMPLER)
{
  FCNCALL_INIT;
  // raw_list_ii_zero_suppress<DATA32,DATA32,512> stamps;
  {
  FCNCALL_SUBNAME("stamps");
  { FCNCALL_CALL_CTRL_WRAP(stamps,stamps.FCNCALL_CALL(stamps)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 count : 10;
      // uint32 dummy_10_23 : 14;
      // uint32 id : 8;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 count : 10;
    // uint32 dummy_10_23 : 14;
    // uint32 id : 8;
  // } ;
  // uint32 count : 10;
  {
  FCNCALL_SUBNAME("count");
  { FCNCALL_CALL_CTRL_WRAP(header.count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_10_23 : 14;
  {
  FCNCALL_SUBNAME("dummy_10_23");
  { FCNCALL_CALL_CTRL_WRAP(header.dummy_10_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.dummy_10_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 id : 8;
  {
  FCNCALL_SUBNAME("id");
  { FCNCALL_CALL_CTRL_WRAP(header.id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.id)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TRLO_SAMPLER

#ifndef USER_DEF_VME_CAEN_V1190_SUBTDC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1190_SUBTDC)::FCNCALL_NAME(VME_CAEN_V1190_SUBTDC)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 bunch_id : 12;
      // uint32 event_id : 12;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 bunch_id : 12;
    // uint32 event_id : 12;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 bunch_id : 12;
  {
  FCNCALL_SUBNAME("bunch_id");
  { FCNCALL_CALL_CTRL_WRAP(header.bunch_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.bunch_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_id : 12;
  {
  FCNCALL_SUBNAME("event_id");
  { FCNCALL_CALL_CTRL_WRAP(header.event_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(header.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(header.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 flags : 15;
      // uint32 dummy_15_23 : 9;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } error_flags;
  {
  FCNCALL_SUBNAME("error_flags");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 flags : 15;
    // uint32 dummy_15_23 : 9;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 flags : 15;
  {
  FCNCALL_SUBNAME("flags");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.flags,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.flags)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_15_23 : 9;
  {
  FCNCALL_SUBNAME("dummy_15_23");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_15_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_15_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.u32,FCNCALL_CALL_TYPE(uint32,error_flags.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 word_count : 12;
      // uint32 event_id : 12;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trailer;
  {
  FCNCALL_SUBNAME("trailer");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 word_count : 12;
    // uint32 event_id : 12;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 word_count : 12;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(trailer.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_id : 12;
  {
  FCNCALL_SUBNAME("event_id");
  { FCNCALL_CALL_CTRL_WRAP(trailer.event_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.event_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(trailer.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(trailer.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trailer.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trailer.u32,FCNCALL_CALL_TYPE(uint32,trailer.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1190_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1190
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1190)::FCNCALL_NAME(VME_CAEN_V1190)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 event_number : 22;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 event_number : 22;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(header.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_number : 22;
  {
  FCNCALL_SUBNAME("event_number");
  { FCNCALL_CALL_CTRL_WRAP(header.event_number,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_number)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V1190_SUBTDC tdc[4];
  {
  FCNCALL_SUBNAME("tdc");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(tdc__i0,,__i0,tdc[__i0].FCNCALL_CALL(tdc[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 time_tag : 27;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trigger;
  {
  FCNCALL_SUBNAME("trigger");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 time_tag : 27;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 time_tag : 27;
  {
  FCNCALL_SUBNAME("time_tag");
  { FCNCALL_CALL_CTRL_WRAP(trigger.time_tag,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.time_tag)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trigger.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trigger.u32,FCNCALL_CALL_TYPE(uint32,trigger.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 word_count : 15;
      // uint32 dummy_20_23 : 4;
      // uint32 tdc_error : 1;
      // uint32 buffer_overflow : 1;
      // uint32 trigger_lost : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trailer;
  {
  FCNCALL_SUBNAME("trailer");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 word_count : 15;
    // uint32 dummy_20_23 : 4;
    // uint32 tdc_error : 1;
    // uint32 buffer_overflow : 1;
    // uint32 trigger_lost : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(trailer.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 word_count : 15;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(trailer.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_20_23 : 4;
  {
  FCNCALL_SUBNAME("dummy_20_23");
  { FCNCALL_CALL_CTRL_WRAP(trailer.dummy_20_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.dummy_20_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc_error : 1;
  {
  FCNCALL_SUBNAME("tdc_error");
  { FCNCALL_CALL_CTRL_WRAP(trailer.tdc_error,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.tdc_error)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 buffer_overflow : 1;
  {
  FCNCALL_SUBNAME("buffer_overflow");
  { FCNCALL_CALL_CTRL_WRAP(trailer.buffer_overflow,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.buffer_overflow)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_lost : 1;
  {
  FCNCALL_SUBNAME("trigger_lost");
  { FCNCALL_CALL_CTRL_WRAP(trailer.trigger_lost,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.trigger_lost)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trailer.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trailer.u32,FCNCALL_CALL_TYPE(uint32,trailer.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1190

#ifndef USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1190_SHORT_SUBTDC)::FCNCALL_NAME(VME_CAEN_V1190_SHORT_SUBTDC)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC_ERROR
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1190_SHORT_SUBTDC_ERROR)::FCNCALL_NAME(VME_CAEN_V1190_SHORT_SUBTDC_ERROR)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 flags : 15;
      // uint32 dummy_15_23 : 9;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } error_flags;
  {
  FCNCALL_SUBNAME("error_flags");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 flags : 15;
    // uint32 dummy_15_23 : 9;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 flags : 15;
  {
  FCNCALL_SUBNAME("flags");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.flags,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.flags)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_15_23 : 9;
  {
  FCNCALL_SUBNAME("dummy_15_23");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_15_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_15_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.u32,FCNCALL_CALL_TYPE(uint32,error_flags.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC_ERROR

#ifndef USER_DEF_VME_CAEN_V1190_SHORT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1190_SHORT)::FCNCALL_NAME(VME_CAEN_V1190_SHORT)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 event_number : 22;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 event_number : 22;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(header.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_number : 22;
  {
  FCNCALL_SUBNAME("event_number");
  { FCNCALL_CALL_CTRL_WRAP(header.event_number,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_number)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V1190_SHORT_SUBTDC tdc[4];
  {
  FCNCALL_SUBNAME("tdc");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(tdc__i0,,__i0,tdc[__i0].FCNCALL_CALL(tdc[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V1190_SHORT_SUBTDC_ERROR err[4];
  {
  FCNCALL_SUBNAME("err");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(err__i0,,__i0,err[__i0].FCNCALL_CALL(err[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 time_tag : 27;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trigger;
  {
  FCNCALL_SUBNAME("trigger");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 time_tag : 27;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 time_tag : 27;
  {
  FCNCALL_SUBNAME("time_tag");
  { FCNCALL_CALL_CTRL_WRAP(trigger.time_tag,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.time_tag)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trigger.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trigger.u32,FCNCALL_CALL_TYPE(uint32,trigger.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 word_count : 15;
      // uint32 dummy_20_23 : 4;
      // uint32 tdc_error : 1;
      // uint32 buffer_overflow : 1;
      // uint32 trigger_lost : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trailer;
  {
  FCNCALL_SUBNAME("trailer");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 word_count : 15;
    // uint32 dummy_20_23 : 4;
    // uint32 tdc_error : 1;
    // uint32 buffer_overflow : 1;
    // uint32 trigger_lost : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(trailer.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 word_count : 15;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(trailer.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_20_23 : 4;
  {
  FCNCALL_SUBNAME("dummy_20_23");
  { FCNCALL_CALL_CTRL_WRAP(trailer.dummy_20_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.dummy_20_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc_error : 1;
  {
  FCNCALL_SUBNAME("tdc_error");
  { FCNCALL_CALL_CTRL_WRAP(trailer.tdc_error,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.tdc_error)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 buffer_overflow : 1;
  {
  FCNCALL_SUBNAME("buffer_overflow");
  { FCNCALL_CALL_CTRL_WRAP(trailer.buffer_overflow,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.buffer_overflow)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_lost : 1;
  {
  FCNCALL_SUBNAME("trigger_lost");
  { FCNCALL_CALL_CTRL_WRAP(trailer.trigger_lost,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.trigger_lost)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trailer.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trailer.u32,FCNCALL_CALL_TYPE(uint32,trailer.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1190_SHORT

#ifndef USER_DEF_VME_CAEN_V1290_SUBTDC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1290_SUBTDC)::FCNCALL_NAME(VME_CAEN_V1290_SUBTDC)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 bunch_id : 12;
      // uint32 event_id : 12;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 bunch_id : 12;
    // uint32 event_id : 12;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 bunch_id : 12;
  {
  FCNCALL_SUBNAME("bunch_id");
  { FCNCALL_CALL_CTRL_WRAP(header.bunch_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.bunch_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_id : 12;
  {
  FCNCALL_SUBNAME("event_id");
  { FCNCALL_CALL_CTRL_WRAP(header.event_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(header.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(header.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 flags : 15;
      // uint32 dummy_15_23 : 9;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } error_flags;
  {
  FCNCALL_SUBNAME("error_flags");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 flags : 15;
    // uint32 dummy_15_23 : 9;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 flags : 15;
  {
  FCNCALL_SUBNAME("flags");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.flags,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.flags)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_15_23 : 9;
  {
  FCNCALL_SUBNAME("dummy_15_23");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_15_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_15_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.u32,FCNCALL_CALL_TYPE(uint32,error_flags.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 word_count : 12;
      // uint32 event_id : 12;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trailer;
  {
  FCNCALL_SUBNAME("trailer");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 word_count : 12;
    // uint32 event_id : 12;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 word_count : 12;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(trailer.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_id : 12;
  {
  FCNCALL_SUBNAME("event_id");
  { FCNCALL_CALL_CTRL_WRAP(trailer.event_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.event_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(trailer.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(trailer.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trailer.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trailer.u32,FCNCALL_CALL_TYPE(uint32,trailer.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1290_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1290
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1290)::FCNCALL_NAME(VME_CAEN_V1290)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 event_number : 22;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 event_number : 22;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(header.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_number : 22;
  {
  FCNCALL_SUBNAME("event_number");
  { FCNCALL_CALL_CTRL_WRAP(header.event_number,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_number)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V1290_SUBTDC tdc[4];
  {
  FCNCALL_SUBNAME("tdc");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(tdc__i0,,__i0,tdc[__i0].FCNCALL_CALL(tdc[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 time_tag : 27;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trigger;
  {
  FCNCALL_SUBNAME("trigger");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 time_tag : 27;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 time_tag : 27;
  {
  FCNCALL_SUBNAME("time_tag");
  { FCNCALL_CALL_CTRL_WRAP(trigger.time_tag,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.time_tag)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trigger.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trigger.u32,FCNCALL_CALL_TYPE(uint32,trigger.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 word_count : 15;
      // uint32 dummy_20_23 : 4;
      // uint32 tdc_error : 1;
      // uint32 buffer_overflow : 1;
      // uint32 trigger_lost : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trailer;
  {
  FCNCALL_SUBNAME("trailer");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 word_count : 15;
    // uint32 dummy_20_23 : 4;
    // uint32 tdc_error : 1;
    // uint32 buffer_overflow : 1;
    // uint32 trigger_lost : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(trailer.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 word_count : 15;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(trailer.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_20_23 : 4;
  {
  FCNCALL_SUBNAME("dummy_20_23");
  { FCNCALL_CALL_CTRL_WRAP(trailer.dummy_20_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.dummy_20_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc_error : 1;
  {
  FCNCALL_SUBNAME("tdc_error");
  { FCNCALL_CALL_CTRL_WRAP(trailer.tdc_error,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.tdc_error)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 buffer_overflow : 1;
  {
  FCNCALL_SUBNAME("buffer_overflow");
  { FCNCALL_CALL_CTRL_WRAP(trailer.buffer_overflow,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.buffer_overflow)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_lost : 1;
  {
  FCNCALL_SUBNAME("trigger_lost");
  { FCNCALL_CALL_CTRL_WRAP(trailer.trigger_lost,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.trigger_lost)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trailer.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trailer.u32,FCNCALL_CALL_TYPE(uint32,trailer.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1290

#ifndef USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1290_SHORT_SUBTDC)::FCNCALL_NAME(VME_CAEN_V1290_SHORT_SUBTDC)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC_ERROR
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1290_SHORT_SUBTDC_ERROR)::FCNCALL_NAME(VME_CAEN_V1290_SHORT_SUBTDC_ERROR)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 flags : 15;
      // uint32 dummy_15_23 : 9;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } error_flags;
  {
  FCNCALL_SUBNAME("error_flags");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 flags : 15;
    // uint32 dummy_15_23 : 9;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 flags : 15;
  {
  FCNCALL_SUBNAME("flags");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.flags,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.flags)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_15_23 : 9;
  {
  FCNCALL_SUBNAME("dummy_15_23");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_15_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_15_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.u32,FCNCALL_CALL_TYPE(uint32,error_flags.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC_ERROR

#ifndef USER_DEF_VME_CAEN_V1290_SHORT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1290_SHORT)::FCNCALL_NAME(VME_CAEN_V1290_SHORT)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 event_number : 22;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 event_number : 22;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(header.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_number : 22;
  {
  FCNCALL_SUBNAME("event_number");
  { FCNCALL_CALL_CTRL_WRAP(header.event_number,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_number)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V1290_SHORT_SUBTDC tdc[4];
  {
  FCNCALL_SUBNAME("tdc");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(tdc__i0,,__i0,tdc[__i0].FCNCALL_CALL(tdc[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V1290_SHORT_SUBTDC_ERROR err[4];
  {
  FCNCALL_SUBNAME("err");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(err__i0,,__i0,err[__i0].FCNCALL_CALL(err[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 time_tag : 27;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trigger;
  {
  FCNCALL_SUBNAME("trigger");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 time_tag : 27;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 time_tag : 27;
  {
  FCNCALL_SUBNAME("time_tag");
  { FCNCALL_CALL_CTRL_WRAP(trigger.time_tag,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.time_tag)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trigger.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trigger.u32,FCNCALL_CALL_TYPE(uint32,trigger.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 word_count : 15;
      // uint32 dummy_20_23 : 4;
      // uint32 tdc_error : 1;
      // uint32 buffer_overflow : 1;
      // uint32 trigger_lost : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trailer;
  {
  FCNCALL_SUBNAME("trailer");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 word_count : 15;
    // uint32 dummy_20_23 : 4;
    // uint32 tdc_error : 1;
    // uint32 buffer_overflow : 1;
    // uint32 trigger_lost : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(trailer.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 word_count : 15;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(trailer.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_20_23 : 4;
  {
  FCNCALL_SUBNAME("dummy_20_23");
  { FCNCALL_CALL_CTRL_WRAP(trailer.dummy_20_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.dummy_20_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc_error : 1;
  {
  FCNCALL_SUBNAME("tdc_error");
  { FCNCALL_CALL_CTRL_WRAP(trailer.tdc_error,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.tdc_error)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 buffer_overflow : 1;
  {
  FCNCALL_SUBNAME("buffer_overflow");
  { FCNCALL_CALL_CTRL_WRAP(trailer.buffer_overflow,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.buffer_overflow)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_lost : 1;
  {
  FCNCALL_SUBNAME("trigger_lost");
  { FCNCALL_CALL_CTRL_WRAP(trailer.trigger_lost,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.trigger_lost)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trailer.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trailer.u32,FCNCALL_CALL_TYPE(uint32,trailer.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1290_SHORT

#ifndef USER_DEF_VME_CAEN_V775
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V775)::FCNCALL_NAME(VME_CAEN_V775)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12_OVERFLOW,DATA12_OVERFLOW,32> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 event_number : 24;
      // uint32 unnamed_24_26 : 3;
      // uint32 geom : 5;
    // } ;
    // uint32 u32;
  // } eob;
  {
  FCNCALL_SUBNAME("eob");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 event_number : 24;
    // uint32 unnamed_24_26 : 3;
    // uint32 geom : 5;
  // } ;
  // uint32 event_number : 24;
  {
  FCNCALL_SUBNAME("event_number");
  { FCNCALL_CALL_CTRL_WRAP(eob.event_number,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,eob.event_number)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_24_26 : 3;
  {
  FCNCALL_SUBNAME("unnamed_24_26");
  { FCNCALL_CALL_CTRL_WRAP(eob.unnamed_24_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,eob.unnamed_24_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(eob.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,eob.geom)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(eob.u32,FCNCALL_CALL_TYPE(uint32,eob.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V775

#ifndef USER_DEF_VME_CAEN_V830
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V830)::FCNCALL_NAME(VME_CAEN_V830)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA32,DATA32,32> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 event_number : 16;
      // uint32 ts : 2;
      // uint32 count : 6;
      // uint32 dummy_24_25 : 2;
      // uint32 unnamed_26_26 : 1;
      // uint32 geom : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 event_number : 16;
    // uint32 ts : 2;
    // uint32 count : 6;
    // uint32 dummy_24_25 : 2;
    // uint32 unnamed_26_26 : 1;
    // uint32 geom : 5;
  // } ;
  // uint32 event_number : 16;
  {
  FCNCALL_SUBNAME("event_number");
  { FCNCALL_CALL_CTRL_WRAP(header.event_number,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_number)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 ts : 2;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(header.ts,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.ts)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 count : 6;
  {
  FCNCALL_SUBNAME("count");
  { FCNCALL_CALL_CTRL_WRAP(header.count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_24_25 : 2;
  {
  FCNCALL_SUBNAME("dummy_24_25");
  { FCNCALL_CALL_CTRL_WRAP(header.dummy_24_25,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.dummy_24_25)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_26_26 : 1;
  {
  FCNCALL_SUBNAME("unnamed_26_26");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_26_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_26_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(header.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.geom)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V830

#ifndef USER_DEF_VME_MESYTEC_MADC32
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_MESYTEC_MADC32)::FCNCALL_NAME(VME_MESYTEC_MADC32)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA14_OVERFLOW,DATA14_OVERFLOW,32> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 counter : 30;
      // uint32 unnamed_30_31 : 2;
    // } ;
    // uint32 u32;
  // } end_of_event;
  {
  FCNCALL_SUBNAME("end_of_event");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 counter : 30;
    // uint32 unnamed_30_31 : 2;
  // } ;
  // uint32 counter : 30;
  {
  FCNCALL_SUBNAME("counter");
  { FCNCALL_CALL_CTRL_WRAP(end_of_event.counter,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,end_of_event.counter)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_30_31 : 2;
  {
  FCNCALL_SUBNAME("unnamed_30_31");
  { FCNCALL_CALL_CTRL_WRAP(end_of_event.unnamed_30_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,end_of_event.unnamed_30_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(end_of_event.u32,FCNCALL_CALL_TYPE(uint32,end_of_event.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_MESYTEC_MADC32

#ifndef USER_DEF_VME_MESYTEC_MDPP16
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_MESYTEC_MDPP16)::FCNCALL_NAME(VME_MESYTEC_MDPP16)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA16_OVERFLOW,DATA16_OVERFLOW,34,100> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 counter : 30;
      // uint32 unnamed_30_31 : 2;
    // } ;
    // uint32 u32;
  // } end_of_event;
  {
  FCNCALL_SUBNAME("end_of_event");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 counter : 30;
    // uint32 unnamed_30_31 : 2;
  // } ;
  // uint32 counter : 30;
  {
  FCNCALL_SUBNAME("counter");
  { FCNCALL_CALL_CTRL_WRAP(end_of_event.counter,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,end_of_event.counter)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_30_31 : 2;
  {
  FCNCALL_SUBNAME("unnamed_30_31");
  { FCNCALL_CALL_CTRL_WRAP(end_of_event.unnamed_30_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,end_of_event.unnamed_30_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(end_of_event.u32,FCNCALL_CALL_TYPE(uint32,end_of_event.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_MESYTEC_MDPP16

#ifndef USER_DEF_VME_VUPROM_V35
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_VUPROM_V35)::FCNCALL_NAME(VME_VUPROM_V35)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12,DATA12,192> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_VUPROM_V35

#ifndef USER_DEF_CB_VME_LEFT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CB_VME_LEFT)::FCNCALL_NAME(CB_VME_LEFT)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // VME_VUPROM_V35 tdc;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(tdc,tdc.FCNCALL_CALL(tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_MESYTEC_MADC32 adc[4];
  {
  FCNCALL_SUBNAME("adc");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(adc__i0,,__i0,adc[__i0].FCNCALL_CALL(adc[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_MESYTEC_MADC32 madc0_psp;
  {
  FCNCALL_SUBNAME("madc0_psp");
  { FCNCALL_CALL_CTRL_WRAP(madc0_psp,madc0_psp.FCNCALL_CALL(madc0_psp)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_STD_VME vme;
  {
  FCNCALL_SUBNAME("vme");
  { FCNCALL_CALL_CTRL_WRAP(vme,vme.FCNCALL_CALL(vme)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CB_VME_LEFT

#ifndef USER_DEF_CB_VME_RIGHT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CB_VME_RIGHT)::FCNCALL_NAME(CB_VME_RIGHT)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // VME_VUPROM_V35 tdc;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(tdc,tdc.FCNCALL_CALL(tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_MESYTEC_MADC32 adc[4];
  {
  FCNCALL_SUBNAME("adc");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(adc__i0,,__i0,adc[__i0].FCNCALL_CALL(adc[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // LAND_STD_VME vme;
  {
  FCNCALL_SUBNAME("vme");
  { FCNCALL_CALL_CTRL_WRAP(vme,vme.FCNCALL_CALL(vme)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CB_VME_RIGHT

#ifndef USER_DEF_CROS3_REWRITE_SUBEVENT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CROS3_REWRITE_SUBEVENT)::FCNCALL_NAME(CROS3_REWRITE_SUBEVENT)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // CROS3_REWRITE ccb[2];
  {
  FCNCALL_SUBNAME("ccb");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(ccb__i0,,__i0,ccb[__i0].FCNCALL_CALL(ccb[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CROS3_REWRITE_SUBEVENT

#ifndef USER_DEF_CROS3_SUBEVENT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CROS3_SUBEVENT)::FCNCALL_NAME(CROS3_SUBEVENT)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // EXT_CROS3 ccb[2];
  {
  FCNCALL_SUBNAME("ccb");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(ccb__i0,,__i0,ccb[__i0].FCNCALL_CALL(ccb[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CROS3_SUBEVENT

#ifndef USER_DEF_DUMMY
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(DUMMY)::FCNCALL_NAME(DUMMY)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // DUMMY_WORD d;
  {
  FCNCALL_SUBNAME("d");
  { FCNCALL_CALL_CTRL_WRAP(d,d.FCNCALL_CALL(d)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_DUMMY

#ifndef USER_DEF_LAND_CAMAC_CONVERTER
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_CAMAC_CONVERTER)::FCNCALL_NAME(LAND_CAMAC_CONVERTER)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // uint16 tpat;
  {
  FCNCALL_SUBNAME("tpat");
  { FCNCALL_CALL_CTRL_WRAP(tpat,FCNCALL_CALL_TYPE(uint16,tpat)); }
  FCNCALL_SUBNAME_END;
  }
  // uint16 tprev;
  {
  FCNCALL_SUBNAME("tprev");
  { FCNCALL_CALL_CTRL_WRAP(tprev,FCNCALL_CALL_TYPE(uint16,tprev)); }
  FCNCALL_SUBNAME_END;
  }
  // uint16 tnext;
  {
  FCNCALL_SUBNAME("tnext");
  { FCNCALL_CALL_CTRL_WRAP(tnext,FCNCALL_CALL_TYPE(uint16,tnext)); }
  FCNCALL_SUBNAME_END;
  }
  // uint16 tprev2;
  {
  FCNCALL_SUBNAME("tprev2");
  { FCNCALL_CALL_CTRL_WRAP(tprev2,FCNCALL_CALL_TYPE(uint16,tprev2)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_CAMAC_CONVERTER

#ifndef USER_DEF_LAND_CAMAC_PILEUP
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_CAMAC_PILEUP)::FCNCALL_NAME(LAND_CAMAC_PILEUP)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // CAMAC_LECROY_2277_1CH_HACK tdc;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(tdc,tdc.FCNCALL_CALL(tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_LECROY_2277_1CH_HACK tcal;
  {
  FCNCALL_SUBNAME("tcal");
  { FCNCALL_CALL_CTRL_WRAP(tcal,tcal.FCNCALL_CALL(tcal)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_CAMAC_PILEUP

#ifndef USER_DEF_LAND_CAMAC_SCALER
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_CAMAC_SCALER)::FCNCALL_NAME(LAND_CAMAC_SCALER)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // uint32 timestamp;
  {
  FCNCALL_SUBNAME("timestamp");
  { FCNCALL_CALL_CTRL_WRAP(timestamp,FCNCALL_CALL_TYPE(uint32,timestamp)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 unnamed_0_31 : 32;
    // } ;
    // uint32 u32;
  // } endianess;
  {
  FCNCALL_SUBNAME("endianess");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 unnamed_0_31 : 32;
  // } ;
  // uint32 unnamed_0_31 : 32;
  {
  FCNCALL_SUBNAME("unnamed_0_31");
  { FCNCALL_CALL_CTRL_WRAP(endianess.unnamed_0_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,endianess.unnamed_0_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(endianess.u32,FCNCALL_CALL_TYPE(uint32,endianess.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_LECROY_4434 scaler0;
  {
  FCNCALL_SUBNAME("scaler0");
  { FCNCALL_CALL_CTRL_WRAP(scaler0,scaler0.FCNCALL_CALL(scaler0)); }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_LECROY_4434 scaler2;
  {
  FCNCALL_SUBNAME("scaler2");
  { FCNCALL_CALL_CTRL_WRAP(scaler2,scaler2.FCNCALL_CALL(scaler2)); }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_LECROY_4434 scaler1;
  {
  FCNCALL_SUBNAME("scaler1");
  { FCNCALL_CALL_CTRL_WRAP(scaler1,scaler1.FCNCALL_CALL(scaler1)); }
  FCNCALL_SUBNAME_END;
  }
  // SOFT_SCALER32 scaler3;
  {
  FCNCALL_SUBNAME("scaler3");
  { FCNCALL_CALL_CTRL_WRAP(scaler3,scaler3.FCNCALL_CALL(scaler3)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_CAMAC_SCALER

#ifndef USER_DEF_LAND_CAMAC_START_STOP_STAMP
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_CAMAC_START_STOP_STAMP)::FCNCALL_NAME(LAND_CAMAC_START_STOP_STAMP)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // uint32 timestamp;
  {
  FCNCALL_SUBNAME("timestamp");
  { FCNCALL_CALL_CTRL_WRAP(timestamp,FCNCALL_CALL_TYPE(uint32,timestamp)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 unnamed_0_31 : 32;
    // } ;
    // uint32 u32;
  // } endianess;
  {
  FCNCALL_SUBNAME("endianess");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 unnamed_0_31 : 32;
  // } ;
  // uint32 unnamed_0_31 : 32;
  {
  FCNCALL_SUBNAME("unnamed_0_31");
  { FCNCALL_CALL_CTRL_WRAP(endianess.unnamed_0_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,endianess.unnamed_0_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(endianess.u32,FCNCALL_CALL_TYPE(uint32,endianess.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_CAMAC_START_STOP_STAMP

#ifndef USER_DEF_LAND_CAMAC_TCAL_INFO
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_CAMAC_TCAL_INFO)::FCNCALL_NAME(LAND_CAMAC_TCAL_INFO)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // uint32 info;
  {
  FCNCALL_SUBNAME("info");
  { FCNCALL_CALL_CTRL_WRAP(info,FCNCALL_CALL_TYPE(uint32,info)); }
  FCNCALL_SUBNAME_END;
  }
  // RANDOM_TCAL rtcal;
  {
  FCNCALL_SUBNAME("rtcal");
  { FCNCALL_CALL_CTRL_WRAP(rtcal,rtcal.FCNCALL_CALL(rtcal)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP_MESSAGE ntp;
  {
  FCNCALL_SUBNAME("ntp");
  { FCNCALL_CALL_CTRL_WRAP(ntp,ntp.FCNCALL_CALL(ntp)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_CAMAC_TCAL_INFO

#ifndef USER_DEF_MASTER_VME
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(MASTER_VME)::FCNCALL_NAME(MASTER_VME)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TRLO_SAMPLER sampler_pos;
  {
  FCNCALL_SUBNAME("sampler_pos");
  { FCNCALL_CALL_CTRL_WRAP(sampler_pos,sampler_pos.FCNCALL_CALL(sampler_pos)); }
  FCNCALL_SUBNAME_END;
  }
  // TRLO_SAMPLER sampler_cb_sum;
  {
  FCNCALL_SUBNAME("sampler_cb_sum");
  { FCNCALL_CALL_CTRL_WRAP(sampler_cb_sum,sampler_cb_sum.FCNCALL_CALL(sampler_cb_sum)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_STD_VME vme;
  {
  FCNCALL_SUBNAME("vme");
  { FCNCALL_CALL_CTRL_WRAP(vme,vme.FCNCALL_CALL(vme)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_MASTER_VME

#ifndef USER_DEF_SIDEREM01_VME
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(SIDEREM01_VME)::FCNCALL_NAME(SIDEREM01_VME)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // EXT_SST sst[8];
  {
  FCNCALL_SUBNAME("sst");
  FCNCALL_FOR(__i0,8)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(sst__i0,,__i0,sst[__i0].FCNCALL_CALL(sst[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 unnamed_0_31 : 32;
    // } ;
    // uint32 u32;
  // } error_marker;
  {
  FCNCALL_SUBNAME("error_marker");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 unnamed_0_31 : 32;
  // } ;
  // uint32 unnamed_0_31 : 32;
  {
  FCNCALL_SUBNAME("unnamed_0_31");
  { FCNCALL_CALL_CTRL_WRAP(error_marker.unnamed_0_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_marker.unnamed_0_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(error_marker.u32,FCNCALL_CALL_TYPE(uint32,error_marker.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 unnamed_0_31 : 32;
    // } ;
    // uint32 u32;
  // } error_marker2;
  {
  FCNCALL_SUBNAME("error_marker2");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 unnamed_0_31 : 32;
  // } ;
  // uint32 unnamed_0_31 : 32;
  {
  FCNCALL_SUBNAME("unnamed_0_31");
  { FCNCALL_CALL_CTRL_WRAP(error_marker2.unnamed_0_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_marker2.unnamed_0_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(error_marker2.u32,FCNCALL_CALL_TYPE(uint32,error_marker2.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_SIDEREM01_VME

#ifndef USER_DEF_TACQUILA_LAND_SUBEVENT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TACQUILA_LAND_SUBEVENT)::FCNCALL_NAME(TACQUILA_LAND_SUBEVENT)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TACQUILA_DATA data_sam5_gtb0;
  {
  FCNCALL_SUBNAME("data_sam5_gtb0");
  { FCNCALL_CALL_CTRL_WRAP(data_sam5_gtb0,data_sam5_gtb0.FCNCALL_CALL(data_sam5_gtb0)); }
  FCNCALL_SUBNAME_END;
  }
  // TACQUILA_DATA data_sam6_gtb1;
  {
  FCNCALL_SUBNAME("data_sam6_gtb1");
  { FCNCALL_CALL_CTRL_WRAP(data_sam6_gtb1,data_sam6_gtb1.FCNCALL_CALL(data_sam6_gtb1)); }
  FCNCALL_SUBNAME_END;
  }
  // TACQUILA_DATA data_sam6_gtb0;
  {
  FCNCALL_SUBNAME("data_sam6_gtb0");
  { FCNCALL_CALL_CTRL_WRAP(data_sam6_gtb0,data_sam6_gtb0.FCNCALL_CALL(data_sam6_gtb0)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TACQUILA_LAND_SUBEVENT

#ifndef USER_DEF_TACQUILA_NEULAND_SUBEVENT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(TACQUILA_NEULAND_SUBEVENT)::FCNCALL_NAME(TACQUILA_NEULAND_SUBEVENT)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // TACQUILA_DATA data_sam7_gtb0;
  {
  FCNCALL_SUBNAME("data_sam7_gtb0");
  { FCNCALL_CALL_CTRL_WRAP(data_sam7_gtb0,data_sam7_gtb0.FCNCALL_CALL(data_sam7_gtb0)); }
  FCNCALL_SUBNAME_END;
  }
  // TACQUILA_DATA data_sam7_gtb1;
  {
  FCNCALL_SUBNAME("data_sam7_gtb1");
  { FCNCALL_CALL_CTRL_WRAP(data_sam7_gtb1,data_sam7_gtb1.FCNCALL_CALL(data_sam7_gtb1)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_TACQUILA_NEULAND_SUBEVENT

#ifndef USER_DEF_VME_CRATE1
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CRATE1)::FCNCALL_NAME(VME_CRATE1)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // VME_CAEN_V775 qdc792POS_ROLU;
  {
  FCNCALL_SUBNAME("qdc792POS_ROLU");
  { FCNCALL_CALL_CTRL_WRAP(qdc792POS_ROLU,qdc792POS_ROLU.FCNCALL_CALL(qdc792POS_ROLU)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V775 qdc792PIXEL;
  {
  FCNCALL_SUBNAME("qdc792PIXEL");
  { FCNCALL_CALL_CTRL_WRAP(qdc792PIXEL,qdc792PIXEL.FCNCALL_CALL(qdc792PIXEL)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V775 tdc775POS_ROLU;
  {
  FCNCALL_SUBNAME("tdc775POS_ROLU");
  { FCNCALL_CALL_CTRL_WRAP(tdc775POS_ROLU,tdc775POS_ROLU.FCNCALL_CALL(tdc775POS_ROLU)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V830 scaler;
  {
  FCNCALL_SUBNAME("scaler");
  { FCNCALL_CALL_CTRL_WRAP(scaler,scaler.FCNCALL_CALL(scaler)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_STD_VME vme;
  {
  FCNCALL_SUBNAME("vme");
  { FCNCALL_CALL_CTRL_WRAP(vme,vme.FCNCALL_CALL(vme)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CRATE1

#ifndef USER_DEF_VME_CRATE2
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CRATE2)::FCNCALL_NAME(VME_CRATE2)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // VME_CAEN_V830 scaler;
  {
  FCNCALL_SUBNAME("scaler");
  { FCNCALL_CALL_CTRL_WRAP(scaler,scaler.FCNCALL_CALL(scaler)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V775 qdc792TFW1;
  {
  FCNCALL_SUBNAME("qdc792TFW1");
  { FCNCALL_CALL_CTRL_WRAP(qdc792TFW1,qdc792TFW1.FCNCALL_CALL(qdc792TFW1)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V775 tdc775TFW1;
  {
  FCNCALL_SUBNAME("tdc775TFW1");
  { FCNCALL_CALL_CTRL_WRAP(tdc775TFW1,tdc775TFW1.FCNCALL_CALL(tdc775TFW1)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V775 qdc792TFW2;
  {
  FCNCALL_SUBNAME("qdc792TFW2");
  { FCNCALL_CALL_CTRL_WRAP(qdc792TFW2,qdc792TFW2.FCNCALL_CALL(qdc792TFW2)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V775 tdc775TFW2;
  {
  FCNCALL_SUBNAME("tdc775TFW2");
  { FCNCALL_CALL_CTRL_WRAP(tdc775TFW2,tdc775TFW2.FCNCALL_CALL(tdc775TFW2)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V775 tdc775NTF;
  {
  FCNCALL_SUBNAME("tdc775NTF");
  { FCNCALL_CALL_CTRL_WRAP(tdc775NTF,tdc775NTF.FCNCALL_CALL(tdc775NTF)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V775 qdc792NTF;
  {
  FCNCALL_SUBNAME("qdc792NTF");
  { FCNCALL_CALL_CTRL_WRAP(qdc792NTF,qdc792NTF.FCNCALL_CALL(qdc792NTF)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V775 qdc792GFI1;
  {
  FCNCALL_SUBNAME("qdc792GFI1");
  { FCNCALL_CALL_CTRL_WRAP(qdc792GFI1,qdc792GFI1.FCNCALL_CALL(qdc792GFI1)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V775 qdc792GFI2;
  {
  FCNCALL_SUBNAME("qdc792GFI2");
  { FCNCALL_CALL_CTRL_WRAP(qdc792GFI2,qdc792GFI2.FCNCALL_CALL(qdc792GFI2)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V775 qdc792GFI3;
  {
  FCNCALL_SUBNAME("qdc792GFI3");
  { FCNCALL_CALL_CTRL_WRAP(qdc792GFI3,qdc792GFI3.FCNCALL_CALL(qdc792GFI3)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V775 qdc792MFITEST;
  {
  FCNCALL_SUBNAME("qdc792MFITEST");
  { FCNCALL_CALL_CTRL_WRAP(qdc792MFITEST,qdc792MFITEST.FCNCALL_CALL(qdc792MFITEST)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_STD_VME vme;
  {
  FCNCALL_SUBNAME("vme");
  { FCNCALL_CALL_CTRL_WRAP(vme,vme.FCNCALL_CALL(vme)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CRATE2

#ifndef USER_DEF_unpack_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(unpack_event)::FCNCALL_NAME(unpack_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_event_base,FCNCALL_CLASS_NAME(unpack_event_base)::FCNCALL_CALL_BASE());
  // LAND_CAMAC_PILEUP pileup;
  {
  FCNCALL_SUBNAME("pileup");
  { FCNCALL_CALL_CTRL_WRAP(pileup,pileup.FCNCALL_CALL(pileup)); }
  FCNCALL_SUBNAME_END;
  }
  // SIDEREM01_VME sst;
  {
  FCNCALL_SUBNAME("sst");
  { FCNCALL_CALL_CTRL_WRAP(sst,sst.FCNCALL_CALL(sst)); }
  FCNCALL_SUBNAME_END;
  }
  // CROS3_SUBEVENT cros3;
  {
  FCNCALL_SUBNAME("cros3");
  { FCNCALL_CALL_CTRL_WRAP(cros3,cros3.FCNCALL_CALL(cros3)); }
  FCNCALL_SUBNAME_END;
  }
  // CROS3_REWRITE_SUBEVENT cros3_rewrite;
  {
  FCNCALL_SUBNAME("cros3_rewrite");
  { FCNCALL_CALL_CTRL_WRAP(cros3_rewrite,cros3_rewrite.FCNCALL_CALL(cros3_rewrite)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_CAMAC_CONVERTER camac;
  {
  FCNCALL_SUBNAME("camac");
  { FCNCALL_CALL_CTRL_WRAP(camac,camac.FCNCALL_CALL(camac)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY acq;
  {
  FCNCALL_SUBNAME("acq");
  { FCNCALL_CALL_CTRL_WRAP(acq,acq.FCNCALL_CALL(acq)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CRATE1 vme1;
  {
  FCNCALL_SUBNAME("vme1");
  { FCNCALL_CALL_CTRL_WRAP(vme1,vme1.FCNCALL_CALL(vme1)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CRATE2 vme2;
  {
  FCNCALL_SUBNAME("vme2");
  { FCNCALL_CALL_CTRL_WRAP(vme2,vme2.FCNCALL_CALL(vme2)); }
  FCNCALL_SUBNAME_END;
  }
  // CB_VME_RIGHT vme_cbr;
  {
  FCNCALL_SUBNAME("vme_cbr");
  { FCNCALL_CALL_CTRL_WRAP(vme_cbr,vme_cbr.FCNCALL_CALL(vme_cbr)); }
  FCNCALL_SUBNAME_END;
  }
  // CB_VME_LEFT vme_cbl;
  {
  FCNCALL_SUBNAME("vme_cbl");
  { FCNCALL_CALL_CTRL_WRAP(vme_cbl,vme_cbl.FCNCALL_CALL(vme_cbl)); }
  FCNCALL_SUBNAME_END;
  }
  // MASTER_VME vme_master;
  {
  FCNCALL_SUBNAME("vme_master");
  { FCNCALL_CALL_CTRL_WRAP(vme_master,vme_master.FCNCALL_CALL(vme_master)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_CAMAC_TCAL_INFO camac_tcal_info;
  {
  FCNCALL_SUBNAME("camac_tcal_info");
  { FCNCALL_CALL_CTRL_WRAP(camac_tcal_info,camac_tcal_info.FCNCALL_CALL(camac_tcal_info)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_CAMAC_SCALER camac_scalers;
  {
  FCNCALL_SUBNAME("camac_scalers");
  { FCNCALL_CALL_CTRL_WRAP(camac_scalers,camac_scalers.FCNCALL_CALL(camac_scalers)); }
  FCNCALL_SUBNAME_END;
  }
  // TACQUILA_LAND_SUBEVENT tacquila;
  {
  FCNCALL_SUBNAME("tacquila");
  { FCNCALL_CALL_CTRL_WRAP(tacquila,tacquila.FCNCALL_CALL(tacquila)); }
  FCNCALL_SUBNAME_END;
  }
  // TACQUILA_NEULAND_SUBEVENT neuland;
  {
  FCNCALL_SUBNAME("neuland");
  { FCNCALL_CALL_CTRL_WRAP(neuland,neuland.FCNCALL_CALL(neuland)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_unpack_event

#ifndef USER_DEF_unpack_sticky_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(unpack_sticky_event)::FCNCALL_NAME(unpack_sticky_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_sticky_event_base,FCNCALL_CLASS_NAME(unpack_sticky_event_base)::FCNCALL_CALL_BASE());
  FCNCALL_RET;
}
#endif//USER_DEF_unpack_sticky_event

#include "gen/default_fcncall_undef.hh"


/** END_FUNCTION_CALL_PER_MEMBER **************************************/


/** BEGIN_CORR_STRUCT **************************************************
 *
 * Correlation structure.
 *
 * Do not edit - automatically generated.
 */

// Corr struct for: CAMAC_LECROY_2277_1CH_HACK
// raw_list_ii_zero_suppress  .data(DATA16)[16]
// DATA16 .data[16]
// 
// size= 1  chunks= 16  mem=  16  line=32  total=512
// size=16  chunks=  1  mem=  16  line=17  total=272
// 
// corr structure: CAMAC_LECROY_2277_1CH_HACK
  // DATA16 .data[16]
// .CAMAC_LECROY_2277_1CH_HACK/16/.data/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_LECROY_2277_1CH_HACK
// .CAMAC_LECROY_2277_1CH_HACK// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_LECROY_2277_1CH_HACK
// .CAMAC_LECROY_2277_1CH_HACK
// Corr struct for: CAMAC_LECROY_4434
// raw_array_zero_suppress  .data(DATA24)[32]
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_LECROY_4434
// .CAMAC_LECROY_4434// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_LECROY_4434
// .CAMAC_LECROY_4434// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_LECROY_4434
// .CAMAC_LECROY_4434
// Corr struct for: CAMAC_PHILLIPS_7164
// raw_array_zero_suppress  .data(DATA12)[16]
// DATA12 .data[16]
// 
// size= 1  chunks= 16  mem=  16  line=32  total=512
// size=16  chunks=  1  mem=  16  line=17  total=272
// 
// corr structure: CAMAC_PHILLIPS_7164
  // DATA12 .data[16]
// .CAMAC_PHILLIPS_7164/16/.data/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_PHILLIPS_7164
// .CAMAC_PHILLIPS_7164// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_PHILLIPS_7164
// .CAMAC_PHILLIPS_7164
// Corr struct for: CAMAC_SILENA_4418
// raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
// DATA12_OVERFLOW .data[8]
// 
// size= 1  chunks=  8  mem=   8  line=16  total=128
// size= 8  chunks=  1  mem=   8  line=9  total=72
// 
// corr structure: CAMAC_SILENA_4418
  // DATA12_OVERFLOW .data[8]
// .CAMAC_SILENA_4418/8/.data/8/[8]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_SILENA_4418
// .CAMAC_SILENA_4418// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_SILENA_4418
// .CAMAC_SILENA_4418
// Corr struct for: CROS3_REWRITE
// raw_array_zero_suppress  .data(WIRE_START_END)[32768]
// uint32  .data_size
  // ---
// uint32  .threshold_curve
  // ---
// uint32  .leading_edge
  // ---
// uint32  .data
  // ---
// uint32  .dummy_19
  // ---
// uint32  .trigger_time
  // ---
// uint32  .ccb_id
  // ---
// uint32  .event_counter
  // ---
// uint32  .u32
  // ---
// uint32  .read_out_mode
  // ---
// uint32  .dummy_2_3
  // ---
// uint32  .pulser_enabled
  // ---
// uint32  .dummy_5_7
  // ---
// uint32  .statistics
  // ---
// uint32  .both_edges
  // ---
// uint32  .slices
  // ---
// uint32  .scale
  // ---
// uint32  .dummy_22_30
  // ---
// uint32  .odd_length16
  // ---
// uint32  .u32
  // ---
// uint32  .read_out_mode
  // ---
// uint32  .dummy_2_3
  // ---
// uint32  .pulser_enabled
  // ---
// uint32  .dummy_5_7
  // ---
// uint32  .statistics
  // ---
// uint32  .both_edges
  // ---
// uint32  .threshold_start
  // ---
// uint32  .threshold_step
  // ---
// uint32  .boards
  // ---
// uint32  .dummy_29_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_REWRITE
// .CROS3_REWRITE// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_REWRITE
// .CROS3_REWRITE// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_REWRITE
// .CROS3_REWRITE
// Corr struct for: DUMMY_WORD
// uint32  .dummy_word
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY_WORD
// .DUMMY_WORD// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY_WORD
// .DUMMY_WORD// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY_WORD
// .DUMMY_WORD
// Corr struct for: FASTBUS_LECROY_1875
// raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// DATA12_RANGE .data[64]
// 
// size= 1  chunks= 64  mem=  64  line=128  total=8192
// size=64  chunks=  1  mem=  64  line=65  total=4160
// 
// corr structure: FASTBUS_LECROY_1875
  // DATA12_RANGE .data[64]
// .FASTBUS_LECROY_1875/64/.data/64/[64]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FASTBUS_LECROY_1875
// .FASTBUS_LECROY_1875// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FASTBUS_LECROY_1875
// .FASTBUS_LECROY_1875
// Corr struct for: FASTBUS_LECROY_1885
// raw_array_zero_suppress  .data(DATA12_RANGE)[96]
// DATA12_RANGE .data[96]
// 
// size= 1  chunks= 96  mem=  96  line=192  total=18432
// size=96  chunks=  1  mem=  96  line=97  total=9312
// 
// corr structure: FASTBUS_LECROY_1885
  // DATA12_RANGE .data[96]
// .FASTBUS_LECROY_1885/96/.data/96/[96]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FASTBUS_LECROY_1885
// .FASTBUS_LECROY_1885// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FASTBUS_LECROY_1885
// .FASTBUS_LECROY_1885
// Corr struct for: LAND_STD_VME
// uint32  .fail_general
  // ---
// uint32  .fail_data_corrupt
  // ---
// uint32  .fail_data_missing
  // ---
// uint32  .fail_data_too_much
  // ---
// uint32  .fail_event_counter_mismatch
  // ---
// uint32  .fail_readout_error_driver
  // ---
// uint32  .fail_unexpected_trigger
  // ---
// uint32  .fail_firmware_mismatch
  // ---
// uint32  .dummy_8_21
  // ---
// uint32  .has_multi_trlo_ii_counter0
  // ---
// uint32  .has_clock_counter_stamp
  // ---
// uint32  .has_continous_event_counter
  // ---
// uint32  .has_update_qdc_iped_value
  // ---
// uint32  .spurious_start_before_tcal
  // ---
// uint32  .has_no_zero_suppression
  // ---
// uint32  .has_multi_adctdc_counter0
  // ---
// uint32  .has_multi_scaler_counter0
  // ---
// uint32  .has_multi_event
  // ---
// uint32  .has_time_stamp
  // ---
// uint32  .u32
  // ---
// uint32  .continous_event_counter
  // ---
// uint32  .time_stamp
  // ---
// uint32  .clock_counter_stamp
  // ---
// uint32  .iped
  // ---
// uint32  .multi_events
  // ---
// uint32  .multi_trlo_ii_counter0
  // ---
// uint32  .multi_scaler_counter0
  // ---
// uint32  .multi_adctdc_counter0
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_STD_VME
// .LAND_STD_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_STD_VME
// .LAND_STD_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_STD_VME
// .LAND_STD_VME
// Corr struct for: NTP64_TIME
// uint32  .sec
  // ---
// uint32  .frac
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: NTP64_TIME
// .NTP64_TIME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: NTP64_TIME
// .NTP64_TIME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: NTP64_TIME
// .NTP64_TIME
// Corr struct for: NTP_MESSAGE
// uint32  .word_count
  // ---
// uint32  .quick_burst
  // ---
// uint32  .dummy_17_23
  // ---
// uint32  .id
  // ---
// uint32  .u32
  // ---
// uint32  .server_id
  // ---
// uint32  .precision
  // ---
// uint32  .poll
  // ---
// uint32  .stratum
  // ---
// uint32  .dummy_20_23
  // ---
// uint32  .mode
  // ---
// uint32  .version
  // ---
// uint32  .leap
  // ---
// uint32  .u32
  // ---
// uint32  .frac
  // ---
// uint32  .sec
  // ---
// uint32  .u32
  // ---
// uint32  .frac
  // ---
// uint32  .sec
  // ---
// uint32  .u32
  // ---
// uint32  .refid
  // ---
// NTP64_TIME  .orig2time
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .tmit2time
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .rec2time
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .rx2time
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .reftime
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .origtime
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .rectime
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .tmittime
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .rxtime
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: NTP_MESSAGE
// .NTP_MESSAGE// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: NTP_MESSAGE
// .NTP_MESSAGE// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: NTP_MESSAGE
// .NTP_MESSAGE
// Corr struct for: RANDOM_TCAL_TSTAMP_CLOCK
// uint32  .soft_latches
  // ---
// uint32  .hard_latches
  // ---
// uint32  .clock_ticks
  // ---
// NTP64_TIME  .before
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .after
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: RANDOM_TCAL_TSTAMP_CLOCK
// .RANDOM_TCAL_TSTAMP_CLOCK// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: RANDOM_TCAL_TSTAMP_CLOCK
// .RANDOM_TCAL_TSTAMP_CLOCK// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: RANDOM_TCAL_TSTAMP_CLOCK
// .RANDOM_TCAL_TSTAMP_CLOCK
// Corr struct for: RANDOM_TCAL
// uint32  .word_count
  // ---
// uint32  .pulses
  // ---
// uint32  .clock_bits
  // ---
// uint32  .has_tstamp1
  // ---
// uint32  .has_tstamp2
  // ---
// uint32  .dummy_20_23
  // ---
// uint32  .id
  // ---
// uint32  .u32
  // ---
// RANDOM_TCAL_TSTAMP_CLOCK  .tstamp1
  // uint32  .soft_latches
    // ---
  // uint32  .hard_latches
    // ---
  // uint32  .clock_ticks
    // ---
  // NTP64_TIME  .before
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .after
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
// RANDOM_TCAL_TSTAMP_CLOCK  .tstamp2
  // uint32  .soft_latches
    // ---
  // uint32  .hard_latches
    // ---
  // uint32  .clock_ticks
    // ---
  // NTP64_TIME  .before
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .after
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: RANDOM_TCAL
// .RANDOM_TCAL// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: RANDOM_TCAL
// .RANDOM_TCAL// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: RANDOM_TCAL
// .RANDOM_TCAL
// Corr struct for: SIDEREM_BLOCK
// raw_array_zero_suppress  .data[4](DATA12)[512]
// uint32  .count
  // ---
// uint32  .local_event_counter
  // ---
// uint32  .local_trigger
  // ---
// uint32  .siderem
  // ---
// uint32  .gtb
  // ---
// uint32  .sam
  // ---
// uint32  .u32
  // ---
// DATA12 .data[4][512]
// 
// size= 1  chunks=2048  mem=2048  line=4096  total=8388608
// size=512  chunks=  4  mem=2048  line=2052  total=4202496
// size=2048  chunks=  1  mem=2048  line=2049  total=4196352
// 
// corr structure: SIDEREM_BLOCK
  // DATA12 .data[4][512]
// .SIDEREM_BLOCK/2048/.data/2048/[4]/512/[512]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SIDEREM_BLOCK
// .SIDEREM_BLOCK// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SIDEREM_BLOCK
// .SIDEREM_BLOCK
// Corr struct for: SOFT_SCALER32
// raw_array_zero_suppress  .data(DATA32)[32]
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SOFT_SCALER32
// .SOFT_SCALER32// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SOFT_SCALER32
// .SOFT_SCALER32// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SOFT_SCALER32
// .SOFT_SCALER32
// Corr struct for: TACQUILA_DATA
// raw_array_zero_suppress  .tac[30](DATA12)[17]
// raw_array_zero_suppress  .adc[30](DATA12)[17]
// raw_array_zero_suppress  .clk[30](DATA12)[17]
// uint32  .count
  // ---
// uint32  .dummy1
  // ---
// uint32  .trigger_tac
  // ---
// uint32  .trigger_sam
  // ---
// uint32  .lec
  // ---
// uint32  .gtb
  // ---
// uint32  .sam
  // ---
// uint32  .u32
  // ---
// DATA12 .tac[30][17]
// DATA12 .adc[30][17]
// DATA12 .clk[30][17]
// 
// size= 1  chunks=1530  mem=1530  line=3060  total=4681800
// size=17  chunks= 90  mem=1530  line=1620  total=2478600
// size=510  chunks=  3  mem=1530  line=1533  total=2345490
// size=1530  chunks=  1  mem=1530  line=1531  total=2342430
// 
// corr structure: TACQUILA_DATA
  // DATA12 .tac[30][17]
  // DATA12 .adc[30][17]
  // DATA12 .clk[30][17]
// .TACQUILA_DATA/1530/.tac/510/[30]/17/[17]
                    // .adc/510/[30]/17/[17]
                    // .clk/510/[30]/17/[17]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TACQUILA_DATA
// .TACQUILA_DATA// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TACQUILA_DATA
// .TACQUILA_DATA
// Corr struct for: TRLO_SAMPLER
// raw_list_ii_zero_suppress  .stamps(DATA32)[512]
  // ---
// uint32  .count
  // ---
// uint32  .dummy_10_23
  // ---
// uint32  .id
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TRLO_SAMPLER
// .TRLO_SAMPLER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TRLO_SAMPLER
// .TRLO_SAMPLER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TRLO_SAMPLER
// .TRLO_SAMPLER
// Corr struct for: VME_CAEN_V1190_SUBTDC
// uint32  .bunch_id
  // ---
// uint32  .event_id
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .flags
  // ---
// uint32  .dummy_15_23
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .word_count
  // ---
// uint32  .event_id
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SUBTDC
// .VME_CAEN_V1190_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SUBTDC
// .VME_CAEN_V1190_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SUBTDC
// .VME_CAEN_V1190_SUBTDC
// Corr struct for: VME_CAEN_V1190
// raw_array_multi_zero_suppress  .data(DATA24)[32][128]
  // ---
// uint32  .geom
  // ---
// uint32  .event_number
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// VME_CAEN_V1190_SUBTDC  .tdc[4]
  // uint32  .bunch_id
    // ---
  // uint32  .event_id
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
  // uint32  .flags
    // ---
  // uint32  .dummy_15_23
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
  // uint32  .word_count
    // ---
  // uint32  .event_id
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
// uint32  .time_tag
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .geom
  // ---
// uint32  .word_count
  // ---
// uint32  .dummy_20_23
  // ---
// uint32  .tdc_error
  // ---
// uint32  .buffer_overflow
  // ---
// uint32  .trigger_lost
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190
// .VME_CAEN_V1190// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190
// .VME_CAEN_V1190// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190
// .VME_CAEN_V1190
// Corr struct for: VME_CAEN_V1190_SHORT_SUBTDC
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT_SUBTDC
// .VME_CAEN_V1190_SHORT_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT_SUBTDC
// .VME_CAEN_V1190_SHORT_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT_SUBTDC
// .VME_CAEN_V1190_SHORT_SUBTDC
// Corr struct for: VME_CAEN_V1190_SHORT_SUBTDC_ERROR
// uint32  .flags
  // ---
// uint32  .dummy_15_23
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT_SUBTDC_ERROR
// .VME_CAEN_V1190_SHORT_SUBTDC_ERROR// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT_SUBTDC_ERROR
// .VME_CAEN_V1190_SHORT_SUBTDC_ERROR// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT_SUBTDC_ERROR
// .VME_CAEN_V1190_SHORT_SUBTDC_ERROR
// Corr struct for: VME_CAEN_V1190_SHORT
// raw_array_multi_zero_suppress  .data(DATA24)[32][128]
  // ---
// uint32  .geom
  // ---
// uint32  .event_number
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// VME_CAEN_V1190_SHORT_SUBTDC  .tdc[4]
// VME_CAEN_V1190_SHORT_SUBTDC_ERROR  .err[4]
  // uint32  .flags
    // ---
  // uint32  .dummy_15_23
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
// uint32  .time_tag
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .geom
  // ---
// uint32  .word_count
  // ---
// uint32  .dummy_20_23
  // ---
// uint32  .tdc_error
  // ---
// uint32  .buffer_overflow
  // ---
// uint32  .trigger_lost
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT
// .VME_CAEN_V1190_SHORT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT
// .VME_CAEN_V1190_SHORT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT
// .VME_CAEN_V1190_SHORT
// Corr struct for: VME_CAEN_V1290_SUBTDC
// uint32  .bunch_id
  // ---
// uint32  .event_id
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .flags
  // ---
// uint32  .dummy_15_23
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .word_count
  // ---
// uint32  .event_id
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SUBTDC
// .VME_CAEN_V1290_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SUBTDC
// .VME_CAEN_V1290_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SUBTDC
// .VME_CAEN_V1290_SUBTDC
// Corr struct for: VME_CAEN_V1290
// raw_array_multi_zero_suppress  .data(DATA24)[32][128]
  // ---
// uint32  .geom
  // ---
// uint32  .event_number
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// VME_CAEN_V1290_SUBTDC  .tdc[4]
  // uint32  .bunch_id
    // ---
  // uint32  .event_id
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
  // uint32  .flags
    // ---
  // uint32  .dummy_15_23
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
  // uint32  .word_count
    // ---
  // uint32  .event_id
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
// uint32  .time_tag
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .geom
  // ---
// uint32  .word_count
  // ---
// uint32  .dummy_20_23
  // ---
// uint32  .tdc_error
  // ---
// uint32  .buffer_overflow
  // ---
// uint32  .trigger_lost
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290
// .VME_CAEN_V1290// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290
// .VME_CAEN_V1290// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290
// .VME_CAEN_V1290
// Corr struct for: VME_CAEN_V1290_SHORT_SUBTDC
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT_SUBTDC
// .VME_CAEN_V1290_SHORT_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT_SUBTDC
// .VME_CAEN_V1290_SHORT_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT_SUBTDC
// .VME_CAEN_V1290_SHORT_SUBTDC
// Corr struct for: VME_CAEN_V1290_SHORT_SUBTDC_ERROR
// uint32  .flags
  // ---
// uint32  .dummy_15_23
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT_SUBTDC_ERROR
// .VME_CAEN_V1290_SHORT_SUBTDC_ERROR// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT_SUBTDC_ERROR
// .VME_CAEN_V1290_SHORT_SUBTDC_ERROR// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT_SUBTDC_ERROR
// .VME_CAEN_V1290_SHORT_SUBTDC_ERROR
// Corr struct for: VME_CAEN_V1290_SHORT
// raw_array_multi_zero_suppress  .data(DATA24)[32][128]
  // ---
// uint32  .geom
  // ---
// uint32  .event_number
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// VME_CAEN_V1290_SHORT_SUBTDC  .tdc[4]
// VME_CAEN_V1290_SHORT_SUBTDC_ERROR  .err[4]
  // uint32  .flags
    // ---
  // uint32  .dummy_15_23
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
// uint32  .time_tag
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .geom
  // ---
// uint32  .word_count
  // ---
// uint32  .dummy_20_23
  // ---
// uint32  .tdc_error
  // ---
// uint32  .buffer_overflow
  // ---
// uint32  .trigger_lost
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT
// .VME_CAEN_V1290_SHORT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT
// .VME_CAEN_V1290_SHORT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT
// .VME_CAEN_V1290_SHORT
// Corr struct for: VME_CAEN_V775
// raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
// uint32  .event_number
  // ---
// uint32  .unnamed_24_26
  // ---
// uint32  .geom
  // ---
// uint32  .u32
  // ---
// DATA12_OVERFLOW .data[32]
// 
// size= 1  chunks= 32  mem=  32  line=64  total=2048
// size=32  chunks=  1  mem=  32  line=33  total=1056
// 
// corr structure: VME_CAEN_V775
  // DATA12_OVERFLOW .data[32]
// .VME_CAEN_V775/32/.data/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V775
// .VME_CAEN_V775// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V775
// .VME_CAEN_V775
// Corr struct for: VME_CAEN_V830
// raw_array_zero_suppress  .data(DATA32)[32]
  // ---
// uint32  .event_number
  // ---
// uint32  .ts
  // ---
// uint32  .count
  // ---
// uint32  .dummy_24_25
  // ---
// uint32  .unnamed_26_26
  // ---
// uint32  .geom
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V830
// .VME_CAEN_V830// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V830
// .VME_CAEN_V830// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V830
// .VME_CAEN_V830
// Corr struct for: VME_MESYTEC_MADC32
// raw_array_zero_suppress  .data(DATA14_OVERFLOW)[32]
// uint32  .counter
  // ---
// uint32  .unnamed_30_31
  // ---
// uint32  .u32
  // ---
// DATA14_OVERFLOW .data[32]
// 
// size= 1  chunks= 32  mem=  32  line=64  total=2048
// size=32  chunks=  1  mem=  32  line=33  total=1056
// 
// corr structure: VME_MESYTEC_MADC32
  // DATA14_OVERFLOW .data[32]
// .VME_MESYTEC_MADC32/32/.data/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_MESYTEC_MADC32
// .VME_MESYTEC_MADC32// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_MESYTEC_MADC32
// .VME_MESYTEC_MADC32
// Corr struct for: VME_MESYTEC_MDPP16
// raw_array_multi_zero_suppress  .data(DATA16_OVERFLOW)[34][100]
// uint32  .counter
  // ---
// uint32  .unnamed_30_31
  // ---
// uint32  .u32
  // ---
// DATA16_OVERFLOW .data[34][100]
// 
// size= 1  chunks=3400  mem=3400  line=6800  total=23120000
// size=100  chunks= 34  mem=3400  line=3434  total=11675600
// size=3400  chunks=  1  mem=3400  line=3401  total=11563400
// 
// corr structure: VME_MESYTEC_MDPP16
  // DATA16_OVERFLOW .data[34][100]
// .VME_MESYTEC_MDPP16/3400/.data/3400/[34]/100/[100]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_MESYTEC_MDPP16
// .VME_MESYTEC_MDPP16// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_MESYTEC_MDPP16
// .VME_MESYTEC_MDPP16
// Corr struct for: VME_VUPROM_V35
// raw_array_zero_suppress  .data(DATA12)[192]
// DATA12 .data[192]
// 
// size= 1  chunks=192  mem= 192  line=384  total=73728
// size=192  chunks=  1  mem= 192  line=193  total=37056
// 
// corr structure: VME_VUPROM_V35
  // DATA12 .data[192]
// .VME_VUPROM_V35/192/.data/192/[192]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_VUPROM_V35
// .VME_VUPROM_V35// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_VUPROM_V35
// .VME_VUPROM_V35
// Corr struct for: CB_VME_LEFT
//  : public unpack_subevent_base
// ---
// VME_VUPROM_V35  .tdc
  // raw_array_zero_suppress  .data(DATA12)[192]
// VME_MESYTEC_MADC32  .adc[4]
  // raw_array_zero_suppress  .data(DATA14_OVERFLOW)[32]
  // uint32  .counter
    // ---
  // uint32  .unnamed_30_31
    // ---
  // uint32  .u32
    // ---
// VME_MESYTEC_MADC32  .madc0_psp
  // raw_array_zero_suppress  .data(DATA14_OVERFLOW)[32]
  // uint32  .counter
    // ---
  // uint32  .unnamed_30_31
    // ---
  // uint32  .u32
    // ---
// LAND_STD_VME  .vme
  // uint32  .fail_general
    // ---
  // uint32  .fail_data_corrupt
    // ---
  // uint32  .fail_data_missing
    // ---
  // uint32  .fail_data_too_much
    // ---
  // uint32  .fail_event_counter_mismatch
    // ---
  // uint32  .fail_readout_error_driver
    // ---
  // uint32  .fail_unexpected_trigger
    // ---
  // uint32  .fail_firmware_mismatch
    // ---
  // uint32  .dummy_8_21
    // ---
  // uint32  .has_multi_trlo_ii_counter0
    // ---
  // uint32  .has_clock_counter_stamp
    // ---
  // uint32  .has_continous_event_counter
    // ---
  // uint32  .has_update_qdc_iped_value
    // ---
  // uint32  .spurious_start_before_tcal
    // ---
  // uint32  .has_no_zero_suppression
    // ---
  // uint32  .has_multi_adctdc_counter0
    // ---
  // uint32  .has_multi_scaler_counter0
    // ---
  // uint32  .has_multi_event
    // ---
  // uint32  .has_time_stamp
    // ---
  // uint32  .u32
    // ---
  // uint32  .continous_event_counter
    // ---
  // uint32  .time_stamp
    // ---
  // uint32  .clock_counter_stamp
    // ---
  // uint32  .iped
    // ---
  // uint32  .multi_events
    // ---
  // uint32  .multi_trlo_ii_counter0
    // ---
  // uint32  .multi_scaler_counter0
    // ---
  // uint32  .multi_adctdc_counter0
    // ---
// DATA12 .tdc.data[192]
// DATA14_OVERFLOW .adc[4].data[32]
// DATA14_OVERFLOW .madc0_psp.data[32]
// 
// size= 1  chunks=352  mem= 352  line=704  total=247808
// size=32  chunks=197  mem=6304  line=6501  total=2288352
// size=128  chunks=194  mem=24832  line=25026  total=8809152
// size=192  chunks=  3  mem= 576  line=579  total=203808
// size=352  chunks=  1  mem= 352  line=353  total=124256
// 
// corr structure: CB_VME_LEFT
  // DATA12 .tdc.data[192]
  // DATA14_OVERFLOW .adc[4].data[32]
  // DATA14_OVERFLOW .madc0_psp.data[32]
// .CB_VME_LEFT/352/.tdc/192/.data/192/[192]
                 // .adc/128/[4]/32/.data/32/[32]
                 // .madc0_psp/32/.data/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CB_VME_LEFT
// .CB_VME_LEFT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CB_VME_LEFT
// .CB_VME_LEFT
// Corr struct for: CB_VME_RIGHT
//  : public unpack_subevent_base
// ---
// VME_VUPROM_V35  .tdc
  // raw_array_zero_suppress  .data(DATA12)[192]
// VME_MESYTEC_MADC32  .adc[4]
  // raw_array_zero_suppress  .data(DATA14_OVERFLOW)[32]
  // uint32  .counter
    // ---
  // uint32  .unnamed_30_31
    // ---
  // uint32  .u32
    // ---
// LAND_STD_VME  .vme
  // uint32  .fail_general
    // ---
  // uint32  .fail_data_corrupt
    // ---
  // uint32  .fail_data_missing
    // ---
  // uint32  .fail_data_too_much
    // ---
  // uint32  .fail_event_counter_mismatch
    // ---
  // uint32  .fail_readout_error_driver
    // ---
  // uint32  .fail_unexpected_trigger
    // ---
  // uint32  .fail_firmware_mismatch
    // ---
  // uint32  .dummy_8_21
    // ---
  // uint32  .has_multi_trlo_ii_counter0
    // ---
  // uint32  .has_clock_counter_stamp
    // ---
  // uint32  .has_continous_event_counter
    // ---
  // uint32  .has_update_qdc_iped_value
    // ---
  // uint32  .spurious_start_before_tcal
    // ---
  // uint32  .has_no_zero_suppression
    // ---
  // uint32  .has_multi_adctdc_counter0
    // ---
  // uint32  .has_multi_scaler_counter0
    // ---
  // uint32  .has_multi_event
    // ---
  // uint32  .has_time_stamp
    // ---
  // uint32  .u32
    // ---
  // uint32  .continous_event_counter
    // ---
  // uint32  .time_stamp
    // ---
  // uint32  .clock_counter_stamp
    // ---
  // uint32  .iped
    // ---
  // uint32  .multi_events
    // ---
  // uint32  .multi_trlo_ii_counter0
    // ---
  // uint32  .multi_scaler_counter0
    // ---
  // uint32  .multi_adctdc_counter0
    // ---
// DATA12 .tdc.data[192]
// DATA14_OVERFLOW .adc[4].data[32]
// 
// size= 1  chunks=320  mem= 320  line=640  total=204800
// size=32  chunks=196  mem=6272  line=6468  total=2069760
// size=128  chunks=193  mem=24704  line=24897  total=7967040
// size=192  chunks=  2  mem= 384  line=386  total=123520
// size=320  chunks=  1  mem= 320  line=321  total=102720
// 
// corr structure: CB_VME_RIGHT
  // DATA12 .tdc.data[192]
  // DATA14_OVERFLOW .adc[4].data[32]
// .CB_VME_RIGHT/320/.tdc/192/.data/192/[192]
                  // .adc/128/[4]/32/.data/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CB_VME_RIGHT
// .CB_VME_RIGHT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CB_VME_RIGHT
// .CB_VME_RIGHT
// Corr struct for: CROS3_REWRITE_SUBEVENT
//  : public unpack_subevent_base
// ---
// CROS3_REWRITE  .ccb[2]
  // raw_array_zero_suppress  .data(WIRE_START_END)[32768]
  // uint32  .data_size
    // ---
  // uint32  .threshold_curve
    // ---
  // uint32  .leading_edge
    // ---
  // uint32  .data
    // ---
  // uint32  .dummy_19
    // ---
  // uint32  .trigger_time
    // ---
  // uint32  .ccb_id
    // ---
  // uint32  .event_counter
    // ---
  // uint32  .u32
    // ---
  // uint32  .read_out_mode
    // ---
  // uint32  .dummy_2_3
    // ---
  // uint32  .pulser_enabled
    // ---
  // uint32  .dummy_5_7
    // ---
  // uint32  .statistics
    // ---
  // uint32  .both_edges
    // ---
  // uint32  .slices
    // ---
  // uint32  .scale
    // ---
  // uint32  .dummy_22_30
    // ---
  // uint32  .odd_length16
    // ---
  // uint32  .u32
    // ---
  // uint32  .read_out_mode
    // ---
  // uint32  .dummy_2_3
    // ---
  // uint32  .pulser_enabled
    // ---
  // uint32  .dummy_5_7
    // ---
  // uint32  .statistics
    // ---
  // uint32  .both_edges
    // ---
  // uint32  .threshold_start
    // ---
  // uint32  .threshold_step
    // ---
  // uint32  .boards
    // ---
  // uint32  .dummy_29_31
    // ---
  // uint32  .u32
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_REWRITE_SUBEVENT
// .CROS3_REWRITE_SUBEVENT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_REWRITE_SUBEVENT
// .CROS3_REWRITE_SUBEVENT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_REWRITE_SUBEVENT
// .CROS3_REWRITE_SUBEVENT
// Corr struct for: CROS3_SUBEVENT
//  : public unpack_subevent_base
// ---
// EXT_CROS3  .ccb[2]
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_SUBEVENT
// .CROS3_SUBEVENT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_SUBEVENT
// .CROS3_SUBEVENT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_SUBEVENT
// .CROS3_SUBEVENT
// Corr struct for: DUMMY
//  : public unpack_subevent_base
// ---
// DUMMY_WORD  .d
  // uint32  .dummy_word
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY
// Corr struct for: LAND_CAMAC_CONVERTER
//  : public unpack_subevent_base
// ---
// uint16  .tpat
  // ---
// uint16  .tprev
  // ---
// uint16  .tnext
  // ---
// uint16  .tprev2
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_CONVERTER
// .LAND_CAMAC_CONVERTER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_CONVERTER
// .LAND_CAMAC_CONVERTER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_CONVERTER
// .LAND_CAMAC_CONVERTER
// Corr struct for: LAND_CAMAC_PILEUP
//  : public unpack_subevent_base
// ---
// CAMAC_LECROY_2277_1CH_HACK  .tdc
  // raw_list_ii_zero_suppress  .data(DATA16)[16]
// CAMAC_LECROY_2277_1CH_HACK  .tcal
  // raw_list_ii_zero_suppress  .data(DATA16)[16]
// DATA16 .tdc.data[16]
// DATA16 .tcal.data[16]
// 
// size= 1  chunks= 32  mem=  32  line=64  total=2048
// size=16  chunks=  2  mem=  32  line=34  total=1088
// size=32  chunks=  1  mem=  32  line=33  total=1056
// 
// corr structure: LAND_CAMAC_PILEUP
  // DATA16 .tdc.data[16]
  // DATA16 .tcal.data[16]
// .LAND_CAMAC_PILEUP/32/.tdc/16/.data/16/[16]
                      // .tcal/16/.data/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_PILEUP
// .LAND_CAMAC_PILEUP// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_PILEUP
// .LAND_CAMAC_PILEUP
// Corr struct for: LAND_CAMAC_SCALER
//  : public unpack_subevent_base
// ---
// uint32  .timestamp
  // ---
// uint32  .unnamed_0_31
  // ---
// uint32  .u32
  // ---
// CAMAC_LECROY_4434  .scaler0
  // raw_array_zero_suppress  .data(DATA24)[32]
    // ---
// CAMAC_LECROY_4434  .scaler2
  // raw_array_zero_suppress  .data(DATA24)[32]
    // ---
// CAMAC_LECROY_4434  .scaler1
  // raw_array_zero_suppress  .data(DATA24)[32]
    // ---
// SOFT_SCALER32  .scaler3
  // raw_array_zero_suppress  .data(DATA32)[32]
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_SCALER
// .LAND_CAMAC_SCALER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_SCALER
// .LAND_CAMAC_SCALER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_SCALER
// .LAND_CAMAC_SCALER
// Corr struct for: LAND_CAMAC_START_STOP_STAMP
//  : public unpack_subevent_base
// ---
// uint32  .timestamp
  // ---
// uint32  .unnamed_0_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_START_STOP_STAMP
// .LAND_CAMAC_START_STOP_STAMP// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_START_STOP_STAMP
// .LAND_CAMAC_START_STOP_STAMP// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_START_STOP_STAMP
// .LAND_CAMAC_START_STOP_STAMP
// Corr struct for: LAND_CAMAC_TCAL_INFO
//  : public unpack_subevent_base
// ---
// uint32  .info
  // ---
// RANDOM_TCAL  .rtcal
  // uint32  .word_count
    // ---
  // uint32  .pulses
    // ---
  // uint32  .clock_bits
    // ---
  // uint32  .has_tstamp1
    // ---
  // uint32  .has_tstamp2
    // ---
  // uint32  .dummy_20_23
    // ---
  // uint32  .id
    // ---
  // uint32  .u32
    // ---
  // RANDOM_TCAL_TSTAMP_CLOCK  .tstamp1
    // uint32  .soft_latches
      // ---
    // uint32  .hard_latches
      // ---
    // uint32  .clock_ticks
      // ---
    // NTP64_TIME  .before
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .after
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
  // RANDOM_TCAL_TSTAMP_CLOCK  .tstamp2
    // uint32  .soft_latches
      // ---
    // uint32  .hard_latches
      // ---
    // uint32  .clock_ticks
      // ---
    // NTP64_TIME  .before
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .after
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
// NTP_MESSAGE  .ntp
  // uint32  .word_count
    // ---
  // uint32  .quick_burst
    // ---
  // uint32  .dummy_17_23
    // ---
  // uint32  .id
    // ---
  // uint32  .u32
    // ---
  // uint32  .server_id
    // ---
  // uint32  .precision
    // ---
  // uint32  .poll
    // ---
  // uint32  .stratum
    // ---
  // uint32  .dummy_20_23
    // ---
  // uint32  .mode
    // ---
  // uint32  .version
    // ---
  // uint32  .leap
    // ---
  // uint32  .u32
    // ---
  // uint32  .frac
    // ---
  // uint32  .sec
    // ---
  // uint32  .u32
    // ---
  // uint32  .frac
    // ---
  // uint32  .sec
    // ---
  // uint32  .u32
    // ---
  // uint32  .refid
    // ---
  // NTP64_TIME  .orig2time
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .tmit2time
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .rec2time
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .rx2time
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .reftime
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .origtime
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .rectime
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .tmittime
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .rxtime
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_TCAL_INFO
// .LAND_CAMAC_TCAL_INFO// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_TCAL_INFO
// .LAND_CAMAC_TCAL_INFO// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_TCAL_INFO
// .LAND_CAMAC_TCAL_INFO
// Corr struct for: MASTER_VME
//  : public unpack_subevent_base
// ---
// TRLO_SAMPLER  .sampler_pos
  // raw_list_ii_zero_suppress  .stamps(DATA32)[512]
    // ---
  // uint32  .count
    // ---
  // uint32  .dummy_10_23
    // ---
  // uint32  .id
    // ---
  // uint32  .u32
    // ---
// TRLO_SAMPLER  .sampler_cb_sum
  // raw_list_ii_zero_suppress  .stamps(DATA32)[512]
    // ---
  // uint32  .count
    // ---
  // uint32  .dummy_10_23
    // ---
  // uint32  .id
    // ---
  // uint32  .u32
    // ---
// LAND_STD_VME  .vme
  // uint32  .fail_general
    // ---
  // uint32  .fail_data_corrupt
    // ---
  // uint32  .fail_data_missing
    // ---
  // uint32  .fail_data_too_much
    // ---
  // uint32  .fail_event_counter_mismatch
    // ---
  // uint32  .fail_readout_error_driver
    // ---
  // uint32  .fail_unexpected_trigger
    // ---
  // uint32  .fail_firmware_mismatch
    // ---
  // uint32  .dummy_8_21
    // ---
  // uint32  .has_multi_trlo_ii_counter0
    // ---
  // uint32  .has_clock_counter_stamp
    // ---
  // uint32  .has_continous_event_counter
    // ---
  // uint32  .has_update_qdc_iped_value
    // ---
  // uint32  .spurious_start_before_tcal
    // ---
  // uint32  .has_no_zero_suppression
    // ---
  // uint32  .has_multi_adctdc_counter0
    // ---
  // uint32  .has_multi_scaler_counter0
    // ---
  // uint32  .has_multi_event
    // ---
  // uint32  .has_time_stamp
    // ---
  // uint32  .u32
    // ---
  // uint32  .continous_event_counter
    // ---
  // uint32  .time_stamp
    // ---
  // uint32  .clock_counter_stamp
    // ---
  // uint32  .iped
    // ---
  // uint32  .multi_events
    // ---
  // uint32  .multi_trlo_ii_counter0
    // ---
  // uint32  .multi_scaler_counter0
    // ---
  // uint32  .multi_adctdc_counter0
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: MASTER_VME
// .MASTER_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: MASTER_VME
// .MASTER_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: MASTER_VME
// .MASTER_VME
// Corr struct for: SIDEREM01_VME
//  : public unpack_subevent_base
// ---
// EXT_SST  .sst[8]
// uint32  .unnamed_0_31
  // ---
// uint32  .u32
  // ---
// uint32  .unnamed_0_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SIDEREM01_VME
// .SIDEREM01_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SIDEREM01_VME
// .SIDEREM01_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SIDEREM01_VME
// .SIDEREM01_VME
// Corr struct for: TACQUILA_LAND_SUBEVENT
//  : public unpack_subevent_base
// ---
// TACQUILA_DATA  .data_sam5_gtb0
  // raw_array_zero_suppress  .tac[30](DATA12)[17]
  // raw_array_zero_suppress  .adc[30](DATA12)[17]
  // raw_array_zero_suppress  .clk[30](DATA12)[17]
  // uint32  .count
    // ---
  // uint32  .dummy1
    // ---
  // uint32  .trigger_tac
    // ---
  // uint32  .trigger_sam
    // ---
  // uint32  .lec
    // ---
  // uint32  .gtb
    // ---
  // uint32  .sam
    // ---
  // uint32  .u32
    // ---
// TACQUILA_DATA  .data_sam6_gtb1
  // raw_array_zero_suppress  .tac[30](DATA12)[17]
  // raw_array_zero_suppress  .adc[30](DATA12)[17]
  // raw_array_zero_suppress  .clk[30](DATA12)[17]
  // uint32  .count
    // ---
  // uint32  .dummy1
    // ---
  // uint32  .trigger_tac
    // ---
  // uint32  .trigger_sam
    // ---
  // uint32  .lec
    // ---
  // uint32  .gtb
    // ---
  // uint32  .sam
    // ---
  // uint32  .u32
    // ---
// TACQUILA_DATA  .data_sam6_gtb0
  // raw_array_zero_suppress  .tac[30](DATA12)[17]
  // raw_array_zero_suppress  .adc[30](DATA12)[17]
  // raw_array_zero_suppress  .clk[30](DATA12)[17]
  // uint32  .count
    // ---
  // uint32  .dummy1
    // ---
  // uint32  .trigger_tac
    // ---
  // uint32  .trigger_sam
    // ---
  // uint32  .lec
    // ---
  // uint32  .gtb
    // ---
  // uint32  .sam
    // ---
  // uint32  .u32
    // ---
// DATA12 .data_sam5_gtb0.tac[30][17]
// DATA12 .data_sam5_gtb0.adc[30][17]
// DATA12 .data_sam5_gtb0.clk[30][17]
// DATA12 .data_sam6_gtb1.tac[30][17]
// DATA12 .data_sam6_gtb1.adc[30][17]
// DATA12 .data_sam6_gtb1.clk[30][17]
// DATA12 .data_sam6_gtb0.tac[30][17]
// DATA12 .data_sam6_gtb0.adc[30][17]
// DATA12 .data_sam6_gtb0.clk[30][17]
// 
// size= 1  chunks=4590  mem=4590  line=9180  total=42136200
// size=17  chunks=270  mem=4590  line=4860  total=22307400
// size=510  chunks=  9  mem=4590  line=4599  total=21109410
// size=1530  chunks=  3  mem=4590  line=4593  total=21081870
// size=4590  chunks=  1  mem=4590  line=4591  total=21072690
// 
// corr structure: TACQUILA_LAND_SUBEVENT
  // DATA12 .data_sam5_gtb0.tac[30][17]
  // DATA12 .data_sam5_gtb0.adc[30][17]
  // DATA12 .data_sam5_gtb0.clk[30][17]
  // DATA12 .data_sam6_gtb1.tac[30][17]
  // DATA12 .data_sam6_gtb1.adc[30][17]
  // DATA12 .data_sam6_gtb1.clk[30][17]
  // DATA12 .data_sam6_gtb0.tac[30][17]
  // DATA12 .data_sam6_gtb0.adc[30][17]
  // DATA12 .data_sam6_gtb0.clk[30][17]
// .TACQUILA_LAND_SUBEVENT/4590/.data_sam5_gtb0/1530/.tac/510/[30]/17/[17]
                                                  // .adc/510/[30]/17/[17]
                                                  // .clk/510/[30]/17/[17]
                             // .data_sam6_gtb1/1530/.tac/510/[30]/17/[17]
                                                  // .adc/510/[30]/17/[17]
                                                  // .clk/510/[30]/17/[17]
                             // .data_sam6_gtb0/1530/.tac/510/[30]/17/[17]
                                                  // .adc/510/[30]/17/[17]
                                                  // .clk/510/[30]/17/[17]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TACQUILA_LAND_SUBEVENT
// .TACQUILA_LAND_SUBEVENT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TACQUILA_LAND_SUBEVENT
// .TACQUILA_LAND_SUBEVENT
// Corr struct for: TACQUILA_NEULAND_SUBEVENT
//  : public unpack_subevent_base
// ---
// TACQUILA_DATA  .data_sam7_gtb0
  // raw_array_zero_suppress  .tac[30](DATA12)[17]
  // raw_array_zero_suppress  .adc[30](DATA12)[17]
  // raw_array_zero_suppress  .clk[30](DATA12)[17]
  // uint32  .count
    // ---
  // uint32  .dummy1
    // ---
  // uint32  .trigger_tac
    // ---
  // uint32  .trigger_sam
    // ---
  // uint32  .lec
    // ---
  // uint32  .gtb
    // ---
  // uint32  .sam
    // ---
  // uint32  .u32
    // ---
// TACQUILA_DATA  .data_sam7_gtb1
  // raw_array_zero_suppress  .tac[30](DATA12)[17]
  // raw_array_zero_suppress  .adc[30](DATA12)[17]
  // raw_array_zero_suppress  .clk[30](DATA12)[17]
  // uint32  .count
    // ---
  // uint32  .dummy1
    // ---
  // uint32  .trigger_tac
    // ---
  // uint32  .trigger_sam
    // ---
  // uint32  .lec
    // ---
  // uint32  .gtb
    // ---
  // uint32  .sam
    // ---
  // uint32  .u32
    // ---
// DATA12 .data_sam7_gtb0.tac[30][17]
// DATA12 .data_sam7_gtb0.adc[30][17]
// DATA12 .data_sam7_gtb0.clk[30][17]
// DATA12 .data_sam7_gtb1.tac[30][17]
// DATA12 .data_sam7_gtb1.adc[30][17]
// DATA12 .data_sam7_gtb1.clk[30][17]
// 
// size= 1  chunks=3060  mem=3060  line=6120  total=18727200
// size=17  chunks=180  mem=3060  line=3240  total=9914400
// size=510  chunks=  6  mem=3060  line=3066  total=9381960
// size=1530  chunks=  2  mem=3060  line=3062  total=9369720
// size=3060  chunks=  1  mem=3060  line=3061  total=9366660
// 
// corr structure: TACQUILA_NEULAND_SUBEVENT
  // DATA12 .data_sam7_gtb0.tac[30][17]
  // DATA12 .data_sam7_gtb0.adc[30][17]
  // DATA12 .data_sam7_gtb0.clk[30][17]
  // DATA12 .data_sam7_gtb1.tac[30][17]
  // DATA12 .data_sam7_gtb1.adc[30][17]
  // DATA12 .data_sam7_gtb1.clk[30][17]
// .TACQUILA_NEULAND_SUBEVENT/3060/.data_sam7_gtb0/1530/.tac/510/[30]/17/[17]
                                                     // .adc/510/[30]/17/[17]
                                                     // .clk/510/[30]/17/[17]
                                // .data_sam7_gtb1/1530/.tac/510/[30]/17/[17]
                                                     // .adc/510/[30]/17/[17]
                                                     // .clk/510/[30]/17/[17]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TACQUILA_NEULAND_SUBEVENT
// .TACQUILA_NEULAND_SUBEVENT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: TACQUILA_NEULAND_SUBEVENT
// .TACQUILA_NEULAND_SUBEVENT
// Corr struct for: VME_CRATE1
//  : public unpack_subevent_base
// ---
// VME_CAEN_V775  .qdc792POS_ROLU
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V775  .qdc792PIXEL
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V775  .tdc775POS_ROLU
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V830  .scaler
  // raw_array_zero_suppress  .data(DATA32)[32]
    // ---
  // uint32  .event_number
    // ---
  // uint32  .ts
    // ---
  // uint32  .count
    // ---
  // uint32  .dummy_24_25
    // ---
  // uint32  .unnamed_26_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// LAND_STD_VME  .vme
  // uint32  .fail_general
    // ---
  // uint32  .fail_data_corrupt
    // ---
  // uint32  .fail_data_missing
    // ---
  // uint32  .fail_data_too_much
    // ---
  // uint32  .fail_event_counter_mismatch
    // ---
  // uint32  .fail_readout_error_driver
    // ---
  // uint32  .fail_unexpected_trigger
    // ---
  // uint32  .fail_firmware_mismatch
    // ---
  // uint32  .dummy_8_21
    // ---
  // uint32  .has_multi_trlo_ii_counter0
    // ---
  // uint32  .has_clock_counter_stamp
    // ---
  // uint32  .has_continous_event_counter
    // ---
  // uint32  .has_update_qdc_iped_value
    // ---
  // uint32  .spurious_start_before_tcal
    // ---
  // uint32  .has_no_zero_suppression
    // ---
  // uint32  .has_multi_adctdc_counter0
    // ---
  // uint32  .has_multi_scaler_counter0
    // ---
  // uint32  .has_multi_event
    // ---
  // uint32  .has_time_stamp
    // ---
  // uint32  .u32
    // ---
  // uint32  .continous_event_counter
    // ---
  // uint32  .time_stamp
    // ---
  // uint32  .clock_counter_stamp
    // ---
  // uint32  .iped
    // ---
  // uint32  .multi_events
    // ---
  // uint32  .multi_trlo_ii_counter0
    // ---
  // uint32  .multi_scaler_counter0
    // ---
  // uint32  .multi_adctdc_counter0
    // ---
// DATA12_OVERFLOW .qdc792POS_ROLU.data[32]
// DATA12_OVERFLOW .qdc792PIXEL.data[32]
// DATA12_OVERFLOW .tdc775POS_ROLU.data[32]
// 
// size= 1  chunks= 96  mem=  96  line=192  total=18432
// size=32  chunks=  3  mem=  96  line=99  total=9504
// size=96  chunks=  1  mem=  96  line=97  total=9312
// 
// corr structure: VME_CRATE1
  // DATA12_OVERFLOW .qdc792POS_ROLU.data[32]
  // DATA12_OVERFLOW .qdc792PIXEL.data[32]
  // DATA12_OVERFLOW .tdc775POS_ROLU.data[32]
// .VME_CRATE1/96/.qdc792POS_ROLU/32/.data/32/[32]
               // .qdc792PIXEL/32/.data/32/[32]
               // .tdc775POS_ROLU/32/.data/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CRATE1
// .VME_CRATE1// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CRATE1
// .VME_CRATE1
// Corr struct for: VME_CRATE2
//  : public unpack_subevent_base
// ---
// VME_CAEN_V830  .scaler
  // raw_array_zero_suppress  .data(DATA32)[32]
    // ---
  // uint32  .event_number
    // ---
  // uint32  .ts
    // ---
  // uint32  .count
    // ---
  // uint32  .dummy_24_25
    // ---
  // uint32  .unnamed_26_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V775  .qdc792TFW1
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V775  .tdc775TFW1
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V775  .qdc792TFW2
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V775  .tdc775TFW2
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V775  .tdc775NTF
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V775  .qdc792NTF
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V775  .qdc792GFI1
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V775  .qdc792GFI2
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V775  .qdc792GFI3
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V775  .qdc792MFITEST
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// LAND_STD_VME  .vme
  // uint32  .fail_general
    // ---
  // uint32  .fail_data_corrupt
    // ---
  // uint32  .fail_data_missing
    // ---
  // uint32  .fail_data_too_much
    // ---
  // uint32  .fail_event_counter_mismatch
    // ---
  // uint32  .fail_readout_error_driver
    // ---
  // uint32  .fail_unexpected_trigger
    // ---
  // uint32  .fail_firmware_mismatch
    // ---
  // uint32  .dummy_8_21
    // ---
  // uint32  .has_multi_trlo_ii_counter0
    // ---
  // uint32  .has_clock_counter_stamp
    // ---
  // uint32  .has_continous_event_counter
    // ---
  // uint32  .has_update_qdc_iped_value
    // ---
  // uint32  .spurious_start_before_tcal
    // ---
  // uint32  .has_no_zero_suppression
    // ---
  // uint32  .has_multi_adctdc_counter0
    // ---
  // uint32  .has_multi_scaler_counter0
    // ---
  // uint32  .has_multi_event
    // ---
  // uint32  .has_time_stamp
    // ---
  // uint32  .u32
    // ---
  // uint32  .continous_event_counter
    // ---
  // uint32  .time_stamp
    // ---
  // uint32  .clock_counter_stamp
    // ---
  // uint32  .iped
    // ---
  // uint32  .multi_events
    // ---
  // uint32  .multi_trlo_ii_counter0
    // ---
  // uint32  .multi_scaler_counter0
    // ---
  // uint32  .multi_adctdc_counter0
    // ---
// DATA12_OVERFLOW .qdc792TFW1.data[32]
// DATA12_OVERFLOW .tdc775TFW1.data[32]
// DATA12_OVERFLOW .qdc792TFW2.data[32]
// DATA12_OVERFLOW .tdc775TFW2.data[32]
// DATA12_OVERFLOW .tdc775NTF.data[32]
// DATA12_OVERFLOW .qdc792NTF.data[32]
// DATA12_OVERFLOW .qdc792GFI1.data[32]
// DATA12_OVERFLOW .qdc792GFI2.data[32]
// DATA12_OVERFLOW .qdc792GFI3.data[32]
// DATA12_OVERFLOW .qdc792MFITEST.data[32]
// 
// size= 1  chunks=320  mem= 320  line=640  total=204800
// size=32  chunks= 10  mem= 320  line=330  total=105600
// size=320  chunks=  1  mem= 320  line=321  total=102720
// 
// corr structure: VME_CRATE2
  // DATA12_OVERFLOW .qdc792TFW1.data[32]
  // DATA12_OVERFLOW .tdc775TFW1.data[32]
  // DATA12_OVERFLOW .qdc792TFW2.data[32]
  // DATA12_OVERFLOW .tdc775TFW2.data[32]
  // DATA12_OVERFLOW .tdc775NTF.data[32]
  // DATA12_OVERFLOW .qdc792NTF.data[32]
  // DATA12_OVERFLOW .qdc792GFI1.data[32]
  // DATA12_OVERFLOW .qdc792GFI2.data[32]
  // DATA12_OVERFLOW .qdc792GFI3.data[32]
  // DATA12_OVERFLOW .qdc792MFITEST.data[32]
// .VME_CRATE2/320/.qdc792TFW1/32/.data/32/[32]
                // .tdc775TFW1/32/.data/32/[32]
                // .qdc792TFW2/32/.data/32/[32]
                // .tdc775TFW2/32/.data/32/[32]
                // .tdc775NTF/32/.data/32/[32]
                // .qdc792NTF/32/.data/32/[32]
                // .qdc792GFI1/32/.data/32/[32]
                // .qdc792GFI2/32/.data/32/[32]
                // .qdc792GFI3/32/.data/32/[32]
                // .qdc792MFITEST/32/.data/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CRATE2
// .VME_CRATE2// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CRATE2
// .VME_CRATE2
// Corr struct for: unpack_event
//  : public unpack_event_base
// ---
// LAND_CAMAC_PILEUP  .pileup
  //  : public unpack_subevent_base
  // ---
  // CAMAC_LECROY_2277_1CH_HACK  .tdc
    // raw_list_ii_zero_suppress  .data(DATA16)[16]
  // CAMAC_LECROY_2277_1CH_HACK  .tcal
    // raw_list_ii_zero_suppress  .data(DATA16)[16]
// SIDEREM01_VME  .sst
  //  : public unpack_subevent_base
  // ---
  // EXT_SST  .sst[8]
  // uint32  .unnamed_0_31
    // ---
  // uint32  .u32
    // ---
  // uint32  .unnamed_0_31
    // ---
  // uint32  .u32
    // ---
// CROS3_SUBEVENT  .cros3
  //  : public unpack_subevent_base
  // ---
  // EXT_CROS3  .ccb[2]
// CROS3_REWRITE_SUBEVENT  .cros3_rewrite
  //  : public unpack_subevent_base
  // ---
  // CROS3_REWRITE  .ccb[2]
    // raw_array_zero_suppress  .data(WIRE_START_END)[32768]
    // uint32  .data_size
      // ---
    // uint32  .threshold_curve
      // ---
    // uint32  .leading_edge
      // ---
    // uint32  .data
      // ---
    // uint32  .dummy_19
      // ---
    // uint32  .trigger_time
      // ---
    // uint32  .ccb_id
      // ---
    // uint32  .event_counter
      // ---
    // uint32  .u32
      // ---
    // uint32  .read_out_mode
      // ---
    // uint32  .dummy_2_3
      // ---
    // uint32  .pulser_enabled
      // ---
    // uint32  .dummy_5_7
      // ---
    // uint32  .statistics
      // ---
    // uint32  .both_edges
      // ---
    // uint32  .slices
      // ---
    // uint32  .scale
      // ---
    // uint32  .dummy_22_30
      // ---
    // uint32  .odd_length16
      // ---
    // uint32  .u32
      // ---
    // uint32  .read_out_mode
      // ---
    // uint32  .dummy_2_3
      // ---
    // uint32  .pulser_enabled
      // ---
    // uint32  .dummy_5_7
      // ---
    // uint32  .statistics
      // ---
    // uint32  .both_edges
      // ---
    // uint32  .threshold_start
      // ---
    // uint32  .threshold_step
      // ---
    // uint32  .boards
      // ---
    // uint32  .dummy_29_31
      // ---
    // uint32  .u32
      // ---
// LAND_CAMAC_CONVERTER  .camac
  //  : public unpack_subevent_base
  // ---
  // uint16  .tpat
    // ---
  // uint16  .tprev
    // ---
  // uint16  .tnext
    // ---
  // uint16  .tprev2
    // ---
// DUMMY  .acq
  //  : public unpack_subevent_base
  // ---
  // DUMMY_WORD  .d
    // uint32  .dummy_word
      // ---
// VME_CRATE1  .vme1
  //  : public unpack_subevent_base
  // ---
  // VME_CAEN_V775  .qdc792POS_ROLU
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V775  .qdc792PIXEL
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V775  .tdc775POS_ROLU
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V830  .scaler
    // raw_array_zero_suppress  .data(DATA32)[32]
      // ---
    // uint32  .event_number
      // ---
    // uint32  .ts
      // ---
    // uint32  .count
      // ---
    // uint32  .dummy_24_25
      // ---
    // uint32  .unnamed_26_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // LAND_STD_VME  .vme
    // uint32  .fail_general
      // ---
    // uint32  .fail_data_corrupt
      // ---
    // uint32  .fail_data_missing
      // ---
    // uint32  .fail_data_too_much
      // ---
    // uint32  .fail_event_counter_mismatch
      // ---
    // uint32  .fail_readout_error_driver
      // ---
    // uint32  .fail_unexpected_trigger
      // ---
    // uint32  .fail_firmware_mismatch
      // ---
    // uint32  .dummy_8_21
      // ---
    // uint32  .has_multi_trlo_ii_counter0
      // ---
    // uint32  .has_clock_counter_stamp
      // ---
    // uint32  .has_continous_event_counter
      // ---
    // uint32  .has_update_qdc_iped_value
      // ---
    // uint32  .spurious_start_before_tcal
      // ---
    // uint32  .has_no_zero_suppression
      // ---
    // uint32  .has_multi_adctdc_counter0
      // ---
    // uint32  .has_multi_scaler_counter0
      // ---
    // uint32  .has_multi_event
      // ---
    // uint32  .has_time_stamp
      // ---
    // uint32  .u32
      // ---
    // uint32  .continous_event_counter
      // ---
    // uint32  .time_stamp
      // ---
    // uint32  .clock_counter_stamp
      // ---
    // uint32  .iped
      // ---
    // uint32  .multi_events
      // ---
    // uint32  .multi_trlo_ii_counter0
      // ---
    // uint32  .multi_scaler_counter0
      // ---
    // uint32  .multi_adctdc_counter0
      // ---
// VME_CRATE2  .vme2
  //  : public unpack_subevent_base
  // ---
  // VME_CAEN_V830  .scaler
    // raw_array_zero_suppress  .data(DATA32)[32]
      // ---
    // uint32  .event_number
      // ---
    // uint32  .ts
      // ---
    // uint32  .count
      // ---
    // uint32  .dummy_24_25
      // ---
    // uint32  .unnamed_26_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V775  .qdc792TFW1
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V775  .tdc775TFW1
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V775  .qdc792TFW2
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V775  .tdc775TFW2
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V775  .tdc775NTF
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V775  .qdc792NTF
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V775  .qdc792GFI1
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V775  .qdc792GFI2
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V775  .qdc792GFI3
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V775  .qdc792MFITEST
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // LAND_STD_VME  .vme
    // uint32  .fail_general
      // ---
    // uint32  .fail_data_corrupt
      // ---
    // uint32  .fail_data_missing
      // ---
    // uint32  .fail_data_too_much
      // ---
    // uint32  .fail_event_counter_mismatch
      // ---
    // uint32  .fail_readout_error_driver
      // ---
    // uint32  .fail_unexpected_trigger
      // ---
    // uint32  .fail_firmware_mismatch
      // ---
    // uint32  .dummy_8_21
      // ---
    // uint32  .has_multi_trlo_ii_counter0
      // ---
    // uint32  .has_clock_counter_stamp
      // ---
    // uint32  .has_continous_event_counter
      // ---
    // uint32  .has_update_qdc_iped_value
      // ---
    // uint32  .spurious_start_before_tcal
      // ---
    // uint32  .has_no_zero_suppression
      // ---
    // uint32  .has_multi_adctdc_counter0
      // ---
    // uint32  .has_multi_scaler_counter0
      // ---
    // uint32  .has_multi_event
      // ---
    // uint32  .has_time_stamp
      // ---
    // uint32  .u32
      // ---
    // uint32  .continous_event_counter
      // ---
    // uint32  .time_stamp
      // ---
    // uint32  .clock_counter_stamp
      // ---
    // uint32  .iped
      // ---
    // uint32  .multi_events
      // ---
    // uint32  .multi_trlo_ii_counter0
      // ---
    // uint32  .multi_scaler_counter0
      // ---
    // uint32  .multi_adctdc_counter0
      // ---
// CB_VME_RIGHT  .vme_cbr
  //  : public unpack_subevent_base
  // ---
  // VME_VUPROM_V35  .tdc
    // raw_array_zero_suppress  .data(DATA12)[192]
  // VME_MESYTEC_MADC32  .adc[4]
    // raw_array_zero_suppress  .data(DATA14_OVERFLOW)[32]
    // uint32  .counter
      // ---
    // uint32  .unnamed_30_31
      // ---
    // uint32  .u32
      // ---
  // LAND_STD_VME  .vme
    // uint32  .fail_general
      // ---
    // uint32  .fail_data_corrupt
      // ---
    // uint32  .fail_data_missing
      // ---
    // uint32  .fail_data_too_much
      // ---
    // uint32  .fail_event_counter_mismatch
      // ---
    // uint32  .fail_readout_error_driver
      // ---
    // uint32  .fail_unexpected_trigger
      // ---
    // uint32  .fail_firmware_mismatch
      // ---
    // uint32  .dummy_8_21
      // ---
    // uint32  .has_multi_trlo_ii_counter0
      // ---
    // uint32  .has_clock_counter_stamp
      // ---
    // uint32  .has_continous_event_counter
      // ---
    // uint32  .has_update_qdc_iped_value
      // ---
    // uint32  .spurious_start_before_tcal
      // ---
    // uint32  .has_no_zero_suppression
      // ---
    // uint32  .has_multi_adctdc_counter0
      // ---
    // uint32  .has_multi_scaler_counter0
      // ---
    // uint32  .has_multi_event
      // ---
    // uint32  .has_time_stamp
      // ---
    // uint32  .u32
      // ---
    // uint32  .continous_event_counter
      // ---
    // uint32  .time_stamp
      // ---
    // uint32  .clock_counter_stamp
      // ---
    // uint32  .iped
      // ---
    // uint32  .multi_events
      // ---
    // uint32  .multi_trlo_ii_counter0
      // ---
    // uint32  .multi_scaler_counter0
      // ---
    // uint32  .multi_adctdc_counter0
      // ---
// CB_VME_LEFT  .vme_cbl
  //  : public unpack_subevent_base
  // ---
  // VME_VUPROM_V35  .tdc
    // raw_array_zero_suppress  .data(DATA12)[192]
  // VME_MESYTEC_MADC32  .adc[4]
    // raw_array_zero_suppress  .data(DATA14_OVERFLOW)[32]
    // uint32  .counter
      // ---
    // uint32  .unnamed_30_31
      // ---
    // uint32  .u32
      // ---
  // VME_MESYTEC_MADC32  .madc0_psp
    // raw_array_zero_suppress  .data(DATA14_OVERFLOW)[32]
    // uint32  .counter
      // ---
    // uint32  .unnamed_30_31
      // ---
    // uint32  .u32
      // ---
  // LAND_STD_VME  .vme
    // uint32  .fail_general
      // ---
    // uint32  .fail_data_corrupt
      // ---
    // uint32  .fail_data_missing
      // ---
    // uint32  .fail_data_too_much
      // ---
    // uint32  .fail_event_counter_mismatch
      // ---
    // uint32  .fail_readout_error_driver
      // ---
    // uint32  .fail_unexpected_trigger
      // ---
    // uint32  .fail_firmware_mismatch
      // ---
    // uint32  .dummy_8_21
      // ---
    // uint32  .has_multi_trlo_ii_counter0
      // ---
    // uint32  .has_clock_counter_stamp
      // ---
    // uint32  .has_continous_event_counter
      // ---
    // uint32  .has_update_qdc_iped_value
      // ---
    // uint32  .spurious_start_before_tcal
      // ---
    // uint32  .has_no_zero_suppression
      // ---
    // uint32  .has_multi_adctdc_counter0
      // ---
    // uint32  .has_multi_scaler_counter0
      // ---
    // uint32  .has_multi_event
      // ---
    // uint32  .has_time_stamp
      // ---
    // uint32  .u32
      // ---
    // uint32  .continous_event_counter
      // ---
    // uint32  .time_stamp
      // ---
    // uint32  .clock_counter_stamp
      // ---
    // uint32  .iped
      // ---
    // uint32  .multi_events
      // ---
    // uint32  .multi_trlo_ii_counter0
      // ---
    // uint32  .multi_scaler_counter0
      // ---
    // uint32  .multi_adctdc_counter0
      // ---
// MASTER_VME  .vme_master
  //  : public unpack_subevent_base
  // ---
  // TRLO_SAMPLER  .sampler_pos
    // raw_list_ii_zero_suppress  .stamps(DATA32)[512]
      // ---
    // uint32  .count
      // ---
    // uint32  .dummy_10_23
      // ---
    // uint32  .id
      // ---
    // uint32  .u32
      // ---
  // TRLO_SAMPLER  .sampler_cb_sum
    // raw_list_ii_zero_suppress  .stamps(DATA32)[512]
      // ---
    // uint32  .count
      // ---
    // uint32  .dummy_10_23
      // ---
    // uint32  .id
      // ---
    // uint32  .u32
      // ---
  // LAND_STD_VME  .vme
    // uint32  .fail_general
      // ---
    // uint32  .fail_data_corrupt
      // ---
    // uint32  .fail_data_missing
      // ---
    // uint32  .fail_data_too_much
      // ---
    // uint32  .fail_event_counter_mismatch
      // ---
    // uint32  .fail_readout_error_driver
      // ---
    // uint32  .fail_unexpected_trigger
      // ---
    // uint32  .fail_firmware_mismatch
      // ---
    // uint32  .dummy_8_21
      // ---
    // uint32  .has_multi_trlo_ii_counter0
      // ---
    // uint32  .has_clock_counter_stamp
      // ---
    // uint32  .has_continous_event_counter
      // ---
    // uint32  .has_update_qdc_iped_value
      // ---
    // uint32  .spurious_start_before_tcal
      // ---
    // uint32  .has_no_zero_suppression
      // ---
    // uint32  .has_multi_adctdc_counter0
      // ---
    // uint32  .has_multi_scaler_counter0
      // ---
    // uint32  .has_multi_event
      // ---
    // uint32  .has_time_stamp
      // ---
    // uint32  .u32
      // ---
    // uint32  .continous_event_counter
      // ---
    // uint32  .time_stamp
      // ---
    // uint32  .clock_counter_stamp
      // ---
    // uint32  .iped
      // ---
    // uint32  .multi_events
      // ---
    // uint32  .multi_trlo_ii_counter0
      // ---
    // uint32  .multi_scaler_counter0
      // ---
    // uint32  .multi_adctdc_counter0
      // ---
// LAND_CAMAC_TCAL_INFO  .camac_tcal_info
  //  : public unpack_subevent_base
  // ---
  // uint32  .info
    // ---
  // RANDOM_TCAL  .rtcal
    // uint32  .word_count
      // ---
    // uint32  .pulses
      // ---
    // uint32  .clock_bits
      // ---
    // uint32  .has_tstamp1
      // ---
    // uint32  .has_tstamp2
      // ---
    // uint32  .dummy_20_23
      // ---
    // uint32  .id
      // ---
    // uint32  .u32
      // ---
    // RANDOM_TCAL_TSTAMP_CLOCK  .tstamp1
      // uint32  .soft_latches
        // ---
      // uint32  .hard_latches
        // ---
      // uint32  .clock_ticks
        // ---
      // NTP64_TIME  .before
        // uint32  .sec
          // ---
        // uint32  .frac
          // ---
      // NTP64_TIME  .after
        // uint32  .sec
          // ---
        // uint32  .frac
          // ---
    // RANDOM_TCAL_TSTAMP_CLOCK  .tstamp2
      // uint32  .soft_latches
        // ---
      // uint32  .hard_latches
        // ---
      // uint32  .clock_ticks
        // ---
      // NTP64_TIME  .before
        // uint32  .sec
          // ---
        // uint32  .frac
          // ---
      // NTP64_TIME  .after
        // uint32  .sec
          // ---
        // uint32  .frac
          // ---
  // NTP_MESSAGE  .ntp
    // uint32  .word_count
      // ---
    // uint32  .quick_burst
      // ---
    // uint32  .dummy_17_23
      // ---
    // uint32  .id
      // ---
    // uint32  .u32
      // ---
    // uint32  .server_id
      // ---
    // uint32  .precision
      // ---
    // uint32  .poll
      // ---
    // uint32  .stratum
      // ---
    // uint32  .dummy_20_23
      // ---
    // uint32  .mode
      // ---
    // uint32  .version
      // ---
    // uint32  .leap
      // ---
    // uint32  .u32
      // ---
    // uint32  .frac
      // ---
    // uint32  .sec
      // ---
    // uint32  .u32
      // ---
    // uint32  .frac
      // ---
    // uint32  .sec
      // ---
    // uint32  .u32
      // ---
    // uint32  .refid
      // ---
    // NTP64_TIME  .orig2time
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .tmit2time
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .rec2time
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .rx2time
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .reftime
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .origtime
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .rectime
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .tmittime
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .rxtime
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
// LAND_CAMAC_SCALER  .camac_scalers
  //  : public unpack_subevent_base
  // ---
  // uint32  .timestamp
    // ---
  // uint32  .unnamed_0_31
    // ---
  // uint32  .u32
    // ---
  // CAMAC_LECROY_4434  .scaler0
    // raw_array_zero_suppress  .data(DATA24)[32]
      // ---
  // CAMAC_LECROY_4434  .scaler2
    // raw_array_zero_suppress  .data(DATA24)[32]
      // ---
  // CAMAC_LECROY_4434  .scaler1
    // raw_array_zero_suppress  .data(DATA24)[32]
      // ---
  // SOFT_SCALER32  .scaler3
    // raw_array_zero_suppress  .data(DATA32)[32]
      // ---
// TACQUILA_LAND_SUBEVENT  .tacquila
  //  : public unpack_subevent_base
  // ---
  // TACQUILA_DATA  .data_sam5_gtb0
    // raw_array_zero_suppress  .tac[30](DATA12)[17]
    // raw_array_zero_suppress  .adc[30](DATA12)[17]
    // raw_array_zero_suppress  .clk[30](DATA12)[17]
    // uint32  .count
      // ---
    // uint32  .dummy1
      // ---
    // uint32  .trigger_tac
      // ---
    // uint32  .trigger_sam
      // ---
    // uint32  .lec
      // ---
    // uint32  .gtb
      // ---
    // uint32  .sam
      // ---
    // uint32  .u32
      // ---
  // TACQUILA_DATA  .data_sam6_gtb1
    // raw_array_zero_suppress  .tac[30](DATA12)[17]
    // raw_array_zero_suppress  .adc[30](DATA12)[17]
    // raw_array_zero_suppress  .clk[30](DATA12)[17]
    // uint32  .count
      // ---
    // uint32  .dummy1
      // ---
    // uint32  .trigger_tac
      // ---
    // uint32  .trigger_sam
      // ---
    // uint32  .lec
      // ---
    // uint32  .gtb
      // ---
    // uint32  .sam
      // ---
    // uint32  .u32
      // ---
  // TACQUILA_DATA  .data_sam6_gtb0
    // raw_array_zero_suppress  .tac[30](DATA12)[17]
    // raw_array_zero_suppress  .adc[30](DATA12)[17]
    // raw_array_zero_suppress  .clk[30](DATA12)[17]
    // uint32  .count
      // ---
    // uint32  .dummy1
      // ---
    // uint32  .trigger_tac
      // ---
    // uint32  .trigger_sam
      // ---
    // uint32  .lec
      // ---
    // uint32  .gtb
      // ---
    // uint32  .sam
      // ---
    // uint32  .u32
      // ---
// TACQUILA_NEULAND_SUBEVENT  .neuland
  //  : public unpack_subevent_base
  // ---
  // TACQUILA_DATA  .data_sam7_gtb0
    // raw_array_zero_suppress  .tac[30](DATA12)[17]
    // raw_array_zero_suppress  .adc[30](DATA12)[17]
    // raw_array_zero_suppress  .clk[30](DATA12)[17]
    // uint32  .count
      // ---
    // uint32  .dummy1
      // ---
    // uint32  .trigger_tac
      // ---
    // uint32  .trigger_sam
      // ---
    // uint32  .lec
      // ---
    // uint32  .gtb
      // ---
    // uint32  .sam
      // ---
    // uint32  .u32
      // ---
  // TACQUILA_DATA  .data_sam7_gtb1
    // raw_array_zero_suppress  .tac[30](DATA12)[17]
    // raw_array_zero_suppress  .adc[30](DATA12)[17]
    // raw_array_zero_suppress  .clk[30](DATA12)[17]
    // uint32  .count
      // ---
    // uint32  .dummy1
      // ---
    // uint32  .trigger_tac
      // ---
    // uint32  .trigger_sam
      // ---
    // uint32  .lec
      // ---
    // uint32  .gtb
      // ---
    // uint32  .sam
      // ---
    // uint32  .u32
      // ---
// DATA16 .pileup.tdc.data[16]
// DATA16 .pileup.tcal.data[16]
// DATA12_OVERFLOW .vme1.qdc792POS_ROLU.data[32]
// DATA12_OVERFLOW .vme1.qdc792PIXEL.data[32]
// DATA12_OVERFLOW .vme1.tdc775POS_ROLU.data[32]
// DATA12_OVERFLOW .vme2.qdc792TFW1.data[32]
// DATA12_OVERFLOW .vme2.tdc775TFW1.data[32]
// DATA12_OVERFLOW .vme2.qdc792TFW2.data[32]
// DATA12_OVERFLOW .vme2.tdc775TFW2.data[32]
// DATA12_OVERFLOW .vme2.tdc775NTF.data[32]
// DATA12_OVERFLOW .vme2.qdc792NTF.data[32]
// DATA12_OVERFLOW .vme2.qdc792GFI1.data[32]
// DATA12_OVERFLOW .vme2.qdc792GFI2.data[32]
// DATA12_OVERFLOW .vme2.qdc792GFI3.data[32]
// DATA12_OVERFLOW .vme2.qdc792MFITEST.data[32]
// DATA12 .vme_cbr.tdc.data[192]
// DATA14_OVERFLOW .vme_cbr.adc[4].data[32]
// DATA12 .vme_cbl.tdc.data[192]
// DATA14_OVERFLOW .vme_cbl.adc[4].data[32]
// DATA14_OVERFLOW .vme_cbl.madc0_psp.data[32]
// DATA12 .tacquila.data_sam5_gtb0.tac[30][17]
// DATA12 .tacquila.data_sam5_gtb0.adc[30][17]
// DATA12 .tacquila.data_sam5_gtb0.clk[30][17]
// DATA12 .tacquila.data_sam6_gtb1.tac[30][17]
// DATA12 .tacquila.data_sam6_gtb1.adc[30][17]
// DATA12 .tacquila.data_sam6_gtb1.clk[30][17]
// DATA12 .tacquila.data_sam6_gtb0.tac[30][17]
// DATA12 .tacquila.data_sam6_gtb0.adc[30][17]
// DATA12 .tacquila.data_sam6_gtb0.clk[30][17]
// DATA12 .neuland.data_sam7_gtb0.tac[30][17]
// DATA12 .neuland.data_sam7_gtb0.adc[30][17]
// DATA12 .neuland.data_sam7_gtb0.clk[30][17]
// DATA12 .neuland.data_sam7_gtb1.tac[30][17]
// DATA12 .neuland.data_sam7_gtb1.adc[30][17]
// DATA12 .neuland.data_sam7_gtb1.clk[30][17]
// 
// size= 1  chunks=8770  mem=8770  line=17540  total=153825800
// size=16  chunks=8740  mem=139840  line=148580  total=1303046600
// size=17  chunks=1540  mem=26180  line=27720  total=243104400
// size=32  chunks=857  mem=27424  line=28281  total=248024370
// size=96  chunks=855  mem=82080  line=82935  total=727339950
// size=128  chunks=849  mem=108672  line=109521  total=960499170
// size=192  chunks=467  mem=89664  line=90131  total=790448870
// size=320  chunks=457  mem=146240  line=146697  total=1286532690
// size=352  chunks=455  mem=160160  line=160615  total=1408593550
// size=510  chunks= 20  mem=10200  line=10220  total=89629400
// size=1530  chunks= 10  mem=15300  line=15310  total=134268700
// size=3060  chunks=  9  mem=27540  line=27549  total=241604730
// size=4590  chunks=  7  mem=32130  line=32137  total=281841490
// size=8770  chunks=  1  mem=8770  line=8771  total=76921670
// 
// corr structure: unpack_event
  // DATA16 .pileup.tdc.data[16]
  // DATA16 .pileup.tcal.data[16]
  // DATA12_OVERFLOW .vme1.qdc792POS_ROLU.data[32]
  // DATA12_OVERFLOW .vme1.qdc792PIXEL.data[32]
  // DATA12_OVERFLOW .vme1.tdc775POS_ROLU.data[32]
  // DATA12_OVERFLOW .vme2.qdc792TFW1.data[32]
  // DATA12_OVERFLOW .vme2.tdc775TFW1.data[32]
  // DATA12_OVERFLOW .vme2.qdc792TFW2.data[32]
  // DATA12_OVERFLOW .vme2.tdc775TFW2.data[32]
  // DATA12_OVERFLOW .vme2.tdc775NTF.data[32]
  // DATA12_OVERFLOW .vme2.qdc792NTF.data[32]
  // DATA12_OVERFLOW .vme2.qdc792GFI1.data[32]
  // DATA12_OVERFLOW .vme2.qdc792GFI2.data[32]
  // DATA12_OVERFLOW .vme2.qdc792GFI3.data[32]
  // DATA12_OVERFLOW .vme2.qdc792MFITEST.data[32]
  // DATA12 .vme_cbr.tdc.data[192]
  // DATA14_OVERFLOW .vme_cbr.adc[4].data[32]
  // DATA12 .vme_cbl.tdc.data[192]
  // DATA14_OVERFLOW .vme_cbl.adc[4].data[32]
  // DATA14_OVERFLOW .vme_cbl.madc0_psp.data[32]
  // DATA12 .tacquila.data_sam5_gtb0.tac[30][17]
  // DATA12 .tacquila.data_sam5_gtb0.adc[30][17]
  // DATA12 .tacquila.data_sam5_gtb0.clk[30][17]
  // DATA12 .tacquila.data_sam6_gtb1.tac[30][17]
  // DATA12 .tacquila.data_sam6_gtb1.adc[30][17]
  // DATA12 .tacquila.data_sam6_gtb1.clk[30][17]
  // DATA12 .tacquila.data_sam6_gtb0.tac[30][17]
  // DATA12 .tacquila.data_sam6_gtb0.adc[30][17]
  // DATA12 .tacquila.data_sam6_gtb0.clk[30][17]
  // DATA12 .neuland.data_sam7_gtb0.tac[30][17]
  // DATA12 .neuland.data_sam7_gtb0.adc[30][17]
  // DATA12 .neuland.data_sam7_gtb0.clk[30][17]
  // DATA12 .neuland.data_sam7_gtb1.tac[30][17]
  // DATA12 .neuland.data_sam7_gtb1.adc[30][17]
  // DATA12 .neuland.data_sam7_gtb1.clk[30][17]
// .unpack_event/8770/.pileup/32/.tdc/16/.data/16/[16]
                              // .tcal/16/.data/16/[16]
                   // .vme1/96/.qdc792POS_ROLU/32/.data/32/[32]
                            // .qdc792PIXEL/32/.data/32/[32]
                            // .tdc775POS_ROLU/32/.data/32/[32]
                   // .vme2/320/.qdc792TFW1/32/.data/32/[32]
                             // .tdc775TFW1/32/.data/32/[32]
                             // .qdc792TFW2/32/.data/32/[32]
                             // .tdc775TFW2/32/.data/32/[32]
                             // .tdc775NTF/32/.data/32/[32]
                             // .qdc792NTF/32/.data/32/[32]
                             // .qdc792GFI1/32/.data/32/[32]
                             // .qdc792GFI2/32/.data/32/[32]
                             // .qdc792GFI3/32/.data/32/[32]
                             // .qdc792MFITEST/32/.data/32/[32]
                   // .vme_cbr/320/.tdc/192/.data/192/[192]
                                // .adc/128/[4]/32/.data/32/[32]
                   // .vme_cbl/352/.tdc/192/.data/192/[192]
                                // .adc/128/[4]/32/.data/32/[32]
                                // .madc0_psp/32/.data/32/[32]
                   // .tacquila/4590/.data_sam5_gtb0/1530/.tac/510/[30]/17/[17]
                                                       // .adc/510/[30]/17/[17]
                                                       // .clk/510/[30]/17/[17]
                                  // .data_sam6_gtb1/1530/.tac/510/[30]/17/[17]
                                                       // .adc/510/[30]/17/[17]
                                                       // .clk/510/[30]/17/[17]
                                  // .data_sam6_gtb0/1530/.tac/510/[30]/17/[17]
                                                       // .adc/510/[30]/17/[17]
                                                       // .clk/510/[30]/17/[17]
                   // .neuland/3060/.data_sam7_gtb0/1530/.tac/510/[30]/17/[17]
                                                      // .adc/510/[30]/17/[17]
                                                      // .clk/510/[30]/17/[17]
                                 // .data_sam7_gtb1/1530/.tac/510/[30]/17/[17]
                                                      // .adc/510/[30]/17/[17]
                                                      // .clk/510/[30]/17/[17]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_event
// .unpack_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_event
// .unpack_event
// Corr struct for: unpack_sticky_event
//  : public unpack_sticky_event_base
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event

/** END_CORR_STRUCT ***************************************************/

