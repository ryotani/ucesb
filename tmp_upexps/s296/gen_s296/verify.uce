
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

CAMAC_LECROY_2277_1CH_HACK(channel,edge,high_byte)
{
  MEMBER(DATA16 data[16] NO_INDEX_LIST);
  UINT32 ch_data NOENCODE
  {
     0_15: value;
       16: edge = CHECK(edge);
    17_21: channel = CHECK(channel);
    24_31: high = CHECK(high_byte);
    ENCODE(data APPEND_LIST,(value=value));
  }
}

CAMAC_LECROY_4434(channels)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS);
  list(0<=index<channels)
  {
    UINT32 ch_data NOENCODE
    {
       0_23: value;
      24_31: 0;
      ENCODE(data[index],(value=value));
    }
  }
}

CAMAC_PHILLIPS_7164(channels,mark_channel_no)
{
  MEMBER(DATA12 data[16] ZERO_SUPPRESS);
  list(0<=index<channels)
  {
    if(mark_channel_no)
    {
      UINT16 ch_data NOENCODE
      {
         0_11: value;
        12_15: channel = CHECK(index);
        ENCODE(data[index],(value=value));
      }
    }
    else
    {
      UINT16 ch_data NOENCODE
      {
         0_11: value;
        ENCODE(data[index],(value=value));
      }
    }
  }
}

CAMAC_SILENA_4418(channels,mark_channel_no)
{
  MEMBER(DATA12_OVERFLOW data[8] ZERO_SUPPRESS);
  list(0<=index<channels)
  {
    if(mark_channel_no)
    {
      UINT16 ch_data NOENCODE
      {
         0_11: value;
        12_14: channel = CHECK(index);
           15: overflow;
        ENCODE(data[index],(value=value,overflow=overflow));
      }
    }
    else
    {
      UINT16 ch_data NOENCODE
      {
         0_11: value;
           15: overflow;
        ENCODE(data[index],(value=value,overflow=overflow));
      }
    }
  }
}

CROS3_REWRITE(ccb_id)
{
  MEMBER(WIRE_START_END data[32768] ZERO_SUPPRESS);
  UINT32 h1
  {
     0_15: data_size;
       16: threshold_curve;
       17: leading_edge;
       18: data;
    20_23: trigger_time;
    24_27: ccb_id = MATCH(ccb_id);
    28_31: event_counter;
  }
  if(h1.data)
  {
    UINT32 h2
    {
       0_01: read_out_mode;
          4: pulser_enabled;
       8_10: statistics;
         11: both_edges;
      12_19: slices;
      20_21: scale;
         31: odd_length16;
    }
    if(h1.leading_edge)
    {
      list(0<=index<static_cast<uint32>((h1.data_size - h2.odd_length16)))
      {
        UINT32 ch_data NOENCODE
        {
           0_07: start_slice1;
           8_15: wire1;
          16_23: start_slice2;
          24_31: wire2;
          ENCODE(data[(index * 2)],(wire=wire1,start=start_slice1,stop=0));
          ENCODE(data[((index * 2) + 1)],(wire=wire2,start=start_slice2,
                                          stop=0));
        }
      }
      if(h2.odd_length16)
      {
        UINT32 ch_data_odd NOENCODE
        {
           0_07: start_slice1;
           8_15: wire1;
          16_23: start_slice2 = CHECK(255);
          24_31: wire2 = CHECK(0);
          ENCODE(data[((h1.data_size - 1) * 2)],(wire=wire1,start=start_slice1,
                                                 stop=0));
        }
      }
    }
    else
    {
      list(0<=index<h1.data_size)
      {
        UINT32 ch_data NOENCODE
        {
           0_07: start_slice;
           8_15: wire;
          16_23: end_slice;
          ENCODE(data[index],(wire=wire,start=start_slice,stop=end_slice));
        }
      }
    }
  }
  else
  {
    if(h1.threshold_curve)
    {
      UINT32 trc_h2
      {
         0_01: read_out_mode;
            4: pulser_enabled;
         8_10: statistics;
           11: both_edges;
        12_19: threshold_start;
        20_23: threshold_step;
        24_28: boards;
      }
      list(0<=board<trc_h2.boards)
      {
        UINT32 trc_h3 NOENCODE
        {
           0_07: test_pulser_even;
           8_15: test_pulser_odd;
          16_23: threshold_steps;
          28_31: ad_id;
        }
        list(0<=index_thr<trc_h3.threshold_steps)
        {
          list(0<=index_wire2<8)
          {
            UINT32 ch_counts NOENCODE
            {
               0_11: counts1;
              12_15: wire1;
              16_27: counts2;
              28_31: wire2;
            }
          }
        }
      }
    }
    else
    {
      UINT32 dummy_h2 NOENCODE
      {
         0_31: 0;
      }
    }
  }
}

DUMMY_WORD()
{
  UINT32 dummy_word;
}

external EXT_CROS3(ccb_id)
;

external EXT_SST(sam,gtb,siderem,branch)
;

FASTBUS_LECROY_1875(geom,channels)
{
  MEMBER(DATA12_RANGE data[64] ZERO_SUPPRESS);
  UINT32 ch_data NOENCODE
  {
     0_11: value;
    16_21: channel = RANGE(0,(channels - 1));
       23: range;
    24_26: n = CHECK(0);
    27_31: geom = MATCH(geom);
    ENCODE(data[channel],(value=value,range=range));
  }
}

FASTBUS_LECROY_1885(geom,channels)
{
  MEMBER(DATA12_RANGE data[96] ZERO_SUPPRESS);
  UINT32 ch_data NOENCODE
  {
     0_11: value;
    16_22: channel = RANGE(0,(channels - 1));
       23: range;
    24_26: n = CHECK(0);
    27_31: geom = MATCH(geom);
    ENCODE(data[channel],(value=value,range=range));
  }
}

LAND_STD_VME()
{
  UINT32 failure
  {
        0: fail_general;
        1: fail_data_corrupt;
        2: fail_data_missing;
        3: fail_data_too_much;
        4: fail_event_counter_mismatch;
        5: fail_readout_error_driver;
        6: fail_unexpected_trigger;
        7: fail_firmware_mismatch;
       22: has_multi_trlo_ii_counter0;
       23: has_clock_counter_stamp;
       24: has_continous_event_counter;
       25: has_update_qdc_iped_value;
       26: spurious_start_before_tcal;
       27: has_no_zero_suppression;
       28: has_multi_adctdc_counter0;
       29: has_multi_scaler_counter0;
       30: has_multi_event;
       31: has_time_stamp;
  }
  if(failure.has_continous_event_counter)
  {
    UINT32 continous_event_counter;
  }
  if(failure.has_time_stamp)
  {
    UINT32 time_stamp;
  }
  if(failure.has_clock_counter_stamp)
  {
    UINT32 clock_counter_stamp;
  }
  if(failure.has_update_qdc_iped_value)
  {
    UINT32 iped;
  }
  if(failure.has_multi_event)
  {
    UINT32 multi_events;
  }
  if(failure.has_multi_trlo_ii_counter0)
  {
    UINT32 multi_trlo_ii_counter0;
  }
  if(failure.has_multi_scaler_counter0)
  {
    UINT32 multi_scaler_counter0;
  }
  if(failure.has_multi_adctdc_counter0)
  {
    UINT32 multi_adctdc_counter0;
  }
}

NTP64_TIME()
{
  UINT32 sec;
  UINT32 frac;
}

NTP_MESSAGE(id)
{
  UINT32 header
  {
     0_15: word_count;
       16: quick_burst;
    24_31: id = MATCH(id);
  }
  MARK_COUNT(start);
  UINT32 server_id;
  UINT32 sspp
  {
     0_07: precision;
     8_15: poll;
    16_19: stratum;
    24_26: mode;
    27_29: version = CHECK(3);
    30_31: leap;
  }
  UINT32 root_dly
  {
     0_15: frac;
    16_31: sec;
  }
  UINT32 root_disp
  {
     0_15: frac;
    16_31: sec;
  }
  UINT32 refid;
  reftime = NTP64_TIME();
  origtime = NTP64_TIME();
  rectime = NTP64_TIME();
  tmittime = NTP64_TIME();
  rxtime = NTP64_TIME();
  if(header.quick_burst)
  {
    orig2time = NTP64_TIME();
    rec2time = NTP64_TIME();
    tmit2time = NTP64_TIME();
    rx2time = NTP64_TIME();
  }
  MARK_COUNT(end);
  CHECK_COUNT(header.word_count,start,end,0,4)
}

RANDOM_TCAL(id)
{
  UINT32 header
  {
     0_07: word_count;
     8_11: pulses;
    12_17: clock_bits;
       18: has_tstamp1;
       19: has_tstamp2;
    24_31: id = MATCH(id);
  }
  MARK_COUNT(start);
  if(header.has_tstamp1)
  {
    tstamp1 = RANDOM_TCAL_TSTAMP_CLOCK();
  }
  if(header.has_tstamp2)
  {
    tstamp2 = RANDOM_TCAL_TSTAMP_CLOCK();
  }
  MARK_COUNT(end);
  CHECK_COUNT(header.word_count,start,end,0,4)
}

RANDOM_TCAL_TSTAMP_CLOCK()
{
  UINT32 soft_latches;
  UINT32 hard_latches;
  UINT32 clock_ticks;
  before = NTP64_TIME();
  after = NTP64_TIME();
}

SIDEREM_BLOCK(sam,gtb,siderem)
{
  MEMBER(DATA12 data[4][512] ZERO_SUPPRESS);
  UINT32 header
  {
     0_11: count;
    12_15: local_event_counter;
    16_19: local_trigger;
    20_23: siderem = MATCH(siderem);
    24_27: gtb = MATCH(gtb);
    28_31: sam = MATCH(sam);
  }
  list(0<=index<header.count)
  {
    UINT32 ch_data NOENCODE
    {
       0_11: value;
      12_13: adc_no;
      16_24: channel;
      28_31: 15;
      ENCODE(data[adc_no][channel],(value=value));
    }
  }
}

SOFT_SCALER32(channels)
{
  MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  list(0<=index<channels)
  {
    UINT32 ch_data NOENCODE
    {
       0_31: value;
      ENCODE(data[index],(value=value));
    }
  }
}

VME_CAEN_V1190(geom)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(v1190_start);
  UINT32 header
  {
     0_04: geom = MATCH(geom);
     5_26: event_number;
    27_31: 8;
  }
  select several
  {
    tdc[0] = VME_CAEN_V1190_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[1] = VME_CAEN_V1190_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[2] = VME_CAEN_V1190_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[3] = VME_CAEN_V1190_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   data=data);
  }
  UINT32 trigger
  {
     0_26: time_tag;
    27_31: 17;
  }
  MARK_COUNT(v1190_end);
  UINT32 trailer
  {
     0_04: geom = CHECK(geom);
     5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
       24: tdc_error;
       25: buffer_overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V1190_SHORT(geom)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(v1190_start);
  UINT32 header
  {
     0_04: geom = MATCH(geom);
     5_26: event_number;
    27_31: 8;
  }
  select several
  {
    tdc[0] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[1] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[2] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[3] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         data=data);
    norevisit err[0] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=0);
    norevisit err[1] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=1);
    norevisit err[2] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=2);
    norevisit err[3] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=3);
  }
  UINT32 trigger
  {
     0_26: time_tag;
    27_31: 17;
  }
  MARK_COUNT(v1190_end);
  UINT32 trailer
  {
     0_04: geom = CHECK(geom);
     5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
       24: tdc_error;
       25: buffer_overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V1190_SHORT_SUBTDC(tdc,event_id,data)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  UINT32 ch_data NOENCODE
  {
     0_18: value;
    19_23: channel_low;
    24_25: tdc = CHECK(tdc);
       26: trailing;
    27_31: 0;
    ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  }
}

VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc)
{
  UINT32 error_flags
  {
     0_14: flags;
    24_25: tdc = CHECK(tdc);
    27_31: 4;
  }
}

VME_CAEN_V1190_SUBTDC(tdc,event_id,data)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(tdc_start);
  UINT32 header
  {
     0_11: bunch_id;
    12_23: event_id = CHECK(event_id);
    24_25: tdc = MATCH(tdc);
    27_31: 1;
  }
  several UINT32 ch_data NOENCODE
  {
     0_18: value;
    19_23: channel_low;
    24_25: tdc = CHECK(tdc);
       26: trailing;
    27_31: 0;
    ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  }
  optional UINT32 error_flags
  {
     0_14: flags;
    24_25: tdc = CHECK(tdc);
    27_31: 4;
  }
  MARK_COUNT(tdc_end);
  UINT32 trailer
  {
     0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    12_23: event_id = CHECK(header.event_id);
    24_25: tdc = CHECK(tdc);
    27_31: 3;
  }
}

VME_CAEN_V1290(geom)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(v1190_start);
  UINT32 header
  {
     0_04: geom = MATCH(geom);
     5_26: event_number;
    27_31: 8;
  }
  select several
  {
    tdc[0] = VME_CAEN_V1290_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[1] = VME_CAEN_V1290_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[2] = VME_CAEN_V1290_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   data=data);
    tdc[3] = VME_CAEN_V1290_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   data=data);
  }
  UINT32 trigger
  {
     0_26: time_tag;
    27_31: 17;
  }
  MARK_COUNT(v1190_end);
  UINT32 trailer
  {
     0_04: geom = CHECK(geom);
     5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
       24: tdc_error;
       25: buffer_overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V1290_SHORT(geom)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(v1190_start);
  UINT32 header
  {
     0_04: geom = MATCH(geom);
     5_26: event_number;
    27_31: 8;
  }
  select several
  {
    tdc[0] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[1] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[2] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         data=data);
    tdc[3] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         data=data);
    norevisit err[0] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=0);
    norevisit err[1] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=1);
    norevisit err[2] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=2);
    norevisit err[3] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=3);
  }
  UINT32 trigger
  {
     0_26: time_tag;
    27_31: 17;
  }
  MARK_COUNT(v1190_end);
  UINT32 trailer
  {
     0_04: geom = CHECK(geom);
     5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
       24: tdc_error;
       25: buffer_overflow;
       26: trigger_lost;
    27_31: 16;
  }
}

VME_CAEN_V1290_SHORT_SUBTDC(tdc,event_id,data)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  UINT32 ch_data NOENCODE
  {
     0_20: value;
    21_23: channel_low;
    24_25: tdc = CHECK(tdc);
       26: trailing;
    27_31: 0;
    ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  }
}

VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc)
{
  UINT32 error_flags
  {
     0_14: flags;
    24_25: tdc = CHECK(tdc);
    27_31: 4;
  }
}

VME_CAEN_V1290_SUBTDC(tdc,event_id,data)
{
  MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  MARK_COUNT(tdc_start);
  UINT32 header
  {
     0_11: bunch_id;
    12_23: event_id = CHECK(event_id);
    24_25: tdc = MATCH(tdc);
    27_31: 1;
  }
  several UINT32 ch_data NOENCODE
  {
     0_20: value;
    21_23: channel_low;
    24_25: tdc = CHECK(tdc);
       26: trailing;
    27_31: 0;
    ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  }
  optional UINT32 error_flags
  {
     0_14: flags;
    24_25: tdc = CHECK(tdc);
    27_31: 4;
  }
  MARK_COUNT(tdc_end);
  UINT32 trailer
  {
     0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    12_23: event_id = CHECK(header.event_id);
    24_25: tdc = CHECK(tdc);
    27_31: 3;
  }
}

VME_CAEN_V775(geom,crate)
{
  MEMBER(DATA12_OVERFLOW data[32] ZERO_SUPPRESS);
  UINT32 header NOENCODE
  {
     8_13: count;
    16_23: crate = MATCH(crate);
    24_26: 2;
    27_31: geom = MATCH(geom);
  }
  list(0<=index<header.count)
  {
    UINT32 ch_data NOENCODE
    {
       0_11: value;
         12: overflow;
         13: underflow;
         14: valid;
      16_20: channel;
      24_26: 0;
      27_31: geom = CHECK(geom);
      ENCODE(data[channel],(value=value,overflow=overflow));
    }
  }
  UINT32 eob
  {
     0_23: event_number;
    24_26: 4;
    27_31: geom = CHECK(geom);
  }
}

VME_CAEN_V830(geom)
{
  MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  UINT32 header
  {
     0_15: event_number;
    16_17: ts;
    18_23: count;
       26: 1;
    27_31: geom = MATCH(geom);
  }
  list(0<=index<header.count)
  {
    UINT32 ch_data NOENCODE
    {
       0_25: value;
         26: 0;
      27_31: channel;
      ENCODE(data[channel],(value=value));
    }
  }
}

VME_MESYTEC_MADC32(geom)
{
  MEMBER(DATA14_OVERFLOW data[32] ZERO_SUPPRESS);
  MARK_COUNT(start);
  UINT32 header NOENCODE
  {
     0_11: word_number;
    12_14: adc_resol;
       15: out_form;
    16_23: geom = MATCH(geom);
    24_29: 0;
    30_31: 1;
  }
  several UINT32 ch_data NOENCODE
  {
     0_12: value;
       14: outofrange;
    16_20: channel;
    21_29: 32;
    30_31: 0;
    ENCODE(data[channel],(value=value,overflow=outofrange));
  }
  optional UINT32 filler NOENCODE
  {
     0_31: 0;
  }
  UINT32 end_of_event
  {
     0_29: counter;
    30_31: 3;
  }
  MARK_COUNT(end);
  CHECK_COUNT(header.word_number,start,end,( - 4),4)
}

VME_MESYTEC_MDPP16(geom)
{
  MEMBER(DATA16_OVERFLOW data[34] ZERO_SUPPRESS_MULTI(100));
  MARK_COUNT(start);
  UINT32 header NOENCODE
  {
     0_09: word_number;
    10_12: adc_res;
    13_15: tdc_res;
    16_23: geom = MATCH(geom);
    24_29: 0;
    30_31: 1;
  }
  several UINT32 ch_data NOENCODE
  {
     0_15: value;
    16_21: channel;
       22: overflow;
       23: pileup;
    24_27: 0;
    28_31: 1;
    ENCODE(data[channel],(value=value,overflow=overflow,pileup=pileup));
  }
  several UINT32 fill_word NOENCODE
  {
     0_31: 0;
  }
  UINT32 end_of_event
  {
     0_29: counter;
    30_31: 3;
  }
  MARK_COUNT(end);
  CHECK_COUNT(header.word_number,start,end,( - 4),4)
}

SUBEVENT(CROS3_REWRITE_SUBEVENT)
{
  select several
  {
    norevisit ccb[0] = CROS3_REWRITE(ccb_id=1);
    norevisit ccb[1] = CROS3_REWRITE(ccb_id=2);
  }
}

SUBEVENT(CROS3_SUBEVENT)
{
  select several
  {
    external norevisit ccb[0] = EXT_CROS3(ccb_id=1);
    external norevisit ccb[1] = EXT_CROS3(ccb_id=2);
  }
}

SUBEVENT(DUMMY)
{
  select several
  {
    d = DUMMY_WORD();
  }
}

SUBEVENT(LAND_CAMAC_CONVERTER)
{
  UINT16 tpat;
  UINT16 tprev;
  UINT16 tnext;
  UINT16 tprev2;
  if(EXTERNAL has_data)
  {
    aPHI14829 = CAMAC_PHILLIPS_7164(channels=16,mark_channel_no=1);
    qSIA0429 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    qSIA0480 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    tSIA0400 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    tC_FRS120 = CAMAC_SILENA_4418(channels=6,mark_channel_no=0);
    tSIA0426 = CAMAC_SILENA_4418(channels=4,mark_channel_no=0);
    qSIA0458 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
  }
}

SUBEVENT(LAND_CAMAC_PILEUP)
{
  select several
  {
    tdc = CAMAC_LECROY_2277_1CH_HACK(channel=0,edge=1,high_byte=0);
  }
}

SUBEVENT(LAND_CAMAC_SCALER)
{
  scaler0 = CAMAC_LECROY_4434(channels=32);
  scaler1 = CAMAC_LECROY_4434(channels=32);
  scaler2 = CAMAC_LECROY_4434(channels=32);
  scaler3 = SOFT_SCALER32(channels=16);
  if(EXTERNAL has_timestamp)
  {
    UINT32 timestamp;
    UINT32 endianess
    {
       0_31: 0x87654321;
    }
  }
}

SUBEVENT(LAND_CAMAC_START_STOP_STAMP)
{
  UINT32 timestamp;
  UINT32 endianess
  {
     0_31: 0x87654321;
  }
}

SUBEVENT(LAND_CAMAC_TCAL_INFO)
{
  UINT32 info;
  select several
  {
    rtcal = RANDOM_TCAL(id=231);
    ntp = NTP_MESSAGE(id=239);
  }
}

SUBEVENT(LAND_FASTBUS1)
{
  select several
  {
    Q47342 = FASTBUS_LECROY_1885(geom=7,channels=96);
    Q11111 = FASTBUS_LECROY_1885(geom=8,channels=96);
    Q46848 = FASTBUS_LECROY_1885(geom=10,channels=96);
    Q47315 = FASTBUS_LECROY_1885(geom=11,channels=96);
    Q17320 = FASTBUS_LECROY_1885(geom=13,channels=96);
    Q15372 = FASTBUS_LECROY_1885(geom=15,channels=96);
    Q46962 = FASTBUS_LECROY_1885(geom=16,channels=96);
    Q46993 = FASTBUS_LECROY_1885(geom=18,channels=96);
    Q15358 = FASTBUS_LECROY_1885(geom=20,channels=96);
    Q47264 = FASTBUS_LECROY_1885(geom=23,channels=96);
    T81855 = FASTBUS_LECROY_1875(geom=3,channels=64);
    T87044 = FASTBUS_LECROY_1875(geom=4,channels=64);
    T87024 = FASTBUS_LECROY_1875(geom=5,channels=64);
    T81800 = FASTBUS_LECROY_1875(geom=6,channels=64);
  }
}

SUBEVENT(LAND_FASTBUS2)
{
  select several
  {
    Q75266 = FASTBUS_LECROY_1885(geom=17,channels=96);
    T87047 = FASTBUS_LECROY_1875(geom=1,channels=64);
    T48854 = FASTBUS_LECROY_1875(geom=2,channels=64);
    T81808 = FASTBUS_LECROY_1875(geom=3,channels=64);
    T81859 = FASTBUS_LECROY_1875(geom=4,channels=64);
    T81795 = FASTBUS_LECROY_1875(geom=5,channels=64);
    T81806 = FASTBUS_LECROY_1875(geom=6,channels=64);
    T48834 = FASTBUS_LECROY_1875(geom=7,channels=64);
  }
}

SUBEVENT(LAND_FASTBUS_ERROR)
{
  UINT32 error_code
  {
        0: timeout_waiting_smi;
        1: illegal_block_transfer;
        2: fifa_address_overflow;
        3: fifa_register_error;
       16: init_error;
  }
  UINT32 error_num;
}

SUBEVENT(LAND_FASTBUS_ERROR_NGF)
{
  UINT32 magic
  {
     0_31: 0x10000000;
  }
  UINT32 error_code
  {
        0: error;
        1: uninitialized;
        2: ss1;
        3: wc;
        4: mid;
        5: fifo_empty;
        6: fifo_not_empty;
        7: not_finished;
        8: bad_end_addr;
        9: word_lost;
  }
}

SUBEVENT(LAND_VME)
{
  vme = LAND_STD_VME();
  select several
  {
    tCAEN0614 = VME_CAEN_V775(geom=16,crate=130);
    qCAEN0472 = VME_CAEN_V775(geom=0,crate=1);
    scaler[0] = VME_CAEN_V830(geom=30);
    scaler[1] = VME_CAEN_V830(geom=31);
  }
}

SUBEVENT(SIDEREM01_VME)
{
  select several
  {
    external sst[0] = EXT_SST(siderem=1,gtb=0,sam=5,branch=0);
    external sst[1] = EXT_SST(siderem=2,gtb=0,sam=5,branch=0);
    external sst[2] = EXT_SST(siderem=1,gtb=1,sam=5,branch=0);
  }
}

SUBEVENT(SIDEREM02_VME)
{
  select several
  {
    external sst[0] = EXT_SST(siderem=1,gtb=0,sam=5,branch=1);
    external sst[1] = EXT_SST(siderem=1,gtb=1,sam=5,branch=1);
    external sst[2] = EXT_SST(siderem=2,gtb=1,sam=5,branch=1);
  }
}

/**********************************************************
 * The event definition:
 */

EVENT
{
  cros3 = CROS3_SUBEVENT(type=85,subtype=0x2134);
  cros3_rewrite = CROS3_REWRITE_SUBEVENT(type=85,subtype=0x213e);
  sst1 = SIDEREM01_VME(type=82,subtype=0x2008,control=3);
  sst2 = SIDEREM02_VME(type=82,subtype=0x2008,control=2);
  camac = LAND_CAMAC_CONVERTER(type=34,subtype=0xc80);
  fastbus1 = LAND_FASTBUS1(type=32,subtype=0xc3a,subcrate=1);
  fastbus2 = LAND_FASTBUS2(type=32,subtype=0xc3a,subcrate=2);
  acq = DUMMY(type=35,subtype=0xc1c);
  vme = LAND_VME(type=88,subtype=0x2260,control=5);
  camac_tcal_info = LAND_CAMAC_TCAL_INFO(type=0x26ce,subtype=0xc7f);
  camac_scalers = LAND_CAMAC_SCALER(type=34,subtype=0xc1c);
  fastbus1_error = LAND_FASTBUS_ERROR_NGF(type=31,subtype=0xc3b,subcrate=1);
  fastbus2_error = LAND_FASTBUS_ERROR_NGF(type=31,subtype=0xc3b,subcrate=2);
  pileup = LAND_CAMAC_PILEUP(type=34,subtype=0xdac,control=1);
}

/**********************************************************
 * The sticky_event definition:
 */

/**********************************************************
 * Signal name mappings:
 */

SIGNAL(GFI01_01_E,fastbus1.Q46848.data[32],DATA12);
SIGNAL(GFI01_02_E,fastbus1.Q46848.data[1],DATA12);
SIGNAL(GFI01_03_E,fastbus1.Q46848.data[2],DATA12);
SIGNAL(GFI01_04_E,fastbus1.Q46848.data[3],DATA12);
SIGNAL(GFI01_05_E,fastbus1.Q46848.data[4],DATA12);
SIGNAL(GFI01_06_E,fastbus1.Q46848.data[5],DATA12);
SIGNAL(GFI01_07_E,fastbus1.Q46848.data[6],DATA12);
SIGNAL(GFI01_08_E,fastbus1.Q46848.data[7],DATA12);
SIGNAL(GFI01_09_E,fastbus1.Q46848.data[8],DATA12);
SIGNAL(GFI01_10_E,fastbus1.Q46848.data[9],DATA12);
SIGNAL(GFI01_11_E,fastbus1.Q46848.data[10],DATA12);
SIGNAL(GFI01_12_E,fastbus1.Q46848.data[11],DATA12);
SIGNAL(GFI01_13_E,fastbus1.Q46848.data[12],DATA12);
SIGNAL(GFI01_14_E,fastbus1.Q46848.data[13],DATA12);
SIGNAL(GFI01_15_E,fastbus1.Q46848.data[14],DATA12);
SIGNAL(GFI01_16_E,fastbus1.Q46848.data[15],DATA12);
SIGNAL(GFI01_17_E,fastbus1.Q46848.data[16],DATA12);
SIGNAL(GFI01_18_E,fastbus1.Q46848.data[17],DATA12);
SIGNAL(GFI01_19_E,fastbus1.Q46848.data[18],DATA12);
SIGNAL(GFI01_20_E,fastbus1.Q46848.data[19],DATA12);
SIGNAL(GFI01_21_E,fastbus1.Q46848.data[20],DATA12);
SIGNAL(GFI01_22_E,fastbus1.Q46848.data[21],DATA12);
SIGNAL(GFI01_23_E,fastbus1.Q46848.data[22],DATA12);
SIGNAL(GFI01_24_E,fastbus1.Q46848.data[23],DATA12);
SIGNAL(GFI01_25_E,fastbus1.Q46848.data[24],DATA12);
SIGNAL(GFI01_26_E,fastbus1.Q46848.data[25],DATA12);
SIGNAL(GFI01_27_E,fastbus1.Q46848.data[26],DATA12);
SIGNAL(GFI01_28_E,fastbus1.Q46848.data[27],DATA12);
SIGNAL(GFI01_29_E,fastbus1.Q46848.data[28],DATA12);
SIGNAL(GFI01_30_E,fastbus1.Q46848.data[29],DATA12);
SIGNAL(GFI01_31_E,fastbus1.Q46848.data[30],DATA12);
SIGNAL(GFI01_32_E,fastbus1.Q46848.data[31],DATA12);
SIGNAL(GFI01_33_E,fastbus1.Q46848.data[0],DATA12);
SIGNAL(GFI01_34_E,fastbus1.Q46848.data[33],DATA12);
SIGNAL(GFI01_35_E,camac.qSIA0458.data[4],DATA12);
SIGNAL(GFI01_35_T,camac.tC_FRS120.data[3],DATA12);
SIGNAL(GFI02_01_E,fastbus1.Q47264.data[0],DATA12);
SIGNAL(GFI02_02_E,fastbus1.Q47264.data[1],DATA12);
SIGNAL(GFI02_03_E,fastbus1.Q47264.data[2],DATA12);
SIGNAL(GFI02_04_E,fastbus1.Q47264.data[3],DATA12);
SIGNAL(GFI02_05_E,fastbus1.Q47264.data[4],DATA12);
SIGNAL(GFI02_06_E,fastbus1.Q47264.data[5],DATA12);
SIGNAL(GFI02_07_E,fastbus1.Q47264.data[68],DATA12);
SIGNAL(GFI02_08_E,fastbus1.Q47264.data[7],DATA12);
SIGNAL(GFI02_09_E,fastbus1.Q47264.data[8],DATA12);
SIGNAL(GFI02_10_E,fastbus1.Q47264.data[9],DATA12);
SIGNAL(GFI02_11_E,fastbus1.Q47264.data[10],DATA12);
SIGNAL(GFI02_12_E,fastbus1.Q47264.data[11],DATA12);
SIGNAL(GFI02_13_E,fastbus1.Q47264.data[12],DATA12);
SIGNAL(GFI02_14_E,fastbus1.Q47264.data[13],DATA12);
SIGNAL(GFI02_15_E,fastbus1.Q47264.data[14],DATA12);
SIGNAL(GFI02_16_E,fastbus1.Q47264.data[15],DATA12);
SIGNAL(GFI02_17_E,fastbus1.Q47264.data[16],DATA12);
SIGNAL(GFI02_18_E,fastbus1.Q47264.data[17],DATA12);
SIGNAL(GFI02_19_E,fastbus1.Q47264.data[18],DATA12);
SIGNAL(GFI02_20_E,fastbus1.Q47264.data[19],DATA12);
SIGNAL(GFI02_21_E,fastbus1.Q47264.data[20],DATA12);
SIGNAL(GFI02_22_E,fastbus1.Q47264.data[21],DATA12);
SIGNAL(GFI02_23_E,fastbus1.Q47264.data[22],DATA12);
SIGNAL(GFI02_24_E,fastbus1.Q47264.data[23],DATA12);
SIGNAL(GFI02_25_E,fastbus1.Q47264.data[24],DATA12);
SIGNAL(GFI02_26_E,fastbus1.Q47264.data[25],DATA12);
SIGNAL(GFI02_27_E,fastbus1.Q47264.data[26],DATA12);
SIGNAL(GFI02_28_E,fastbus1.Q47264.data[27],DATA12);
SIGNAL(GFI02_29_E,fastbus1.Q47264.data[28],DATA12);
SIGNAL(GFI02_30_E,fastbus1.Q47264.data[29],DATA12);
SIGNAL(GFI02_31_E,fastbus1.Q47264.data[30],DATA12);
SIGNAL(GFI02_32_E,fastbus1.Q47264.data[31],DATA12);
SIGNAL(GFI02_33_E,fastbus1.Q47264.data[64],DATA12);
SIGNAL(GFI02_34_E,fastbus1.Q47264.data[65],DATA12);
SIGNAL(GFI02_35_E,camac.qSIA0458.data[5],DATA12);
SIGNAL(GFI02_35_T,camac.tC_FRS120.data[4],DATA12);
SIGNAL(GFI03_01_E,fastbus1.Q47264.data[32],DATA12);
SIGNAL(GFI03_02_E,fastbus1.Q47264.data[33],DATA12);
SIGNAL(GFI03_03_E,fastbus1.Q47264.data[34],DATA12);
SIGNAL(GFI03_04_E,fastbus1.Q47264.data[35],DATA12);
SIGNAL(GFI03_05_E,fastbus1.Q47264.data[36],DATA12);
SIGNAL(GFI03_06_E,fastbus1.Q47264.data[37],DATA12);
SIGNAL(GFI03_07_E,fastbus1.Q47264.data[38],DATA12);
SIGNAL(GFI03_08_E,fastbus1.Q47264.data[39],DATA12);
SIGNAL(GFI03_09_E,fastbus1.Q47264.data[40],DATA12);
SIGNAL(GFI03_10_E,fastbus1.Q47264.data[41],DATA12);
SIGNAL(GFI03_11_E,fastbus1.Q47264.data[42],DATA12);
SIGNAL(GFI03_12_E,fastbus1.Q47264.data[43],DATA12);
SIGNAL(GFI03_13_E,fastbus1.Q47264.data[44],DATA12);
SIGNAL(GFI03_14_E,fastbus1.Q47264.data[45],DATA12);
SIGNAL(GFI03_15_E,fastbus1.Q47264.data[46],DATA12);
SIGNAL(GFI03_16_E,fastbus1.Q47264.data[47],DATA12);
SIGNAL(GFI03_17_E,fastbus1.Q47264.data[48],DATA12);
SIGNAL(GFI03_18_E,fastbus1.Q47264.data[49],DATA12);
SIGNAL(GFI03_19_E,fastbus1.Q47264.data[50],DATA12);
SIGNAL(GFI03_20_E,fastbus1.Q47264.data[51],DATA12);
SIGNAL(GFI03_21_E,fastbus1.Q47264.data[52],DATA12);
SIGNAL(GFI03_22_E,fastbus1.Q47264.data[53],DATA12);
SIGNAL(GFI03_23_E,fastbus1.Q47264.data[54],DATA12);
SIGNAL(GFI03_24_E,fastbus1.Q47264.data[55],DATA12);
SIGNAL(GFI03_25_E,fastbus1.Q47264.data[56],DATA12);
SIGNAL(GFI03_26_E,fastbus1.Q47264.data[57],DATA12);
SIGNAL(GFI03_27_E,fastbus1.Q47264.data[58],DATA12);
SIGNAL(GFI03_28_E,fastbus1.Q47264.data[59],DATA12);
SIGNAL(GFI03_29_E,fastbus1.Q47264.data[60],DATA12);
SIGNAL(GFI03_30_E,fastbus1.Q47264.data[61],DATA12);
SIGNAL(GFI03_31_E,fastbus1.Q47264.data[62],DATA12);
SIGNAL(GFI03_32_E,fastbus1.Q47264.data[63],DATA12);
SIGNAL(GFI03_33_E,fastbus1.Q47264.data[66],DATA12);
SIGNAL(GFI03_34_E,fastbus1.Q47264.data[67],DATA12);
SIGNAL(MASTER_ACCEPT,vme.scaler[1].data[0],DATA32);
SIGNAL(MASTER_WANTED,vme.scaler[1].data[1],DATA32);
SIGNAL(N01_01_1_E,fastbus1.Q46993.data[0],DATA12);
SIGNAL(N01_01_1_T,fastbus2.T48834.data[0],DATA12);
SIGNAL(N01_01_2_E,fastbus1.Q46993.data[44],DATA12);
SIGNAL(N01_01_2_T,fastbus2.T81795.data[12],DATA12);
SIGNAL(N01_02_1_E,fastbus1.Q46993.data[4],DATA12);
SIGNAL(N01_02_1_T,fastbus2.T48834.data[4],DATA12);
SIGNAL(N01_02_2_E,fastbus1.Q46993.data[40],DATA12);
SIGNAL(N01_02_2_T,fastbus2.T81795.data[8],DATA12);
SIGNAL(N01_03_1_E,fastbus1.Q46993.data[8],DATA12);
SIGNAL(N01_03_1_T,fastbus2.T48834.data[8],DATA12);
SIGNAL(N01_03_2_E,fastbus1.Q46993.data[16],DATA12);
SIGNAL(N01_03_2_T,fastbus2.T81806.data[0],DATA12);
SIGNAL(N01_04_1_E,fastbus1.Q46993.data[12],DATA12);
SIGNAL(N01_04_1_T,fastbus2.T48834.data[12],DATA12);
SIGNAL(N01_04_2_E,fastbus1.Q46993.data[20],DATA12);
SIGNAL(N01_04_2_T,fastbus2.T81806.data[4],DATA12);
SIGNAL(N01_05_1_E,fastbus1.Q46993.data[1],DATA12);
SIGNAL(N01_05_1_T,fastbus2.T48834.data[1],DATA12);
SIGNAL(N01_05_2_E,fastbus1.Q46993.data[41],DATA12);
SIGNAL(N01_05_2_T,fastbus2.T81795.data[9],DATA12);
SIGNAL(N01_06_1_E,fastbus1.Q46993.data[5],DATA12);
SIGNAL(N01_06_1_T,fastbus2.T48834.data[5],DATA12);
SIGNAL(N01_06_2_E,fastbus1.Q46993.data[45],DATA12);
SIGNAL(N01_06_2_T,fastbus2.T81795.data[13],DATA12);
SIGNAL(N01_07_1_E,fastbus1.Q46993.data[9],DATA12);
SIGNAL(N01_07_1_T,fastbus2.T48834.data[9],DATA12);
SIGNAL(N01_07_2_E,fastbus1.Q46993.data[24],DATA12);
SIGNAL(N01_07_2_T,fastbus2.T81806.data[8],DATA12);
SIGNAL(N01_08_1_E,fastbus1.Q46993.data[13],DATA12);
SIGNAL(N01_08_1_T,fastbus2.T48834.data[13],DATA12);
SIGNAL(N01_08_2_E,fastbus1.Q46993.data[28],DATA12);
SIGNAL(N01_08_2_T,fastbus2.T81806.data[12],DATA12);
SIGNAL(N01_09_1_E,fastbus1.Q46993.data[2],DATA12);
SIGNAL(N01_09_1_T,fastbus2.T48834.data[2],DATA12);
SIGNAL(N01_09_2_E,fastbus1.Q46993.data[17],DATA12);
SIGNAL(N01_09_2_T,fastbus2.T81806.data[1],DATA12);
SIGNAL(N01_10_1_E,fastbus1.Q46993.data[6],DATA12);
SIGNAL(N01_10_1_T,fastbus2.T48834.data[6],DATA12);
SIGNAL(N01_10_2_E,fastbus1.Q46993.data[21],DATA12);
SIGNAL(N01_10_2_T,fastbus2.T81806.data[5],DATA12);
SIGNAL(N01_11_1_E,fastbus1.Q46993.data[10],DATA12);
SIGNAL(N01_11_1_T,fastbus2.T48834.data[10],DATA12);
SIGNAL(N01_11_2_E,fastbus1.Q46993.data[25],DATA12);
SIGNAL(N01_11_2_T,fastbus2.T81806.data[9],DATA12);
SIGNAL(N01_12_1_E,fastbus1.Q46993.data[14],DATA12);
SIGNAL(N01_12_1_T,fastbus2.T48834.data[14],DATA12);
SIGNAL(N01_12_2_E,fastbus1.Q46993.data[29],DATA12);
SIGNAL(N01_12_2_T,fastbus2.T81806.data[13],DATA12);
SIGNAL(N01_13_1_E,fastbus1.Q46993.data[3],DATA12);
SIGNAL(N01_13_1_T,fastbus2.T48834.data[3],DATA12);
SIGNAL(N01_13_2_E,fastbus1.Q46993.data[18],DATA12);
SIGNAL(N01_13_2_T,fastbus2.T81806.data[2],DATA12);
SIGNAL(N01_14_1_E,fastbus1.Q46993.data[7],DATA12);
SIGNAL(N01_14_1_T,fastbus2.T48834.data[7],DATA12);
SIGNAL(N01_14_2_E,fastbus1.Q46993.data[22],DATA12);
SIGNAL(N01_14_2_T,fastbus2.T81806.data[6],DATA12);
SIGNAL(N01_15_1_E,fastbus1.Q46993.data[46],DATA12);
SIGNAL(N01_15_1_T,fastbus2.T81795.data[14],DATA12);
SIGNAL(N01_15_2_E,fastbus1.Q46993.data[26],DATA12);
SIGNAL(N01_15_2_T,fastbus2.T81806.data[10],DATA12);
SIGNAL(N01_16_1_E,fastbus1.Q46993.data[42],DATA12);
SIGNAL(N01_16_1_T,fastbus2.T81795.data[10],DATA12);
SIGNAL(N01_16_2_E,fastbus1.Q46993.data[30],DATA12);
SIGNAL(N01_16_2_T,fastbus2.T81806.data[14],DATA12);
SIGNAL(N01_17_1_E,fastbus1.Q46993.data[11],DATA12);
SIGNAL(N01_17_1_T,fastbus2.T48834.data[11],DATA12);
SIGNAL(N01_17_2_E,fastbus1.Q46993.data[19],DATA12);
SIGNAL(N01_17_2_T,fastbus2.T81806.data[3],DATA12);
SIGNAL(N01_18_1_E,fastbus1.Q46993.data[15],DATA12);
SIGNAL(N01_18_1_T,fastbus2.T48834.data[15],DATA12);
SIGNAL(N01_18_2_E,fastbus1.Q46993.data[23],DATA12);
SIGNAL(N01_18_2_T,fastbus2.T81806.data[7],DATA12);
SIGNAL(N01_19_1_E,fastbus1.Q46993.data[47],DATA12);
SIGNAL(N01_19_1_T,fastbus2.T81795.data[15],DATA12);
SIGNAL(N01_19_2_E,fastbus1.Q46993.data[27],DATA12);
SIGNAL(N01_19_2_T,fastbus2.T81806.data[11],DATA12);
SIGNAL(N01_20_1_E,fastbus1.Q46993.data[43],DATA12);
SIGNAL(N01_20_1_T,fastbus2.T81795.data[11],DATA12);
SIGNAL(N01_20_2_E,fastbus1.Q46993.data[31],DATA12);
SIGNAL(N01_20_2_T,fastbus2.T81806.data[15],DATA12);
SIGNAL(N02_01_1_E,fastbus1.Q15358.data[0],DATA12);
SIGNAL(N02_01_1_T,fastbus2.T81859.data[0],DATA12);
SIGNAL(N02_01_2_E,fastbus1.Q46993.data[36],DATA12);
SIGNAL(N02_01_2_T,fastbus2.T81795.data[4],DATA12);
SIGNAL(N02_02_1_E,fastbus1.Q15358.data[4],DATA12);
SIGNAL(N02_02_1_T,fastbus2.T81859.data[4],DATA12);
SIGNAL(N02_02_2_E,fastbus1.Q46993.data[32],DATA12);
SIGNAL(N02_02_2_T,fastbus2.T81795.data[0],DATA12);
SIGNAL(N02_03_1_E,fastbus1.Q15358.data[8],DATA12);
SIGNAL(N02_03_1_T,fastbus2.T81859.data[8],DATA12);
SIGNAL(N02_03_2_E,fastbus1.Q15358.data[16],DATA12);
SIGNAL(N02_03_2_T,fastbus2.T81808.data[0],DATA12);
SIGNAL(N02_04_1_E,fastbus1.Q15358.data[12],DATA12);
SIGNAL(N02_04_1_T,fastbus2.T81859.data[12],DATA12);
SIGNAL(N02_04_2_E,fastbus1.Q15358.data[20],DATA12);
SIGNAL(N02_04_2_T,fastbus2.T81808.data[4],DATA12);
SIGNAL(N02_05_1_E,fastbus1.Q15358.data[1],DATA12);
SIGNAL(N02_05_1_T,fastbus2.T81859.data[1],DATA12);
SIGNAL(N02_05_2_E,fastbus1.Q46993.data[37],DATA12);
SIGNAL(N02_05_2_T,fastbus2.T81795.data[5],DATA12);
SIGNAL(N02_06_1_E,fastbus1.Q15358.data[5],DATA12);
SIGNAL(N02_06_1_T,fastbus2.T81859.data[5],DATA12);
SIGNAL(N02_06_2_E,fastbus1.Q46993.data[33],DATA12);
SIGNAL(N02_06_2_T,fastbus2.T81795.data[1],DATA12);
SIGNAL(N02_07_1_E,fastbus1.Q15358.data[9],DATA12);
SIGNAL(N02_07_1_T,fastbus2.T81859.data[9],DATA12);
SIGNAL(N02_07_2_E,fastbus1.Q15358.data[24],DATA12);
SIGNAL(N02_07_2_T,fastbus2.T81808.data[8],DATA12);
SIGNAL(N02_08_1_E,fastbus1.Q15358.data[13],DATA12);
SIGNAL(N02_08_1_T,fastbus2.T81859.data[13],DATA12);
SIGNAL(N02_08_2_E,fastbus1.Q15358.data[28],DATA12);
SIGNAL(N02_08_2_T,fastbus2.T81808.data[12],DATA12);
SIGNAL(N02_09_1_E,fastbus1.Q15358.data[2],DATA12);
SIGNAL(N02_09_1_T,fastbus2.T81859.data[2],DATA12);
SIGNAL(N02_09_2_E,fastbus1.Q15358.data[17],DATA12);
SIGNAL(N02_09_2_T,fastbus2.T81808.data[1],DATA12);
SIGNAL(N02_10_1_E,fastbus1.Q15358.data[6],DATA12);
SIGNAL(N02_10_1_T,fastbus2.T81859.data[6],DATA12);
SIGNAL(N02_10_2_E,fastbus1.Q15358.data[21],DATA12);
SIGNAL(N02_10_2_T,fastbus2.T81808.data[5],DATA12);
SIGNAL(N02_11_1_E,fastbus1.Q15358.data[10],DATA12);
SIGNAL(N02_11_1_T,fastbus2.T81859.data[10],DATA12);
SIGNAL(N02_11_2_E,fastbus1.Q15358.data[25],DATA12);
SIGNAL(N02_11_2_T,fastbus2.T81808.data[9],DATA12);
SIGNAL(N02_12_1_E,fastbus1.Q15358.data[14],DATA12);
SIGNAL(N02_12_1_T,fastbus2.T81859.data[14],DATA12);
SIGNAL(N02_12_2_E,fastbus1.Q15358.data[29],DATA12);
SIGNAL(N02_12_2_T,fastbus2.T81808.data[13],DATA12);
SIGNAL(N02_13_1_E,fastbus1.Q15358.data[3],DATA12);
SIGNAL(N02_13_1_T,fastbus2.T81859.data[3],DATA12);
SIGNAL(N02_13_2_E,fastbus1.Q15358.data[18],DATA12);
SIGNAL(N02_13_2_T,fastbus2.T81808.data[2],DATA12);
SIGNAL(N02_14_1_E,fastbus1.Q15358.data[7],DATA12);
SIGNAL(N02_14_1_T,fastbus2.T81859.data[7],DATA12);
SIGNAL(N02_14_2_E,fastbus1.Q15358.data[22],DATA12);
SIGNAL(N02_14_2_T,fastbus2.T81808.data[6],DATA12);
SIGNAL(N02_15_1_E,fastbus1.Q46993.data[38],DATA12);
SIGNAL(N02_15_1_T,fastbus2.T81795.data[6],DATA12);
SIGNAL(N02_15_2_E,fastbus1.Q15358.data[26],DATA12);
SIGNAL(N02_15_2_T,fastbus2.T81808.data[10],DATA12);
SIGNAL(N02_16_1_E,fastbus1.Q46993.data[34],DATA12);
SIGNAL(N02_16_1_T,fastbus2.T81795.data[2],DATA12);
SIGNAL(N02_16_2_E,fastbus1.Q15358.data[30],DATA12);
SIGNAL(N02_16_2_T,fastbus2.T81808.data[14],DATA12);
SIGNAL(N02_17_1_E,fastbus1.Q15358.data[11],DATA12);
SIGNAL(N02_17_1_T,fastbus2.T81859.data[11],DATA12);
SIGNAL(N02_17_2_E,fastbus1.Q15358.data[19],DATA12);
SIGNAL(N02_17_2_T,fastbus2.T81808.data[3],DATA12);
SIGNAL(N02_18_1_E,fastbus1.Q15358.data[15],DATA12);
SIGNAL(N02_18_1_T,fastbus2.T81859.data[15],DATA12);
SIGNAL(N02_18_2_E,fastbus1.Q15358.data[23],DATA12);
SIGNAL(N02_18_2_T,fastbus2.T81808.data[7],DATA12);
SIGNAL(N02_19_1_E,fastbus1.Q46993.data[39],DATA12);
SIGNAL(N02_19_1_T,fastbus2.T81795.data[7],DATA12);
SIGNAL(N02_19_2_E,fastbus1.Q15358.data[27],DATA12);
SIGNAL(N02_19_2_T,fastbus2.T81808.data[11],DATA12);
SIGNAL(N02_20_1_E,fastbus1.Q46993.data[35],DATA12);
SIGNAL(N02_20_1_T,fastbus2.T81795.data[3],DATA12);
SIGNAL(N02_20_2_E,fastbus1.Q15358.data[31],DATA12);
SIGNAL(N02_20_2_T,fastbus2.T81808.data[15],DATA12);
SIGNAL(N03_01_1_E,fastbus1.Q15358.data[32],DATA12);
SIGNAL(N03_01_1_T,fastbus2.T48854.data[0],DATA12);
SIGNAL(N03_01_2_E,fastbus1.Q46962.data[28],DATA12);
SIGNAL(N03_01_2_T,fastbus2.T48834.data[28],DATA12);
SIGNAL(N03_02_1_E,fastbus1.Q15358.data[36],DATA12);
SIGNAL(N03_02_1_T,fastbus2.T48854.data[4],DATA12);
SIGNAL(N03_02_2_E,fastbus1.Q46962.data[24],DATA12);
SIGNAL(N03_02_2_T,fastbus2.T48834.data[24],DATA12);
SIGNAL(N03_03_1_E,fastbus1.Q15358.data[40],DATA12);
SIGNAL(N03_03_1_T,fastbus2.T48854.data[8],DATA12);
SIGNAL(N03_03_2_E,fastbus1.Q46962.data[0],DATA12);
SIGNAL(N03_03_2_T,fastbus2.T87047.data[0],DATA12);
SIGNAL(N03_04_1_E,fastbus1.Q15358.data[44],DATA12);
SIGNAL(N03_04_1_T,fastbus2.T48854.data[12],DATA12);
SIGNAL(N03_04_2_E,fastbus1.Q46962.data[4],DATA12);
SIGNAL(N03_04_2_T,fastbus2.T87047.data[4],DATA12);
SIGNAL(N03_05_1_E,fastbus1.Q15358.data[33],DATA12);
SIGNAL(N03_05_1_T,fastbus2.T48854.data[1],DATA12);
SIGNAL(N03_05_2_E,fastbus1.Q46962.data[25],DATA12);
SIGNAL(N03_05_2_T,fastbus2.T48834.data[25],DATA12);
SIGNAL(N03_06_1_E,fastbus1.Q15358.data[37],DATA12);
SIGNAL(N03_06_1_T,fastbus2.T48854.data[5],DATA12);
SIGNAL(N03_06_2_E,fastbus1.Q46962.data[29],DATA12);
SIGNAL(N03_06_2_T,fastbus2.T48834.data[29],DATA12);
SIGNAL(N03_07_1_E,fastbus1.Q15358.data[41],DATA12);
SIGNAL(N03_07_1_T,fastbus2.T48854.data[9],DATA12);
SIGNAL(N03_07_2_E,fastbus1.Q46962.data[8],DATA12);
SIGNAL(N03_07_2_T,fastbus2.T87047.data[8],DATA12);
SIGNAL(N03_08_1_E,fastbus1.Q15358.data[45],DATA12);
SIGNAL(N03_08_1_T,fastbus2.T48854.data[13],DATA12);
SIGNAL(N03_08_2_E,fastbus1.Q46962.data[12],DATA12);
SIGNAL(N03_08_2_T,fastbus2.T87047.data[12],DATA12);
SIGNAL(N03_09_1_E,fastbus1.Q15358.data[34],DATA12);
SIGNAL(N03_09_1_T,fastbus2.T48854.data[2],DATA12);
SIGNAL(N03_09_2_E,fastbus1.Q46962.data[1],DATA12);
SIGNAL(N03_09_2_T,fastbus2.T87047.data[1],DATA12);
SIGNAL(N03_10_1_E,fastbus1.Q15358.data[38],DATA12);
SIGNAL(N03_10_1_T,fastbus2.T48854.data[6],DATA12);
SIGNAL(N03_10_2_E,fastbus1.Q46962.data[5],DATA12);
SIGNAL(N03_10_2_T,fastbus2.T87047.data[5],DATA12);
SIGNAL(N03_11_1_E,fastbus1.Q15358.data[42],DATA12);
SIGNAL(N03_11_1_T,fastbus2.T48854.data[10],DATA12);
SIGNAL(N03_11_2_E,fastbus1.Q46962.data[9],DATA12);
SIGNAL(N03_11_2_T,fastbus2.T87047.data[9],DATA12);
SIGNAL(N03_12_1_E,fastbus1.Q15358.data[46],DATA12);
SIGNAL(N03_12_1_T,fastbus2.T48854.data[14],DATA12);
SIGNAL(N03_12_2_E,fastbus1.Q46962.data[13],DATA12);
SIGNAL(N03_12_2_T,fastbus2.T87047.data[13],DATA12);
SIGNAL(N03_13_1_E,fastbus1.Q15358.data[35],DATA12);
SIGNAL(N03_13_1_T,fastbus2.T48854.data[3],DATA12);
SIGNAL(N03_13_2_E,fastbus1.Q46962.data[2],DATA12);
SIGNAL(N03_13_2_T,fastbus2.T87047.data[2],DATA12);
SIGNAL(N03_14_1_E,fastbus1.Q15358.data[39],DATA12);
SIGNAL(N03_14_1_T,fastbus2.T48854.data[7],DATA12);
SIGNAL(N03_14_2_E,fastbus1.Q46962.data[6],DATA12);
SIGNAL(N03_14_2_T,fastbus2.T87047.data[6],DATA12);
SIGNAL(N03_15_1_E,fastbus1.Q46962.data[30],DATA12);
SIGNAL(N03_15_1_T,fastbus2.T48834.data[30],DATA12);
SIGNAL(N03_15_2_E,fastbus1.Q46962.data[10],DATA12);
SIGNAL(N03_15_2_T,fastbus2.T87047.data[10],DATA12);
SIGNAL(N03_16_1_E,fastbus1.Q46962.data[26],DATA12);
SIGNAL(N03_16_1_T,fastbus2.T48834.data[26],DATA12);
SIGNAL(N03_16_2_E,fastbus1.Q46962.data[14],DATA12);
SIGNAL(N03_16_2_T,fastbus2.T87047.data[14],DATA12);
SIGNAL(N03_17_1_E,fastbus1.Q15358.data[43],DATA12);
SIGNAL(N03_17_1_T,fastbus2.T48854.data[11],DATA12);
SIGNAL(N03_17_2_E,fastbus1.Q46962.data[3],DATA12);
SIGNAL(N03_17_2_T,fastbus2.T87047.data[3],DATA12);
SIGNAL(N03_18_1_E,fastbus1.Q15358.data[47],DATA12);
SIGNAL(N03_18_1_T,fastbus2.T48854.data[15],DATA12);
SIGNAL(N03_18_2_E,fastbus1.Q46962.data[7],DATA12);
SIGNAL(N03_18_2_T,fastbus2.T87047.data[7],DATA12);
SIGNAL(N03_19_1_E,fastbus1.Q46962.data[31],DATA12);
SIGNAL(N03_19_1_T,fastbus2.T48834.data[31],DATA12);
SIGNAL(N03_19_2_E,fastbus1.Q46962.data[11],DATA12);
SIGNAL(N03_19_2_T,fastbus2.T87047.data[11],DATA12);
SIGNAL(N03_20_1_E,fastbus1.Q46962.data[27],DATA12);
SIGNAL(N03_20_1_T,fastbus2.T48834.data[27],DATA12);
SIGNAL(N03_20_2_E,fastbus1.Q46962.data[15],DATA12);
SIGNAL(N03_20_2_T,fastbus2.T87047.data[15],DATA12);
SIGNAL(N04_01_1_E,fastbus1.Q46962.data[32],DATA12);
SIGNAL(N04_01_1_T,fastbus2.T81806.data[16],DATA12);
SIGNAL(N04_01_2_E,fastbus1.Q46962.data[20],DATA12);
SIGNAL(N04_01_2_T,fastbus2.T48834.data[20],DATA12);
SIGNAL(N04_02_1_E,fastbus1.Q46962.data[36],DATA12);
SIGNAL(N04_02_1_T,fastbus2.T81806.data[20],DATA12);
SIGNAL(N04_02_2_E,fastbus1.Q46962.data[16],DATA12);
SIGNAL(N04_02_2_T,fastbus2.T48834.data[16],DATA12);
SIGNAL(N04_03_1_E,fastbus1.Q46962.data[40],DATA12);
SIGNAL(N04_03_1_T,fastbus2.T81806.data[24],DATA12);
SIGNAL(N04_03_2_E,fastbus1.Q15372.data[0],DATA12);
SIGNAL(N04_03_2_T,fastbus2.T81795.data[16],DATA12);
SIGNAL(N04_04_1_E,fastbus1.Q46962.data[44],DATA12);
SIGNAL(N04_04_1_T,fastbus2.T81806.data[28],DATA12);
SIGNAL(N04_04_2_E,fastbus1.Q15372.data[4],DATA12);
SIGNAL(N04_04_2_T,fastbus2.T81795.data[20],DATA12);
SIGNAL(N04_05_1_E,fastbus1.Q46962.data[33],DATA12);
SIGNAL(N04_05_1_T,fastbus2.T81806.data[17],DATA12);
SIGNAL(N04_05_2_E,fastbus1.Q46962.data[21],DATA12);
SIGNAL(N04_05_2_T,fastbus2.T48834.data[21],DATA12);
SIGNAL(N04_06_1_E,fastbus1.Q46962.data[37],DATA12);
SIGNAL(N04_06_1_T,fastbus2.T81806.data[21],DATA12);
SIGNAL(N04_06_2_E,fastbus1.Q46962.data[17],DATA12);
SIGNAL(N04_06_2_T,fastbus2.T48834.data[17],DATA12);
SIGNAL(N04_07_1_E,fastbus1.Q46962.data[41],DATA12);
SIGNAL(N04_07_1_T,fastbus2.T81806.data[25],DATA12);
SIGNAL(N04_07_2_E,fastbus1.Q15372.data[8],DATA12);
SIGNAL(N04_07_2_T,fastbus2.T81795.data[24],DATA12);
SIGNAL(N04_08_1_E,fastbus1.Q46962.data[45],DATA12);
SIGNAL(N04_08_1_T,fastbus2.T81806.data[29],DATA12);
SIGNAL(N04_08_2_E,fastbus1.Q15372.data[12],DATA12);
SIGNAL(N04_08_2_T,fastbus2.T81795.data[28],DATA12);
SIGNAL(N04_09_1_E,fastbus1.Q46962.data[34],DATA12);
SIGNAL(N04_09_1_T,fastbus2.T81806.data[18],DATA12);
SIGNAL(N04_09_2_E,fastbus1.Q15372.data[1],DATA12);
SIGNAL(N04_09_2_T,fastbus2.T81795.data[17],DATA12);
SIGNAL(N04_10_1_E,fastbus1.Q46962.data[38],DATA12);
SIGNAL(N04_10_1_T,fastbus2.T81806.data[22],DATA12);
SIGNAL(N04_10_2_E,fastbus1.Q15372.data[5],DATA12);
SIGNAL(N04_10_2_T,fastbus2.T81795.data[21],DATA12);
SIGNAL(N04_11_1_E,fastbus1.Q46962.data[42],DATA12);
SIGNAL(N04_11_1_T,fastbus2.T81806.data[26],DATA12);
SIGNAL(N04_11_2_E,fastbus1.Q15372.data[9],DATA12);
SIGNAL(N04_11_2_T,fastbus2.T81795.data[25],DATA12);
SIGNAL(N04_12_1_E,fastbus1.Q46962.data[46],DATA12);
SIGNAL(N04_12_1_T,fastbus2.T81806.data[30],DATA12);
SIGNAL(N04_12_2_E,fastbus1.Q15372.data[13],DATA12);
SIGNAL(N04_12_2_T,fastbus2.T81795.data[29],DATA12);
SIGNAL(N04_13_1_E,fastbus1.Q46962.data[35],DATA12);
SIGNAL(N04_13_1_T,fastbus2.T81806.data[19],DATA12);
SIGNAL(N04_13_2_E,fastbus1.Q15372.data[2],DATA12);
SIGNAL(N04_13_2_T,fastbus2.T81795.data[18],DATA12);
SIGNAL(N04_14_1_E,fastbus1.Q46962.data[39],DATA12);
SIGNAL(N04_14_1_T,fastbus2.T81806.data[23],DATA12);
SIGNAL(N04_14_2_E,fastbus1.Q15372.data[6],DATA12);
SIGNAL(N04_14_2_T,fastbus2.T81795.data[22],DATA12);
SIGNAL(N04_15_1_E,fastbus1.Q46962.data[22],DATA12);
SIGNAL(N04_15_1_T,fastbus2.T48834.data[22],DATA12);
SIGNAL(N04_15_2_E,fastbus1.Q15372.data[10],DATA12);
SIGNAL(N04_15_2_T,fastbus2.T81795.data[26],DATA12);
SIGNAL(N04_16_1_E,fastbus1.Q46962.data[18],DATA12);
SIGNAL(N04_16_1_T,fastbus2.T48834.data[18],DATA12);
SIGNAL(N04_16_2_E,fastbus1.Q15372.data[14],DATA12);
SIGNAL(N04_16_2_T,fastbus2.T81795.data[30],DATA12);
SIGNAL(N04_17_1_E,fastbus1.Q46962.data[43],DATA12);
SIGNAL(N04_17_1_T,fastbus2.T81806.data[27],DATA12);
SIGNAL(N04_17_2_E,fastbus1.Q15372.data[3],DATA12);
SIGNAL(N04_17_2_T,fastbus2.T81795.data[19],DATA12);
SIGNAL(N04_18_1_E,fastbus1.Q46962.data[47],DATA12);
SIGNAL(N04_18_1_T,fastbus2.T81806.data[31],DATA12);
SIGNAL(N04_18_2_E,fastbus1.Q15372.data[7],DATA12);
SIGNAL(N04_18_2_T,fastbus2.T81795.data[23],DATA12);
SIGNAL(N04_19_1_E,fastbus1.Q46962.data[23],DATA12);
SIGNAL(N04_19_1_T,fastbus2.T48834.data[23],DATA12);
SIGNAL(N04_19_2_E,fastbus1.Q15372.data[11],DATA12);
SIGNAL(N04_19_2_T,fastbus2.T81795.data[27],DATA12);
SIGNAL(N04_20_1_E,fastbus1.Q46962.data[19],DATA12);
SIGNAL(N04_20_1_T,fastbus2.T48834.data[19],DATA12);
SIGNAL(N04_20_2_E,fastbus1.Q15372.data[15],DATA12);
SIGNAL(N04_20_2_T,fastbus2.T81795.data[31],DATA12);
SIGNAL(N05_01_1_E,fastbus1.Q15372.data[16],DATA12);
SIGNAL(N05_01_1_T,fastbus2.T81859.data[16],DATA12);
SIGNAL(N05_01_2_E,fastbus1.Q47315.data[12],DATA12);
SIGNAL(N05_01_2_T,fastbus2.T48854.data[28],DATA12);
SIGNAL(N05_02_1_E,fastbus1.Q15372.data[20],DATA12);
SIGNAL(N05_02_1_T,fastbus2.T81859.data[20],DATA12);
SIGNAL(N05_02_2_E,fastbus1.Q47315.data[8],DATA12);
SIGNAL(N05_02_2_T,fastbus2.T48854.data[24],DATA12);
SIGNAL(N05_03_1_E,fastbus1.Q15372.data[24],DATA12);
SIGNAL(N05_03_1_T,fastbus2.T81859.data[24],DATA12);
SIGNAL(N05_03_2_E,fastbus1.Q15372.data[32],DATA12);
SIGNAL(N05_03_2_T,fastbus2.T81808.data[16],DATA12);
SIGNAL(N05_04_1_E,fastbus1.Q15372.data[28],DATA12);
SIGNAL(N05_04_1_T,fastbus2.T81859.data[28],DATA12);
SIGNAL(N05_04_2_E,fastbus1.Q15372.data[36],DATA12);
SIGNAL(N05_04_2_T,fastbus2.T81808.data[20],DATA12);
SIGNAL(N05_05_1_E,fastbus1.Q15372.data[17],DATA12);
SIGNAL(N05_05_1_T,fastbus2.T81859.data[17],DATA12);
SIGNAL(N05_05_2_E,fastbus1.Q47315.data[9],DATA12);
SIGNAL(N05_05_2_T,fastbus2.T48854.data[25],DATA12);
SIGNAL(N05_06_1_E,fastbus1.Q15372.data[21],DATA12);
SIGNAL(N05_06_1_T,fastbus2.T81859.data[21],DATA12);
SIGNAL(N05_06_2_E,fastbus1.Q47315.data[13],DATA12);
SIGNAL(N05_06_2_T,fastbus2.T48854.data[29],DATA12);
SIGNAL(N05_07_1_E,fastbus1.Q15372.data[25],DATA12);
SIGNAL(N05_07_1_T,fastbus2.T81859.data[25],DATA12);
SIGNAL(N05_07_2_E,fastbus1.Q15372.data[40],DATA12);
SIGNAL(N05_07_2_T,fastbus2.T81808.data[24],DATA12);
SIGNAL(N05_08_1_E,fastbus1.Q15372.data[29],DATA12);
SIGNAL(N05_08_1_T,fastbus2.T81859.data[29],DATA12);
SIGNAL(N05_08_2_E,fastbus1.Q15372.data[44],DATA12);
SIGNAL(N05_08_2_T,fastbus2.T81808.data[28],DATA12);
SIGNAL(N05_09_1_E,fastbus1.Q15372.data[18],DATA12);
SIGNAL(N05_09_1_T,fastbus2.T81859.data[18],DATA12);
SIGNAL(N05_09_2_E,fastbus1.Q15372.data[33],DATA12);
SIGNAL(N05_09_2_T,fastbus2.T81808.data[17],DATA12);
SIGNAL(N05_10_1_E,fastbus1.Q15372.data[22],DATA12);
SIGNAL(N05_10_1_T,fastbus2.T81859.data[22],DATA12);
SIGNAL(N05_10_2_E,fastbus1.Q15372.data[37],DATA12);
SIGNAL(N05_10_2_T,fastbus2.T81808.data[21],DATA12);
SIGNAL(N05_11_1_E,fastbus1.Q15372.data[26],DATA12);
SIGNAL(N05_11_1_T,fastbus2.T81859.data[26],DATA12);
SIGNAL(N05_11_2_E,fastbus1.Q15372.data[41],DATA12);
SIGNAL(N05_11_2_T,fastbus2.T81808.data[25],DATA12);
SIGNAL(N05_12_1_E,fastbus1.Q15372.data[30],DATA12);
SIGNAL(N05_12_1_T,fastbus2.T81859.data[30],DATA12);
SIGNAL(N05_12_2_E,fastbus1.Q15372.data[45],DATA12);
SIGNAL(N05_12_2_T,fastbus2.T81808.data[29],DATA12);
SIGNAL(N05_13_1_E,fastbus1.Q15372.data[19],DATA12);
SIGNAL(N05_13_1_T,fastbus2.T81859.data[19],DATA12);
SIGNAL(N05_13_2_E,fastbus1.Q15372.data[34],DATA12);
SIGNAL(N05_13_2_T,fastbus2.T81808.data[18],DATA12);
SIGNAL(N05_14_1_E,fastbus1.Q15372.data[23],DATA12);
SIGNAL(N05_14_1_T,fastbus2.T81859.data[23],DATA12);
SIGNAL(N05_14_2_E,fastbus1.Q15372.data[38],DATA12);
SIGNAL(N05_14_2_T,fastbus2.T81808.data[22],DATA12);
SIGNAL(N05_15_1_E,fastbus1.Q47315.data[14],DATA12);
SIGNAL(N05_15_1_T,fastbus2.T48854.data[30],DATA12);
SIGNAL(N05_15_2_E,fastbus1.Q15372.data[42],DATA12);
SIGNAL(N05_15_2_T,fastbus2.T81808.data[26],DATA12);
SIGNAL(N05_16_1_E,fastbus1.Q47315.data[10],DATA12);
SIGNAL(N05_16_1_T,fastbus2.T48854.data[26],DATA12);
SIGNAL(N05_16_2_E,fastbus1.Q15372.data[46],DATA12);
SIGNAL(N05_16_2_T,fastbus2.T81808.data[30],DATA12);
SIGNAL(N05_17_1_E,fastbus1.Q15372.data[27],DATA12);
SIGNAL(N05_17_1_T,fastbus2.T81859.data[27],DATA12);
SIGNAL(N05_17_2_E,fastbus1.Q15372.data[35],DATA12);
SIGNAL(N05_17_2_T,fastbus2.T81808.data[19],DATA12);
SIGNAL(N05_18_1_E,fastbus1.Q15372.data[31],DATA12);
SIGNAL(N05_18_1_T,fastbus2.T81859.data[31],DATA12);
SIGNAL(N05_18_2_E,fastbus1.Q15372.data[39],DATA12);
SIGNAL(N05_18_2_T,fastbus2.T81808.data[23],DATA12);
SIGNAL(N05_19_1_E,fastbus1.Q47315.data[15],DATA12);
SIGNAL(N05_19_1_T,fastbus2.T48854.data[31],DATA12);
SIGNAL(N05_19_2_E,fastbus1.Q15372.data[43],DATA12);
SIGNAL(N05_19_2_T,fastbus2.T81808.data[27],DATA12);
SIGNAL(N05_20_1_E,fastbus1.Q47315.data[11],DATA12);
SIGNAL(N05_20_1_T,fastbus2.T48854.data[27],DATA12);
SIGNAL(N05_20_2_E,fastbus1.Q15372.data[47],DATA12);
SIGNAL(N05_20_2_T,fastbus2.T81808.data[31],DATA12);
SIGNAL(N06_01_1_E,fastbus1.Q47315.data[16],DATA12);
SIGNAL(N06_01_1_T,fastbus2.T87047.data[16],DATA12);
SIGNAL(N06_01_2_E,fastbus1.Q47315.data[4],DATA12);
SIGNAL(N06_01_2_T,fastbus2.T48854.data[20],DATA12);
SIGNAL(N06_02_1_E,fastbus1.Q47315.data[20],DATA12);
SIGNAL(N06_02_1_T,fastbus2.T87047.data[20],DATA12);
SIGNAL(N06_02_2_E,fastbus1.Q47315.data[0],DATA12);
SIGNAL(N06_02_2_T,fastbus2.T48854.data[16],DATA12);
SIGNAL(N06_03_1_E,fastbus1.Q47315.data[24],DATA12);
SIGNAL(N06_03_1_T,fastbus2.T87047.data[24],DATA12);
SIGNAL(N06_03_2_E,fastbus1.Q46993.data[48],DATA12);
SIGNAL(N06_03_2_T,fastbus2.T48834.data[32],DATA12);
SIGNAL(N06_04_1_E,fastbus1.Q47315.data[28],DATA12);
SIGNAL(N06_04_1_T,fastbus2.T87047.data[28],DATA12);
SIGNAL(N06_04_2_E,fastbus1.Q46993.data[52],DATA12);
SIGNAL(N06_04_2_T,fastbus2.T48834.data[36],DATA12);
SIGNAL(N06_05_1_E,fastbus1.Q47315.data[17],DATA12);
SIGNAL(N06_05_1_T,fastbus2.T87047.data[17],DATA12);
SIGNAL(N06_05_2_E,fastbus1.Q47315.data[5],DATA12);
SIGNAL(N06_05_2_T,fastbus2.T48854.data[21],DATA12);
SIGNAL(N06_06_1_E,fastbus1.Q47315.data[21],DATA12);
SIGNAL(N06_06_1_T,fastbus2.T87047.data[21],DATA12);
SIGNAL(N06_06_2_E,fastbus1.Q47315.data[1],DATA12);
SIGNAL(N06_06_2_T,fastbus2.T48854.data[17],DATA12);
SIGNAL(N06_07_1_E,fastbus1.Q47315.data[25],DATA12);
SIGNAL(N06_07_1_T,fastbus2.T87047.data[25],DATA12);
SIGNAL(N06_07_2_E,fastbus1.Q46993.data[56],DATA12);
SIGNAL(N06_07_2_T,fastbus2.T48834.data[40],DATA12);
SIGNAL(N06_08_1_E,fastbus1.Q47315.data[29],DATA12);
SIGNAL(N06_08_1_T,fastbus2.T87047.data[29],DATA12);
SIGNAL(N06_08_2_E,fastbus1.Q46993.data[60],DATA12);
SIGNAL(N06_08_2_T,fastbus2.T48834.data[44],DATA12);
SIGNAL(N06_09_1_E,fastbus1.Q47315.data[18],DATA12);
SIGNAL(N06_09_1_T,fastbus2.T87047.data[18],DATA12);
SIGNAL(N06_09_2_E,fastbus1.Q46993.data[49],DATA12);
SIGNAL(N06_09_2_T,fastbus2.T48834.data[33],DATA12);
SIGNAL(N06_10_1_E,fastbus1.Q47315.data[22],DATA12);
SIGNAL(N06_10_1_T,fastbus2.T87047.data[22],DATA12);
SIGNAL(N06_10_2_E,fastbus1.Q46993.data[53],DATA12);
SIGNAL(N06_10_2_T,fastbus2.T48834.data[37],DATA12);
SIGNAL(N06_11_1_E,fastbus1.Q47315.data[26],DATA12);
SIGNAL(N06_11_1_T,fastbus2.T87047.data[26],DATA12);
SIGNAL(N06_11_2_E,fastbus1.Q46993.data[57],DATA12);
SIGNAL(N06_11_2_T,fastbus2.T48834.data[41],DATA12);
SIGNAL(N06_12_1_E,fastbus1.Q47315.data[30],DATA12);
SIGNAL(N06_12_1_T,fastbus2.T87047.data[30],DATA12);
SIGNAL(N06_12_2_E,fastbus1.Q46993.data[61],DATA12);
SIGNAL(N06_12_2_T,fastbus2.T48834.data[45],DATA12);
SIGNAL(N06_13_1_E,fastbus1.Q47315.data[19],DATA12);
SIGNAL(N06_13_1_T,fastbus2.T87047.data[19],DATA12);
SIGNAL(N06_13_2_E,fastbus1.Q46993.data[50],DATA12);
SIGNAL(N06_13_2_T,fastbus2.T48834.data[34],DATA12);
SIGNAL(N06_14_1_E,fastbus1.Q47315.data[23],DATA12);
SIGNAL(N06_14_1_T,fastbus2.T87047.data[23],DATA12);
SIGNAL(N06_14_2_E,fastbus1.Q46993.data[54],DATA12);
SIGNAL(N06_14_2_T,fastbus2.T48834.data[38],DATA12);
SIGNAL(N06_15_1_E,fastbus1.Q47315.data[6],DATA12);
SIGNAL(N06_15_1_T,fastbus2.T48854.data[22],DATA12);
SIGNAL(N06_15_2_E,fastbus1.Q46993.data[58],DATA12);
SIGNAL(N06_15_2_T,fastbus2.T48834.data[42],DATA12);
SIGNAL(N06_16_1_E,fastbus1.Q47315.data[2],DATA12);
SIGNAL(N06_16_1_T,fastbus2.T48854.data[18],DATA12);
SIGNAL(N06_16_2_E,fastbus1.Q46993.data[62],DATA12);
SIGNAL(N06_16_2_T,fastbus2.T48834.data[46],DATA12);
SIGNAL(N06_17_1_E,fastbus1.Q47315.data[27],DATA12);
SIGNAL(N06_17_1_T,fastbus2.T87047.data[27],DATA12);
SIGNAL(N06_17_2_E,fastbus1.Q46993.data[51],DATA12);
SIGNAL(N06_17_2_T,fastbus2.T48834.data[35],DATA12);
SIGNAL(N06_18_1_E,fastbus1.Q47315.data[31],DATA12);
SIGNAL(N06_18_1_T,fastbus2.T87047.data[31],DATA12);
SIGNAL(N06_18_2_E,fastbus1.Q46993.data[55],DATA12);
SIGNAL(N06_18_2_T,fastbus2.T48834.data[39],DATA12);
SIGNAL(N06_19_1_E,fastbus1.Q47315.data[7],DATA12);
SIGNAL(N06_19_1_T,fastbus2.T48854.data[23],DATA12);
SIGNAL(N06_19_2_E,fastbus1.Q46993.data[59],DATA12);
SIGNAL(N06_19_2_T,fastbus2.T48834.data[43],DATA12);
SIGNAL(N06_20_1_E,fastbus1.Q47315.data[3],DATA12);
SIGNAL(N06_20_1_T,fastbus2.T48854.data[19],DATA12);
SIGNAL(N06_20_2_E,fastbus1.Q46993.data[63],DATA12);
SIGNAL(N06_20_2_T,fastbus2.T48834.data[47],DATA12);
SIGNAL(N07_01_1_E,fastbus1.Q46993.data[64],DATA12);
SIGNAL(N07_01_1_T,fastbus2.T81806.data[32],DATA12);
SIGNAL(N07_01_2_E,fastbus1.Q15358.data[60],DATA12);
SIGNAL(N07_01_2_T,fastbus2.T81859.data[44],DATA12);
SIGNAL(N07_02_1_E,fastbus1.Q46993.data[68],DATA12);
SIGNAL(N07_02_1_T,fastbus2.T81806.data[36],DATA12);
SIGNAL(N07_02_2_E,fastbus1.Q15358.data[56],DATA12);
SIGNAL(N07_02_2_T,fastbus2.T81859.data[40],DATA12);
SIGNAL(N07_03_1_E,fastbus1.Q46993.data[72],DATA12);
SIGNAL(N07_03_1_T,fastbus2.T81806.data[40],DATA12);
SIGNAL(N07_03_2_E,fastbus1.Q46993.data[80],DATA12);
SIGNAL(N07_03_2_T,fastbus2.T81795.data[32],DATA12);
SIGNAL(N07_04_1_E,fastbus1.Q46993.data[76],DATA12);
SIGNAL(N07_04_1_T,fastbus2.T81806.data[44],DATA12);
SIGNAL(N07_04_2_E,fastbus1.Q46993.data[84],DATA12);
SIGNAL(N07_04_2_T,fastbus2.T81795.data[36],DATA12);
SIGNAL(N07_05_1_E,fastbus1.Q46993.data[65],DATA12);
SIGNAL(N07_05_1_T,fastbus2.T81806.data[33],DATA12);
SIGNAL(N07_05_2_E,fastbus1.Q15358.data[57],DATA12);
SIGNAL(N07_05_2_T,fastbus2.T81859.data[41],DATA12);
SIGNAL(N07_06_1_E,fastbus1.Q46993.data[69],DATA12);
SIGNAL(N07_06_1_T,fastbus2.T81806.data[37],DATA12);
SIGNAL(N07_06_2_E,fastbus1.Q15358.data[61],DATA12);
SIGNAL(N07_06_2_T,fastbus2.T81859.data[45],DATA12);
SIGNAL(N07_07_1_E,fastbus1.Q46993.data[73],DATA12);
SIGNAL(N07_07_1_T,fastbus2.T81806.data[41],DATA12);
SIGNAL(N07_07_2_E,fastbus1.Q46993.data[88],DATA12);
SIGNAL(N07_07_2_T,fastbus2.T81795.data[40],DATA12);
SIGNAL(N07_08_1_E,fastbus1.Q46993.data[77],DATA12);
SIGNAL(N07_08_1_T,fastbus2.T81806.data[45],DATA12);
SIGNAL(N07_08_2_E,fastbus1.Q46993.data[92],DATA12);
SIGNAL(N07_08_2_T,fastbus2.T81795.data[44],DATA12);
SIGNAL(N07_09_1_E,fastbus1.Q46993.data[66],DATA12);
SIGNAL(N07_09_1_T,fastbus2.T81806.data[34],DATA12);
SIGNAL(N07_09_2_E,fastbus1.Q46993.data[81],DATA12);
SIGNAL(N07_09_2_T,fastbus2.T81795.data[33],DATA12);
SIGNAL(N07_10_1_E,fastbus1.Q46993.data[70],DATA12);
SIGNAL(N07_10_1_T,fastbus2.T81806.data[38],DATA12);
SIGNAL(N07_10_2_E,fastbus1.Q46993.data[85],DATA12);
SIGNAL(N07_10_2_T,fastbus2.T81795.data[37],DATA12);
SIGNAL(N07_11_1_E,fastbus1.Q46993.data[74],DATA12);
SIGNAL(N07_11_1_T,fastbus2.T81806.data[42],DATA12);
SIGNAL(N07_11_2_E,fastbus1.Q46993.data[89],DATA12);
SIGNAL(N07_11_2_T,fastbus2.T81795.data[41],DATA12);
SIGNAL(N07_12_1_E,fastbus1.Q46993.data[78],DATA12);
SIGNAL(N07_12_1_T,fastbus2.T81806.data[46],DATA12);
SIGNAL(N07_12_2_E,fastbus1.Q46993.data[93],DATA12);
SIGNAL(N07_12_2_T,fastbus2.T81795.data[45],DATA12);
SIGNAL(N07_13_1_E,fastbus1.Q46993.data[67],DATA12);
SIGNAL(N07_13_1_T,fastbus2.T81806.data[35],DATA12);
SIGNAL(N07_13_2_E,fastbus1.Q46993.data[82],DATA12);
SIGNAL(N07_13_2_T,fastbus2.T81795.data[34],DATA12);
SIGNAL(N07_14_1_E,fastbus1.Q46993.data[71],DATA12);
SIGNAL(N07_14_1_T,fastbus2.T81806.data[39],DATA12);
SIGNAL(N07_14_2_E,fastbus1.Q46993.data[86],DATA12);
SIGNAL(N07_14_2_T,fastbus2.T81795.data[38],DATA12);
SIGNAL(N07_15_1_E,fastbus1.Q15358.data[62],DATA12);
SIGNAL(N07_15_1_T,fastbus2.T81859.data[46],DATA12);
SIGNAL(N07_15_2_E,fastbus1.Q46993.data[90],DATA12);
SIGNAL(N07_15_2_T,fastbus2.T81795.data[42],DATA12);
SIGNAL(N07_16_1_E,fastbus1.Q15358.data[58],DATA12);
SIGNAL(N07_16_1_T,fastbus2.T81859.data[42],DATA12);
SIGNAL(N07_16_2_E,fastbus1.Q46993.data[94],DATA12);
SIGNAL(N07_16_2_T,fastbus2.T81795.data[46],DATA12);
SIGNAL(N07_17_1_E,fastbus1.Q46993.data[75],DATA12);
SIGNAL(N07_17_1_T,fastbus2.T81806.data[43],DATA12);
SIGNAL(N07_17_2_E,fastbus1.Q46993.data[83],DATA12);
SIGNAL(N07_17_2_T,fastbus2.T81795.data[35],DATA12);
SIGNAL(N07_18_1_E,fastbus1.Q46993.data[79],DATA12);
SIGNAL(N07_18_1_T,fastbus2.T81806.data[47],DATA12);
SIGNAL(N07_18_2_E,fastbus1.Q46993.data[87],DATA12);
SIGNAL(N07_18_2_T,fastbus2.T81795.data[39],DATA12);
SIGNAL(N07_19_1_E,fastbus1.Q15358.data[63],DATA12);
SIGNAL(N07_19_1_T,fastbus2.T81859.data[47],DATA12);
SIGNAL(N07_19_2_E,fastbus1.Q46993.data[91],DATA12);
SIGNAL(N07_19_2_T,fastbus2.T81795.data[43],DATA12);
SIGNAL(N07_20_1_E,fastbus1.Q15358.data[59],DATA12);
SIGNAL(N07_20_1_T,fastbus2.T81859.data[43],DATA12);
SIGNAL(N07_20_2_E,fastbus1.Q46993.data[95],DATA12);
SIGNAL(N07_20_2_T,fastbus2.T81795.data[47],DATA12);
SIGNAL(N08_01_1_E,fastbus1.Q15358.data[64],DATA12);
SIGNAL(N08_01_1_T,fastbus2.T81808.data[32],DATA12);
SIGNAL(N08_01_2_E,fastbus1.Q15358.data[52],DATA12);
SIGNAL(N08_01_2_T,fastbus2.T81859.data[36],DATA12);
SIGNAL(N08_02_1_E,fastbus1.Q15358.data[68],DATA12);
SIGNAL(N08_02_1_T,fastbus2.T81808.data[36],DATA12);
SIGNAL(N08_02_2_E,fastbus1.Q15358.data[48],DATA12);
SIGNAL(N08_02_2_T,fastbus2.T81859.data[32],DATA12);
SIGNAL(N08_03_1_E,fastbus1.Q15358.data[72],DATA12);
SIGNAL(N08_03_1_T,fastbus2.T81808.data[40],DATA12);
SIGNAL(N08_03_2_E,fastbus1.Q15358.data[80],DATA12);
SIGNAL(N08_03_2_T,fastbus2.T48854.data[32],DATA12);
SIGNAL(N08_04_1_E,fastbus1.Q15358.data[76],DATA12);
SIGNAL(N08_04_1_T,fastbus2.T81808.data[44],DATA12);
SIGNAL(N08_04_2_E,fastbus1.Q15358.data[84],DATA12);
SIGNAL(N08_04_2_T,fastbus2.T48854.data[36],DATA12);
SIGNAL(N08_05_1_E,fastbus1.Q15358.data[65],DATA12);
SIGNAL(N08_05_1_T,fastbus2.T81808.data[33],DATA12);
SIGNAL(N08_05_2_E,fastbus1.Q15358.data[53],DATA12);
SIGNAL(N08_05_2_T,fastbus2.T81859.data[37],DATA12);
SIGNAL(N08_06_1_E,fastbus1.Q15358.data[69],DATA12);
SIGNAL(N08_06_1_T,fastbus2.T81808.data[37],DATA12);
SIGNAL(N08_06_2_E,fastbus1.Q15358.data[49],DATA12);
SIGNAL(N08_06_2_T,fastbus2.T81859.data[33],DATA12);
SIGNAL(N08_07_1_E,fastbus1.Q15358.data[73],DATA12);
SIGNAL(N08_07_1_T,fastbus2.T81808.data[41],DATA12);
SIGNAL(N08_07_2_E,fastbus1.Q15358.data[88],DATA12);
SIGNAL(N08_07_2_T,fastbus2.T48854.data[40],DATA12);
SIGNAL(N08_08_1_E,fastbus1.Q15358.data[77],DATA12);
SIGNAL(N08_08_1_T,fastbus2.T81808.data[45],DATA12);
SIGNAL(N08_08_2_E,fastbus1.Q15358.data[92],DATA12);
SIGNAL(N08_08_2_T,fastbus2.T48854.data[44],DATA12);
SIGNAL(N08_09_1_E,fastbus1.Q15358.data[66],DATA12);
SIGNAL(N08_09_1_T,fastbus2.T81808.data[34],DATA12);
SIGNAL(N08_09_2_E,fastbus1.Q15358.data[81],DATA12);
SIGNAL(N08_09_2_T,fastbus2.T48854.data[33],DATA12);
SIGNAL(N08_10_1_E,fastbus1.Q15358.data[70],DATA12);
SIGNAL(N08_10_1_T,fastbus2.T81808.data[38],DATA12);
SIGNAL(N08_10_2_E,fastbus1.Q15358.data[85],DATA12);
SIGNAL(N08_10_2_T,fastbus2.T48854.data[37],DATA12);
SIGNAL(N08_11_1_E,fastbus1.Q15358.data[74],DATA12);
SIGNAL(N08_11_1_T,fastbus2.T81808.data[42],DATA12);
SIGNAL(N08_11_2_E,fastbus1.Q15358.data[89],DATA12);
SIGNAL(N08_11_2_T,fastbus2.T48854.data[41],DATA12);
SIGNAL(N08_12_1_E,fastbus1.Q15358.data[78],DATA12);
SIGNAL(N08_12_1_T,fastbus2.T81808.data[46],DATA12);
SIGNAL(N08_12_2_E,fastbus1.Q15358.data[93],DATA12);
SIGNAL(N08_12_2_T,fastbus2.T48854.data[45],DATA12);
SIGNAL(N08_13_1_E,fastbus1.Q15358.data[67],DATA12);
SIGNAL(N08_13_1_T,fastbus2.T81808.data[35],DATA12);
SIGNAL(N08_13_2_E,fastbus1.Q15358.data[82],DATA12);
SIGNAL(N08_13_2_T,fastbus2.T48854.data[34],DATA12);
SIGNAL(N08_14_1_E,fastbus1.Q15358.data[71],DATA12);
SIGNAL(N08_14_1_T,fastbus2.T81808.data[39],DATA12);
SIGNAL(N08_14_2_E,fastbus1.Q15358.data[86],DATA12);
SIGNAL(N08_14_2_T,fastbus2.T48854.data[38],DATA12);
SIGNAL(N08_15_1_E,fastbus1.Q15358.data[54],DATA12);
SIGNAL(N08_15_1_T,fastbus2.T81859.data[38],DATA12);
SIGNAL(N08_15_2_E,fastbus1.Q15358.data[90],DATA12);
SIGNAL(N08_15_2_T,fastbus2.T48854.data[42],DATA12);
SIGNAL(N08_16_1_E,fastbus1.Q15358.data[50],DATA12);
SIGNAL(N08_16_1_T,fastbus2.T81859.data[34],DATA12);
SIGNAL(N08_16_2_E,fastbus1.Q15358.data[94],DATA12);
SIGNAL(N08_16_2_T,fastbus2.T48854.data[46],DATA12);
SIGNAL(N08_17_1_E,fastbus1.Q15358.data[75],DATA12);
SIGNAL(N08_17_1_T,fastbus2.T81808.data[43],DATA12);
SIGNAL(N08_17_2_E,fastbus1.Q15358.data[83],DATA12);
SIGNAL(N08_17_2_T,fastbus2.T48854.data[35],DATA12);
SIGNAL(N08_18_1_E,fastbus1.Q15358.data[79],DATA12);
SIGNAL(N08_18_1_T,fastbus2.T81808.data[47],DATA12);
SIGNAL(N08_18_2_E,fastbus1.Q15358.data[87],DATA12);
SIGNAL(N08_18_2_T,fastbus2.T48854.data[39],DATA12);
SIGNAL(N08_19_1_E,fastbus1.Q15358.data[55],DATA12);
SIGNAL(N08_19_1_T,fastbus2.T81859.data[39],DATA12);
SIGNAL(N08_19_2_E,fastbus1.Q15358.data[91],DATA12);
SIGNAL(N08_19_2_T,fastbus2.T48854.data[43],DATA12);
SIGNAL(N08_20_1_E,fastbus1.Q15358.data[51],DATA12);
SIGNAL(N08_20_1_T,fastbus2.T81859.data[35],DATA12);
SIGNAL(N08_20_2_E,fastbus1.Q15358.data[95],DATA12);
SIGNAL(N08_20_2_T,fastbus2.T48854.data[47],DATA12);
SIGNAL(N09_01_1_E,fastbus1.Q46962.data[48],DATA12);
SIGNAL(N09_01_1_T,fastbus2.T87047.data[32],DATA12);
SIGNAL(N09_01_2_E,fastbus1.Q46962.data[92],DATA12);
SIGNAL(N09_01_2_T,fastbus2.T81808.data[60],DATA12);
SIGNAL(N09_02_1_E,fastbus1.Q46962.data[52],DATA12);
SIGNAL(N09_02_1_T,fastbus2.T87047.data[36],DATA12);
SIGNAL(N09_02_2_E,fastbus1.Q46962.data[88],DATA12);
SIGNAL(N09_02_2_T,fastbus2.T81808.data[56],DATA12);
SIGNAL(N09_03_1_E,fastbus1.Q46962.data[56],DATA12);
SIGNAL(N09_03_1_T,fastbus2.T87047.data[40],DATA12);
SIGNAL(N09_03_2_E,fastbus1.Q46962.data[64],DATA12);
SIGNAL(N09_03_2_T,fastbus2.T81859.data[48],DATA12);
SIGNAL(N09_04_1_E,fastbus1.Q46962.data[60],DATA12);
SIGNAL(N09_04_1_T,fastbus2.T87047.data[44],DATA12);
SIGNAL(N09_04_2_E,fastbus1.Q46962.data[68],DATA12);
SIGNAL(N09_04_2_T,fastbus2.T81859.data[52],DATA12);
SIGNAL(N09_05_1_E,fastbus1.Q46962.data[49],DATA12);
SIGNAL(N09_05_1_T,fastbus2.T87047.data[33],DATA12);
SIGNAL(N09_05_2_E,fastbus1.Q46962.data[89],DATA12);
SIGNAL(N09_05_2_T,fastbus2.T81808.data[57],DATA12);
SIGNAL(N09_06_1_E,fastbus1.Q46962.data[53],DATA12);
SIGNAL(N09_06_1_T,fastbus2.T87047.data[37],DATA12);
SIGNAL(N09_06_2_E,fastbus1.Q46962.data[93],DATA12);
SIGNAL(N09_06_2_T,fastbus2.T81808.data[61],DATA12);
SIGNAL(N09_07_1_E,fastbus1.Q46962.data[57],DATA12);
SIGNAL(N09_07_1_T,fastbus2.T87047.data[41],DATA12);
SIGNAL(N09_07_2_E,fastbus1.Q46962.data[72],DATA12);
SIGNAL(N09_07_2_T,fastbus2.T81859.data[56],DATA12);
SIGNAL(N09_08_1_E,fastbus1.Q46962.data[61],DATA12);
SIGNAL(N09_08_1_T,fastbus2.T87047.data[45],DATA12);
SIGNAL(N09_08_2_E,fastbus1.Q46962.data[76],DATA12);
SIGNAL(N09_08_2_T,fastbus2.T81859.data[60],DATA12);
SIGNAL(N09_09_1_E,fastbus1.Q46962.data[50],DATA12);
SIGNAL(N09_09_1_T,fastbus2.T87047.data[34],DATA12);
SIGNAL(N09_09_2_E,fastbus1.Q46962.data[65],DATA12);
SIGNAL(N09_09_2_T,fastbus2.T81859.data[49],DATA12);
SIGNAL(N09_10_1_E,fastbus1.Q46962.data[54],DATA12);
SIGNAL(N09_10_1_T,fastbus2.T87047.data[38],DATA12);
SIGNAL(N09_10_2_E,fastbus1.Q46962.data[69],DATA12);
SIGNAL(N09_10_2_T,fastbus2.T81859.data[53],DATA12);
SIGNAL(N09_11_1_E,fastbus1.Q46962.data[58],DATA12);
SIGNAL(N09_11_1_T,fastbus2.T87047.data[42],DATA12);
SIGNAL(N09_11_2_E,fastbus1.Q46962.data[73],DATA12);
SIGNAL(N09_11_2_T,fastbus2.T81859.data[57],DATA12);
SIGNAL(N09_12_1_E,fastbus1.Q46962.data[62],DATA12);
SIGNAL(N09_12_1_T,fastbus2.T87047.data[46],DATA12);
SIGNAL(N09_12_2_E,fastbus1.Q46962.data[77],DATA12);
SIGNAL(N09_12_2_T,fastbus2.T81859.data[61],DATA12);
SIGNAL(N09_13_1_E,fastbus1.Q46962.data[51],DATA12);
SIGNAL(N09_13_1_T,fastbus2.T87047.data[35],DATA12);
SIGNAL(N09_13_2_E,fastbus1.Q46962.data[66],DATA12);
SIGNAL(N09_13_2_T,fastbus2.T81859.data[50],DATA12);
SIGNAL(N09_14_1_E,fastbus1.Q46962.data[55],DATA12);
SIGNAL(N09_14_1_T,fastbus2.T87047.data[39],DATA12);
SIGNAL(N09_14_2_E,fastbus1.Q46962.data[70],DATA12);
SIGNAL(N09_14_2_T,fastbus2.T81859.data[54],DATA12);
SIGNAL(N09_15_1_E,fastbus1.Q46962.data[94],DATA12);
SIGNAL(N09_15_1_T,fastbus2.T81808.data[62],DATA12);
SIGNAL(N09_15_2_E,fastbus1.Q46962.data[74],DATA12);
SIGNAL(N09_15_2_T,fastbus2.T81859.data[58],DATA12);
SIGNAL(N09_16_1_E,fastbus1.Q46962.data[90],DATA12);
SIGNAL(N09_16_1_T,fastbus2.T81808.data[58],DATA12);
SIGNAL(N09_16_2_E,fastbus1.Q46962.data[78],DATA12);
SIGNAL(N09_16_2_T,fastbus2.T81859.data[62],DATA12);
SIGNAL(N09_17_1_E,fastbus1.Q46962.data[59],DATA12);
SIGNAL(N09_17_1_T,fastbus2.T87047.data[43],DATA12);
SIGNAL(N09_17_2_E,fastbus1.Q46962.data[67],DATA12);
SIGNAL(N09_17_2_T,fastbus2.T81859.data[51],DATA12);
SIGNAL(N09_18_1_E,fastbus1.Q46962.data[63],DATA12);
SIGNAL(N09_18_1_T,fastbus2.T87047.data[47],DATA12);
SIGNAL(N09_18_2_E,fastbus1.Q46962.data[71],DATA12);
SIGNAL(N09_18_2_T,fastbus2.T81859.data[55],DATA12);
SIGNAL(N09_19_1_E,fastbus1.Q46962.data[95],DATA12);
SIGNAL(N09_19_1_T,fastbus2.T81808.data[63],DATA12);
SIGNAL(N09_19_2_E,fastbus1.Q46962.data[75],DATA12);
SIGNAL(N09_19_2_T,fastbus2.T81859.data[59],DATA12);
SIGNAL(N09_20_1_E,fastbus1.Q46962.data[91],DATA12);
SIGNAL(N09_20_1_T,fastbus2.T81808.data[59],DATA12);
SIGNAL(N09_20_2_E,fastbus1.Q46962.data[79],DATA12);
SIGNAL(N09_20_2_T,fastbus2.T81859.data[63],DATA12);
SIGNAL(N10_01_1_E,fastbus1.Q15372.data[64],DATA12);
SIGNAL(N10_01_1_T,fastbus2.T48854.data[48],DATA12);
SIGNAL(N10_01_2_E,fastbus1.Q46962.data[84],DATA12);
SIGNAL(N10_01_2_T,fastbus2.T81808.data[52],DATA12);
SIGNAL(N10_02_1_E,fastbus1.Q15372.data[68],DATA12);
SIGNAL(N10_02_1_T,fastbus2.T48854.data[52],DATA12);
SIGNAL(N10_02_2_E,fastbus1.Q46962.data[80],DATA12);
SIGNAL(N10_02_2_T,fastbus2.T81808.data[48],DATA12);
SIGNAL(N10_03_1_E,fastbus1.Q15372.data[72],DATA12);
SIGNAL(N10_03_1_T,fastbus2.T48854.data[56],DATA12);
SIGNAL(N10_03_2_E,fastbus1.Q15372.data[80],DATA12);
SIGNAL(N10_03_2_T,fastbus2.T87047.data[48],DATA12);
SIGNAL(N10_04_1_E,fastbus1.Q15372.data[76],DATA12);
SIGNAL(N10_04_1_T,fastbus2.T48854.data[60],DATA12);
SIGNAL(N10_04_2_E,fastbus1.Q15372.data[84],DATA12);
SIGNAL(N10_04_2_T,fastbus2.T87047.data[52],DATA12);
SIGNAL(N10_05_1_E,fastbus1.Q15372.data[65],DATA12);
SIGNAL(N10_05_1_T,fastbus2.T48854.data[49],DATA12);
SIGNAL(N10_05_2_E,fastbus1.Q46962.data[85],DATA12);
SIGNAL(N10_05_2_T,fastbus2.T81808.data[53],DATA12);
SIGNAL(N10_06_1_E,fastbus1.Q15372.data[69],DATA12);
SIGNAL(N10_06_1_T,fastbus2.T48854.data[53],DATA12);
SIGNAL(N10_06_2_E,fastbus1.Q46962.data[81],DATA12);
SIGNAL(N10_06_2_T,fastbus2.T81808.data[49],DATA12);
SIGNAL(N10_07_1_E,fastbus1.Q15372.data[73],DATA12);
SIGNAL(N10_07_1_T,fastbus2.T48854.data[57],DATA12);
SIGNAL(N10_07_2_E,fastbus1.Q15372.data[88],DATA12);
SIGNAL(N10_07_2_T,fastbus2.T87047.data[56],DATA12);
SIGNAL(N10_08_1_E,fastbus1.Q15372.data[77],DATA12);
SIGNAL(N10_08_1_T,fastbus2.T48854.data[61],DATA12);
SIGNAL(N10_08_2_E,fastbus1.Q15372.data[92],DATA12);
SIGNAL(N10_08_2_T,fastbus2.T87047.data[60],DATA12);
SIGNAL(N10_09_1_E,fastbus1.Q15372.data[66],DATA12);
SIGNAL(N10_09_1_T,fastbus2.T48854.data[50],DATA12);
SIGNAL(N10_09_2_E,fastbus1.Q15372.data[81],DATA12);
SIGNAL(N10_09_2_T,fastbus2.T87047.data[49],DATA12);
SIGNAL(N10_10_1_E,fastbus1.Q15372.data[70],DATA12);
SIGNAL(N10_10_1_T,fastbus2.T48854.data[54],DATA12);
SIGNAL(N10_10_2_E,fastbus1.Q15372.data[85],DATA12);
SIGNAL(N10_10_2_T,fastbus2.T87047.data[53],DATA12);
SIGNAL(N10_11_1_E,fastbus1.Q15372.data[74],DATA12);
SIGNAL(N10_11_1_T,fastbus2.T48854.data[58],DATA12);
SIGNAL(N10_11_2_E,fastbus1.Q15372.data[89],DATA12);
SIGNAL(N10_11_2_T,fastbus2.T87047.data[57],DATA12);
SIGNAL(N10_12_1_E,fastbus1.Q15372.data[79],DATA12);
SIGNAL(N10_12_1_T,fastbus2.T48854.data[63],DATA12);
SIGNAL(N10_12_2_E,fastbus1.Q15372.data[93],DATA12);
SIGNAL(N10_12_2_T,fastbus2.T87047.data[61],DATA12);
SIGNAL(N10_13_1_E,fastbus1.Q15372.data[67],DATA12);
SIGNAL(N10_13_1_T,fastbus2.T48854.data[51],DATA12);
SIGNAL(N10_13_2_E,fastbus1.Q15372.data[82],DATA12);
SIGNAL(N10_13_2_T,fastbus2.T87047.data[50],DATA12);
SIGNAL(N10_14_1_E,fastbus1.Q15372.data[71],DATA12);
SIGNAL(N10_14_1_T,fastbus2.T48854.data[55],DATA12);
SIGNAL(N10_14_2_E,fastbus1.Q15372.data[86],DATA12);
SIGNAL(N10_14_2_T,fastbus2.T87047.data[54],DATA12);
SIGNAL(N10_15_1_E,fastbus1.Q46962.data[86],DATA12);
SIGNAL(N10_15_1_T,fastbus2.T81808.data[54],DATA12);
SIGNAL(N10_15_2_E,fastbus1.Q15372.data[90],DATA12);
SIGNAL(N10_15_2_T,fastbus2.T87047.data[58],DATA12);
SIGNAL(N10_16_1_E,fastbus1.Q46962.data[82],DATA12);
SIGNAL(N10_16_1_T,fastbus2.T81808.data[50],DATA12);
SIGNAL(N10_16_2_E,fastbus1.Q15372.data[94],DATA12);
SIGNAL(N10_16_2_T,fastbus2.T87047.data[62],DATA12);
SIGNAL(N10_17_1_E,fastbus1.Q15372.data[75],DATA12);
SIGNAL(N10_17_1_T,fastbus2.T48854.data[59],DATA12);
SIGNAL(N10_17_2_E,fastbus1.Q15372.data[83],DATA12);
SIGNAL(N10_17_2_T,fastbus2.T87047.data[51],DATA12);
SIGNAL(N10_18_1_E,fastbus1.Q15372.data[78],DATA12);
SIGNAL(N10_18_1_T,fastbus2.T48854.data[62],DATA12);
SIGNAL(N10_18_2_E,fastbus1.Q15372.data[87],DATA12);
SIGNAL(N10_18_2_T,fastbus2.T87047.data[55],DATA12);
SIGNAL(N10_19_1_E,fastbus1.Q46962.data[87],DATA12);
SIGNAL(N10_19_1_T,fastbus2.T81808.data[55],DATA12);
SIGNAL(N10_19_2_E,fastbus1.Q15372.data[91],DATA12);
SIGNAL(N10_19_2_T,fastbus2.T87047.data[59],DATA12);
SIGNAL(N10_20_1_E,fastbus1.Q46962.data[83],DATA12);
SIGNAL(N10_20_1_T,fastbus2.T81808.data[51],DATA12);
SIGNAL(N10_20_2_E,fastbus1.Q15372.data[95],DATA12);
SIGNAL(N10_20_2_T,fastbus2.T87047.data[63],DATA12);
SIGNAL(NTF01_1_E,vme.qCAEN0472.data[0],DATA12);
SIGNAL(NTF01_1_T,vme.tCAEN0614.data[0],DATA12);
SIGNAL(NTF01_2_E,vme.qCAEN0472.data[2],DATA12);
SIGNAL(NTF01_2_T,vme.tCAEN0614.data[2],DATA12);
SIGNAL(NTF02_1_E,vme.qCAEN0472.data[5],DATA12);
SIGNAL(NTF02_1_T,vme.tCAEN0614.data[5],DATA12);
SIGNAL(NTF02_2_E,vme.qCAEN0472.data[7],DATA12);
SIGNAL(NTF02_2_T,vme.tCAEN0614.data[7],DATA12);
SIGNAL(NTF03_1_E,vme.qCAEN0472.data[8],DATA12);
SIGNAL(NTF03_1_T,vme.tCAEN0614.data[8],DATA12);
SIGNAL(NTF03_2_E,vme.qCAEN0472.data[10],DATA12);
SIGNAL(NTF03_2_T,vme.tCAEN0614.data[10],DATA12);
SIGNAL(NTF04_1_E,vme.qCAEN0472.data[13],DATA12);
SIGNAL(NTF04_1_T,vme.tCAEN0614.data[13],DATA12);
SIGNAL(NTF04_2_E,vme.qCAEN0472.data[15],DATA12);
SIGNAL(NTF04_2_T,vme.tCAEN0614.data[15],DATA12);
SIGNAL(NTF05_1_E,vme.qCAEN0472.data[1],DATA12);
SIGNAL(NTF05_1_T,vme.tCAEN0614.data[1],DATA12);
SIGNAL(NTF05_2_E,vme.qCAEN0472.data[3],DATA12);
SIGNAL(NTF05_2_T,vme.tCAEN0614.data[3],DATA12);
SIGNAL(NTF06_1_E,vme.qCAEN0472.data[4],DATA12);
SIGNAL(NTF06_1_T,vme.tCAEN0614.data[4],DATA12);
SIGNAL(NTF06_2_E,vme.qCAEN0472.data[6],DATA12);
SIGNAL(NTF06_2_T,vme.tCAEN0614.data[6],DATA12);
SIGNAL(NTF07_1_E,vme.qCAEN0472.data[9],DATA12);
SIGNAL(NTF07_1_T,vme.tCAEN0614.data[9],DATA12);
SIGNAL(NTF07_2_E,vme.qCAEN0472.data[11],DATA12);
SIGNAL(NTF07_2_T,vme.tCAEN0614.data[11],DATA12);
SIGNAL(NTF08_1_E,vme.qCAEN0472.data[12],DATA12);
SIGNAL(NTF08_1_T,vme.tCAEN0614.data[12],DATA12);
SIGNAL(NTF08_2_E,vme.qCAEN0472.data[14],DATA12);
SIGNAL(NTF08_2_T,vme.tCAEN0614.data[14],DATA12);
SIGNAL(NTF09_1_E,vme.qCAEN0472.data[16],DATA12);
SIGNAL(NTF09_1_T,vme.tCAEN0614.data[16],DATA12);
SIGNAL(NTF09_2_E,vme.qCAEN0472.data[18],DATA12);
SIGNAL(NTF09_2_T,vme.tCAEN0614.data[18],DATA12);
SIGNAL(NTF10_1_E,vme.qCAEN0472.data[21],DATA12);
SIGNAL(NTF10_1_T,vme.tCAEN0614.data[21],DATA12);
SIGNAL(NTF10_2_E,vme.qCAEN0472.data[23],DATA12);
SIGNAL(NTF10_2_T,vme.tCAEN0614.data[23],DATA12);
SIGNAL(NTF11_1_E,vme.qCAEN0472.data[24],DATA12);
SIGNAL(NTF11_1_T,vme.tCAEN0614.data[24],DATA12);
SIGNAL(NTF11_2_E,vme.qCAEN0472.data[26],DATA12);
SIGNAL(NTF11_2_T,vme.tCAEN0614.data[26],DATA12);
SIGNAL(NTF12_1_E,vme.qCAEN0472.data[29],DATA12);
SIGNAL(NTF12_1_T,vme.tCAEN0614.data[29],DATA12);
SIGNAL(NTF12_2_E,vme.qCAEN0472.data[31],DATA12);
SIGNAL(NTF12_2_T,vme.tCAEN0614.data[31],DATA12);
SIGNAL(NTF13_1_E,vme.qCAEN0472.data[17],DATA12);
SIGNAL(NTF13_1_T,vme.tCAEN0614.data[17],DATA12);
SIGNAL(NTF13_2_E,vme.qCAEN0472.data[19],DATA12);
SIGNAL(NTF13_2_T,vme.tCAEN0614.data[19],DATA12);
SIGNAL(NTF14_1_E,vme.qCAEN0472.data[20],DATA12);
SIGNAL(NTF14_1_T,vme.tCAEN0614.data[20],DATA12);
SIGNAL(NTF14_2_E,vme.qCAEN0472.data[22],DATA12);
SIGNAL(NTF14_2_T,vme.tCAEN0614.data[22],DATA12);
SIGNAL(NTF15_1_E,vme.qCAEN0472.data[25],DATA12);
SIGNAL(NTF15_1_T,vme.tCAEN0614.data[25],DATA12);
SIGNAL(NTF15_2_E,vme.qCAEN0472.data[27],DATA12);
SIGNAL(NTF15_2_T,vme.tCAEN0614.data[27],DATA12);
SIGNAL(NTF16_1_E,vme.qCAEN0472.data[28],DATA12);
SIGNAL(NTF16_1_T,vme.tCAEN0614.data[28],DATA12);
SIGNAL(NTF16_2_E,vme.qCAEN0472.data[30],DATA12);
SIGNAL(NTF16_2_T,vme.tCAEN0614.data[30],DATA12);
SIGNAL(PILEUP_1_T,pileup.tdc.data,DATA16);
SIGNAL(POS01_01_E,camac.qSIA0429.data[0],DATA12);
SIGNAL(POS01_01_T,camac.tSIA0426.data[0],DATA12);
SIGNAL(POS01_02_E,camac.qSIA0429.data[1],DATA12);
SIGNAL(POS01_02_T,camac.tSIA0426.data[1],DATA12);
SIGNAL(POS01_03_E,camac.qSIA0429.data[2],DATA12);
SIGNAL(POS01_03_T,camac.tSIA0426.data[2],DATA12);
SIGNAL(POS01_04_E,camac.qSIA0429.data[3],DATA12);
SIGNAL(POS01_04_T,camac.tSIA0426.data[3],DATA12);
SIGNAL(PSP01_01_E,camac.aPHI14829.data[0],DATA12);
SIGNAL(PSP01_02_E,camac.aPHI14829.data[1],DATA12);
SIGNAL(PSP01_03_E,camac.aPHI14829.data[2],DATA12);
SIGNAL(PSP01_04_E,camac.aPHI14829.data[3],DATA12);
SIGNAL(PSP01_05_E,camac.aPHI14829.data[12],DATA12);
SIGNAL(PSP02_01_E,camac.aPHI14829.data[4],DATA12);
SIGNAL(PSP02_02_E,camac.aPHI14829.data[5],DATA12);
SIGNAL(PSP02_03_E,camac.aPHI14829.data[6],DATA12);
SIGNAL(PSP02_04_E,camac.aPHI14829.data[7],DATA12);
SIGNAL(PSP02_05_E,camac.aPHI14829.data[13],DATA12);
SIGNAL(ROL01_01_E,camac.qSIA0429.data[4],DATA12);
SIGNAL(ROL01_02_E,camac.qSIA0429.data[5],DATA12);
SIGNAL(ROL01_03_E,camac.qSIA0429.data[6],DATA12);
SIGNAL(ROL01_04_E,camac.qSIA0429.data[7],DATA12);
SIGNAL(SCI01_01_E,camac.qSIA0480.data[7],DATA12);
SIGNAL(SCI01_01_T,camac.tSIA0400.data[4],DATA12);
SIGNAL(SCI01_02_E,camac.qSIA0480.data[6],DATA12);
SIGNAL(SCI01_02_T,camac.tSIA0400.data[5],DATA12);
SIGNAL(SCI02_01_E,camac.qSIA0480.data[4],DATA12);
SIGNAL(SCI02_01_T,camac.tSIA0400.data[6],DATA12);
SIGNAL(SCI02_02_E,camac.qSIA0480.data[5],DATA12);
SIGNAL(SCI02_02_T,camac.tSIA0400.data[7],DATA12);
SIGNAL(STR1_01_E,camac.qSIA0458.data[0],DATA12);
SIGNAL(STR2_01_E,camac.qSIA0458.data[1],DATA12);
SIGNAL(STR2_01_T,camac.tC_FRS120.data[1],DATA12);
SIGNAL(TFW01_1_E,fastbus1.Q17320.data[32],DATA12);
SIGNAL(TFW01_1_T,fastbus1.T81855.data[48],DATA12);
SIGNAL(TFW01_2_E,fastbus1.Q17320.data[34],DATA12);
SIGNAL(TFW01_2_T,fastbus1.T81855.data[50],DATA12);
SIGNAL(TFW02_1_E,fastbus1.Q17320.data[36],DATA12);
SIGNAL(TFW02_1_T,fastbus1.T81855.data[52],DATA12);
SIGNAL(TFW02_2_E,fastbus1.Q17320.data[38],DATA12);
SIGNAL(TFW02_2_T,fastbus1.T81855.data[54],DATA12);
SIGNAL(TFW03_1_E,fastbus1.Q17320.data[40],DATA12);
SIGNAL(TFW03_1_T,fastbus1.T81855.data[56],DATA12);
SIGNAL(TFW03_2_E,fastbus1.Q17320.data[42],DATA12);
SIGNAL(TFW03_2_T,fastbus1.T81855.data[58],DATA12);
SIGNAL(TFW04_1_E,fastbus1.Q17320.data[44],DATA12);
SIGNAL(TFW04_1_T,fastbus1.T81855.data[60],DATA12);
SIGNAL(TFW04_2_E,fastbus1.Q17320.data[46],DATA12);
SIGNAL(TFW04_2_T,fastbus1.T81855.data[62],DATA12);
SIGNAL(TFW05_1_E,fastbus1.Q17320.data[33],DATA12);
SIGNAL(TFW05_1_T,fastbus1.T81855.data[49],DATA12);
SIGNAL(TFW05_2_E,fastbus1.Q17320.data[35],DATA12);
SIGNAL(TFW05_2_T,fastbus1.T81855.data[51],DATA12);
SIGNAL(TFW06_1_E,fastbus1.Q17320.data[37],DATA12);
SIGNAL(TFW06_1_T,fastbus1.T81855.data[53],DATA12);
SIGNAL(TFW06_2_E,fastbus1.Q17320.data[39],DATA12);
SIGNAL(TFW06_2_T,fastbus1.T81855.data[55],DATA12);
SIGNAL(TFW07_1_E,fastbus1.Q17320.data[41],DATA12);
SIGNAL(TFW07_1_T,fastbus1.T81855.data[57],DATA12);
SIGNAL(TFW07_2_E,fastbus1.Q17320.data[43],DATA12);
SIGNAL(TFW07_2_T,fastbus1.T81855.data[59],DATA12);
SIGNAL(TFW08_1_E,fastbus1.Q17320.data[45],DATA12);
SIGNAL(TFW08_1_T,fastbus1.T81855.data[61],DATA12);
SIGNAL(TFW08_2_E,fastbus1.Q17320.data[47],DATA12);
SIGNAL(TFW08_2_T,fastbus1.T81855.data[63],DATA12);
SIGNAL(TFW09_1_E,fastbus1.Q17320.data[16],DATA12);
SIGNAL(TFW09_1_T,fastbus1.T81855.data[32],DATA12);
SIGNAL(TFW09_2_E,fastbus1.Q17320.data[18],DATA12);
SIGNAL(TFW09_2_T,fastbus1.T81855.data[34],DATA12);
SIGNAL(TFW10_1_E,fastbus1.Q17320.data[20],DATA12);
SIGNAL(TFW10_1_T,fastbus1.T81855.data[36],DATA12);
SIGNAL(TFW10_2_E,fastbus1.Q17320.data[22],DATA12);
SIGNAL(TFW10_2_T,fastbus1.T81855.data[38],DATA12);
SIGNAL(TFW11_1_E,fastbus1.Q17320.data[24],DATA12);
SIGNAL(TFW11_1_T,fastbus1.T81855.data[40],DATA12);
SIGNAL(TFW11_2_E,fastbus1.Q17320.data[26],DATA12);
SIGNAL(TFW11_2_T,fastbus1.T81855.data[42],DATA12);
SIGNAL(TFW12_1_E,fastbus1.Q17320.data[28],DATA12);
SIGNAL(TFW12_1_T,fastbus1.T81855.data[44],DATA12);
SIGNAL(TFW12_2_E,fastbus1.Q17320.data[30],DATA12);
SIGNAL(TFW12_2_T,fastbus1.T81855.data[46],DATA12);
SIGNAL(TFW13_1_E,fastbus1.Q17320.data[17],DATA12);
SIGNAL(TFW13_1_T,fastbus1.T81855.data[33],DATA12);
SIGNAL(TFW13_2_E,fastbus1.Q17320.data[19],DATA12);
SIGNAL(TFW13_2_T,fastbus1.T81855.data[35],DATA12);
SIGNAL(TFW14_1_E,fastbus1.Q17320.data[21],DATA12);
SIGNAL(TFW14_1_T,fastbus1.T81855.data[37],DATA12);
SIGNAL(TFW14_2_E,fastbus1.Q17320.data[23],DATA12);
SIGNAL(TFW14_2_T,fastbus1.T81855.data[39],DATA12);
SIGNAL(TFW15_1_E,fastbus1.Q17320.data[25],DATA12);
SIGNAL(TFW15_1_T,fastbus1.T81855.data[41],DATA12);
SIGNAL(TFW15_2_E,fastbus1.Q17320.data[27],DATA12);
SIGNAL(TFW15_2_T,fastbus1.T81855.data[43],DATA12);
SIGNAL(TFW16_1_E,fastbus1.Q17320.data[29],DATA12);
SIGNAL(TFW16_1_T,fastbus1.T81855.data[45],DATA12);
SIGNAL(TFW16_2_E,fastbus1.Q17320.data[31],DATA12);
SIGNAL(TFW16_2_T,fastbus1.T81855.data[47],DATA12);
SIGNAL(TFW17_1_E,fastbus1.Q17320.data[80],DATA12);
SIGNAL(TFW17_1_T,fastbus1.T81855.data[16],DATA12);
SIGNAL(TFW17_2_E,fastbus1.Q17320.data[82],DATA12);
SIGNAL(TFW17_2_T,fastbus1.T81855.data[18],DATA12);
SIGNAL(TFW18_1_E,fastbus1.Q17320.data[84],DATA12);
SIGNAL(TFW18_1_T,fastbus1.T81855.data[20],DATA12);
SIGNAL(TFW18_2_E,fastbus1.Q17320.data[86],DATA12);
SIGNAL(TFW18_2_T,fastbus1.T81855.data[22],DATA12);
SIGNAL(TFW19_1_E,fastbus1.Q17320.data[88],DATA12);
SIGNAL(TFW19_1_T,fastbus1.T81855.data[24],DATA12);
SIGNAL(TFW19_2_E,fastbus1.Q17320.data[90],DATA12);
SIGNAL(TFW19_2_T,fastbus1.T81855.data[26],DATA12);
SIGNAL(TFW20_1_E,fastbus1.Q17320.data[92],DATA12);
SIGNAL(TFW20_1_T,fastbus1.T81855.data[28],DATA12);
SIGNAL(TFW20_2_E,fastbus1.Q17320.data[94],DATA12);
SIGNAL(TFW20_2_T,fastbus1.T81855.data[30],DATA12);
SIGNAL(TFW21_1_E,fastbus1.Q17320.data[81],DATA12);
SIGNAL(TFW21_1_T,fastbus1.T81855.data[17],DATA12);
SIGNAL(TFW21_2_E,fastbus1.Q17320.data[83],DATA12);
SIGNAL(TFW21_2_T,fastbus1.T81855.data[19],DATA12);
SIGNAL(TFW22_1_E,fastbus1.Q17320.data[85],DATA12);
SIGNAL(TFW22_1_T,fastbus1.T81855.data[21],DATA12);
SIGNAL(TFW22_2_E,fastbus1.Q17320.data[87],DATA12);
SIGNAL(TFW22_2_T,fastbus1.T81855.data[23],DATA12);
SIGNAL(TFW23_1_E,fastbus1.Q17320.data[89],DATA12);
SIGNAL(TFW23_1_T,fastbus1.T81855.data[25],DATA12);
SIGNAL(TFW23_2_E,fastbus1.Q17320.data[91],DATA12);
SIGNAL(TFW23_2_T,fastbus1.T81855.data[27],DATA12);
SIGNAL(TFW24_1_E,fastbus1.Q17320.data[93],DATA12);
SIGNAL(TFW24_1_T,fastbus1.T81855.data[29],DATA12);
SIGNAL(TFW24_2_E,fastbus1.Q17320.data[95],DATA12);
SIGNAL(TFW24_2_T,fastbus1.T81855.data[31],DATA12);
SIGNAL(TFW25_1_E,fastbus1.Q17320.data[48],DATA12);
SIGNAL(TFW25_1_T,fastbus1.T81855.data[0],DATA12);
SIGNAL(TFW25_2_E,fastbus1.Q17320.data[50],DATA12);
SIGNAL(TFW25_2_T,fastbus1.T81855.data[2],DATA12);
SIGNAL(TFW26_1_E,fastbus1.Q17320.data[52],DATA12);
SIGNAL(TFW26_1_T,fastbus1.T81855.data[4],DATA12);
SIGNAL(TFW26_2_E,fastbus1.Q17320.data[54],DATA12);
SIGNAL(TFW26_2_T,fastbus1.T81855.data[6],DATA12);
SIGNAL(TFW27_1_E,fastbus1.Q17320.data[56],DATA12);
SIGNAL(TFW27_1_T,fastbus1.T81855.data[8],DATA12);
SIGNAL(TFW27_2_E,fastbus1.Q17320.data[58],DATA12);
SIGNAL(TFW27_2_T,fastbus1.T81855.data[10],DATA12);
SIGNAL(TFW28_1_E,fastbus1.Q17320.data[60],DATA12);
SIGNAL(TFW28_1_T,fastbus1.T81855.data[12],DATA12);
SIGNAL(TFW28_2_E,fastbus1.Q17320.data[62],DATA12);
SIGNAL(TFW28_2_T,fastbus1.T81855.data[14],DATA12);
SIGNAL(TFW29_1_E,fastbus1.Q17320.data[49],DATA12);
SIGNAL(TFW29_1_T,fastbus1.T81855.data[1],DATA12);
SIGNAL(TFW29_2_E,fastbus1.Q17320.data[51],DATA12);
SIGNAL(TFW29_2_T,fastbus1.T81855.data[3],DATA12);
SIGNAL(TFW30_1_E,fastbus1.Q17320.data[53],DATA12);
SIGNAL(TFW30_1_T,fastbus1.T81855.data[5],DATA12);
SIGNAL(TFW30_2_E,fastbus1.Q17320.data[55],DATA12);
SIGNAL(TFW30_2_T,fastbus1.T81855.data[7],DATA12);
SIGNAL(TFW31_1_E,fastbus1.Q17320.data[57],DATA12);
SIGNAL(TFW31_1_T,fastbus1.T81855.data[9],DATA12);
SIGNAL(TFW31_2_E,fastbus1.Q17320.data[59],DATA12);
SIGNAL(TFW31_2_T,fastbus1.T81855.data[11],DATA12);
SIGNAL(TFW32_1_E,fastbus1.Q17320.data[61],DATA12);
SIGNAL(TFW32_1_T,fastbus1.T81855.data[13],DATA12);
SIGNAL(TFW32_2_E,fastbus1.Q17320.data[63],DATA12);
SIGNAL(TFW32_2_T,fastbus1.T81855.data[15],DATA12);
SIGNAL(V1_01_1_E,fastbus1.Q15372.data[48],DATA12);
SIGNAL(V1_01_1_T,fastbus2.T81795.data[48],DATA12);
SIGNAL(V1_01_2_E,fastbus1.Q17320.data[1],DATA12);
SIGNAL(V1_01_2_T,fastbus1.T87024.data[49],DATA12);
SIGNAL(V1_02_1_E,fastbus1.Q15372.data[52],DATA12);
SIGNAL(V1_02_1_T,fastbus2.T81795.data[52],DATA12);
SIGNAL(V1_02_2_E,fastbus1.Q17320.data[3],DATA12);
SIGNAL(V1_02_2_T,fastbus1.T87024.data[51],DATA12);
SIGNAL(V1_03_1_E,fastbus1.Q15372.data[56],DATA12);
SIGNAL(V1_03_1_T,fastbus2.T81795.data[56],DATA12);
SIGNAL(V1_03_2_E,fastbus1.Q47315.data[32],DATA12);
SIGNAL(V1_03_2_T,fastbus1.T87044.data[48],DATA12);
SIGNAL(V1_04_1_E,fastbus1.Q15372.data[60],DATA12);
SIGNAL(V1_04_1_T,fastbus2.T81795.data[60],DATA12);
SIGNAL(V1_04_2_E,fastbus1.Q47315.data[36],DATA12);
SIGNAL(V1_04_2_T,fastbus1.T87044.data[52],DATA12);
SIGNAL(V1_05_1_E,fastbus1.Q15372.data[49],DATA12);
SIGNAL(V1_05_1_T,fastbus2.T81795.data[49],DATA12);
SIGNAL(V1_05_2_E,fastbus1.Q17320.data[5],DATA12);
SIGNAL(V1_05_2_T,fastbus1.T87024.data[53],DATA12);
SIGNAL(V1_06_1_E,fastbus1.Q15372.data[53],DATA12);
SIGNAL(V1_06_1_T,fastbus2.T81795.data[53],DATA12);
SIGNAL(V1_06_2_E,fastbus1.Q17320.data[7],DATA12);
SIGNAL(V1_06_2_T,fastbus1.T87024.data[55],DATA12);
SIGNAL(V1_07_1_E,fastbus1.Q15372.data[57],DATA12);
SIGNAL(V1_07_1_T,fastbus2.T81795.data[57],DATA12);
SIGNAL(V1_07_2_E,fastbus1.Q47315.data[40],DATA12);
SIGNAL(V1_07_2_T,fastbus1.T87044.data[56],DATA12);
SIGNAL(V1_08_1_E,fastbus1.Q15372.data[61],DATA12);
SIGNAL(V1_08_1_T,fastbus2.T81795.data[61],DATA12);
SIGNAL(V1_08_2_E,fastbus1.Q47315.data[44],DATA12);
SIGNAL(V1_08_2_T,fastbus1.T87044.data[60],DATA12);
SIGNAL(V1_09_1_E,fastbus1.Q15372.data[50],DATA12);
SIGNAL(V1_09_1_T,fastbus2.T81795.data[50],DATA12);
SIGNAL(V1_09_2_E,fastbus1.Q47315.data[33],DATA12);
SIGNAL(V1_09_2_T,fastbus1.T87044.data[49],DATA12);
SIGNAL(V1_10_1_E,fastbus1.Q15372.data[54],DATA12);
SIGNAL(V1_10_1_T,fastbus2.T81795.data[54],DATA12);
SIGNAL(V1_10_2_E,fastbus1.Q47315.data[37],DATA12);
SIGNAL(V1_10_2_T,fastbus1.T87044.data[53],DATA12);
SIGNAL(V1_11_1_E,fastbus1.Q15372.data[58],DATA12);
SIGNAL(V1_11_1_T,fastbus2.T81795.data[58],DATA12);
SIGNAL(V1_11_2_E,fastbus1.Q47315.data[41],DATA12);
SIGNAL(V1_11_2_T,fastbus1.T87044.data[57],DATA12);
SIGNAL(V1_12_1_E,fastbus1.Q15372.data[62],DATA12);
SIGNAL(V1_12_1_T,fastbus2.T81795.data[62],DATA12);
SIGNAL(V1_12_2_E,fastbus1.Q47315.data[45],DATA12);
SIGNAL(V1_12_2_T,fastbus1.T87044.data[61],DATA12);
SIGNAL(V1_13_1_E,fastbus1.Q15372.data[51],DATA12);
SIGNAL(V1_13_1_T,fastbus2.T81795.data[51],DATA12);
SIGNAL(V1_13_2_E,fastbus1.Q47315.data[34],DATA12);
SIGNAL(V1_13_2_T,fastbus1.T87044.data[50],DATA12);
SIGNAL(V1_14_1_E,fastbus1.Q15372.data[55],DATA12);
SIGNAL(V1_14_1_T,fastbus2.T81795.data[55],DATA12);
SIGNAL(V1_14_2_E,fastbus1.Q47315.data[38],DATA12);
SIGNAL(V1_14_2_T,fastbus1.T87044.data[54],DATA12);
SIGNAL(V1_15_1_E,fastbus1.Q17320.data[0],DATA12);
SIGNAL(V1_15_1_T,fastbus1.T87024.data[48],DATA12);
SIGNAL(V1_15_2_E,fastbus1.Q47315.data[42],DATA12);
SIGNAL(V1_15_2_T,fastbus1.T87044.data[58],DATA12);
SIGNAL(V1_16_1_E,fastbus1.Q17320.data[2],DATA12);
SIGNAL(V1_16_1_T,fastbus1.T87024.data[50],DATA12);
SIGNAL(V1_16_2_E,fastbus1.Q47315.data[46],DATA12);
SIGNAL(V1_16_2_T,fastbus1.T87044.data[62],DATA12);
SIGNAL(V1_17_1_E,fastbus1.Q15372.data[59],DATA12);
SIGNAL(V1_17_1_T,fastbus2.T81795.data[59],DATA12);
SIGNAL(V1_17_2_E,fastbus1.Q47315.data[35],DATA12);
SIGNAL(V1_17_2_T,fastbus1.T87044.data[51],DATA12);
SIGNAL(V1_18_1_E,fastbus1.Q15372.data[63],DATA12);
SIGNAL(V1_18_1_T,fastbus2.T81795.data[63],DATA12);
SIGNAL(V1_18_2_E,fastbus1.Q47315.data[39],DATA12);
SIGNAL(V1_18_2_T,fastbus1.T87044.data[55],DATA12);
SIGNAL(V1_19_1_E,fastbus1.Q17320.data[4],DATA12);
SIGNAL(V1_19_1_T,fastbus1.T87024.data[52],DATA12);
SIGNAL(V1_19_2_E,fastbus1.Q47315.data[43],DATA12);
SIGNAL(V1_19_2_T,fastbus1.T87044.data[59],DATA12);
SIGNAL(V1_20_1_E,fastbus1.Q17320.data[6],DATA12);
SIGNAL(V1_20_1_T,fastbus1.T87024.data[54],DATA12);
SIGNAL(V1_20_2_E,fastbus1.Q47315.data[47],DATA12);
SIGNAL(V1_20_2_T,fastbus1.T87044.data[63],DATA12);
SIGNAL(XB001_1_E,fastbus1.Q11111.data[0],DATA12);
SIGNAL(XB001_1_T,fastbus1.T81800.data[24],DATA12);
SIGNAL(XB002_1_E,fastbus1.Q11111.data[2],DATA12);
SIGNAL(XB002_1_T,fastbus1.T81800.data[26],DATA12);
SIGNAL(XB003_1_E,fastbus1.Q11111.data[4],DATA12);
SIGNAL(XB003_1_T,fastbus1.T81800.data[28],DATA12);
SIGNAL(XB003_2_E,fastbus2.Q75266.data[31],DATA12);
SIGNAL(XB004_1_E,fastbus1.Q11111.data[6],DATA12);
SIGNAL(XB004_1_T,fastbus1.T81800.data[30],DATA12);
SIGNAL(XB004_2_E,fastbus2.Q75266.data[7],DATA12);
SIGNAL(XB005_1_E,fastbus1.Q11111.data[8],DATA12);
SIGNAL(XB005_1_T,fastbus1.T81800.data[32],DATA12);
SIGNAL(XB006_1_E,fastbus1.Q11111.data[10],DATA12);
SIGNAL(XB006_1_T,fastbus1.T81800.data[34],DATA12);
SIGNAL(XB007_1_E,fastbus1.Q11111.data[12],DATA12);
SIGNAL(XB007_1_T,fastbus1.T81800.data[36],DATA12);
SIGNAL(XB008_1_E,fastbus1.Q11111.data[14],DATA12);
SIGNAL(XB008_1_T,fastbus1.T81800.data[38],DATA12);
SIGNAL(XB009_1_E,fastbus1.Q46848.data[57],DATA12);
SIGNAL(XB009_1_T,fastbus1.T81800.data[52],DATA12);
SIGNAL(XB010_1_E,fastbus1.Q11111.data[18],DATA12);
SIGNAL(XB010_1_T,fastbus1.T87044.data[34],DATA12);
SIGNAL(XB010_2_E,fastbus2.Q75266.data[23],DATA12);
SIGNAL(XB011_1_E,fastbus1.Q11111.data[20],DATA12);
SIGNAL(XB011_1_T,fastbus1.T87044.data[36],DATA12);
SIGNAL(XB011_2_E,fastbus2.Q75266.data[6],DATA12);
SIGNAL(XB012_1_E,fastbus1.Q11111.data[22],DATA12);
SIGNAL(XB012_1_T,fastbus1.T87044.data[38],DATA12);
SIGNAL(XB012_2_E,fastbus2.Q75266.data[22],DATA12);
SIGNAL(XB013_1_E,fastbus1.Q11111.data[24],DATA12);
SIGNAL(XB013_1_T,fastbus1.T81800.data[8],DATA12);
SIGNAL(XB013_2_E,fastbus2.Q75266.data[30],DATA12);
SIGNAL(XB014_1_E,fastbus1.Q11111.data[26],DATA12);
SIGNAL(XB014_1_T,fastbus1.T81800.data[10],DATA12);
SIGNAL(XB014_2_E,fastbus2.Q75266.data[21],DATA12);
SIGNAL(XB015_1_E,fastbus1.Q11111.data[28],DATA12);
SIGNAL(XB015_1_T,fastbus1.T81800.data[12],DATA12);
SIGNAL(XB016_1_E,fastbus1.Q11111.data[30],DATA12);
SIGNAL(XB016_1_T,fastbus1.T81800.data[14],DATA12);
SIGNAL(XB017_1_E,fastbus1.Q11111.data[32],DATA12);
SIGNAL(XB017_1_T,fastbus1.T87044.data[0],DATA12);
SIGNAL(XB018_1_E,fastbus1.Q11111.data[34],DATA12);
SIGNAL(XB018_1_T,fastbus1.T87044.data[2],DATA12);
SIGNAL(XB019_1_E,fastbus1.Q11111.data[36],DATA12);
SIGNAL(XB019_1_T,fastbus1.T87044.data[4],DATA12);
SIGNAL(XB020_1_E,fastbus1.Q11111.data[38],DATA12);
SIGNAL(XB020_1_T,fastbus1.T87044.data[6],DATA12);
SIGNAL(XB021_1_E,fastbus1.Q11111.data[40],DATA12);
SIGNAL(XB021_1_T,fastbus1.T87044.data[8],DATA12);
SIGNAL(XB022_1_E,fastbus1.Q11111.data[42],DATA12);
SIGNAL(XB022_1_T,fastbus1.T87044.data[10],DATA12);
SIGNAL(XB023_1_E,fastbus1.Q11111.data[44],DATA12);
SIGNAL(XB023_1_T,fastbus1.T87044.data[12],DATA12);
SIGNAL(XB023_2_E,fastbus2.Q75266.data[29],DATA12);
SIGNAL(XB024_1_E,fastbus1.Q11111.data[46],DATA12);
SIGNAL(XB024_1_T,fastbus1.T87044.data[14],DATA12);
SIGNAL(XB024_2_E,fastbus2.Q75266.data[15],DATA12);
SIGNAL(XB025_1_E,fastbus1.Q11111.data[48],DATA12);
SIGNAL(XB025_1_T,fastbus1.T87024.data[24],DATA12);
SIGNAL(XB025_2_E,fastbus2.Q75266.data[28],DATA12);
SIGNAL(XB026_1_E,fastbus1.Q11111.data[50],DATA12);
SIGNAL(XB026_1_T,fastbus1.T87024.data[26],DATA12);
SIGNAL(XB026_2_E,fastbus2.Q75266.data[5],DATA12);
SIGNAL(XB027_1_E,fastbus1.Q11111.data[52],DATA12);
SIGNAL(XB027_1_T,fastbus1.T87024.data[28],DATA12);
SIGNAL(XB027_2_E,fastbus2.Q75266.data[14],DATA12);
SIGNAL(XB028_1_E,fastbus1.Q11111.data[54],DATA12);
SIGNAL(XB028_1_T,fastbus1.T87024.data[30],DATA12);
SIGNAL(XB028_2_E,fastbus2.Q75266.data[4],DATA12);
SIGNAL(XB029_1_E,fastbus1.Q11111.data[56],DATA12);
SIGNAL(XB029_1_T,fastbus1.T87024.data[32],DATA12);
SIGNAL(XB030_1_E,fastbus1.Q11111.data[58],DATA12);
SIGNAL(XB030_1_T,fastbus1.T87024.data[34],DATA12);
SIGNAL(XB031_1_E,fastbus1.Q11111.data[60],DATA12);
SIGNAL(XB031_1_T,fastbus1.T87024.data[36],DATA12);
SIGNAL(XB032_1_E,fastbus1.Q11111.data[62],DATA12);
SIGNAL(XB032_1_T,fastbus1.T87024.data[38],DATA12);
SIGNAL(XB033_1_E,fastbus1.Q11111.data[33],DATA12);
SIGNAL(XB033_1_T,fastbus1.T87044.data[1],DATA12);
SIGNAL(XB034_1_E,fastbus1.Q11111.data[35],DATA12);
SIGNAL(XB034_1_T,fastbus1.T87044.data[3],DATA12);
SIGNAL(XB035_1_E,fastbus1.Q11111.data[37],DATA12);
SIGNAL(XB035_1_T,fastbus1.T87044.data[5],DATA12);
SIGNAL(XB036_1_E,fastbus1.Q11111.data[39],DATA12);
SIGNAL(XB036_1_T,fastbus1.T87044.data[7],DATA12);
SIGNAL(XB037_1_E,fastbus1.Q11111.data[41],DATA12);
SIGNAL(XB037_1_T,fastbus1.T87044.data[9],DATA12);
SIGNAL(XB038_1_E,fastbus1.Q11111.data[43],DATA12);
SIGNAL(XB038_1_T,fastbus1.T87044.data[11],DATA12);
SIGNAL(XB039_1_E,fastbus1.Q11111.data[45],DATA12);
SIGNAL(XB039_1_T,fastbus1.T87044.data[13],DATA12);
SIGNAL(XB039_2_E,fastbus2.Q75266.data[3],DATA12);
SIGNAL(XB040_1_E,fastbus1.Q11111.data[47],DATA12);
SIGNAL(XB040_1_T,fastbus1.T87044.data[15],DATA12);
SIGNAL(XB040_2_E,fastbus2.Q75266.data[20],DATA12);
SIGNAL(XB041_1_E,fastbus1.Q11111.data[17],DATA12);
SIGNAL(XB041_1_T,fastbus1.T87044.data[33],DATA12);
SIGNAL(XB041_2_E,fastbus2.Q75266.data[19],DATA12);
SIGNAL(XB042_1_E,fastbus1.Q11111.data[19],DATA12);
SIGNAL(XB042_1_T,fastbus1.T87044.data[35],DATA12);
SIGNAL(XB042_2_E,fastbus2.Q75266.data[13],DATA12);
SIGNAL(XB043_1_E,fastbus1.Q11111.data[21],DATA12);
SIGNAL(XB043_1_T,fastbus1.T87044.data[37],DATA12);
SIGNAL(XB043_2_E,fastbus2.Q75266.data[27],DATA12);
SIGNAL(XB044_1_E,fastbus1.Q11111.data[23],DATA12);
SIGNAL(XB044_1_T,fastbus1.T87044.data[39],DATA12);
SIGNAL(XB044_2_E,fastbus2.Q75266.data[26],DATA12);
SIGNAL(XB045_1_E,fastbus1.Q11111.data[25],DATA12);
SIGNAL(XB045_1_T,fastbus1.T81800.data[9],DATA12);
SIGNAL(XB045_2_E,fastbus2.Q75266.data[18],DATA12);
SIGNAL(XB046_1_E,fastbus1.Q11111.data[27],DATA12);
SIGNAL(XB046_1_T,fastbus1.T81800.data[11],DATA12);
SIGNAL(XB047_1_E,fastbus1.Q11111.data[29],DATA12);
SIGNAL(XB047_1_T,fastbus1.T81800.data[13],DATA12);
SIGNAL(XB048_1_E,fastbus1.Q11111.data[31],DATA12);
SIGNAL(XB048_1_T,fastbus1.T81800.data[15],DATA12);
SIGNAL(XB049_1_E,fastbus1.Q11111.data[1],DATA12);
SIGNAL(XB049_1_T,fastbus1.T81800.data[25],DATA12);
SIGNAL(XB050_1_E,fastbus1.Q11111.data[3],DATA12);
SIGNAL(XB050_1_T,fastbus1.T81800.data[27],DATA12);
SIGNAL(XB051_1_E,fastbus1.Q11111.data[5],DATA12);
SIGNAL(XB051_1_T,fastbus1.T81800.data[29],DATA12);
SIGNAL(XB052_1_E,fastbus1.Q11111.data[7],DATA12);
SIGNAL(XB052_1_T,fastbus1.T81800.data[31],DATA12);
SIGNAL(XB053_1_E,fastbus1.Q11111.data[9],DATA12);
SIGNAL(XB053_1_T,fastbus1.T81800.data[33],DATA12);
SIGNAL(XB054_1_E,fastbus1.Q11111.data[11],DATA12);
SIGNAL(XB054_1_T,fastbus1.T81800.data[35],DATA12);
SIGNAL(XB055_1_E,fastbus1.Q11111.data[13],DATA12);
SIGNAL(XB055_1_T,fastbus1.T81800.data[37],DATA12);
SIGNAL(XB056_1_E,fastbus1.Q11111.data[15],DATA12);
SIGNAL(XB056_1_T,fastbus1.T81800.data[39],DATA12);
SIGNAL(XB057_1_E,fastbus1.Q47342.data[64],DATA12);
SIGNAL(XB057_1_T,fastbus1.T87024.data[0],DATA12);
SIGNAL(XB057_2_E,fastbus2.Q75266.data[25],DATA12);
SIGNAL(XB058_1_E,fastbus1.Q47342.data[66],DATA12);
SIGNAL(XB058_1_T,fastbus1.T87024.data[2],DATA12);
SIGNAL(XB058_2_E,fastbus2.Q75266.data[12],DATA12);
SIGNAL(XB059_1_E,fastbus1.Q47342.data[68],DATA12);
SIGNAL(XB059_1_T,fastbus1.T87024.data[4],DATA12);
SIGNAL(XB059_2_E,fastbus2.Q75266.data[24],DATA12);
SIGNAL(XB060_1_E,fastbus1.Q47342.data[70],DATA12);
SIGNAL(XB060_1_T,fastbus1.T87024.data[6],DATA12);
SIGNAL(XB060_2_E,fastbus2.Q75266.data[11],DATA12);
SIGNAL(XB061_1_E,fastbus1.Q47342.data[72],DATA12);
SIGNAL(XB061_1_T,fastbus1.T87024.data[8],DATA12);
SIGNAL(XB061_2_E,fastbus2.Q75266.data[2],DATA12);
SIGNAL(XB062_1_E,fastbus1.Q47342.data[74],DATA12);
SIGNAL(XB062_1_T,fastbus1.T87024.data[10],DATA12);
SIGNAL(XB062_2_E,fastbus2.Q75266.data[10],DATA12);
SIGNAL(XB063_1_E,fastbus1.Q47342.data[76],DATA12);
SIGNAL(XB063_1_T,fastbus1.T87024.data[12],DATA12);
SIGNAL(XB063_2_E,fastbus2.Q75266.data[1],DATA12);
SIGNAL(XB064_1_E,fastbus1.Q47342.data[78],DATA12);
SIGNAL(XB064_1_T,fastbus1.T87024.data[14],DATA12);
SIGNAL(XB064_2_E,fastbus2.Q75266.data[9],DATA12);
SIGNAL(XB065_1_E,fastbus1.Q11111.data[64],DATA12);
SIGNAL(XB065_1_T,fastbus1.T81800.data[40],DATA12);
SIGNAL(XB065_2_E,fastbus2.Q75266.data[0],DATA12);
SIGNAL(XB066_1_E,fastbus1.Q11111.data[66],DATA12);
SIGNAL(XB066_1_T,fastbus1.T81800.data[42],DATA12);
SIGNAL(XB067_1_E,fastbus1.Q11111.data[68],DATA12);
SIGNAL(XB067_1_T,fastbus1.T81800.data[44],DATA12);
SIGNAL(XB068_1_E,fastbus1.Q11111.data[70],DATA12);
SIGNAL(XB068_1_T,fastbus1.T81800.data[46],DATA12);
SIGNAL(XB069_1_E,fastbus1.Q11111.data[72],DATA12);
SIGNAL(XB069_1_T,fastbus1.T87024.data[40],DATA12);
SIGNAL(XB070_1_E,fastbus1.Q11111.data[74],DATA12);
SIGNAL(XB070_1_T,fastbus1.T87024.data[42],DATA12);
SIGNAL(XB071_1_E,fastbus1.Q11111.data[76],DATA12);
SIGNAL(XB071_1_T,fastbus1.T87024.data[44],DATA12);
SIGNAL(XB072_1_E,fastbus1.Q11111.data[78],DATA12);
SIGNAL(XB072_1_T,fastbus1.T87024.data[46],DATA12);
SIGNAL(XB073_1_E,fastbus1.Q11111.data[16],DATA12);
SIGNAL(XB073_1_T,fastbus1.T87044.data[32],DATA12);
SIGNAL(XB074_1_E,fastbus1.Q46848.data[51],DATA12);
SIGNAL(XB074_1_T,fastbus1.T81800.data[63],DATA12);
SIGNAL(XB075_1_E,fastbus1.Q46848.data[53],DATA12);
SIGNAL(XB075_1_T,fastbus1.T81800.data[49],DATA12);
SIGNAL(XB076_1_E,fastbus1.Q46848.data[55],DATA12);
SIGNAL(XB076_1_T,fastbus1.T81800.data[51],DATA12);
SIGNAL(XB078_1_E,fastbus1.Q46848.data[59],DATA12);
SIGNAL(XB078_1_T,fastbus1.T81800.data[56],DATA12);
SIGNAL(XB078_2_E,fastbus2.Q75266.data[8],DATA12);
SIGNAL(XB079_1_E,fastbus1.Q46848.data[61],DATA12);
SIGNAL(XB079_1_T,fastbus1.T81800.data[57],DATA12);
SIGNAL(XB079_2_E,fastbus2.Q75266.data[17],DATA12);
SIGNAL(XB080_1_E,fastbus1.Q46848.data[63],DATA12);
SIGNAL(XB080_1_T,fastbus1.T81800.data[58],DATA12);
SIGNAL(XB080_2_E,fastbus2.Q75266.data[16],DATA12);
SIGNAL(XB083_1_E,fastbus1.Q11111.data[53],DATA12);
SIGNAL(XB083_1_T,fastbus1.T87024.data[29],DATA12);
SIGNAL(XB084_1_E,fastbus1.Q11111.data[55],DATA12);
SIGNAL(XB084_1_T,fastbus1.T87024.data[31],DATA12);
SIGNAL(XB085_1_E,fastbus1.Q11111.data[57],DATA12);
SIGNAL(XB085_1_T,fastbus1.T87024.data[33],DATA12);
SIGNAL(XB086_1_E,fastbus1.Q11111.data[59],DATA12);
SIGNAL(XB086_1_T,fastbus1.T87024.data[35],DATA12);
SIGNAL(XB087_1_E,fastbus1.Q11111.data[61],DATA12);
SIGNAL(XB087_1_T,fastbus1.T87024.data[37],DATA12);
SIGNAL(XB087_2_E,fastbus2.Q75266.data[47],DATA12);
SIGNAL(XB088_1_E,fastbus1.Q11111.data[63],DATA12);
SIGNAL(XB088_1_T,fastbus1.T87024.data[39],DATA12);
SIGNAL(XB088_2_E,fastbus2.Q75266.data[55],DATA12);
SIGNAL(XB089_1_E,fastbus1.Q47342.data[16],DATA12);
SIGNAL(XB089_1_T,fastbus1.T87044.data[24],DATA12);
SIGNAL(XB089_2_E,fastbus2.Q75266.data[54],DATA12);
SIGNAL(XB090_1_E,fastbus1.Q47342.data[18],DATA12);
SIGNAL(XB090_1_T,fastbus1.T87044.data[26],DATA12);
SIGNAL(XB090_2_E,fastbus2.Q75266.data[46],DATA12);
SIGNAL(XB091_1_E,fastbus1.Q47342.data[20],DATA12);
SIGNAL(XB091_1_T,fastbus1.T87044.data[28],DATA12);
SIGNAL(XB091_2_E,fastbus2.Q75266.data[39],DATA12);
SIGNAL(XB092_1_E,fastbus1.Q47342.data[22],DATA12);
SIGNAL(XB092_1_T,fastbus1.T87044.data[30],DATA12);
SIGNAL(XB092_2_E,fastbus2.Q75266.data[45],DATA12);
SIGNAL(XB093_1_E,fastbus1.Q47342.data[24],DATA12);
SIGNAL(XB093_1_T,fastbus1.T87044.data[40],DATA12);
SIGNAL(XB093_2_E,fastbus2.Q75266.data[38],DATA12);
SIGNAL(XB094_1_E,fastbus1.Q47342.data[26],DATA12);
SIGNAL(XB094_1_T,fastbus1.T87044.data[42],DATA12);
SIGNAL(XB094_2_E,fastbus2.Q75266.data[44],DATA12);
SIGNAL(XB095_1_E,fastbus1.Q47342.data[28],DATA12);
SIGNAL(XB095_1_T,fastbus1.T87044.data[44],DATA12);
SIGNAL(XB095_2_E,fastbus2.Q75266.data[37],DATA12);
SIGNAL(XB096_1_E,fastbus1.Q47342.data[30],DATA12);
SIGNAL(XB096_1_T,fastbus1.T87044.data[46],DATA12);
SIGNAL(XB097_1_E,fastbus1.Q47342.data[48],DATA12);
SIGNAL(XB097_1_T,fastbus1.T87024.data[16],DATA12);
SIGNAL(XB098_1_E,fastbus1.Q47342.data[50],DATA12);
SIGNAL(XB098_1_T,fastbus1.T87024.data[18],DATA12);
SIGNAL(XB099_1_E,fastbus1.Q47342.data[52],DATA12);
SIGNAL(XB099_1_T,fastbus1.T87024.data[20],DATA12);
SIGNAL(XB100_1_E,fastbus1.Q47342.data[54],DATA12);
SIGNAL(XB100_1_T,fastbus1.T87024.data[22],DATA12);
SIGNAL(XB101_1_E,fastbus1.Q47342.data[56],DATA12);
SIGNAL(XB101_1_T,fastbus1.T81800.data[16],DATA12);
SIGNAL(XB102_1_E,fastbus1.Q47342.data[58],DATA12);
SIGNAL(XB102_1_T,fastbus1.T81800.data[18],DATA12);
SIGNAL(XB103_1_E,fastbus1.Q47342.data[60],DATA12);
SIGNAL(XB103_1_T,fastbus1.T81800.data[20],DATA12);
SIGNAL(XB104_1_E,fastbus1.Q47342.data[62],DATA12);
SIGNAL(XB104_1_T,fastbus1.T81800.data[22],DATA12);
SIGNAL(XB105_1_E,fastbus1.Q47342.data[33],DATA12);
SIGNAL(XB105_1_T,fastbus1.T87044.data[17],DATA12);
SIGNAL(XB106_1_E,fastbus1.Q47342.data[35],DATA12);
SIGNAL(XB106_1_T,fastbus1.T87044.data[19],DATA12);
SIGNAL(XB107_1_E,fastbus1.Q47342.data[37],DATA12);
SIGNAL(XB107_1_T,fastbus1.T87044.data[21],DATA12);
SIGNAL(XB108_1_E,fastbus1.Q47342.data[39],DATA12);
SIGNAL(XB108_1_T,fastbus1.T87044.data[23],DATA12);
SIGNAL(XB109_1_E,fastbus1.Q47342.data[41],DATA12);
SIGNAL(XB109_1_T,fastbus1.T81800.data[1],DATA12);
SIGNAL(XB109_2_E,fastbus2.Q75266.data[63],DATA12);
SIGNAL(XB110_1_E,fastbus1.Q47342.data[43],DATA12);
SIGNAL(XB110_1_T,fastbus1.T81800.data[3],DATA12);
SIGNAL(XB110_2_E,fastbus2.Q75266.data[43],DATA12);
SIGNAL(XB111_1_E,fastbus1.Q47342.data[45],DATA12);
SIGNAL(XB111_1_T,fastbus1.T81800.data[5],DATA12);
SIGNAL(XB111_2_E,fastbus2.Q75266.data[62],DATA12);
SIGNAL(XB112_1_E,fastbus1.Q47342.data[47],DATA12);
SIGNAL(XB112_1_T,fastbus1.T81800.data[7],DATA12);
SIGNAL(XB112_2_E,fastbus2.Q75266.data[53],DATA12);
SIGNAL(XB113_1_E,fastbus1.Q47342.data[65],DATA12);
SIGNAL(XB113_1_T,fastbus1.T87024.data[1],DATA12);
SIGNAL(XB113_2_E,fastbus2.Q75266.data[42],DATA12);
SIGNAL(XB114_1_E,fastbus1.Q47342.data[67],DATA12);
SIGNAL(XB114_1_T,fastbus1.T87024.data[3],DATA12);
SIGNAL(XB114_2_E,fastbus2.Q75266.data[61],DATA12);
SIGNAL(XB115_1_E,fastbus1.Q47342.data[69],DATA12);
SIGNAL(XB115_1_T,fastbus1.T87024.data[5],DATA12);
SIGNAL(XB115_2_E,fastbus2.Q75266.data[60],DATA12);
SIGNAL(XB116_1_E,fastbus1.Q47342.data[71],DATA12);
SIGNAL(XB116_1_T,fastbus1.T87024.data[7],DATA12);
SIGNAL(XB116_2_E,fastbus2.Q75266.data[52],DATA12);
SIGNAL(XB117_1_E,fastbus1.Q47342.data[73],DATA12);
SIGNAL(XB117_1_T,fastbus1.T87024.data[9],DATA12);
SIGNAL(XB118_1_E,fastbus1.Q47342.data[75],DATA12);
SIGNAL(XB118_1_T,fastbus1.T87024.data[11],DATA12);
SIGNAL(XB119_1_E,fastbus1.Q47342.data[77],DATA12);
SIGNAL(XB119_1_T,fastbus1.T87024.data[13],DATA12);
SIGNAL(XB120_1_E,fastbus1.Q47342.data[79],DATA12);
SIGNAL(XB120_1_T,fastbus1.T87024.data[15],DATA12);
SIGNAL(XB121_1_E,fastbus1.Q47342.data[17],DATA12);
SIGNAL(XB121_1_T,fastbus1.T87044.data[25],DATA12);
SIGNAL(XB122_1_E,fastbus1.Q47342.data[19],DATA12);
SIGNAL(XB122_1_T,fastbus1.T87044.data[27],DATA12);
SIGNAL(XB123_1_E,fastbus1.Q47342.data[21],DATA12);
SIGNAL(XB123_1_T,fastbus1.T87044.data[29],DATA12);
SIGNAL(XB124_1_E,fastbus1.Q47342.data[23],DATA12);
SIGNAL(XB124_1_T,fastbus1.T87044.data[31],DATA12);
SIGNAL(XB125_1_E,fastbus1.Q47342.data[25],DATA12);
SIGNAL(XB125_1_T,fastbus1.T87044.data[41],DATA12);
SIGNAL(XB126_1_E,fastbus1.Q47342.data[27],DATA12);
SIGNAL(XB126_1_T,fastbus1.T87044.data[43],DATA12);
SIGNAL(XB126_2_E,fastbus2.Q75266.data[36],DATA12);
SIGNAL(XB127_1_E,fastbus1.Q47342.data[29],DATA12);
SIGNAL(XB127_1_T,fastbus1.T87044.data[45],DATA12);
SIGNAL(XB127_2_E,fastbus2.Q75266.data[51],DATA12);
SIGNAL(XB128_1_E,fastbus1.Q47342.data[31],DATA12);
SIGNAL(XB128_1_T,fastbus1.T87044.data[47],DATA12);
SIGNAL(XB128_2_E,fastbus2.Q75266.data[41],DATA12);
SIGNAL(XB129_1_E,fastbus1.Q46848.data[48],DATA12);
SIGNAL(XB129_1_T,fastbus1.T81800.data[60],DATA12);
SIGNAL(XB129_2_E,fastbus2.Q75266.data[59],DATA12);
SIGNAL(XB130_1_E,fastbus1.Q46848.data[50],DATA12);
SIGNAL(XB130_1_T,fastbus1.T81800.data[62],DATA12);
SIGNAL(XB130_2_E,fastbus2.Q75266.data[35],DATA12);
SIGNAL(XB131_1_E,fastbus1.Q46848.data[52],DATA12);
SIGNAL(XB131_1_T,fastbus1.T81800.data[48],DATA12);
SIGNAL(XB131_2_E,fastbus2.Q75266.data[40],DATA12);
SIGNAL(XB132_1_E,fastbus1.Q46848.data[54],DATA12);
SIGNAL(XB132_1_T,fastbus1.T81800.data[50],DATA12);
SIGNAL(XB132_2_E,fastbus2.Q75266.data[64],DATA12);
SIGNAL(XB133_1_E,fastbus1.Q46848.data[56],DATA12);
SIGNAL(XB133_1_T,fastbus1.T81800.data[61],DATA12);
SIGNAL(XB134_1_E,fastbus1.Q46848.data[58],DATA12);
SIGNAL(XB134_1_T,fastbus1.T81800.data[53],DATA12);
SIGNAL(XB135_1_E,fastbus1.Q46848.data[60],DATA12);
SIGNAL(XB135_1_T,fastbus1.T81800.data[55],DATA12);
SIGNAL(XB136_1_E,fastbus1.Q46848.data[62],DATA12);
SIGNAL(XB136_1_T,fastbus1.T81800.data[54],DATA12);
SIGNAL(XB137_1_E,fastbus1.Q11111.data[65],DATA12);
SIGNAL(XB137_1_T,fastbus1.T81800.data[41],DATA12);
SIGNAL(XB138_1_E,fastbus1.Q11111.data[67],DATA12);
SIGNAL(XB138_1_T,fastbus1.T81800.data[43],DATA12);
SIGNAL(XB139_1_E,fastbus1.Q11111.data[69],DATA12);
SIGNAL(XB139_1_T,fastbus1.T81800.data[45],DATA12);
SIGNAL(XB140_1_E,fastbus1.Q11111.data[71],DATA12);
SIGNAL(XB140_1_T,fastbus1.T81800.data[47],DATA12);
SIGNAL(XB141_1_E,fastbus1.Q11111.data[73],DATA12);
SIGNAL(XB141_1_T,fastbus1.T87024.data[41],DATA12);
SIGNAL(XB142_1_E,fastbus1.Q11111.data[75],DATA12);
SIGNAL(XB142_1_T,fastbus1.T87024.data[43],DATA12);
SIGNAL(XB143_1_E,fastbus1.Q11111.data[77],DATA12);
SIGNAL(XB143_1_T,fastbus1.T87024.data[45],DATA12);
SIGNAL(XB143_2_E,fastbus2.Q75266.data[58],DATA12);
SIGNAL(XB144_1_E,fastbus1.Q11111.data[79],DATA12);
SIGNAL(XB144_1_T,fastbus1.T87024.data[47],DATA12);
SIGNAL(XB144_2_E,fastbus2.Q75266.data[33],DATA12);
SIGNAL(XB145_1_E,fastbus1.Q47342.data[32],DATA12);
SIGNAL(XB145_1_T,fastbus1.T87044.data[16],DATA12);
SIGNAL(XB145_2_E,fastbus2.Q75266.data[50],DATA12);
SIGNAL(XB146_1_E,fastbus1.Q47342.data[34],DATA12);
SIGNAL(XB146_1_T,fastbus1.T87044.data[18],DATA12);
SIGNAL(XB146_2_E,fastbus2.Q75266.data[57],DATA12);
SIGNAL(XB147_1_E,fastbus1.Q47342.data[36],DATA12);
SIGNAL(XB147_1_T,fastbus1.T87044.data[20],DATA12);
SIGNAL(XB147_2_E,fastbus2.Q75266.data[49],DATA12);
SIGNAL(XB148_1_E,fastbus1.Q47342.data[38],DATA12);
SIGNAL(XB148_1_T,fastbus1.T87044.data[22],DATA12);
SIGNAL(XB149_1_E,fastbus1.Q47342.data[40],DATA12);
SIGNAL(XB149_1_T,fastbus1.T81800.data[0],DATA12);
SIGNAL(XB150_1_E,fastbus1.Q47342.data[42],DATA12);
SIGNAL(XB150_1_T,fastbus1.T81800.data[2],DATA12);
SIGNAL(XB151_1_E,fastbus1.Q47342.data[44],DATA12);
SIGNAL(XB151_1_T,fastbus1.T81800.data[4],DATA12);
SIGNAL(XB152_1_E,fastbus1.Q47342.data[46],DATA12);
SIGNAL(XB152_1_T,fastbus1.T81800.data[6],DATA12);
SIGNAL(XB153_1_E,fastbus1.Q47342.data[49],DATA12);
SIGNAL(XB153_1_T,fastbus1.T87024.data[17],DATA12);
SIGNAL(XB154_1_E,fastbus1.Q47342.data[51],DATA12);
SIGNAL(XB154_1_T,fastbus1.T87024.data[19],DATA12);
SIGNAL(XB155_1_E,fastbus1.Q47342.data[53],DATA12);
SIGNAL(XB155_1_T,fastbus1.T87024.data[21],DATA12);
SIGNAL(XB155_2_E,fastbus2.Q75266.data[48],DATA12);
SIGNAL(XB156_1_E,fastbus1.Q47342.data[55],DATA12);
SIGNAL(XB156_1_T,fastbus1.T87024.data[23],DATA12);
SIGNAL(XB156_2_E,fastbus2.Q75266.data[56],DATA12);
SIGNAL(XB157_1_E,fastbus1.Q47342.data[57],DATA12);
SIGNAL(XB157_1_T,fastbus1.T81800.data[17],DATA12);
SIGNAL(XB157_2_E,fastbus2.Q75266.data[32],DATA12);
SIGNAL(XB158_1_E,fastbus1.Q47342.data[59],DATA12);
SIGNAL(XB158_1_T,fastbus1.T81800.data[19],DATA12);
SIGNAL(XB159_1_E,fastbus1.Q47342.data[61],DATA12);
SIGNAL(XB159_1_T,fastbus1.T81800.data[21],DATA12);
SIGNAL(XB160_1_E,fastbus1.Q47342.data[63],DATA12);
SIGNAL(XB160_1_T,fastbus1.T81800.data[23],DATA12);
SIGNAL(XB161_1_E,fastbus1.Q11111.data[49],DATA12);
SIGNAL(XB161_1_T,fastbus1.T87024.data[25],DATA12);
SIGNAL(XB162_1_E,fastbus1.Q11111.data[51],DATA12);
SIGNAL(XB162_1_T,fastbus1.T87024.data[27],DATA12);
SIGNAL(XBSUM_1_E,camac.qSIA0458.data[7],DATA12);
SIGNAL(IPED,,uint16);
SIGNAL(SST6_1024_E,,DATA12);
SIGNAL(TCALE,,float);
SIGNAL(TCALT,,float);
SIGNAL( ZERO_SUPPRESS:CS1);
SIGNAL( ZERO_SUPPRESS:CV1);
SIGNAL( ZERO_SUPPRESS:FGR1_1);
SIGNAL( ZERO_SUPPRESS:GFI1_1);
SIGNAL( ZERO_SUPPRESS:N1_1);
SIGNAL( ZERO_SUPPRESS:NTF1);
SIGNAL( NO_INDEX_LIST(16):PILEUP);
SIGNAL( ZERO_SUPPRESS:SST6_1024);
SIGNAL( ZERO_SUPPRESS:TFW1);
SIGNAL( ZERO_SUPPRESS:V1_1);
SIGNAL( ZERO_SUPPRESS:XB1);
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/

/**********************************************************
 * Generating unpacking code...
 */

//
// Generating code for: CAMAC_LECROY_2277_1CH_HACK
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for CAMAC_LECROY_2277_1CH_HACK.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_LECROY_2277_1CH_HACK(channel,edge,high_byte)
#if !PACKER_CODE
# define DECLARED_UNPACK_CAMAC_LECROY_2277_1CH_HACK
class CAMAC_LECROY_2277_1CH_HACK
#else//PACKER_CODE
# define DECLARED_PACKER_CAMAC_LECROY_2277_1CH_HACK
class PACKER_CAMAC_LECROY_2277_1CH_HACK
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA16 data[16] NO_INDEX_LIST);
  raw_list_ii_zero_suppress<DATA16,DATA16,16> data;
  // UINT32 ch_data NOENCODE
  // {
    //  0_15: value;
    //    16: edge = CHECK(edge);
    // 17_21: channel = CHECK(channel);
    // 24_31: high = CHECK(high_byte);
    // ENCODE(data APPEND_LIST,(value=value));
  // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 channel,uint32 edge,uint32 high_byte);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 channel,uint32 edge,uint32 high_byte);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 channel,uint32 edge,uint32 high_byte);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(CAMAC_LECROY_2277_1CH_HACK);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for CAMAC_LECROY_2277_1CH_HACK.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_LECROY_2277_1CH_HACK(channel,edge,high_byte)
template<typename __data_src_t>
void CAMAC_LECROY_2277_1CH_HACK::__unpack(__data_src_t &__buffer,uint32 channel
                                                                ,uint32 edge
                                                                ,uint32 high_byte)
{
  // MEMBER(DATA16 data[16] NO_INDEX_LIST);
  // UINT32 ch_data NOENCODE
  // {
    //  0_15: value;
    //    16: edge = CHECK(edge);
    // 17_21: channel = CHECK(channel);
    // 24_31: high = CHECK(high_byte);
    // ENCODE(data APPEND_LIST,(value=value));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 16; // 0..15
      uint32 edge : 1; // 16
      uint32 channel : 5; // 17..21
      uint32 dummy_22_23 : 2;
      uint32 high : 8; // 24..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 high : 8; // 24..31
      uint32 dummy_22_23 : 2;
      uint32 channel : 5; // 17..21
      uint32 edge : 1; // 16
      uint32 value : 16; // 0..15
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(18,uint32 ,ch_data,ch_data.u32);
  CHECK_BITS_EQUAL(14,ch_data.edge,edge);
  CHECK_BITS_EQUAL(15,ch_data.channel,channel);
  CHECK_BITS_EQUAL(16,ch_data.high,high_byte);
  CHECK_UNNAMED_BITS_ZERO(18,ch_data.u32,0x00c00000);
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.append_item(17);
    __item.value = ch_data.value;
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_LECROY_2277_1CH_HACK::__unpack,uint32 channel
                                                                     ,uint32 edge
                                                                     ,uint32 high_byte);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for CAMAC_LECROY_2277_1CH_HACK.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_LECROY_2277_1CH_HACK(channel,edge,high_byte)
template<typename __data_src_t>
bool CAMAC_LECROY_2277_1CH_HACK::__match(__data_src_t &__buffer,uint32 channel
                                                               ,uint32 edge
                                                               ,uint32 high_byte)
{
  // MEMBER(DATA16 data[16] NO_INDEX_LIST);
  // UINT32 ch_data NOENCODE
  // {
    //  0_15: value;
    //    16: edge = CHECK(edge);
    // 17_21: channel = CHECK(channel);
    // 24_31: high = CHECK(high_byte);
    // ENCODE(data APPEND_LIST,(value=value));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 16; // 0..15
      uint32 edge : 1; // 16
      uint32 channel : 5; // 17..21
      uint32 dummy_22_23 : 2;
      uint32 high : 8; // 24..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 high : 8; // 24..31
      uint32 dummy_22_23 : 2;
      uint32 channel : 5; // 17..21
      uint32 edge : 1; // 16
      uint32 value : 16; // 0..15
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(18,uint32 ,ch_data,ch_data.u32);
  MATCH_BITS_EQUAL(14,ch_data.edge,edge);
  MATCH_BITS_EQUAL(15,ch_data.channel,channel);
  MATCH_BITS_EQUAL(16,ch_data.high,high_byte);
  MATCH_UNNAMED_BITS_ZERO(18,ch_data.u32,0x00c00000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,CAMAC_LECROY_2277_1CH_HACK::__match,uint32 channel
                                                                    ,uint32 edge
                                                                    ,uint32 high_byte);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for CAMAC_LECROY_2277_1CH_HACK.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_LECROY_2277_1CH_HACK(channel,edge,high_byte)
template<typename __data_dest_t>
void PACKER_CAMAC_LECROY_2277_1CH_HACK::__packer(__data_dest_t &__buffer,uint32 channel
                                                                        ,uint32 edge
                                                                        ,uint32 high_byte)
{
  // MEMBER(DATA16 data[16] NO_INDEX_LIST);
  // UINT32 ch_data NOENCODE
  // {
    //  0_15: value;
    //    16: edge = CHECK(edge);
    // 17_21: channel = CHECK(channel);
    // 24_31: high = CHECK(high_byte);
    // ENCODE(data APPEND_LIST,(value=value));
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_LECROY_2277_1CH_HACK::__packer,uint32 channel
                                                                     ,uint32 edge
                                                                     ,uint32 high_byte);

/** END_PACKER ********************************************************/

//
// Generating code for: CAMAC_LECROY_4434
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for CAMAC_LECROY_4434.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_LECROY_4434(channels)
#if !PACKER_CODE
# define DECLARED_UNPACK_CAMAC_LECROY_4434
class CAMAC_LECROY_4434
#else//PACKER_CODE
# define DECLARED_PACKER_CAMAC_LECROY_4434
class PACKER_CAMAC_LECROY_4434
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA24,DATA24,32> data;
  // list(0<=index<channels)

    // UINT32 ch_data NOENCODE
    // {
      //  0_23: value;
      // 24_31: 0;
      // ENCODE(data[index],(value=value));
    // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 channels);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 channels);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 channels);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(CAMAC_LECROY_4434);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for CAMAC_LECROY_4434.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_LECROY_4434(channels)
template<typename __data_src_t>
void CAMAC_LECROY_4434::__unpack(__data_src_t &__buffer,uint32 channels)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_23: value;
      // 24_31: 0;
      // ENCODE(data[index],(value=value));
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 value : 24; // 0..23
        uint32 unnamed_24_31 : 8; // 24..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 unnamed_24_31 : 8; // 24..31
        uint32 value : 24; // 0..23
#endif
      };
      uint32  u32;
    } ch_data;
    READ_FROM_BUFFER_FULL(31,uint32 ,ch_data,ch_data.u32);
    CHECK_BITS_EQUAL(29,ch_data.unnamed_24_31,0);
    {
      typedef __typeof__(*(&(data))) __array_t;
      typedef typename __array_t::item_t __item_t;
      __item_t &__item = data.insert_index(30,index);
      __item.value = ch_data.value;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_LECROY_4434::__unpack,uint32 channels);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for CAMAC_LECROY_4434.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_LECROY_4434(channels)
template<typename __data_src_t>
bool CAMAC_LECROY_4434::__match(__data_src_t &__buffer,uint32 channels)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_23: value;
      // 24_31: 0;
      // ENCODE(data[index],(value=value));
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 value : 24; // 0..23
        uint32 unnamed_24_31 : 8; // 24..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 unnamed_24_31 : 8; // 24..31
        uint32 value : 24; // 0..23
#endif
      };
      uint32  u32;
    } ch_data;
    READ_FROM_BUFFER_FULL(31,uint32 ,ch_data,ch_data.u32);
    MATCH_BITS_EQUAL(29,ch_data.unnamed_24_31,0);
    return true;
    return false;
  }
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,CAMAC_LECROY_4434::__match,uint32 channels);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for CAMAC_LECROY_4434.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_LECROY_4434(channels)
template<typename __data_dest_t>
void PACKER_CAMAC_LECROY_4434::__packer(__data_dest_t &__buffer,uint32 channels)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS);
  // list(0<=index<channels)

  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_23: value;
      // 24_31: 0;
      // ENCODE(data[index],(value=value));
    // }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_LECROY_4434::__packer,uint32 channels);

/** END_PACKER ********************************************************/

//
// Generating code for: CAMAC_PHILLIPS_7164
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for CAMAC_PHILLIPS_7164.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_PHILLIPS_7164(channels,mark_channel_no)
#if !PACKER_CODE
# define DECLARED_UNPACK_CAMAC_PHILLIPS_7164
class CAMAC_PHILLIPS_7164
#else//PACKER_CODE
# define DECLARED_PACKER_CAMAC_PHILLIPS_7164
class PACKER_CAMAC_PHILLIPS_7164
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA12 data[16] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA12,DATA12,16> data;
  // list(0<=index<channels)

    // if(mark_channel_no)

    // else

      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_15: channel = CHECK(index);
        // ENCODE(data[index],(value=value));
      // }
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // ENCODE(data[index],(value=value));
      // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 channels,uint32 mark_channel_no);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 channels,uint32 mark_channel_no);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 channels,uint32 mark_channel_no);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(CAMAC_PHILLIPS_7164);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for CAMAC_PHILLIPS_7164.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_PHILLIPS_7164(channels,mark_channel_no)
template<typename __data_src_t>
void CAMAC_PHILLIPS_7164::__unpack(__data_src_t &__buffer,uint32 channels
                                                         ,uint32 mark_channel_no)
{
  // MEMBER(DATA12 data[16] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // if(mark_channel_no)

    // else

    if (mark_channel_no)
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_15: channel = CHECK(index);
        // ENCODE(data[index],(value=value));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 channel : 4; // 12..15
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 channel : 4; // 12..15
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(47,uint16 ,ch_data,ch_data.u16);
      CHECK_BITS_EQUAL(45,ch_data.channel,index);
      {
        typedef __typeof__(*(&(data))) __array_t;
        typedef typename __array_t::item_t __item_t;
        __item_t &__item = data.insert_index(46,index);
        __item.value = ch_data.value;
      }
    }

    else
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // ENCODE(data[index],(value=value));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 dummy_12_15 : 4;
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 dummy_12_15 : 4;
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(55,uint16 ,ch_data,ch_data.u16);
      CHECK_UNNAMED_BITS_ZERO(55,ch_data.u16,0xf000);
      {
        typedef __typeof__(*(&(data))) __array_t;
        typedef typename __array_t::item_t __item_t;
        __item_t &__item = data.insert_index(54,index);
        __item.value = ch_data.value;
      }
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_PHILLIPS_7164::__unpack,uint32 channels
                                                              ,uint32 mark_channel_no);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for CAMAC_PHILLIPS_7164.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_PHILLIPS_7164(channels,mark_channel_no)
template<typename __data_src_t>
bool CAMAC_PHILLIPS_7164::__match(__data_src_t &__buffer,uint32 channels
                                                        ,uint32 mark_channel_no)
{
  // MEMBER(DATA12 data[16] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // if(mark_channel_no)

    // else

    if (mark_channel_no)
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_15: channel = CHECK(index);
        // ENCODE(data[index],(value=value));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 channel : 4; // 12..15
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 channel : 4; // 12..15
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(47,uint16 ,ch_data,ch_data.u16);
      MATCH_BITS_EQUAL(45,ch_data.channel,index);
      return true;
      return false;
    }

    else
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // ENCODE(data[index],(value=value));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 dummy_12_15 : 4;
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 dummy_12_15 : 4;
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(55,uint16 ,ch_data,ch_data.u16);
      MATCH_UNNAMED_BITS_ZERO(55,ch_data.u16,0xf000);
      return true;
      return false;
    }
    return false;
  }
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,CAMAC_PHILLIPS_7164::__match,uint32 channels
                                                             ,uint32 mark_channel_no);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for CAMAC_PHILLIPS_7164.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_PHILLIPS_7164(channels,mark_channel_no)
template<typename __data_dest_t>
void PACKER_CAMAC_PHILLIPS_7164::__packer(__data_dest_t &__buffer,uint32 channels
                                                                 ,uint32 mark_channel_no)
{
  // MEMBER(DATA12 data[16] ZERO_SUPPRESS);
  // list(0<=index<channels)

  {
    // if(mark_channel_no)

    // else

    if (mark_channel_no)
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_15: channel = CHECK(index);
        // ENCODE(data[index],(value=value));
      // }
    }

    else
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // ENCODE(data[index],(value=value));
      // }
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_PHILLIPS_7164::__packer,uint32 channels
                                                              ,uint32 mark_channel_no);

/** END_PACKER ********************************************************/

//
// Generating code for: CAMAC_SILENA_4418
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for CAMAC_SILENA_4418.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_SILENA_4418(channels,mark_channel_no)
#if !PACKER_CODE
# define DECLARED_UNPACK_CAMAC_SILENA_4418
class CAMAC_SILENA_4418
#else//PACKER_CODE
# define DECLARED_PACKER_CAMAC_SILENA_4418
class PACKER_CAMAC_SILENA_4418
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA12_OVERFLOW data[8] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA12_OVERFLOW,DATA12_OVERFLOW,8> data;
  // list(0<=index<channels)

    // if(mark_channel_no)

    // else

      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_14: channel = CHECK(index);
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 channels,uint32 mark_channel_no);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 channels,uint32 mark_channel_no);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 channels,uint32 mark_channel_no);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(CAMAC_SILENA_4418);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for CAMAC_SILENA_4418.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_SILENA_4418(channels,mark_channel_no)
template<typename __data_src_t>
void CAMAC_SILENA_4418::__unpack(__data_src_t &__buffer,uint32 channels,uint32 mark_channel_no)
{
  // MEMBER(DATA12_OVERFLOW data[8] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // if(mark_channel_no)

    // else

    if (mark_channel_no)
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_14: channel = CHECK(index);
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 channel : 3; // 12..14
          uint16 overflow : 1; // 15
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 overflow : 1; // 15
          uint16 channel : 3; // 12..14
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(73,uint16 ,ch_data,ch_data.u16);
      CHECK_BITS_EQUAL(70,ch_data.channel,index);
      {
        typedef __typeof__(*(&(data))) __array_t;
        typedef typename __array_t::item_t __item_t;
        __item_t &__item = data.insert_index(72,index);
        __item.value = ch_data.value;
        __item.overflow = ch_data.overflow;
      }
    }

    else
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 dummy_12_14 : 3;
          uint16 overflow : 1; // 15
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 overflow : 1; // 15
          uint16 dummy_12_14 : 3;
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(82,uint16 ,ch_data,ch_data.u16);
      CHECK_UNNAMED_BITS_ZERO(82,ch_data.u16,0x7000);
      {
        typedef __typeof__(*(&(data))) __array_t;
        typedef typename __array_t::item_t __item_t;
        __item_t &__item = data.insert_index(81,index);
        __item.value = ch_data.value;
        __item.overflow = ch_data.overflow;
      }
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_SILENA_4418::__unpack,uint32 channels
                                                            ,uint32 mark_channel_no);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for CAMAC_SILENA_4418.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_SILENA_4418(channels,mark_channel_no)
template<typename __data_src_t>
bool CAMAC_SILENA_4418::__match(__data_src_t &__buffer,uint32 channels,uint32 mark_channel_no)
{
  // MEMBER(DATA12_OVERFLOW data[8] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // if(mark_channel_no)

    // else

    if (mark_channel_no)
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_14: channel = CHECK(index);
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 channel : 3; // 12..14
          uint16 overflow : 1; // 15
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 overflow : 1; // 15
          uint16 channel : 3; // 12..14
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(73,uint16 ,ch_data,ch_data.u16);
      MATCH_BITS_EQUAL(70,ch_data.channel,index);
      return true;
      return false;
    }

    else
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint16 value : 12; // 0..11
          uint16 dummy_12_14 : 3;
          uint16 overflow : 1; // 15
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint16 overflow : 1; // 15
          uint16 dummy_12_14 : 3;
          uint16 value : 12; // 0..11
#endif
        };
        uint16  u16;
      } ch_data;
      READ_FROM_BUFFER_FULL(82,uint16 ,ch_data,ch_data.u16);
      MATCH_UNNAMED_BITS_ZERO(82,ch_data.u16,0x7000);
      return true;
      return false;
    }
    return false;
  }
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,CAMAC_SILENA_4418::__match,uint32 channels
                                                           ,uint32 mark_channel_no);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for CAMAC_SILENA_4418.
 *
 * Do not edit - automatically generated.
 */

// CAMAC_SILENA_4418(channels,mark_channel_no)
template<typename __data_dest_t>
void PACKER_CAMAC_SILENA_4418::__packer(__data_dest_t &__buffer,uint32 channels
                                                               ,uint32 mark_channel_no)
{
  // MEMBER(DATA12_OVERFLOW data[8] ZERO_SUPPRESS);
  // list(0<=index<channels)

  {
    // if(mark_channel_no)

    // else

    if (mark_channel_no)
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        // 12_14: channel = CHECK(index);
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
    }

    else
    {
      // UINT16 ch_data NOENCODE
      // {
        //  0_11: value;
        //    15: overflow;
        // ENCODE(data[index],(value=value,overflow=overflow));
      // }
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CAMAC_SILENA_4418::__packer,uint32 channels
                                                            ,uint32 mark_channel_no);

/** END_PACKER ********************************************************/

//
// Generating code for: CROS3_REWRITE
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for CROS3_REWRITE.
 *
 * Do not edit - automatically generated.
 */

// CROS3_REWRITE(ccb_id)
#if !PACKER_CODE
# define DECLARED_UNPACK_CROS3_REWRITE
class CROS3_REWRITE
#else//PACKER_CODE
# define DECLARED_PACKER_CROS3_REWRITE
class PACKER_CROS3_REWRITE
#endif//PACKER_CODE

{
public:
  // MEMBER(WIRE_START_END data[32768] ZERO_SUPPRESS);
  raw_array_zero_suppress<WIRE_START_END,WIRE_START_END,32768> data;
  // UINT32 h1
  // {
    //  0_15: data_size;
    //    16: threshold_curve;
    //    17: leading_edge;
    //    18: data;
    // 20_23: trigger_time;
    // 24_27: ccb_id = MATCH(ccb_id);
    // 28_31: event_counter;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 data_size : 16; // 0..15
      uint32 threshold_curve : 1; // 16
      uint32 leading_edge : 1; // 17
      uint32 data : 1; // 18
      uint32 dummy_19 : 1;
      uint32 trigger_time : 4; // 20..23
      uint32 ccb_id : 4; // 24..27
      uint32 event_counter : 4; // 28..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 event_counter : 4; // 28..31
      uint32 ccb_id : 4; // 24..27
      uint32 trigger_time : 4; // 20..23
      uint32 dummy_19 : 1;
      uint32 data : 1; // 18
      uint32 leading_edge : 1; // 17
      uint32 threshold_curve : 1; // 16
      uint32 data_size : 16; // 0..15
#endif
    };
    uint32  u32;
  } h1;
  // if(h1.data)

  // else

    // UINT32 h2
    // {
      //  0_01: read_out_mode;
      //     4: pulser_enabled;
      //  8_10: statistics;
      //    11: both_edges;
      // 12_19: slices;
      // 20_21: scale;
      //    31: odd_length16;
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 read_out_mode : 2; // 0..1
        uint32 dummy_2_3 : 2;
        uint32 pulser_enabled : 1; // 4
        uint32 dummy_5_7 : 3;
        uint32 statistics : 3; // 8..10
        uint32 both_edges : 1; // 11
        uint32 slices : 8; // 12..19
        uint32 scale : 2; // 20..21
        uint32 dummy_22_30 : 9;
        uint32 odd_length16 : 1; // 31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 odd_length16 : 1; // 31
        uint32 dummy_22_30 : 9;
        uint32 scale : 2; // 20..21
        uint32 slices : 8; // 12..19
        uint32 both_edges : 1; // 11
        uint32 statistics : 3; // 8..10
        uint32 dummy_5_7 : 3;
        uint32 pulser_enabled : 1; // 4
        uint32 dummy_2_3 : 2;
        uint32 read_out_mode : 2; // 0..1
#endif
      };
      uint32  u32;
    } h2;
    // if(h1.leading_edge)

    // else

      // list(0<=index<static_cast<uint32>((h1.data_size - h2.odd_length16)))

        // UINT32 ch_data NOENCODE
        // {
          //  0_07: start_slice1;
          //  8_15: wire1;
          // 16_23: start_slice2;
          // 24_31: wire2;
          // ENCODE(data[(index * 2)],(wire=wire1,start=start_slice1,stop=0));
          // ENCODE(data[((index * 2) + 1)],(wire=wire2,start=start_slice2,
                                          // stop=0));
        // }
      // if(h2.odd_length16)

        // UINT32 ch_data_odd NOENCODE
        // {
          //  0_07: start_slice1;
          //  8_15: wire1;
          // 16_23: start_slice2 = CHECK(255);
          // 24_31: wire2 = CHECK(0);
          // ENCODE(data[((h1.data_size - 1) * 2)],(wire=wire1,start=start_slice1,
                                                 // stop=0));
        // }
      // list(0<=index<h1.data_size)

        // UINT32 ch_data NOENCODE
        // {
          //  0_07: start_slice;
          //  8_15: wire;
          // 16_23: end_slice;
          // ENCODE(data[index],(wire=wire,start=start_slice,stop=end_slice));
        // }
    // if(h1.threshold_curve)

    // else

      // UINT32 trc_h2
      // {
        //  0_01: read_out_mode;
        //     4: pulser_enabled;
        //  8_10: statistics;
        //    11: both_edges;
        // 12_19: threshold_start;
        // 20_23: threshold_step;
        // 24_28: boards;
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint32 read_out_mode : 2; // 0..1
          uint32 dummy_2_3 : 2;
          uint32 pulser_enabled : 1; // 4
          uint32 dummy_5_7 : 3;
          uint32 statistics : 3; // 8..10
          uint32 both_edges : 1; // 11
          uint32 threshold_start : 8; // 12..19
          uint32 threshold_step : 4; // 20..23
          uint32 boards : 5; // 24..28
          uint32 dummy_29_31 : 3;
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint32 dummy_29_31 : 3;
          uint32 boards : 5; // 24..28
          uint32 threshold_step : 4; // 20..23
          uint32 threshold_start : 8; // 12..19
          uint32 both_edges : 1; // 11
          uint32 statistics : 3; // 8..10
          uint32 dummy_5_7 : 3;
          uint32 pulser_enabled : 1; // 4
          uint32 dummy_2_3 : 2;
          uint32 read_out_mode : 2; // 0..1
#endif
        };
        uint32  u32;
      } trc_h2;
      // list(0<=board<trc_h2.boards)

        // UINT32 trc_h3 NOENCODE
        // {
          //  0_07: test_pulser_even;
          //  8_15: test_pulser_odd;
          // 16_23: threshold_steps;
          // 28_31: ad_id;
        // }
        // list(0<=index_thr<trc_h3.threshold_steps)

          // list(0<=index_wire2<8)

            // UINT32 ch_counts NOENCODE
            // {
              //  0_11: counts1;
              // 12_15: wire1;
              // 16_27: counts2;
              // 28_31: wire2;
            // }
      // UINT32 dummy_h2 NOENCODE
      // {
        //  0_31: 0;
      // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 ccb_id);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 ccb_id);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 ccb_id);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(CROS3_REWRITE);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for CROS3_REWRITE.
 *
 * Do not edit - automatically generated.
 */

// CROS3_REWRITE(ccb_id)
template<typename __data_src_t>
void CROS3_REWRITE::__unpack(__data_src_t &__buffer,uint32 ccb_id)
{
  // MEMBER(WIRE_START_END data[32768] ZERO_SUPPRESS);
  // UINT32 h1
  // {
    //  0_15: data_size;
    //    16: threshold_curve;
    //    17: leading_edge;
    //    18: data;
    // 20_23: trigger_time;
    // 24_27: ccb_id = MATCH(ccb_id);
    // 28_31: event_counter;
  // }
  READ_FROM_BUFFER_FULL(99,uint32 ,h1,h1.u32);
  CHECK_BITS_EQUAL(97,h1.ccb_id,ccb_id);
  CHECK_UNNAMED_BITS_ZERO(99,h1.u32,0x00080000);
  // if(h1.data)

  // else

  if (h1.data)
  {
    // UINT32 h2
    // {
      //  0_01: read_out_mode;
      //     4: pulser_enabled;
      //  8_10: statistics;
      //    11: both_edges;
      // 12_19: slices;
      // 20_21: scale;
      //    31: odd_length16;
    // }
    READ_FROM_BUFFER_FULL(111,uint32 ,h2,h2.u32);
    CHECK_UNNAMED_BITS_ZERO(111,h2.u32,0x7fc000ec);
    // if(h1.leading_edge)

    // else

    if (h1.leading_edge)
    {
      // list(0<=index<static_cast<uint32>((h1.data_size - h2.odd_length16)))

      for (uint32 index = 0; index < (uint32) (static_cast<uint32>((h1.data_size - h2.odd_length16))); ++index)
      {
        // UINT32 ch_data NOENCODE
        // {
          //  0_07: start_slice1;
          //  8_15: wire1;
          // 16_23: start_slice2;
          // 24_31: wire2;
          // ENCODE(data[(index * 2)],(wire=wire1,start=start_slice1,stop=0));
          // ENCODE(data[((index * 2) + 1)],(wire=wire2,start=start_slice2,
                                          // stop=0));
        // }
        union
        {
          struct
          {
#if __BYTE_ORDER == __LITTLE_ENDIAN
            uint32 start_slice1 : 8; // 0..7
            uint32 wire1 : 8; // 8..15
            uint32 start_slice2 : 8; // 16..23
            uint32 wire2 : 8; // 24..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
            uint32 wire2 : 8; // 24..31
            uint32 start_slice2 : 8; // 16..23
            uint32 wire1 : 8; // 8..15
            uint32 start_slice1 : 8; // 0..7
#endif
          };
          uint32  u32;
        } ch_data;
        READ_FROM_BUFFER_FULL(125,uint32 ,ch_data,ch_data.u32);
        {
          typedef __typeof__(*(&(data))) __array_t;
          typedef typename __array_t::item_t __item_t;
          __item_t &__item = data.insert_index(122,(index * 2));
          __item.wire = ch_data.wire1;
          __item.start = ch_data.start_slice1;
          __item.stop = 0;
        }
        {
          typedef __typeof__(*(&(data))) __array_t;
          typedef typename __array_t::item_t __item_t;
          __item_t &__item = data.insert_index(124,((index * 2) + 1));
          __item.wire = ch_data.wire2;
          __item.start = ch_data.start_slice2;
          __item.stop = 0;
        }
      }
      // if(h2.odd_length16)

      if (h2.odd_length16)
      {
        // UINT32 ch_data_odd NOENCODE
        // {
          //  0_07: start_slice1;
          //  8_15: wire1;
          // 16_23: start_slice2 = CHECK(255);
          // 24_31: wire2 = CHECK(0);
          // ENCODE(data[((h1.data_size - 1) * 2)],(wire=wire1,start=start_slice1,
                                                 // stop=0));
        // }
        union
        {
          struct
          {
#if __BYTE_ORDER == __LITTLE_ENDIAN
            uint32 start_slice1 : 8; // 0..7
            uint32 wire1 : 8; // 8..15
            uint32 start_slice2 : 8; // 16..23
            uint32 wire2 : 8; // 24..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
            uint32 wire2 : 8; // 24..31
            uint32 start_slice2 : 8; // 16..23
            uint32 wire1 : 8; // 8..15
            uint32 start_slice1 : 8; // 0..7
#endif
          };
          uint32  u32;
        } ch_data_odd;
        READ_FROM_BUFFER_FULL(137,uint32 ,ch_data_odd,ch_data_odd.u32);
        CHECK_BITS_EQUAL(133,ch_data_odd.start_slice2,255);
        CHECK_BITS_EQUAL(134,ch_data_odd.wire2,0);
        {
          typedef __typeof__(*(&(data))) __array_t;
          typedef typename __array_t::item_t __item_t;
          __item_t &__item = data.insert_index(136,((h1.data_size - 1) * 2));
          __item.wire = ch_data_odd.wire1;
          __item.start = ch_data_odd.start_slice1;
          __item.stop = 0;
        }
      }
    }

    else
    {
      // list(0<=index<h1.data_size)

      for (uint32 index = 0; index < (uint32) (h1.data_size); ++index)
      {
        // UINT32 ch_data NOENCODE
        // {
          //  0_07: start_slice;
          //  8_15: wire;
          // 16_23: end_slice;
          // ENCODE(data[index],(wire=wire,start=start_slice,stop=end_slice));
        // }
        union
        {
          struct
          {
#if __BYTE_ORDER == __LITTLE_ENDIAN
            uint32 start_slice : 8; // 0..7
            uint32 wire : 8; // 8..15
            uint32 end_slice : 8; // 16..23
            uint32 dummy_24_31 : 8;
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
            uint32 dummy_24_31 : 8;
            uint32 end_slice : 8; // 16..23
            uint32 wire : 8; // 8..15
            uint32 start_slice : 8; // 0..7
#endif
          };
          uint32  u32;
        } ch_data;
        READ_FROM_BUFFER_FULL(150,uint32 ,ch_data,ch_data.u32);
        CHECK_UNNAMED_BITS_ZERO(150,ch_data.u32,0xff000000);
        {
          typedef __typeof__(*(&(data))) __array_t;
          typedef typename __array_t::item_t __item_t;
          __item_t &__item = data.insert_index(149,index);
          __item.wire = ch_data.wire;
          __item.start = ch_data.start_slice;
          __item.stop = ch_data.end_slice;
        }
      }
    }
  }

  else
  {
    // if(h1.threshold_curve)

    // else

    if (h1.threshold_curve)
    {
      // UINT32 trc_h2
      // {
        //  0_01: read_out_mode;
        //     4: pulser_enabled;
        //  8_10: statistics;
        //    11: both_edges;
        // 12_19: threshold_start;
        // 20_23: threshold_step;
        // 24_28: boards;
      // }
      READ_FROM_BUFFER_FULL(167,uint32 ,trc_h2,trc_h2.u32);
      CHECK_UNNAMED_BITS_ZERO(167,trc_h2.u32,0xe00000ec);
      // list(0<=board<trc_h2.boards)

      for (uint32 board = 0; board < (uint32) (trc_h2.boards); ++board)
      {
        // UINT32 trc_h3 NOENCODE
        // {
          //  0_07: test_pulser_even;
          //  8_15: test_pulser_odd;
          // 16_23: threshold_steps;
          // 28_31: ad_id;
        // }
        union
        {
          struct
          {
#if __BYTE_ORDER == __LITTLE_ENDIAN
            uint32 test_pulser_even : 8; // 0..7
            uint32 test_pulser_odd : 8; // 8..15
            uint32 threshold_steps : 8; // 16..23
            uint32 dummy_24_27 : 4;
            uint32 ad_id : 4; // 28..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
            uint32 ad_id : 4; // 28..31
            uint32 dummy_24_27 : 4;
            uint32 threshold_steps : 8; // 16..23
            uint32 test_pulser_odd : 8; // 8..15
            uint32 test_pulser_even : 8; // 0..7
#endif
          };
          uint32  u32;
        } trc_h3;
        READ_FROM_BUFFER_FULL(176,uint32 ,trc_h3,trc_h3.u32);
        CHECK_UNNAMED_BITS_ZERO(176,trc_h3.u32,0x0f000000);
        // list(0<=index_thr<trc_h3.threshold_steps)

        for (uint32 index_thr = 0; index_thr < (uint32) (trc_h3.threshold_steps); ++index_thr)
        {
          // list(0<=index_wire2<8)

          for (uint32 index_wire2 = 0; index_wire2 < (uint32) (8); ++index_wire2)
          {
            // UINT32 ch_counts NOENCODE
            // {
              //  0_11: counts1;
              // 12_15: wire1;
              // 16_27: counts2;
              // 28_31: wire2;
            // }
            union
            {
              struct
              {
#if __BYTE_ORDER == __LITTLE_ENDIAN
                uint32 counts1 : 12; // 0..11
                uint32 wire1 : 4; // 12..15
                uint32 counts2 : 12; // 16..27
                uint32 wire2 : 4; // 28..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
                uint32 wire2 : 4; // 28..31
                uint32 counts2 : 12; // 16..27
                uint32 wire1 : 4; // 12..15
                uint32 counts1 : 12; // 0..11
#endif
              };
              uint32  u32;
            } ch_counts;
            READ_FROM_BUFFER_FULL(187,uint32 ,ch_counts,ch_counts.u32);
          }
        }
      }
    }

    else
    {
      // UINT32 dummy_h2 NOENCODE
      // {
        //  0_31: 0;
      // }
      union
      {
        struct
        {
#if __BYTE_ORDER == __LITTLE_ENDIAN
          uint32 unnamed_0_31 : 32; // 0..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
          uint32 unnamed_0_31 : 32; // 0..31
#endif
        };
        uint32  u32;
      } dummy_h2;
      READ_FROM_BUFFER_FULL(197,uint32 ,dummy_h2,dummy_h2.u32);
      CHECK_BITS_EQUAL(196,dummy_h2.unnamed_0_31,0);
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CROS3_REWRITE::__unpack,uint32 ccb_id);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for CROS3_REWRITE.
 *
 * Do not edit - automatically generated.
 */

// CROS3_REWRITE(ccb_id)
template<typename __data_src_t>
bool CROS3_REWRITE::__match(__data_src_t &__buffer,uint32 ccb_id)
{
  // MEMBER(WIRE_START_END data[32768] ZERO_SUPPRESS);
  // UINT32 h1
  // {
    //  0_15: data_size;
    //    16: threshold_curve;
    //    17: leading_edge;
    //    18: data;
    // 20_23: trigger_time;
    // 24_27: ccb_id = MATCH(ccb_id);
    // 28_31: event_counter;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 data_size : 16; // 0..15
      uint32 threshold_curve : 1; // 16
      uint32 leading_edge : 1; // 17
      uint32 data : 1; // 18
      uint32 dummy_19 : 1;
      uint32 trigger_time : 4; // 20..23
      uint32 ccb_id : 4; // 24..27
      uint32 event_counter : 4; // 28..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 event_counter : 4; // 28..31
      uint32 ccb_id : 4; // 24..27
      uint32 trigger_time : 4; // 20..23
      uint32 dummy_19 : 1;
      uint32 data : 1; // 18
      uint32 leading_edge : 1; // 17
      uint32 threshold_curve : 1; // 16
      uint32 data_size : 16; // 0..15
#endif
    };
    uint32  u32;
  } __h1;
  READ_FROM_BUFFER_FULL(99,uint32 ,h1,__h1.u32);
  MATCH_BITS_EQUAL(97,__h1.ccb_id,ccb_id);
  MATCH_UNNAMED_BITS_ZERO(99,__h1.u32,0x00080000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,CROS3_REWRITE::__match,uint32 ccb_id);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for CROS3_REWRITE.
 *
 * Do not edit - automatically generated.
 */

// CROS3_REWRITE(ccb_id)
template<typename __data_dest_t>
void PACKER_CROS3_REWRITE::__packer(__data_dest_t &__buffer,uint32 ccb_id)
{
  // MEMBER(WIRE_START_END data[32768] ZERO_SUPPRESS);
  // UINT32 h1
  // {
    //  0_15: data_size;
    //    16: threshold_curve;
    //    17: leading_edge;
    //    18: data;
    // 20_23: trigger_time;
    // 24_27: ccb_id = MATCH(ccb_id);
    // 28_31: event_counter;
  // }
  // if(h1.data)

  // else

  if (h1.data)
  {
    // UINT32 h2
    // {
      //  0_01: read_out_mode;
      //     4: pulser_enabled;
      //  8_10: statistics;
      //    11: both_edges;
      // 12_19: slices;
      // 20_21: scale;
      //    31: odd_length16;
    // }
    // if(h1.leading_edge)

    // else

    if (h1.leading_edge)
    {
      // list(0<=index<static_cast<uint32>((h1.data_size - h2.odd_length16)))

      {
        // UINT32 ch_data NOENCODE
        // {
          //  0_07: start_slice1;
          //  8_15: wire1;
          // 16_23: start_slice2;
          // 24_31: wire2;
          // ENCODE(data[(index * 2)],(wire=wire1,start=start_slice1,stop=0));
          // ENCODE(data[((index * 2) + 1)],(wire=wire2,start=start_slice2,
                                          // stop=0));
        // }
      }
      // if(h2.odd_length16)

      if (h2.odd_length16)
      {
        // UINT32 ch_data_odd NOENCODE
        // {
          //  0_07: start_slice1;
          //  8_15: wire1;
          // 16_23: start_slice2 = CHECK(255);
          // 24_31: wire2 = CHECK(0);
          // ENCODE(data[((h1.data_size - 1) * 2)],(wire=wire1,start=start_slice1,
                                                 // stop=0));
        // }
      }
    }

    else
    {
      // list(0<=index<h1.data_size)

      {
        // UINT32 ch_data NOENCODE
        // {
          //  0_07: start_slice;
          //  8_15: wire;
          // 16_23: end_slice;
          // ENCODE(data[index],(wire=wire,start=start_slice,stop=end_slice));
        // }
      }
    }
  }

  else
  {
    // if(h1.threshold_curve)

    // else

    if (h1.threshold_curve)
    {
      // UINT32 trc_h2
      // {
        //  0_01: read_out_mode;
        //     4: pulser_enabled;
        //  8_10: statistics;
        //    11: both_edges;
        // 12_19: threshold_start;
        // 20_23: threshold_step;
        // 24_28: boards;
      // }
      // list(0<=board<trc_h2.boards)

      {
        // UINT32 trc_h3 NOENCODE
        // {
          //  0_07: test_pulser_even;
          //  8_15: test_pulser_odd;
          // 16_23: threshold_steps;
          // 28_31: ad_id;
        // }
        // list(0<=index_thr<trc_h3.threshold_steps)

        {
          // list(0<=index_wire2<8)

          {
            // UINT32 ch_counts NOENCODE
            // {
              //  0_11: counts1;
              // 12_15: wire1;
              // 16_27: counts2;
              // 28_31: wire2;
            // }
          }
        }
      }
    }

    else
    {
      // UINT32 dummy_h2 NOENCODE
      // {
        //  0_31: 0;
      // }
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,CROS3_REWRITE::__packer,uint32 ccb_id);

/** END_PACKER ********************************************************/

//
// Generating code for: DUMMY_WORD
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for DUMMY_WORD.
 *
 * Do not edit - automatically generated.
 */

// DUMMY_WORD()
#if !PACKER_CODE
# define DECLARED_UNPACK_DUMMY_WORD
class DUMMY_WORD
#else//PACKER_CODE
# define DECLARED_PACKER_DUMMY_WORD
class PACKER_DUMMY_WORD
#endif//PACKER_CODE

{
public:
  // UINT32 dummy_word;
  uint32  dummy_word;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(DUMMY_WORD);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for DUMMY_WORD.
 *
 * Do not edit - automatically generated.
 */

// DUMMY_WORD()
template<typename __data_src_t>
void DUMMY_WORD::__unpack(__data_src_t &__buffer)
{
  // UINT32 dummy_word;
  READ_FROM_BUFFER(204,uint32 ,dummy_word);
}
FORCE_IMPL_DATA_SRC_FCN(void,DUMMY_WORD::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for DUMMY_WORD.
 *
 * Do not edit - automatically generated.
 */

// DUMMY_WORD()
template<typename __data_src_t>
bool DUMMY_WORD::__match(__data_src_t &__buffer)
{
  // UINT32 dummy_word;
  uint32  __dummy_word;
  READ_FROM_BUFFER(204,uint32 ,__dummy_word);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN(bool,DUMMY_WORD::__match);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for DUMMY_WORD.
 *
 * Do not edit - automatically generated.
 */

// DUMMY_WORD()
template<typename __data_dest_t>
void PACKER_DUMMY_WORD::__packer(__data_dest_t &__buffer)
{
  // UINT32 dummy_word;
}
FORCE_IMPL_DATA_SRC_FCN(void,DUMMY_WORD::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: EXT_CROS3
//

// Structure is external.  Must be provided by the user


/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for EXT_CROS3.
 *
 * Do not edit - automatically generated.
 */


/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for EXT_CROS3.
 *
 * Do not edit - automatically generated.
 */


/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for EXT_CROS3.
 *
 * Do not edit - automatically generated.
 */


/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for EXT_CROS3.
 *
 * Do not edit - automatically generated.
 */


/** END_PACKER ********************************************************/

//
// Generating code for: EXT_SST
//

// Structure is external.  Must be provided by the user


/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for EXT_SST.
 *
 * Do not edit - automatically generated.
 */


/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for EXT_SST.
 *
 * Do not edit - automatically generated.
 */


/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for EXT_SST.
 *
 * Do not edit - automatically generated.
 */


/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for EXT_SST.
 *
 * Do not edit - automatically generated.
 */


/** END_PACKER ********************************************************/

//
// Generating code for: FASTBUS_LECROY_1875
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for FASTBUS_LECROY_1875.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1875(geom,channels)
#if !PACKER_CODE
# define DECLARED_UNPACK_FASTBUS_LECROY_1875
class FASTBUS_LECROY_1875
#else//PACKER_CODE
# define DECLARED_PACKER_FASTBUS_LECROY_1875
class PACKER_FASTBUS_LECROY_1875
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA12_RANGE data[64] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA12_RANGE,DATA12_RANGE,64> data;
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_21: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom,uint32 channels);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom,uint32 channels);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom,uint32 channels);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(FASTBUS_LECROY_1875);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for FASTBUS_LECROY_1875.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1875(geom,channels)
template<typename __data_src_t>
void FASTBUS_LECROY_1875::__unpack(__data_src_t &__buffer,uint32 geom,uint32 channels)
{
  // MEMBER(DATA12_RANGE data[64] ZERO_SUPPRESS);
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_21: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 12; // 0..11
      uint32 dummy_12_15 : 4;
      uint32 channel : 6; // 16..21
      uint32 dummy_22 : 1;
      uint32 range : 1; // 23
      uint32 n : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 n : 3; // 24..26
      uint32 range : 1; // 23
      uint32 dummy_22 : 1;
      uint32 channel : 6; // 16..21
      uint32 dummy_12_15 : 4;
      uint32 value : 12; // 0..11
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(224,uint32 ,ch_data,ch_data.u32);
  CHECK_BITS_RANGE_MAX(219,ch_data.channel,(channels - 1));
  CHECK_BITS_EQUAL(221,ch_data.n,0);
  CHECK_BITS_EQUAL(222,ch_data.geom,geom);
  CHECK_UNNAMED_BITS_ZERO(224,ch_data.u32,0x0040f000);
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(223,ch_data.channel);
    __item.value = ch_data.value;
    __item.range = ch_data.range;
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,FASTBUS_LECROY_1875::__unpack,uint32 geom
                                                              ,uint32 channels);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for FASTBUS_LECROY_1875.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1875(geom,channels)
template<typename __data_src_t>
bool FASTBUS_LECROY_1875::__match(__data_src_t &__buffer,uint32 geom,uint32 channels)
{
  // MEMBER(DATA12_RANGE data[64] ZERO_SUPPRESS);
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_21: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 12; // 0..11
      uint32 dummy_12_15 : 4;
      uint32 channel : 6; // 16..21
      uint32 dummy_22 : 1;
      uint32 range : 1; // 23
      uint32 n : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 n : 3; // 24..26
      uint32 range : 1; // 23
      uint32 dummy_22 : 1;
      uint32 channel : 6; // 16..21
      uint32 dummy_12_15 : 4;
      uint32 value : 12; // 0..11
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(224,uint32 ,ch_data,ch_data.u32);
  MATCH_BITS_RANGE_MAX(219,ch_data.channel,(channels - 1));
  MATCH_BITS_EQUAL(221,ch_data.n,0);
  MATCH_BITS_EQUAL(222,ch_data.geom,geom);
  MATCH_UNNAMED_BITS_ZERO(224,ch_data.u32,0x0040f000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,FASTBUS_LECROY_1875::__match,uint32 geom
                                                             ,uint32 channels);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for FASTBUS_LECROY_1875.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1875(geom,channels)
template<typename __data_dest_t>
void PACKER_FASTBUS_LECROY_1875::__packer(__data_dest_t &__buffer,uint32 geom
                                                                 ,uint32 channels)
{
  // MEMBER(DATA12_RANGE data[64] ZERO_SUPPRESS);
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_21: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,FASTBUS_LECROY_1875::__packer,uint32 geom
                                                              ,uint32 channels);

/** END_PACKER ********************************************************/

//
// Generating code for: FASTBUS_LECROY_1885
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for FASTBUS_LECROY_1885.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1885(geom,channels)
#if !PACKER_CODE
# define DECLARED_UNPACK_FASTBUS_LECROY_1885
class FASTBUS_LECROY_1885
#else//PACKER_CODE
# define DECLARED_PACKER_FASTBUS_LECROY_1885
class PACKER_FASTBUS_LECROY_1885
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA12_RANGE data[96] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA12_RANGE,DATA12_RANGE,96> data;
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_22: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom,uint32 channels);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom,uint32 channels);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom,uint32 channels);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(FASTBUS_LECROY_1885);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for FASTBUS_LECROY_1885.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1885(geom,channels)
template<typename __data_src_t>
void FASTBUS_LECROY_1885::__unpack(__data_src_t &__buffer,uint32 geom,uint32 channels)
{
  // MEMBER(DATA12_RANGE data[96] ZERO_SUPPRESS);
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_22: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 12; // 0..11
      uint32 dummy_12_15 : 4;
      uint32 channel : 7; // 16..22
      uint32 range : 1; // 23
      uint32 n : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 n : 3; // 24..26
      uint32 range : 1; // 23
      uint32 channel : 7; // 16..22
      uint32 dummy_12_15 : 4;
      uint32 value : 12; // 0..11
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(238,uint32 ,ch_data,ch_data.u32);
  CHECK_BITS_RANGE_MAX(233,ch_data.channel,(channels - 1));
  CHECK_BITS_EQUAL(235,ch_data.n,0);
  CHECK_BITS_EQUAL(236,ch_data.geom,geom);
  CHECK_UNNAMED_BITS_ZERO(238,ch_data.u32,0x0000f000);
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(237,ch_data.channel);
    __item.value = ch_data.value;
    __item.range = ch_data.range;
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,FASTBUS_LECROY_1885::__unpack,uint32 geom
                                                              ,uint32 channels);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for FASTBUS_LECROY_1885.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1885(geom,channels)
template<typename __data_src_t>
bool FASTBUS_LECROY_1885::__match(__data_src_t &__buffer,uint32 geom,uint32 channels)
{
  // MEMBER(DATA12_RANGE data[96] ZERO_SUPPRESS);
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_22: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 12; // 0..11
      uint32 dummy_12_15 : 4;
      uint32 channel : 7; // 16..22
      uint32 range : 1; // 23
      uint32 n : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 n : 3; // 24..26
      uint32 range : 1; // 23
      uint32 channel : 7; // 16..22
      uint32 dummy_12_15 : 4;
      uint32 value : 12; // 0..11
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(238,uint32 ,ch_data,ch_data.u32);
  MATCH_BITS_RANGE_MAX(233,ch_data.channel,(channels - 1));
  MATCH_BITS_EQUAL(235,ch_data.n,0);
  MATCH_BITS_EQUAL(236,ch_data.geom,geom);
  MATCH_UNNAMED_BITS_ZERO(238,ch_data.u32,0x0000f000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,FASTBUS_LECROY_1885::__match,uint32 geom
                                                             ,uint32 channels);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for FASTBUS_LECROY_1885.
 *
 * Do not edit - automatically generated.
 */

// FASTBUS_LECROY_1885(geom,channels)
template<typename __data_dest_t>
void PACKER_FASTBUS_LECROY_1885::__packer(__data_dest_t &__buffer,uint32 geom
                                                                 ,uint32 channels)
{
  // MEMBER(DATA12_RANGE data[96] ZERO_SUPPRESS);
  // UINT32 ch_data NOENCODE
  // {
    //  0_11: value;
    // 16_22: channel = RANGE(0,(channels - 1));
    //    23: range;
    // 24_26: n = CHECK(0);
    // 27_31: geom = MATCH(geom);
    // ENCODE(data[channel],(value=value,range=range));
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,FASTBUS_LECROY_1885::__packer,uint32 geom
                                                              ,uint32 channels);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_STD_VME
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_STD_VME.
 *
 * Do not edit - automatically generated.
 */

// LAND_STD_VME()
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_STD_VME
class LAND_STD_VME
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_STD_VME
class PACKER_LAND_STD_VME
#endif//PACKER_CODE

{
public:
  // UINT32 failure
  // {
    //     0: fail_general;
    //     1: fail_data_corrupt;
    //     2: fail_data_missing;
    //     3: fail_data_too_much;
    //     4: fail_event_counter_mismatch;
    //     5: fail_readout_error_driver;
    //     6: fail_unexpected_trigger;
    //     7: fail_firmware_mismatch;
    //    22: has_multi_trlo_ii_counter0;
    //    23: has_clock_counter_stamp;
    //    24: has_continous_event_counter;
    //    25: has_update_qdc_iped_value;
    //    26: spurious_start_before_tcal;
    //    27: has_no_zero_suppression;
    //    28: has_multi_adctdc_counter0;
    //    29: has_multi_scaler_counter0;
    //    30: has_multi_event;
    //    31: has_time_stamp;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 fail_general : 1; // 0
      uint32 fail_data_corrupt : 1; // 1
      uint32 fail_data_missing : 1; // 2
      uint32 fail_data_too_much : 1; // 3
      uint32 fail_event_counter_mismatch : 1; // 4
      uint32 fail_readout_error_driver : 1; // 5
      uint32 fail_unexpected_trigger : 1; // 6
      uint32 fail_firmware_mismatch : 1; // 7
      uint32 dummy_8_21 : 14;
      uint32 has_multi_trlo_ii_counter0 : 1; // 22
      uint32 has_clock_counter_stamp : 1; // 23
      uint32 has_continous_event_counter : 1; // 24
      uint32 has_update_qdc_iped_value : 1; // 25
      uint32 spurious_start_before_tcal : 1; // 26
      uint32 has_no_zero_suppression : 1; // 27
      uint32 has_multi_adctdc_counter0 : 1; // 28
      uint32 has_multi_scaler_counter0 : 1; // 29
      uint32 has_multi_event : 1; // 30
      uint32 has_time_stamp : 1; // 31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 has_time_stamp : 1; // 31
      uint32 has_multi_event : 1; // 30
      uint32 has_multi_scaler_counter0 : 1; // 29
      uint32 has_multi_adctdc_counter0 : 1; // 28
      uint32 has_no_zero_suppression : 1; // 27
      uint32 spurious_start_before_tcal : 1; // 26
      uint32 has_update_qdc_iped_value : 1; // 25
      uint32 has_continous_event_counter : 1; // 24
      uint32 has_clock_counter_stamp : 1; // 23
      uint32 has_multi_trlo_ii_counter0 : 1; // 22
      uint32 dummy_8_21 : 14;
      uint32 fail_firmware_mismatch : 1; // 7
      uint32 fail_unexpected_trigger : 1; // 6
      uint32 fail_readout_error_driver : 1; // 5
      uint32 fail_event_counter_mismatch : 1; // 4
      uint32 fail_data_too_much : 1; // 3
      uint32 fail_data_missing : 1; // 2
      uint32 fail_data_corrupt : 1; // 1
      uint32 fail_general : 1; // 0
#endif
    };
    uint32  u32;
  } failure;
  // if(failure.has_continous_event_counter)

    // UINT32 continous_event_counter;
    uint32  continous_event_counter;
  // if(failure.has_time_stamp)

    // UINT32 time_stamp;
    uint32  time_stamp;
  // if(failure.has_clock_counter_stamp)

    // UINT32 clock_counter_stamp;
    uint32  clock_counter_stamp;
  // if(failure.has_update_qdc_iped_value)

    // UINT32 iped;
    uint32  iped;
  // if(failure.has_multi_event)

    // UINT32 multi_events;
    uint32  multi_events;
  // if(failure.has_multi_trlo_ii_counter0)

    // UINT32 multi_trlo_ii_counter0;
    uint32  multi_trlo_ii_counter0;
  // if(failure.has_multi_scaler_counter0)

    // UINT32 multi_scaler_counter0;
    uint32  multi_scaler_counter0;
  // if(failure.has_multi_adctdc_counter0)

    // UINT32 multi_adctdc_counter0;
    uint32  multi_adctdc_counter0;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_STD_VME);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_STD_VME.
 *
 * Do not edit - automatically generated.
 */

// LAND_STD_VME()
template<typename __data_src_t>
void LAND_STD_VME::__unpack(__data_src_t &__buffer)
{
  // UINT32 failure
  // {
    //     0: fail_general;
    //     1: fail_data_corrupt;
    //     2: fail_data_missing;
    //     3: fail_data_too_much;
    //     4: fail_event_counter_mismatch;
    //     5: fail_readout_error_driver;
    //     6: fail_unexpected_trigger;
    //     7: fail_firmware_mismatch;
    //    22: has_multi_trlo_ii_counter0;
    //    23: has_clock_counter_stamp;
    //    24: has_continous_event_counter;
    //    25: has_update_qdc_iped_value;
    //    26: spurious_start_before_tcal;
    //    27: has_no_zero_suppression;
    //    28: has_multi_adctdc_counter0;
    //    29: has_multi_scaler_counter0;
    //    30: has_multi_event;
    //    31: has_time_stamp;
  // }
  READ_FROM_BUFFER_FULL(263,uint32 ,failure,failure.u32);
  CHECK_UNNAMED_BITS_ZERO(263,failure.u32,0x003fff00);
  // if(failure.has_continous_event_counter)

  if (failure.has_continous_event_counter)
  {
    // UINT32 continous_event_counter;
    READ_FROM_BUFFER(266,uint32 ,continous_event_counter);
  }
  // if(failure.has_time_stamp)

  if (failure.has_time_stamp)
  {
    // UINT32 time_stamp;
    READ_FROM_BUFFER(270,uint32 ,time_stamp);
  }
  // if(failure.has_clock_counter_stamp)

  if (failure.has_clock_counter_stamp)
  {
    // UINT32 clock_counter_stamp;
    READ_FROM_BUFFER(274,uint32 ,clock_counter_stamp);
  }
  // if(failure.has_update_qdc_iped_value)

  if (failure.has_update_qdc_iped_value)
  {
    // UINT32 iped;
    READ_FROM_BUFFER(278,uint32 ,iped);
  }
  // if(failure.has_multi_event)

  if (failure.has_multi_event)
  {
    // UINT32 multi_events;
    READ_FROM_BUFFER(282,uint32 ,multi_events);
  }
  // if(failure.has_multi_trlo_ii_counter0)

  if (failure.has_multi_trlo_ii_counter0)
  {
    // UINT32 multi_trlo_ii_counter0;
    READ_FROM_BUFFER(286,uint32 ,multi_trlo_ii_counter0);
  }
  // if(failure.has_multi_scaler_counter0)

  if (failure.has_multi_scaler_counter0)
  {
    // UINT32 multi_scaler_counter0;
    READ_FROM_BUFFER(290,uint32 ,multi_scaler_counter0);
  }
  // if(failure.has_multi_adctdc_counter0)

  if (failure.has_multi_adctdc_counter0)
  {
    // UINT32 multi_adctdc_counter0;
    READ_FROM_BUFFER(294,uint32 ,multi_adctdc_counter0);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_STD_VME::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_STD_VME.
 *
 * Do not edit - automatically generated.
 */

// LAND_STD_VME()
template<typename __data_src_t>
bool LAND_STD_VME::__match(__data_src_t &__buffer)
{
  // UINT32 failure
  // {
    //     0: fail_general;
    //     1: fail_data_corrupt;
    //     2: fail_data_missing;
    //     3: fail_data_too_much;
    //     4: fail_event_counter_mismatch;
    //     5: fail_readout_error_driver;
    //     6: fail_unexpected_trigger;
    //     7: fail_firmware_mismatch;
    //    22: has_multi_trlo_ii_counter0;
    //    23: has_clock_counter_stamp;
    //    24: has_continous_event_counter;
    //    25: has_update_qdc_iped_value;
    //    26: spurious_start_before_tcal;
    //    27: has_no_zero_suppression;
    //    28: has_multi_adctdc_counter0;
    //    29: has_multi_scaler_counter0;
    //    30: has_multi_event;
    //    31: has_time_stamp;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 fail_general : 1; // 0
      uint32 fail_data_corrupt : 1; // 1
      uint32 fail_data_missing : 1; // 2
      uint32 fail_data_too_much : 1; // 3
      uint32 fail_event_counter_mismatch : 1; // 4
      uint32 fail_readout_error_driver : 1; // 5
      uint32 fail_unexpected_trigger : 1; // 6
      uint32 fail_firmware_mismatch : 1; // 7
      uint32 dummy_8_21 : 14;
      uint32 has_multi_trlo_ii_counter0 : 1; // 22
      uint32 has_clock_counter_stamp : 1; // 23
      uint32 has_continous_event_counter : 1; // 24
      uint32 has_update_qdc_iped_value : 1; // 25
      uint32 spurious_start_before_tcal : 1; // 26
      uint32 has_no_zero_suppression : 1; // 27
      uint32 has_multi_adctdc_counter0 : 1; // 28
      uint32 has_multi_scaler_counter0 : 1; // 29
      uint32 has_multi_event : 1; // 30
      uint32 has_time_stamp : 1; // 31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 has_time_stamp : 1; // 31
      uint32 has_multi_event : 1; // 30
      uint32 has_multi_scaler_counter0 : 1; // 29
      uint32 has_multi_adctdc_counter0 : 1; // 28
      uint32 has_no_zero_suppression : 1; // 27
      uint32 spurious_start_before_tcal : 1; // 26
      uint32 has_update_qdc_iped_value : 1; // 25
      uint32 has_continous_event_counter : 1; // 24
      uint32 has_clock_counter_stamp : 1; // 23
      uint32 has_multi_trlo_ii_counter0 : 1; // 22
      uint32 dummy_8_21 : 14;
      uint32 fail_firmware_mismatch : 1; // 7
      uint32 fail_unexpected_trigger : 1; // 6
      uint32 fail_readout_error_driver : 1; // 5
      uint32 fail_event_counter_mismatch : 1; // 4
      uint32 fail_data_too_much : 1; // 3
      uint32 fail_data_missing : 1; // 2
      uint32 fail_data_corrupt : 1; // 1
      uint32 fail_general : 1; // 0
#endif
    };
    uint32  u32;
  } __failure;
  READ_FROM_BUFFER_FULL(263,uint32 ,failure,__failure.u32);
  MATCH_UNNAMED_BITS_ZERO(263,__failure.u32,0x003fff00);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN(bool,LAND_STD_VME::__match);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_STD_VME.
 *
 * Do not edit - automatically generated.
 */

// LAND_STD_VME()
template<typename __data_dest_t>
void PACKER_LAND_STD_VME::__packer(__data_dest_t &__buffer)
{
  // UINT32 failure
  // {
    //     0: fail_general;
    //     1: fail_data_corrupt;
    //     2: fail_data_missing;
    //     3: fail_data_too_much;
    //     4: fail_event_counter_mismatch;
    //     5: fail_readout_error_driver;
    //     6: fail_unexpected_trigger;
    //     7: fail_firmware_mismatch;
    //    22: has_multi_trlo_ii_counter0;
    //    23: has_clock_counter_stamp;
    //    24: has_continous_event_counter;
    //    25: has_update_qdc_iped_value;
    //    26: spurious_start_before_tcal;
    //    27: has_no_zero_suppression;
    //    28: has_multi_adctdc_counter0;
    //    29: has_multi_scaler_counter0;
    //    30: has_multi_event;
    //    31: has_time_stamp;
  // }
  // if(failure.has_continous_event_counter)

  if (failure.has_continous_event_counter)
  {
    // UINT32 continous_event_counter;
  }
  // if(failure.has_time_stamp)

  if (failure.has_time_stamp)
  {
    // UINT32 time_stamp;
  }
  // if(failure.has_clock_counter_stamp)

  if (failure.has_clock_counter_stamp)
  {
    // UINT32 clock_counter_stamp;
  }
  // if(failure.has_update_qdc_iped_value)

  if (failure.has_update_qdc_iped_value)
  {
    // UINT32 iped;
  }
  // if(failure.has_multi_event)

  if (failure.has_multi_event)
  {
    // UINT32 multi_events;
  }
  // if(failure.has_multi_trlo_ii_counter0)

  if (failure.has_multi_trlo_ii_counter0)
  {
    // UINT32 multi_trlo_ii_counter0;
  }
  // if(failure.has_multi_scaler_counter0)

  if (failure.has_multi_scaler_counter0)
  {
    // UINT32 multi_scaler_counter0;
  }
  // if(failure.has_multi_adctdc_counter0)

  if (failure.has_multi_adctdc_counter0)
  {
    // UINT32 multi_adctdc_counter0;
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_STD_VME::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: NTP64_TIME
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for NTP64_TIME.
 *
 * Do not edit - automatically generated.
 */

// NTP64_TIME()
#if !PACKER_CODE
# define DECLARED_UNPACK_NTP64_TIME
class NTP64_TIME
#else//PACKER_CODE
# define DECLARED_PACKER_NTP64_TIME
class PACKER_NTP64_TIME
#endif//PACKER_CODE

{
public:
  // UINT32 sec;
  uint32  sec;
  // UINT32 frac;
  uint32  frac;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(NTP64_TIME);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for NTP64_TIME.
 *
 * Do not edit - automatically generated.
 */

// NTP64_TIME()
template<typename __data_src_t>
void NTP64_TIME::__unpack(__data_src_t &__buffer)
{
  // UINT32 sec;
  READ_FROM_BUFFER(300,uint32 ,sec);
  // UINT32 frac;
  READ_FROM_BUFFER(301,uint32 ,frac);
}
FORCE_IMPL_DATA_SRC_FCN(void,NTP64_TIME::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for NTP64_TIME.
 *
 * Do not edit - automatically generated.
 */

// NTP64_TIME()
template<typename __data_src_t>
bool NTP64_TIME::__match(__data_src_t &__buffer)
{
  // UINT32 sec;
  uint32  __sec;
  READ_FROM_BUFFER(300,uint32 ,__sec);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN(bool,NTP64_TIME::__match);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for NTP64_TIME.
 *
 * Do not edit - automatically generated.
 */

// NTP64_TIME()
template<typename __data_dest_t>
void PACKER_NTP64_TIME::__packer(__data_dest_t &__buffer)
{
  // UINT32 sec;
  // UINT32 frac;
}
FORCE_IMPL_DATA_SRC_FCN(void,NTP64_TIME::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: NTP_MESSAGE
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for NTP_MESSAGE.
 *
 * Do not edit - automatically generated.
 */

// NTP_MESSAGE(id)
#if !PACKER_CODE
# define DECLARED_UNPACK_NTP_MESSAGE
class NTP_MESSAGE
#else//PACKER_CODE
# define DECLARED_PACKER_NTP_MESSAGE
class PACKER_NTP_MESSAGE
#endif//PACKER_CODE

{
public:
  // UINT32 header
  // {
    //  0_15: word_count;
    //    16: quick_burst;
    // 24_31: id = MATCH(id);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_count : 16; // 0..15
      uint32 quick_burst : 1; // 16
      uint32 dummy_17_23 : 7;
      uint32 id : 8; // 24..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 id : 8; // 24..31
      uint32 dummy_17_23 : 7;
      uint32 quick_burst : 1; // 16
      uint32 word_count : 16; // 0..15
#endif
    };
    uint32  u32;
  } header;
  // MARK_COUNT(start);
  // UINT32 server_id;
  uint32  server_id;
  // UINT32 sspp
  // {
    //  0_07: precision;
    //  8_15: poll;
    // 16_19: stratum;
    // 24_26: mode;
    // 27_29: version = CHECK(3);
    // 30_31: leap;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 precision : 8; // 0..7
      uint32 poll : 8; // 8..15
      uint32 stratum : 4; // 16..19
      uint32 dummy_20_23 : 4;
      uint32 mode : 3; // 24..26
      uint32 version : 3; // 27..29
      uint32 leap : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 leap : 2; // 30..31
      uint32 version : 3; // 27..29
      uint32 mode : 3; // 24..26
      uint32 dummy_20_23 : 4;
      uint32 stratum : 4; // 16..19
      uint32 poll : 8; // 8..15
      uint32 precision : 8; // 0..7
#endif
    };
    uint32  u32;
  } sspp;
  // UINT32 root_dly
  // {
    //  0_15: frac;
    // 16_31: sec;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 frac : 16; // 0..15
      uint32 sec : 16; // 16..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 sec : 16; // 16..31
      uint32 frac : 16; // 0..15
#endif
    };
    uint32  u32;
  } root_dly;
  // UINT32 root_disp
  // {
    //  0_15: frac;
    // 16_31: sec;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 frac : 16; // 0..15
      uint32 sec : 16; // 16..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 sec : 16; // 16..31
      uint32 frac : 16; // 0..15
#endif
    };
    uint32  u32;
  } root_disp;
  // UINT32 refid;
  uint32  refid;
  // reftime = NTP64_TIME();
  // origtime = NTP64_TIME();
  // rectime = NTP64_TIME();
  // tmittime = NTP64_TIME();
  // rxtime = NTP64_TIME();
  // if(header.quick_burst)

    // orig2time = NTP64_TIME();
    // rec2time = NTP64_TIME();
    // tmit2time = NTP64_TIME();
    // rx2time = NTP64_TIME();
    SINGLE(NTP64_TIME,orig2time);
    SINGLE(NTP64_TIME,tmit2time);
    SINGLE(NTP64_TIME,rec2time);
    SINGLE(NTP64_TIME,rx2time);
  // MARK_COUNT(end);
  // CHECK_COUNT(header.word_count,start,end,0,4)
  SINGLE(NTP64_TIME,reftime);
  SINGLE(NTP64_TIME,origtime);
  SINGLE(NTP64_TIME,rectime);
  SINGLE(NTP64_TIME,tmittime);
  SINGLE(NTP64_TIME,rxtime);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 id);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 id);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 id);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(NTP_MESSAGE);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for NTP_MESSAGE.
 *
 * Do not edit - automatically generated.
 */

// NTP_MESSAGE(id)
template<typename __data_src_t>
void NTP_MESSAGE::__unpack(__data_src_t &__buffer,uint32 id)
{
  // UINT32 header
  // {
    //  0_15: word_count;
    //    16: quick_burst;
    // 24_31: id = MATCH(id);
  // }
  READ_FROM_BUFFER_FULL(311,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(310,header.id,id);
  CHECK_UNNAMED_BITS_ZERO(311,header.u32,0x00fe0000);
  // MARK_COUNT(start);
  void *__mark_start = __buffer._data;
  // UINT32 server_id;
  READ_FROM_BUFFER(313,uint32 ,server_id);
  // UINT32 sspp
  // {
    //  0_07: precision;
    //  8_15: poll;
    // 16_19: stratum;
    // 24_26: mode;
    // 27_29: version = CHECK(3);
    // 30_31: leap;
  // }
  READ_FROM_BUFFER_FULL(322,uint32 ,sspp,sspp.u32);
  CHECK_BITS_EQUAL(320,sspp.version,3);
  CHECK_UNNAMED_BITS_ZERO(322,sspp.u32,0x00f00000);
  // UINT32 root_dly
  // {
    //  0_15: frac;
    // 16_31: sec;
  // }
  READ_FROM_BUFFER_FULL(327,uint32 ,root_dly,root_dly.u32);
  // UINT32 root_disp
  // {
    //  0_15: frac;
    // 16_31: sec;
  // }
  READ_FROM_BUFFER_FULL(332,uint32 ,root_disp,root_disp.u32);
  // UINT32 refid;
  READ_FROM_BUFFER(333,uint32 ,refid);
  // reftime = NTP64_TIME();
  UNPACK_DECL(334,NTP64_TIME,reftime);
  // origtime = NTP64_TIME();
  UNPACK_DECL(335,NTP64_TIME,origtime);
  // rectime = NTP64_TIME();
  UNPACK_DECL(336,NTP64_TIME,rectime);
  // tmittime = NTP64_TIME();
  UNPACK_DECL(337,NTP64_TIME,tmittime);
  // rxtime = NTP64_TIME();
  UNPACK_DECL(338,NTP64_TIME,rxtime);
  // if(header.quick_burst)

  if (header.quick_burst)
  {
    // orig2time = NTP64_TIME();
    UNPACK_DECL(341,NTP64_TIME,orig2time);
    // rec2time = NTP64_TIME();
    UNPACK_DECL(342,NTP64_TIME,rec2time);
    // tmit2time = NTP64_TIME();
    UNPACK_DECL(343,NTP64_TIME,tmit2time);
    // rx2time = NTP64_TIME();
    UNPACK_DECL(344,NTP64_TIME,rx2time);
  }
  // MARK_COUNT(end);
  void *__mark_end = __buffer._data;
  // CHECK_COUNT(header.word_count,start,end,0,4)
  CHECK_WORD_COUNT(347,header.word_count,start,end,0,4);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,NTP_MESSAGE::__unpack,uint32 id);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for NTP_MESSAGE.
 *
 * Do not edit - automatically generated.
 */

// NTP_MESSAGE(id)
template<typename __data_src_t>
bool NTP_MESSAGE::__match(__data_src_t &__buffer,uint32 id)
{
  // UINT32 header
  // {
    //  0_15: word_count;
    //    16: quick_burst;
    // 24_31: id = MATCH(id);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_count : 16; // 0..15
      uint32 quick_burst : 1; // 16
      uint32 dummy_17_23 : 7;
      uint32 id : 8; // 24..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 id : 8; // 24..31
      uint32 dummy_17_23 : 7;
      uint32 quick_burst : 1; // 16
      uint32 word_count : 16; // 0..15
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(311,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(310,__header.id,id);
  MATCH_UNNAMED_BITS_ZERO(311,__header.u32,0x00fe0000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,NTP_MESSAGE::__match,uint32 id);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for NTP_MESSAGE.
 *
 * Do not edit - automatically generated.
 */

// NTP_MESSAGE(id)
template<typename __data_dest_t>
void PACKER_NTP_MESSAGE::__packer(__data_dest_t &__buffer,uint32 id)
{
  // UINT32 header
  // {
    //  0_15: word_count;
    //    16: quick_burst;
    // 24_31: id = MATCH(id);
  // }
  // MARK_COUNT(start);
  void *__mark_start = __buffer._offset;
  // UINT32 server_id;
  // UINT32 sspp
  // {
    //  0_07: precision;
    //  8_15: poll;
    // 16_19: stratum;
    // 24_26: mode;
    // 27_29: version = CHECK(3);
    // 30_31: leap;
  // }
  // UINT32 root_dly
  // {
    //  0_15: frac;
    // 16_31: sec;
  // }
  // UINT32 root_disp
  // {
    //  0_15: frac;
    // 16_31: sec;
  // }
  // UINT32 refid;
  // reftime = NTP64_TIME();
  PACK_DECL(334,NTP64_TIME,reftime);
  // origtime = NTP64_TIME();
  PACK_DECL(335,NTP64_TIME,origtime);
  // rectime = NTP64_TIME();
  PACK_DECL(336,NTP64_TIME,rectime);
  // tmittime = NTP64_TIME();
  PACK_DECL(337,NTP64_TIME,tmittime);
  // rxtime = NTP64_TIME();
  PACK_DECL(338,NTP64_TIME,rxtime);
  // if(header.quick_burst)

  if (header.quick_burst)
  {
    // orig2time = NTP64_TIME();
    PACK_DECL(341,NTP64_TIME,orig2time);
    // rec2time = NTP64_TIME();
    PACK_DECL(342,NTP64_TIME,rec2time);
    // tmit2time = NTP64_TIME();
    PACK_DECL(343,NTP64_TIME,tmit2time);
    // rx2time = NTP64_TIME();
    PACK_DECL(344,NTP64_TIME,rx2time);
  }
  // MARK_COUNT(end);
  void *__mark_end = __buffer._offset;
  // CHECK_COUNT(header.word_count,start,end,0,4)
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,NTP_MESSAGE::__packer,uint32 id);

/** END_PACKER ********************************************************/

//
// Generating code for: RANDOM_TCAL
//
//
// Generating code for: RANDOM_TCAL_TSTAMP_CLOCK
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for RANDOM_TCAL_TSTAMP_CLOCK.
 *
 * Do not edit - automatically generated.
 */

// RANDOM_TCAL_TSTAMP_CLOCK()
#if !PACKER_CODE
# define DECLARED_UNPACK_RANDOM_TCAL_TSTAMP_CLOCK
class RANDOM_TCAL_TSTAMP_CLOCK
#else//PACKER_CODE
# define DECLARED_PACKER_RANDOM_TCAL_TSTAMP_CLOCK
class PACKER_RANDOM_TCAL_TSTAMP_CLOCK
#endif//PACKER_CODE

{
public:
  // UINT32 soft_latches;
  uint32  soft_latches;
  // UINT32 hard_latches;
  uint32  hard_latches;
  // UINT32 clock_ticks;
  uint32  clock_ticks;
  // before = NTP64_TIME();
  // after = NTP64_TIME();
  SINGLE(NTP64_TIME,before);
  SINGLE(NTP64_TIME,after);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(RANDOM_TCAL_TSTAMP_CLOCK);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for RANDOM_TCAL_TSTAMP_CLOCK.
 *
 * Do not edit - automatically generated.
 */

// RANDOM_TCAL_TSTAMP_CLOCK()
template<typename __data_src_t>
void RANDOM_TCAL_TSTAMP_CLOCK::__unpack(__data_src_t &__buffer)
{
  // UINT32 soft_latches;
  READ_FROM_BUFFER(376,uint32 ,soft_latches);
  // UINT32 hard_latches;
  READ_FROM_BUFFER(377,uint32 ,hard_latches);
  // UINT32 clock_ticks;
  READ_FROM_BUFFER(378,uint32 ,clock_ticks);
  // before = NTP64_TIME();
  UNPACK_DECL(379,NTP64_TIME,before);
  // after = NTP64_TIME();
  UNPACK_DECL(380,NTP64_TIME,after);
}
FORCE_IMPL_DATA_SRC_FCN(void,RANDOM_TCAL_TSTAMP_CLOCK::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for RANDOM_TCAL_TSTAMP_CLOCK.
 *
 * Do not edit - automatically generated.
 */

// RANDOM_TCAL_TSTAMP_CLOCK()
template<typename __data_src_t>
bool RANDOM_TCAL_TSTAMP_CLOCK::__match(__data_src_t &__buffer)
{
  // UINT32 soft_latches;
  uint32  __soft_latches;
  READ_FROM_BUFFER(376,uint32 ,__soft_latches);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN(bool,RANDOM_TCAL_TSTAMP_CLOCK::__match);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for RANDOM_TCAL_TSTAMP_CLOCK.
 *
 * Do not edit - automatically generated.
 */

// RANDOM_TCAL_TSTAMP_CLOCK()
template<typename __data_dest_t>
void PACKER_RANDOM_TCAL_TSTAMP_CLOCK::__packer(__data_dest_t &__buffer)
{
  // UINT32 soft_latches;
  // UINT32 hard_latches;
  // UINT32 clock_ticks;
  // before = NTP64_TIME();
  PACK_DECL(379,NTP64_TIME,before);
  // after = NTP64_TIME();
  PACK_DECL(380,NTP64_TIME,after);
}
FORCE_IMPL_DATA_SRC_FCN(void,RANDOM_TCAL_TSTAMP_CLOCK::__packer);

/** END_PACKER ********************************************************/


/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for RANDOM_TCAL.
 *
 * Do not edit - automatically generated.
 */

// RANDOM_TCAL(id)
#if !PACKER_CODE
# define DECLARED_UNPACK_RANDOM_TCAL
class RANDOM_TCAL
#else//PACKER_CODE
# define DECLARED_PACKER_RANDOM_TCAL
class PACKER_RANDOM_TCAL
#endif//PACKER_CODE

{
public:
  // UINT32 header
  // {
    //  0_07: word_count;
    //  8_11: pulses;
    // 12_17: clock_bits;
    //    18: has_tstamp1;
    //    19: has_tstamp2;
    // 24_31: id = MATCH(id);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_count : 8; // 0..7
      uint32 pulses : 4; // 8..11
      uint32 clock_bits : 6; // 12..17
      uint32 has_tstamp1 : 1; // 18
      uint32 has_tstamp2 : 1; // 19
      uint32 dummy_20_23 : 4;
      uint32 id : 8; // 24..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 id : 8; // 24..31
      uint32 dummy_20_23 : 4;
      uint32 has_tstamp2 : 1; // 19
      uint32 has_tstamp1 : 1; // 18
      uint32 clock_bits : 6; // 12..17
      uint32 pulses : 4; // 8..11
      uint32 word_count : 8; // 0..7
#endif
    };
    uint32  u32;
  } header;
  // MARK_COUNT(start);
  // if(header.has_tstamp1)

    // tstamp1 = RANDOM_TCAL_TSTAMP_CLOCK();
    SINGLE(RANDOM_TCAL_TSTAMP_CLOCK,tstamp1);
  // if(header.has_tstamp2)

    // tstamp2 = RANDOM_TCAL_TSTAMP_CLOCK();
    SINGLE(RANDOM_TCAL_TSTAMP_CLOCK,tstamp2);
  // MARK_COUNT(end);
  // CHECK_COUNT(header.word_count,start,end,0,4)

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 id);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 id);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 id);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(RANDOM_TCAL);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for RANDOM_TCAL.
 *
 * Do not edit - automatically generated.
 */

// RANDOM_TCAL(id)
template<typename __data_src_t>
void RANDOM_TCAL::__unpack(__data_src_t &__buffer,uint32 id)
{
  // UINT32 header
  // {
    //  0_07: word_count;
    //  8_11: pulses;
    // 12_17: clock_bits;
    //    18: has_tstamp1;
    //    19: has_tstamp2;
    // 24_31: id = MATCH(id);
  // }
  READ_FROM_BUFFER_FULL(360,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(359,header.id,id);
  CHECK_UNNAMED_BITS_ZERO(360,header.u32,0x00f00000);
  // MARK_COUNT(start);
  void *__mark_start = __buffer._data;
  // if(header.has_tstamp1)

  if (header.has_tstamp1)
  {
    // tstamp1 = RANDOM_TCAL_TSTAMP_CLOCK();
    UNPACK_DECL(364,RANDOM_TCAL_TSTAMP_CLOCK,tstamp1);
  }
  // if(header.has_tstamp2)

  if (header.has_tstamp2)
  {
    // tstamp2 = RANDOM_TCAL_TSTAMP_CLOCK();
    UNPACK_DECL(368,RANDOM_TCAL_TSTAMP_CLOCK,tstamp2);
  }
  // MARK_COUNT(end);
  void *__mark_end = __buffer._data;
  // CHECK_COUNT(header.word_count,start,end,0,4)
  CHECK_WORD_COUNT(371,header.word_count,start,end,0,4);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,RANDOM_TCAL::__unpack,uint32 id);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for RANDOM_TCAL.
 *
 * Do not edit - automatically generated.
 */

// RANDOM_TCAL(id)
template<typename __data_src_t>
bool RANDOM_TCAL::__match(__data_src_t &__buffer,uint32 id)
{
  // UINT32 header
  // {
    //  0_07: word_count;
    //  8_11: pulses;
    // 12_17: clock_bits;
    //    18: has_tstamp1;
    //    19: has_tstamp2;
    // 24_31: id = MATCH(id);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_count : 8; // 0..7
      uint32 pulses : 4; // 8..11
      uint32 clock_bits : 6; // 12..17
      uint32 has_tstamp1 : 1; // 18
      uint32 has_tstamp2 : 1; // 19
      uint32 dummy_20_23 : 4;
      uint32 id : 8; // 24..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 id : 8; // 24..31
      uint32 dummy_20_23 : 4;
      uint32 has_tstamp2 : 1; // 19
      uint32 has_tstamp1 : 1; // 18
      uint32 clock_bits : 6; // 12..17
      uint32 pulses : 4; // 8..11
      uint32 word_count : 8; // 0..7
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(360,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(359,__header.id,id);
  MATCH_UNNAMED_BITS_ZERO(360,__header.u32,0x00f00000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,RANDOM_TCAL::__match,uint32 id);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for RANDOM_TCAL.
 *
 * Do not edit - automatically generated.
 */

// RANDOM_TCAL(id)
template<typename __data_dest_t>
void PACKER_RANDOM_TCAL::__packer(__data_dest_t &__buffer,uint32 id)
{
  // UINT32 header
  // {
    //  0_07: word_count;
    //  8_11: pulses;
    // 12_17: clock_bits;
    //    18: has_tstamp1;
    //    19: has_tstamp2;
    // 24_31: id = MATCH(id);
  // }
  // MARK_COUNT(start);
  void *__mark_start = __buffer._offset;
  // if(header.has_tstamp1)

  if (header.has_tstamp1)
  {
    // tstamp1 = RANDOM_TCAL_TSTAMP_CLOCK();
    PACK_DECL(364,RANDOM_TCAL_TSTAMP_CLOCK,tstamp1);
  }
  // if(header.has_tstamp2)

  if (header.has_tstamp2)
  {
    // tstamp2 = RANDOM_TCAL_TSTAMP_CLOCK();
    PACK_DECL(368,RANDOM_TCAL_TSTAMP_CLOCK,tstamp2);
  }
  // MARK_COUNT(end);
  void *__mark_end = __buffer._offset;
  // CHECK_COUNT(header.word_count,start,end,0,4)
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,RANDOM_TCAL::__packer,uint32 id);

/** END_PACKER ********************************************************/

//
// Generating code for: SIDEREM_BLOCK
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for SIDEREM_BLOCK.
 *
 * Do not edit - automatically generated.
 */

// SIDEREM_BLOCK(sam,gtb,siderem)
#if !PACKER_CODE
# define DECLARED_UNPACK_SIDEREM_BLOCK
class SIDEREM_BLOCK
#else//PACKER_CODE
# define DECLARED_PACKER_SIDEREM_BLOCK
class PACKER_SIDEREM_BLOCK
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA12 data[4][512] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA12,DATA12,512> data[4];
  // UINT32 header
  // {
    //  0_11: count;
    // 12_15: local_event_counter;
    // 16_19: local_trigger;
    // 20_23: siderem = MATCH(siderem);
    // 24_27: gtb = MATCH(gtb);
    // 28_31: sam = MATCH(sam);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 count : 12; // 0..11
      uint32 local_event_counter : 4; // 12..15
      uint32 local_trigger : 4; // 16..19
      uint32 siderem : 4; // 20..23
      uint32 gtb : 4; // 24..27
      uint32 sam : 4; // 28..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 sam : 4; // 28..31
      uint32 gtb : 4; // 24..27
      uint32 siderem : 4; // 20..23
      uint32 local_trigger : 4; // 16..19
      uint32 local_event_counter : 4; // 12..15
      uint32 count : 12; // 0..11
#endif
    };
    uint32  u32;
  } header;
  // list(0<=index<header.count)

    // UINT32 ch_data NOENCODE
    // {
      //  0_11: value;
      // 12_13: adc_no;
      // 16_24: channel;
      // 28_31: 15;
      // ENCODE(data[adc_no][channel],(value=value));
    // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 sam,uint32 gtb,uint32 siderem);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 sam,uint32 gtb,uint32 siderem);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 sam,uint32 gtb,uint32 siderem);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(SIDEREM_BLOCK);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for SIDEREM_BLOCK.
 *
 * Do not edit - automatically generated.
 */

// SIDEREM_BLOCK(sam,gtb,siderem)
template<typename __data_src_t>
void SIDEREM_BLOCK::__unpack(__data_src_t &__buffer,uint32 sam,uint32 gtb
                                                   ,uint32 siderem)
{
  // MEMBER(DATA12 data[4][512] ZERO_SUPPRESS);
  // UINT32 header
  // {
    //  0_11: count;
    // 12_15: local_event_counter;
    // 16_19: local_trigger;
    // 20_23: siderem = MATCH(siderem);
    // 24_27: gtb = MATCH(gtb);
    // 28_31: sam = MATCH(sam);
  // }
  READ_FROM_BUFFER_FULL(394,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(391,header.siderem,siderem);
  CHECK_BITS_EQUAL(392,header.gtb,gtb);
  CHECK_BITS_EQUAL(393,header.sam,sam);
  // list(0<=index<header.count)

  for (uint32 index = 0; index < (uint32) (header.count); ++index)
  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_11: value;
      // 12_13: adc_no;
      // 16_24: channel;
      // 28_31: 15;
      // ENCODE(data[adc_no][channel],(value=value));
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 value : 12; // 0..11
        uint32 adc_no : 2; // 12..13
        uint32 dummy_14_15 : 2;
        uint32 channel : 9; // 16..24
        uint32 dummy_25_27 : 3;
        uint32 unnamed_28_31 : 4; // 28..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 unnamed_28_31 : 4; // 28..31
        uint32 dummy_25_27 : 3;
        uint32 channel : 9; // 16..24
        uint32 dummy_14_15 : 2;
        uint32 adc_no : 2; // 12..13
        uint32 value : 12; // 0..11
#endif
      };
      uint32  u32;
    } ch_data;
    READ_FROM_BUFFER_FULL(404,uint32 ,ch_data,ch_data.u32);
    CHECK_BITS_EQUAL(402,ch_data.unnamed_28_31,15);
    CHECK_UNNAMED_BITS_ZERO(404,ch_data.u32,0x0e00c000);
    {
      typedef __typeof__(*(&(data[ch_data.adc_no]))) __array_t;
      typedef typename __array_t::item_t __item_t;
      __item_t &__item = data[ch_data.adc_no].insert_index(403,ch_data.channel);
      __item.value = ch_data.value;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,SIDEREM_BLOCK::__unpack,uint32 sam,uint32 gtb
                                                        ,uint32 siderem);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for SIDEREM_BLOCK.
 *
 * Do not edit - automatically generated.
 */

// SIDEREM_BLOCK(sam,gtb,siderem)
template<typename __data_src_t>
bool SIDEREM_BLOCK::__match(__data_src_t &__buffer,uint32 sam,uint32 gtb
                                                  ,uint32 siderem)
{
  // MEMBER(DATA12 data[4][512] ZERO_SUPPRESS);
  // UINT32 header
  // {
    //  0_11: count;
    // 12_15: local_event_counter;
    // 16_19: local_trigger;
    // 20_23: siderem = MATCH(siderem);
    // 24_27: gtb = MATCH(gtb);
    // 28_31: sam = MATCH(sam);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 count : 12; // 0..11
      uint32 local_event_counter : 4; // 12..15
      uint32 local_trigger : 4; // 16..19
      uint32 siderem : 4; // 20..23
      uint32 gtb : 4; // 24..27
      uint32 sam : 4; // 28..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 sam : 4; // 28..31
      uint32 gtb : 4; // 24..27
      uint32 siderem : 4; // 20..23
      uint32 local_trigger : 4; // 16..19
      uint32 local_event_counter : 4; // 12..15
      uint32 count : 12; // 0..11
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(394,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(391,__header.siderem,siderem);
  MATCH_BITS_EQUAL(392,__header.gtb,gtb);
  MATCH_BITS_EQUAL(393,__header.sam,sam);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,SIDEREM_BLOCK::__match,uint32 sam,uint32 gtb
                                                       ,uint32 siderem);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for SIDEREM_BLOCK.
 *
 * Do not edit - automatically generated.
 */

// SIDEREM_BLOCK(sam,gtb,siderem)
template<typename __data_dest_t>
void PACKER_SIDEREM_BLOCK::__packer(__data_dest_t &__buffer,uint32 sam,uint32 gtb
                                                           ,uint32 siderem)
{
  // MEMBER(DATA12 data[4][512] ZERO_SUPPRESS);
  // UINT32 header
  // {
    //  0_11: count;
    // 12_15: local_event_counter;
    // 16_19: local_trigger;
    // 20_23: siderem = MATCH(siderem);
    // 24_27: gtb = MATCH(gtb);
    // 28_31: sam = MATCH(sam);
  // }
  // list(0<=index<header.count)

  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_11: value;
      // 12_13: adc_no;
      // 16_24: channel;
      // 28_31: 15;
      // ENCODE(data[adc_no][channel],(value=value));
    // }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,SIDEREM_BLOCK::__packer,uint32 sam,uint32 gtb
                                                        ,uint32 siderem);

/** END_PACKER ********************************************************/

//
// Generating code for: SOFT_SCALER32
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for SOFT_SCALER32.
 *
 * Do not edit - automatically generated.
 */

// SOFT_SCALER32(channels)
#if !PACKER_CODE
# define DECLARED_UNPACK_SOFT_SCALER32
class SOFT_SCALER32
#else//PACKER_CODE
# define DECLARED_PACKER_SOFT_SCALER32
class PACKER_SOFT_SCALER32
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA32,DATA32,32> data;
  // list(0<=index<channels)

    // UINT32 ch_data NOENCODE
    // {
      //  0_31: value;
      // ENCODE(data[index],(value=value));
    // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 channels);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 channels);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 channels);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(SOFT_SCALER32);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for SOFT_SCALER32.
 *
 * Do not edit - automatically generated.
 */

// SOFT_SCALER32(channels)
template<typename __data_src_t>
void SOFT_SCALER32::__unpack(__data_src_t &__buffer,uint32 channels)
{
  // MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_31: value;
      // ENCODE(data[index],(value=value));
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 value : 32; // 0..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 value : 32; // 0..31
#endif
      };
      uint32  u32;
    } ch_data;
    READ_FROM_BUFFER_FULL(417,uint32 ,ch_data,ch_data.u32);
    {
      typedef __typeof__(*(&(data))) __array_t;
      typedef typename __array_t::item_t __item_t;
      __item_t &__item = data.insert_index(416,index);
      __item.value = ch_data.value;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,SOFT_SCALER32::__unpack,uint32 channels);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for SOFT_SCALER32.
 *
 * Do not edit - automatically generated.
 */

// SOFT_SCALER32(channels)
template<typename __data_src_t>
bool SOFT_SCALER32::__match(__data_src_t &__buffer,uint32 channels)
{
  // MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  // list(0<=index<channels)

  for (uint32 index = 0; index < (uint32) (channels); ++index)
  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_31: value;
      // ENCODE(data[index],(value=value));
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 value : 32; // 0..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 value : 32; // 0..31
#endif
      };
      uint32  u32;
    } ch_data;
    READ_FROM_BUFFER_FULL(417,uint32 ,ch_data,ch_data.u32);
    return true;
    return false;
  }
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,SOFT_SCALER32::__match,uint32 channels);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for SOFT_SCALER32.
 *
 * Do not edit - automatically generated.
 */

// SOFT_SCALER32(channels)
template<typename __data_dest_t>
void PACKER_SOFT_SCALER32::__packer(__data_dest_t &__buffer,uint32 channels)
{
  // MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  // list(0<=index<channels)

  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_31: value;
      // ENCODE(data[index],(value=value));
    // }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,SOFT_SCALER32::__packer,uint32 channels);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V1190
//
//
// Generating code for: VME_CAEN_V1190_SUBTDC
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1190_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SUBTDC(tdc,event_id,data)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1190_SUBTDC
class VME_CAEN_V1190_SUBTDC
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1190_SUBTDC
class PACKER_VME_CAEN_V1190_SUBTDC
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 bunch_id : 12; // 0..11
      uint32 event_id : 12; // 12..23
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 event_id : 12; // 12..23
      uint32 bunch_id : 12; // 0..11
#endif
    };
    uint32  u32;
  } header;
  // several UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }
  // optional UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } error_flags;
  // MARK_COUNT(tdc_end);
  // UINT32 trailer
  // {
    //  0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    // 12_23: event_id = CHECK(header.event_id);
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 3;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_count : 12; // 0..11
      uint32 event_id : 12; // 12..23
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 event_id : 12; // 12..23
      uint32 word_count : 12; // 0..11
#endif
    };
    uint32  u32;
  } trailer;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 tdc,uint32 event_id);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1190_SUBTDC);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1190_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
void VME_CAEN_V1190_SUBTDC::__unpack(__data_src_t &__buffer,uint32 tdc,uint32 event_id
                                                           ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  void *__mark_tdc_start = __buffer._data;
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  READ_FROM_BUFFER_FULL(535,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(532,header.event_id,event_id);
  CHECK_BITS_EQUAL(533,header.tdc,tdc);
  CHECK_BITS_EQUAL(534,header.unnamed_27_31,1);
  CHECK_UNNAMED_BITS_ZERO(535,header.u32,0x04000000);
  // several UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }
  for ( ; ; ) {
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 19; // 0..18
      uint32 channel_low : 5; // 19..23
      uint32 tdc : 2; // 24..25
      uint32 trailing : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trailing : 1; // 26
      uint32 tdc : 2; // 24..25
      uint32 channel_low : 5; // 19..23
      uint32 value : 19; // 0..18
#endif
    };
    uint32  u32;
  } ch_data;
  if (__buffer.empty()) goto data_done_0;
  PEEK_FROM_BUFFER_FULL(544,uint32 ,ch_data,ch_data.u32);
  CHECK_JUMP_BITS_EQUAL(540,ch_data.tdc,tdc,data_done_0);
  CHECK_JUMP_BITS_EQUAL(542,ch_data.unnamed_27_31,0,data_done_0);
  __buffer.advance(sizeof(ch_data.u32));
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(543,((ch_data.tdc << 5) | ch_data.channel_low));
    __item.value = ch_data.value;
  }
  }
  data_done_0:;
  // optional UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } __error_flags;
  if (__buffer.empty()) goto data_done_1;
  PEEK_FROM_BUFFER_FULL(550,uint32 ,error_flags,__error_flags.u32);
  CHECK_JUMP_BITS_EQUAL(548,__error_flags.tdc,tdc,data_done_1);
  CHECK_JUMP_BITS_EQUAL(549,__error_flags.unnamed_27_31,4,data_done_1);
  CHECK_JUMP_UNNAMED_BITS_ZERO(550,__error_flags.u32,0x04ff8000,data_done_1);
  error_flags.u32 = __error_flags.u32;
  __buffer.advance(sizeof(__error_flags.u32));
  data_done_1:;
  // MARK_COUNT(tdc_end);
  void *__mark_tdc_end = __buffer._data;
  // UINT32 trailer
  // {
    //  0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    // 12_23: event_id = CHECK(header.event_id);
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 3;
  // }
  READ_FROM_BUFFER_FULL(558,uint32 ,trailer,trailer.u32);
  CHECK_WORD_COUNT(554,trailer.word_count,tdc_start,tdc_end,4,4);
  CHECK_BITS_EQUAL(555,trailer.event_id,header.event_id);
  CHECK_BITS_EQUAL(556,trailer.tdc,tdc);
  CHECK_BITS_EQUAL(557,trailer.unnamed_27_31,3);
  CHECK_UNNAMED_BITS_ZERO(558,trailer.u32,0x04000000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SUBTDC::__unpack,uint32 tdc
                                                                ,uint32 event_id
                                                                ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1190_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
bool VME_CAEN_V1190_SUBTDC::__match(__data_src_t &__buffer,uint32 tdc,uint32 event_id)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 bunch_id : 12; // 0..11
      uint32 event_id : 12; // 12..23
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 event_id : 12; // 12..23
      uint32 bunch_id : 12; // 0..11
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(535,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(532,__header.event_id,event_id);
  MATCH_BITS_EQUAL(533,__header.tdc,tdc);
  MATCH_BITS_EQUAL(534,__header.unnamed_27_31,1);
  MATCH_UNNAMED_BITS_ZERO(535,__header.u32,0x04000000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1190_SUBTDC::__match,uint32 tdc
                                                               ,uint32 event_id);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1190_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SUBTDC(tdc,event_id,data)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1190_SUBTDC::__packer(__data_dest_t &__buffer,uint32 tdc
                                                                   ,uint32 event_id
                                                                   ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  void *__mark_tdc_start = __buffer._offset;
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  // several UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }
  // optional UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  // MARK_COUNT(tdc_end);
  void *__mark_tdc_end = __buffer._offset;
  // UINT32 trailer
  // {
    //  0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    // 12_23: event_id = CHECK(header.event_id);
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 3;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SUBTDC::__packer,uint32 tdc
                                                                ,uint32 event_id);

/** END_PACKER ********************************************************/


/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1190.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1190
class VME_CAEN_V1190
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1190
class PACKER_VME_CAEN_V1190
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } header;
  // select several

    // tdc[0] = VME_CAEN_V1190_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[1] = VME_CAEN_V1190_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[2] = VME_CAEN_V1190_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[3] = VME_CAEN_V1190_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   // data=data);
  SINGLE(VME_CAEN_V1190_SUBTDC,tdc[4]);
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 time_tag : 27; // 0..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 time_tag : 27; // 0..26
#endif
    };
    uint32  u32;
  } trigger;
  // MARK_COUNT(v1190_end);
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 word_count : 15; // 5..19
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1; // 24
      uint32 buffer_overflow : 1; // 25
      uint32 trigger_lost : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trigger_lost : 1; // 26
      uint32 buffer_overflow : 1; // 25
      uint32 tdc_error : 1; // 24
      uint32 dummy_20_23 : 4;
      uint32 word_count : 15; // 5..19
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } trailer;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1190);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1190.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190(geom)
template<typename __data_src_t>
void VME_CAEN_V1190::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._data;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  READ_FROM_BUFFER_FULL(430,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(427,header.geom,geom);
  CHECK_BITS_EQUAL(429,header.unnamed_27_31,8);
  // select several

    // tdc[0] = VME_CAEN_V1190_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[1] = VME_CAEN_V1190_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[2] = VME_CAEN_V1190_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[3] = VME_CAEN_V1190_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   // data=data);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: VME_CAEN_V1190_SUBTDC tdc[0]: (s32) => (0xff000000,0x08000000)
    // optimized match 2: VME_CAEN_V1190_SUBTDC tdc[1]: (s32) => (0xff000000,0x09000000)
    // optimized match 3: VME_CAEN_V1190_SUBTDC tdc[2]: (s32) => (0xff000000,0x0a000000)
    // optimized match 4: VME_CAEN_V1190_SUBTDC tdc[3]: (s32) => (0xff000000,0x0b000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(441,uint32,__match_peek);
    // differ = 03000000 : 24 25
    uint32 __match_index = 0 | /* 24,25 */ ((__match_peek >> 24) & 0x00000003);
    static const sint8 __match_index_array[4] = { 1, 2, 3, 4, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 0
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        CHECK_SPURIOUS_MATCH_DECL(434,spurious_match_abort_loop_0,VME_CAEN_V1190_SUBTDC,/*tdc*/0,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(434,VME_CAEN_V1190_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 2:
        CHECK_SPURIOUS_MATCH_DECL(436,spurious_match_abort_loop_0,VME_CAEN_V1190_SUBTDC,/*tdc*/1,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(436,VME_CAEN_V1190_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 3:
        CHECK_SPURIOUS_MATCH_DECL(438,spurious_match_abort_loop_0,VME_CAEN_V1190_SUBTDC,/*tdc*/2,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(438,VME_CAEN_V1190_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 4:
        CHECK_SPURIOUS_MATCH_DECL(440,spurious_match_abort_loop_0,VME_CAEN_V1190_SUBTDC,/*tdc*/3,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(440,VME_CAEN_V1190_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
    }
  }
  spurious_match_abort_loop_0:;
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  READ_FROM_BUFFER_FULL(446,uint32 ,trigger,trigger.u32);
  CHECK_BITS_EQUAL(445,trigger.unnamed_27_31,17);
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._data;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  READ_FROM_BUFFER_FULL(456,uint32 ,trailer,trailer.u32);
  CHECK_BITS_EQUAL(450,trailer.geom,geom);
  CHECK_WORD_COUNT(451,trailer.word_count,v1190_start,v1190_end,4,4);
  CHECK_BITS_EQUAL(455,trailer.unnamed_27_31,16);
  CHECK_UNNAMED_BITS_ZERO(456,trailer.u32,0x00f00000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1190.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190(geom)
template<typename __data_src_t>
bool VME_CAEN_V1190::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(430,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(427,__header.geom,geom);
  MATCH_BITS_EQUAL(429,__header.unnamed_27_31,8);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1190::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1190.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190(geom)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1190::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._offset;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  // select several

    // tdc[0] = VME_CAEN_V1190_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[1] = VME_CAEN_V1190_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[2] = VME_CAEN_V1190_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[3] = VME_CAEN_V1190_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   // data=data);
  {
    PACK_DECL(434,VME_CAEN_V1190_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(436,VME_CAEN_V1190_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(438,VME_CAEN_V1190_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(440,VME_CAEN_V1190_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
  }
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._offset;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V1190_SHORT
//
//
// Generating code for: VME_CAEN_V1190_SHORT_SUBTDC
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1190_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC(tdc,event_id,data)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1190_SHORT_SUBTDC
class VME_CAEN_V1190_SHORT_SUBTDC
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1190_SHORT_SUBTDC
class PACKER_VME_CAEN_V1190_SHORT_SUBTDC
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 tdc,uint32 event_id);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1190_SHORT_SUBTDC);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1190_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
void VME_CAEN_V1190_SHORT_SUBTDC::__unpack(__data_src_t &__buffer,uint32 tdc
                                                                 ,uint32 event_id
                                                                 ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 19; // 0..18
      uint32 channel_low : 5; // 19..23
      uint32 tdc : 2; // 24..25
      uint32 trailing : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trailing : 1; // 26
      uint32 tdc : 2; // 24..25
      uint32 channel_low : 5; // 19..23
      uint32 value : 19; // 0..18
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(512,uint32 ,ch_data,ch_data.u32);
  CHECK_BITS_EQUAL(508,ch_data.tdc,tdc);
  CHECK_BITS_EQUAL(510,ch_data.unnamed_27_31,0);
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(511,((ch_data.tdc << 5) | ch_data.channel_low));
    __item.value = ch_data.value;
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SHORT_SUBTDC::__unpack,uint32 tdc
                                                                      ,uint32 event_id
                                                                      ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1190_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
bool VME_CAEN_V1190_SHORT_SUBTDC::__match(__data_src_t &__buffer,uint32 tdc
                                                                ,uint32 event_id)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 19; // 0..18
      uint32 channel_low : 5; // 19..23
      uint32 tdc : 2; // 24..25
      uint32 trailing : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trailing : 1; // 26
      uint32 tdc : 2; // 24..25
      uint32 channel_low : 5; // 19..23
      uint32 value : 19; // 0..18
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(512,uint32 ,ch_data,ch_data.u32);
  MATCH_BITS_EQUAL(508,ch_data.tdc,tdc);
  MATCH_BITS_EQUAL(510,ch_data.unnamed_27_31,0);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1190_SHORT_SUBTDC::__match,uint32 tdc
                                                                     ,uint32 event_id);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1190_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC(tdc,event_id,data)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1190_SHORT_SUBTDC::__packer(__data_dest_t &__buffer,uint32 tdc
                                                                         ,uint32 event_id
                                                                         ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_18: value;
    // 19_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 5) | channel_low)],(value=value));
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SHORT_SUBTDC::__packer,uint32 tdc
                                                                      ,uint32 event_id);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V1190_SHORT_SUBTDC_ERROR
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1190_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1190_SHORT_SUBTDC_ERROR
class VME_CAEN_V1190_SHORT_SUBTDC_ERROR
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1190_SHORT_SUBTDC_ERROR
class PACKER_VME_CAEN_V1190_SHORT_SUBTDC_ERROR
#endif//PACKER_CODE

{
public:
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } error_flags;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 tdc);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 tdc);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 tdc);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1190_SHORT_SUBTDC_ERROR);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1190_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc)
template<typename __data_src_t>
void VME_CAEN_V1190_SHORT_SUBTDC_ERROR::__unpack(__data_src_t &__buffer,uint32 tdc)
{
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  READ_FROM_BUFFER_FULL(522,uint32 ,error_flags,error_flags.u32);
  CHECK_BITS_EQUAL(520,error_flags.tdc,tdc);
  CHECK_BITS_EQUAL(521,error_flags.unnamed_27_31,4);
  CHECK_UNNAMED_BITS_ZERO(522,error_flags.u32,0x04ff8000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SHORT_SUBTDC_ERROR::__unpack,uint32 tdc);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1190_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc)
template<typename __data_src_t>
bool VME_CAEN_V1190_SHORT_SUBTDC_ERROR::__match(__data_src_t &__buffer,uint32 tdc)
{
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } __error_flags;
  READ_FROM_BUFFER_FULL(522,uint32 ,error_flags,__error_flags.u32);
  MATCH_BITS_EQUAL(520,__error_flags.tdc,tdc);
  MATCH_BITS_EQUAL(521,__error_flags.unnamed_27_31,4);
  MATCH_UNNAMED_BITS_ZERO(522,__error_flags.u32,0x04ff8000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1190_SHORT_SUBTDC_ERROR::__match,uint32 tdc);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1190_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1190_SHORT_SUBTDC_ERROR::__packer(__data_dest_t &__buffer,uint32 tdc)
{
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SHORT_SUBTDC_ERROR::__packer,uint32 tdc);

/** END_PACKER ********************************************************/


/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1190_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1190_SHORT
class VME_CAEN_V1190_SHORT
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1190_SHORT
class PACKER_VME_CAEN_V1190_SHORT
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } header;
  // select several

    // tdc[0] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[1] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[2] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[3] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // norevisit err[0] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=0);
    // norevisit err[1] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=1);
    // norevisit err[2] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=2);
    // norevisit err[3] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=3);
  SINGLE(VME_CAEN_V1190_SHORT_SUBTDC,tdc[4]);
  SINGLE(VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[4]);
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 time_tag : 27; // 0..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 time_tag : 27; // 0..26
#endif
    };
    uint32  u32;
  } trigger;
  // MARK_COUNT(v1190_end);
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 word_count : 15; // 5..19
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1; // 24
      uint32 buffer_overflow : 1; // 25
      uint32 trigger_lost : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trigger_lost : 1; // 26
      uint32 buffer_overflow : 1; // 25
      uint32 tdc_error : 1; // 24
      uint32 dummy_20_23 : 4;
      uint32 word_count : 15; // 5..19
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } trailer;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1190_SHORT);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1190_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT(geom)
template<typename __data_src_t>
void VME_CAEN_V1190_SHORT::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._data;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  READ_FROM_BUFFER_FULL(468,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(465,header.geom,geom);
  CHECK_BITS_EQUAL(467,header.unnamed_27_31,8);
  // select several

    // tdc[0] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[1] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[2] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[3] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // norevisit err[0] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=0);
    // norevisit err[1] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=1);
    // norevisit err[2] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=2);
    // norevisit err[3] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=3);
  bitsone<4> __visited1;
  __visited1.clear();
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: VME_CAEN_V1190_SHORT_SUBTDC tdc[0]: (s32) => (0xfb000000,0x00000000)
    // optimized match 2: VME_CAEN_V1190_SHORT_SUBTDC tdc[1]: (s32) => (0xfb000000,0x01000000)
    // optimized match 3: VME_CAEN_V1190_SHORT_SUBTDC tdc[2]: (s32) => (0xfb000000,0x02000000)
    // optimized match 4: VME_CAEN_V1190_SHORT_SUBTDC tdc[3]: (s32) => (0xfb000000,0x03000000)
    // optimized match 5: VME_CAEN_V1190_SHORT_SUBTDC_ERROR err[0]: (s32) => (0xffff8000,0x20000000)
    // optimized match 6: VME_CAEN_V1190_SHORT_SUBTDC_ERROR err[1]: (s32) => (0xffff8000,0x21000000)
    // optimized match 7: VME_CAEN_V1190_SHORT_SUBTDC_ERROR err[2]: (s32) => (0xffff8000,0x22000000)
    // optimized match 8: VME_CAEN_V1190_SHORT_SUBTDC_ERROR err[3]: (s32) => (0xffff8000,0x23000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(483,uint32,__match_peek);
    // differ = 23000000 : 24 25 29
    uint32 __match_index = 0 | /* 24,25 */ ((__match_peek >> 24) & 0x00000003) | /* 29,29 */ ((__match_peek >> 27) & 0x00000004);
    static const sint8 __match_index_array[8] = { 1, 2, 3, 4, 5, 6, 7, 8, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 0
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        CHECK_SPURIOUS_MATCH_DECL(472,spurious_match_abort_loop_1,VME_CAEN_V1190_SHORT_SUBTDC,/*tdc*/0,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(472,VME_CAEN_V1190_SHORT_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 2:
        CHECK_SPURIOUS_MATCH_DECL(474,spurious_match_abort_loop_1,VME_CAEN_V1190_SHORT_SUBTDC,/*tdc*/1,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(474,VME_CAEN_V1190_SHORT_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 3:
        CHECK_SPURIOUS_MATCH_DECL(476,spurious_match_abort_loop_1,VME_CAEN_V1190_SHORT_SUBTDC,/*tdc*/2,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(476,VME_CAEN_V1190_SHORT_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 4:
        CHECK_SPURIOUS_MATCH_DECL(478,spurious_match_abort_loop_1,VME_CAEN_V1190_SHORT_SUBTDC,/*tdc*/3,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(478,VME_CAEN_V1190_SHORT_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 5:
        CHECK_SPURIOUS_MATCH_DECL(479,spurious_match_abort_loop_1,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,/*tdc*/0);
        UNPACK_CHECK_NO_REVISIT(479,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[0],__visited1,0);
        UNPACK_DECL(479,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[0],/*tdc*/0);
        break;
      case 6:
        CHECK_SPURIOUS_MATCH_DECL(480,spurious_match_abort_loop_1,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,/*tdc*/1);
        UNPACK_CHECK_NO_REVISIT(480,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[1],__visited1,1);
        UNPACK_DECL(480,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[1],/*tdc*/1);
        break;
      case 7:
        CHECK_SPURIOUS_MATCH_DECL(481,spurious_match_abort_loop_1,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,/*tdc*/2);
        UNPACK_CHECK_NO_REVISIT(481,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[2],__visited1,2);
        UNPACK_DECL(481,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[2],/*tdc*/2);
        break;
      case 8:
        CHECK_SPURIOUS_MATCH_DECL(482,spurious_match_abort_loop_1,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,/*tdc*/3);
        UNPACK_CHECK_NO_REVISIT(482,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[3],__visited1,3);
        UNPACK_DECL(482,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[3],/*tdc*/3);
        break;
    }
  }
  spurious_match_abort_loop_1:;
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  READ_FROM_BUFFER_FULL(488,uint32 ,trigger,trigger.u32);
  CHECK_BITS_EQUAL(487,trigger.unnamed_27_31,17);
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._data;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  READ_FROM_BUFFER_FULL(498,uint32 ,trailer,trailer.u32);
  CHECK_BITS_EQUAL(492,trailer.geom,geom);
  CHECK_WORD_COUNT(493,trailer.word_count,v1190_start,v1190_end,4,4);
  CHECK_BITS_EQUAL(497,trailer.unnamed_27_31,16);
  CHECK_UNNAMED_BITS_ZERO(498,trailer.u32,0x00f00000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SHORT::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1190_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT(geom)
template<typename __data_src_t>
bool VME_CAEN_V1190_SHORT::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(468,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(465,__header.geom,geom);
  MATCH_BITS_EQUAL(467,__header.unnamed_27_31,8);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1190_SHORT::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1190_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1190_SHORT(geom)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1190_SHORT::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._offset;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  // select several

    // tdc[0] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[1] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[2] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[3] = VME_CAEN_V1190_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // norevisit err[0] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=0);
    // norevisit err[1] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=1);
    // norevisit err[2] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=2);
    // norevisit err[3] = VME_CAEN_V1190_SHORT_SUBTDC_ERROR(tdc=3);
  {
    PACK_DECL(472,VME_CAEN_V1190_SHORT_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(474,VME_CAEN_V1190_SHORT_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(476,VME_CAEN_V1190_SHORT_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(478,VME_CAEN_V1190_SHORT_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(479,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[0],/*tdc*/0);
    PACK_DECL(480,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[1],/*tdc*/1);
    PACK_DECL(481,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[2],/*tdc*/2);
    PACK_DECL(482,VME_CAEN_V1190_SHORT_SUBTDC_ERROR,err[3],/*tdc*/3);
  }
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._offset;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1190_SHORT::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V1290
//
//
// Generating code for: VME_CAEN_V1290_SUBTDC
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1290_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SUBTDC(tdc,event_id,data)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1290_SUBTDC
class VME_CAEN_V1290_SUBTDC
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1290_SUBTDC
class PACKER_VME_CAEN_V1290_SUBTDC
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 bunch_id : 12; // 0..11
      uint32 event_id : 12; // 12..23
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 event_id : 12; // 12..23
      uint32 bunch_id : 12; // 0..11
#endif
    };
    uint32  u32;
  } header;
  // several UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }
  // optional UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } error_flags;
  // MARK_COUNT(tdc_end);
  // UINT32 trailer
  // {
    //  0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    // 12_23: event_id = CHECK(header.event_id);
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 3;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_count : 12; // 0..11
      uint32 event_id : 12; // 12..23
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 event_id : 12; // 12..23
      uint32 word_count : 12; // 0..11
#endif
    };
    uint32  u32;
  } trailer;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 tdc,uint32 event_id);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1290_SUBTDC);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1290_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
void VME_CAEN_V1290_SUBTDC::__unpack(__data_src_t &__buffer,uint32 tdc,uint32 event_id
                                                           ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  void *__mark_tdc_start = __buffer._data;
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  READ_FROM_BUFFER_FULL(675,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(672,header.event_id,event_id);
  CHECK_BITS_EQUAL(673,header.tdc,tdc);
  CHECK_BITS_EQUAL(674,header.unnamed_27_31,1);
  CHECK_UNNAMED_BITS_ZERO(675,header.u32,0x04000000);
  // several UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }
  for ( ; ; ) {
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 21; // 0..20
      uint32 channel_low : 3; // 21..23
      uint32 tdc : 2; // 24..25
      uint32 trailing : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trailing : 1; // 26
      uint32 tdc : 2; // 24..25
      uint32 channel_low : 3; // 21..23
      uint32 value : 21; // 0..20
#endif
    };
    uint32  u32;
  } ch_data;
  if (__buffer.empty()) goto data_done_2;
  PEEK_FROM_BUFFER_FULL(684,uint32 ,ch_data,ch_data.u32);
  CHECK_JUMP_BITS_EQUAL(680,ch_data.tdc,tdc,data_done_2);
  CHECK_JUMP_BITS_EQUAL(682,ch_data.unnamed_27_31,0,data_done_2);
  __buffer.advance(sizeof(ch_data.u32));
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(683,((ch_data.tdc << 3) | ch_data.channel_low));
    __item.value = ch_data.value;
  }
  }
  data_done_2:;
  // optional UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } __error_flags;
  if (__buffer.empty()) goto data_done_3;
  PEEK_FROM_BUFFER_FULL(690,uint32 ,error_flags,__error_flags.u32);
  CHECK_JUMP_BITS_EQUAL(688,__error_flags.tdc,tdc,data_done_3);
  CHECK_JUMP_BITS_EQUAL(689,__error_flags.unnamed_27_31,4,data_done_3);
  CHECK_JUMP_UNNAMED_BITS_ZERO(690,__error_flags.u32,0x04ff8000,data_done_3);
  error_flags.u32 = __error_flags.u32;
  __buffer.advance(sizeof(__error_flags.u32));
  data_done_3:;
  // MARK_COUNT(tdc_end);
  void *__mark_tdc_end = __buffer._data;
  // UINT32 trailer
  // {
    //  0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    // 12_23: event_id = CHECK(header.event_id);
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 3;
  // }
  READ_FROM_BUFFER_FULL(698,uint32 ,trailer,trailer.u32);
  CHECK_WORD_COUNT(694,trailer.word_count,tdc_start,tdc_end,4,4);
  CHECK_BITS_EQUAL(695,trailer.event_id,header.event_id);
  CHECK_BITS_EQUAL(696,trailer.tdc,tdc);
  CHECK_BITS_EQUAL(697,trailer.unnamed_27_31,3);
  CHECK_UNNAMED_BITS_ZERO(698,trailer.u32,0x04000000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SUBTDC::__unpack,uint32 tdc
                                                                ,uint32 event_id
                                                                ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1290_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
bool VME_CAEN_V1290_SUBTDC::__match(__data_src_t &__buffer,uint32 tdc,uint32 event_id)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 bunch_id : 12; // 0..11
      uint32 event_id : 12; // 12..23
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 event_id : 12; // 12..23
      uint32 bunch_id : 12; // 0..11
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(675,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(672,__header.event_id,event_id);
  MATCH_BITS_EQUAL(673,__header.tdc,tdc);
  MATCH_BITS_EQUAL(674,__header.unnamed_27_31,1);
  MATCH_UNNAMED_BITS_ZERO(675,__header.u32,0x04000000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1290_SUBTDC::__match,uint32 tdc
                                                               ,uint32 event_id);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1290_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SUBTDC(tdc,event_id,data)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1290_SUBTDC::__packer(__data_dest_t &__buffer,uint32 tdc
                                                                   ,uint32 event_id
                                                                   ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(tdc_start);
  void *__mark_tdc_start = __buffer._offset;
  // UINT32 header
  // {
    //  0_11: bunch_id;
    // 12_23: event_id = CHECK(event_id);
    // 24_25: tdc = MATCH(tdc);
    // 27_31: 1;
  // }
  // several UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }
  // optional UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  // MARK_COUNT(tdc_end);
  void *__mark_tdc_end = __buffer._offset;
  // UINT32 trailer
  // {
    //  0_11: word_count = CHECK_COUNT(tdc_start,tdc_end,4,4);
    // 12_23: event_id = CHECK(header.event_id);
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 3;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SUBTDC::__packer,uint32 tdc
                                                                ,uint32 event_id);

/** END_PACKER ********************************************************/


/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1290.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1290
class VME_CAEN_V1290
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1290
class PACKER_VME_CAEN_V1290
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } header;
  // select several

    // tdc[0] = VME_CAEN_V1290_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[1] = VME_CAEN_V1290_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[2] = VME_CAEN_V1290_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[3] = VME_CAEN_V1290_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   // data=data);
  SINGLE(VME_CAEN_V1290_SUBTDC,tdc[4]);
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 time_tag : 27; // 0..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 time_tag : 27; // 0..26
#endif
    };
    uint32  u32;
  } trigger;
  // MARK_COUNT(v1190_end);
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 word_count : 15; // 5..19
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1; // 24
      uint32 buffer_overflow : 1; // 25
      uint32 trigger_lost : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trigger_lost : 1; // 26
      uint32 buffer_overflow : 1; // 25
      uint32 tdc_error : 1; // 24
      uint32 dummy_20_23 : 4;
      uint32 word_count : 15; // 5..19
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } trailer;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1290);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1290.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290(geom)
template<typename __data_src_t>
void VME_CAEN_V1290::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._data;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  READ_FROM_BUFFER_FULL(570,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(567,header.geom,geom);
  CHECK_BITS_EQUAL(569,header.unnamed_27_31,8);
  // select several

    // tdc[0] = VME_CAEN_V1290_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[1] = VME_CAEN_V1290_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[2] = VME_CAEN_V1290_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[3] = VME_CAEN_V1290_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   // data=data);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: VME_CAEN_V1290_SUBTDC tdc[0]: (s32) => (0xff000000,0x08000000)
    // optimized match 2: VME_CAEN_V1290_SUBTDC tdc[1]: (s32) => (0xff000000,0x09000000)
    // optimized match 3: VME_CAEN_V1290_SUBTDC tdc[2]: (s32) => (0xff000000,0x0a000000)
    // optimized match 4: VME_CAEN_V1290_SUBTDC tdc[3]: (s32) => (0xff000000,0x0b000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(581,uint32,__match_peek);
    // differ = 03000000 : 24 25
    uint32 __match_index = 0 | /* 24,25 */ ((__match_peek >> 24) & 0x00000003);
    static const sint8 __match_index_array[4] = { 1, 2, 3, 4, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 0
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        CHECK_SPURIOUS_MATCH_DECL(574,spurious_match_abort_loop_2,VME_CAEN_V1290_SUBTDC,/*tdc*/0,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(574,VME_CAEN_V1290_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 2:
        CHECK_SPURIOUS_MATCH_DECL(576,spurious_match_abort_loop_2,VME_CAEN_V1290_SUBTDC,/*tdc*/1,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(576,VME_CAEN_V1290_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 3:
        CHECK_SPURIOUS_MATCH_DECL(578,spurious_match_abort_loop_2,VME_CAEN_V1290_SUBTDC,/*tdc*/2,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(578,VME_CAEN_V1290_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 4:
        CHECK_SPURIOUS_MATCH_DECL(580,spurious_match_abort_loop_2,VME_CAEN_V1290_SUBTDC,/*tdc*/3,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(580,VME_CAEN_V1290_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
    }
  }
  spurious_match_abort_loop_2:;
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  READ_FROM_BUFFER_FULL(586,uint32 ,trigger,trigger.u32);
  CHECK_BITS_EQUAL(585,trigger.unnamed_27_31,17);
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._data;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  READ_FROM_BUFFER_FULL(596,uint32 ,trailer,trailer.u32);
  CHECK_BITS_EQUAL(590,trailer.geom,geom);
  CHECK_WORD_COUNT(591,trailer.word_count,v1190_start,v1190_end,4,4);
  CHECK_BITS_EQUAL(595,trailer.unnamed_27_31,16);
  CHECK_UNNAMED_BITS_ZERO(596,trailer.u32,0x00f00000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1290.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290(geom)
template<typename __data_src_t>
bool VME_CAEN_V1290::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(570,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(567,__header.geom,geom);
  MATCH_BITS_EQUAL(569,__header.unnamed_27_31,8);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1290::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1290.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290(geom)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1290::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._offset;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  // select several

    // tdc[0] = VME_CAEN_V1290_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[1] = VME_CAEN_V1290_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[2] = VME_CAEN_V1290_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                   // data=data);
    // tdc[3] = VME_CAEN_V1290_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                   // data=data);
  {
    PACK_DECL(574,VME_CAEN_V1290_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(576,VME_CAEN_V1290_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(578,VME_CAEN_V1290_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(580,VME_CAEN_V1290_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
  }
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._offset;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V1290_SHORT
//
//
// Generating code for: VME_CAEN_V1290_SHORT_SUBTDC
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1290_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC(tdc,event_id,data)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1290_SHORT_SUBTDC
class VME_CAEN_V1290_SHORT_SUBTDC
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1290_SHORT_SUBTDC
class PACKER_VME_CAEN_V1290_SHORT_SUBTDC
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 tdc,uint32 event_id);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 tdc,uint32 event_id,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1290_SHORT_SUBTDC);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1290_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
void VME_CAEN_V1290_SHORT_SUBTDC::__unpack(__data_src_t &__buffer,uint32 tdc
                                                                 ,uint32 event_id
                                                                 ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 21; // 0..20
      uint32 channel_low : 3; // 21..23
      uint32 tdc : 2; // 24..25
      uint32 trailing : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trailing : 1; // 26
      uint32 tdc : 2; // 24..25
      uint32 channel_low : 3; // 21..23
      uint32 value : 21; // 0..20
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(652,uint32 ,ch_data,ch_data.u32);
  CHECK_BITS_EQUAL(648,ch_data.tdc,tdc);
  CHECK_BITS_EQUAL(650,ch_data.unnamed_27_31,0);
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(651,((ch_data.tdc << 3) | ch_data.channel_low));
    __item.value = ch_data.value;
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SHORT_SUBTDC::__unpack,uint32 tdc
                                                                      ,uint32 event_id
                                                                      ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1290_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC(tdc,event_id,data)
template<typename __data_src_t>
bool VME_CAEN_V1290_SHORT_SUBTDC::__match(__data_src_t &__buffer,uint32 tdc
                                                                ,uint32 event_id)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 21; // 0..20
      uint32 channel_low : 3; // 21..23
      uint32 tdc : 2; // 24..25
      uint32 trailing : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trailing : 1; // 26
      uint32 tdc : 2; // 24..25
      uint32 channel_low : 3; // 21..23
      uint32 value : 21; // 0..20
#endif
    };
    uint32  u32;
  } ch_data;
  READ_FROM_BUFFER_FULL(652,uint32 ,ch_data,ch_data.u32);
  MATCH_BITS_EQUAL(648,ch_data.tdc,tdc);
  MATCH_BITS_EQUAL(650,ch_data.unnamed_27_31,0);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1290_SHORT_SUBTDC::__match,uint32 tdc
                                                                     ,uint32 event_id);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1290_SHORT_SUBTDC.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC(tdc,event_id,data)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1290_SHORT_SUBTDC::__packer(__data_dest_t &__buffer,uint32 tdc
                                                                         ,uint32 event_id
                                                                         ,raw_array_multi_zero_suppress<DATA24,DATA24,32,128> &data)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // UINT32 ch_data NOENCODE
  // {
    //  0_20: value;
    // 21_23: channel_low;
    // 24_25: tdc = CHECK(tdc);
    //    26: trailing;
    // 27_31: 0;
    // ENCODE(data[((tdc << 3) | channel_low)],(value=value));
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SHORT_SUBTDC::__packer,uint32 tdc
                                                                      ,uint32 event_id);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V1290_SHORT_SUBTDC_ERROR
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1290_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1290_SHORT_SUBTDC_ERROR
class VME_CAEN_V1290_SHORT_SUBTDC_ERROR
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1290_SHORT_SUBTDC_ERROR
class PACKER_VME_CAEN_V1290_SHORT_SUBTDC_ERROR
#endif//PACKER_CODE

{
public:
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } error_flags;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 tdc);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 tdc);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 tdc);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1290_SHORT_SUBTDC_ERROR);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1290_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc)
template<typename __data_src_t>
void VME_CAEN_V1290_SHORT_SUBTDC_ERROR::__unpack(__data_src_t &__buffer,uint32 tdc)
{
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  READ_FROM_BUFFER_FULL(662,uint32 ,error_flags,error_flags.u32);
  CHECK_BITS_EQUAL(660,error_flags.tdc,tdc);
  CHECK_BITS_EQUAL(661,error_flags.unnamed_27_31,4);
  CHECK_UNNAMED_BITS_ZERO(662,error_flags.u32,0x04ff8000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SHORT_SUBTDC_ERROR::__unpack,uint32 tdc);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1290_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc)
template<typename __data_src_t>
bool VME_CAEN_V1290_SHORT_SUBTDC_ERROR::__match(__data_src_t &__buffer,uint32 tdc)
{
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 flags : 15; // 0..14
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2; // 24..25
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 dummy_26 : 1;
      uint32 tdc : 2; // 24..25
      uint32 dummy_15_23 : 9;
      uint32 flags : 15; // 0..14
#endif
    };
    uint32  u32;
  } __error_flags;
  READ_FROM_BUFFER_FULL(662,uint32 ,error_flags,__error_flags.u32);
  MATCH_BITS_EQUAL(660,__error_flags.tdc,tdc);
  MATCH_BITS_EQUAL(661,__error_flags.unnamed_27_31,4);
  MATCH_UNNAMED_BITS_ZERO(662,__error_flags.u32,0x04ff8000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1290_SHORT_SUBTDC_ERROR::__match,uint32 tdc);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1290_SHORT_SUBTDC_ERROR.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1290_SHORT_SUBTDC_ERROR::__packer(__data_dest_t &__buffer,uint32 tdc)
{
  // UINT32 error_flags
  // {
    //  0_14: flags;
    // 24_25: tdc = CHECK(tdc);
    // 27_31: 4;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SHORT_SUBTDC_ERROR::__packer,uint32 tdc);

/** END_PACKER ********************************************************/


/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V1290_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V1290_SHORT
class VME_CAEN_V1290_SHORT
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V1290_SHORT
class PACKER_VME_CAEN_V1290_SHORT
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } header;
  // select several

    // tdc[0] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[1] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[2] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[3] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // norevisit err[0] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=0);
    // norevisit err[1] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=1);
    // norevisit err[2] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=2);
    // norevisit err[3] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=3);
  SINGLE(VME_CAEN_V1290_SHORT_SUBTDC,tdc[4]);
  SINGLE(VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[4]);
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 time_tag : 27; // 0..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 time_tag : 27; // 0..26
#endif
    };
    uint32  u32;
  } trigger;
  // MARK_COUNT(v1190_end);
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 word_count : 15; // 5..19
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1; // 24
      uint32 buffer_overflow : 1; // 25
      uint32 trigger_lost : 1; // 26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 trigger_lost : 1; // 26
      uint32 buffer_overflow : 1; // 25
      uint32 tdc_error : 1; // 24
      uint32 dummy_20_23 : 4;
      uint32 word_count : 15; // 5..19
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } trailer;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V1290_SHORT);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V1290_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT(geom)
template<typename __data_src_t>
void VME_CAEN_V1290_SHORT::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._data;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  READ_FROM_BUFFER_FULL(608,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(605,header.geom,geom);
  CHECK_BITS_EQUAL(607,header.unnamed_27_31,8);
  // select several

    // tdc[0] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[1] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[2] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[3] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // norevisit err[0] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=0);
    // norevisit err[1] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=1);
    // norevisit err[2] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=2);
    // norevisit err[3] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=3);
  bitsone<4> __visited2;
  __visited2.clear();
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: VME_CAEN_V1290_SHORT_SUBTDC tdc[0]: (s32) => (0xfb000000,0x00000000)
    // optimized match 2: VME_CAEN_V1290_SHORT_SUBTDC tdc[1]: (s32) => (0xfb000000,0x01000000)
    // optimized match 3: VME_CAEN_V1290_SHORT_SUBTDC tdc[2]: (s32) => (0xfb000000,0x02000000)
    // optimized match 4: VME_CAEN_V1290_SHORT_SUBTDC tdc[3]: (s32) => (0xfb000000,0x03000000)
    // optimized match 5: VME_CAEN_V1290_SHORT_SUBTDC_ERROR err[0]: (s32) => (0xffff8000,0x20000000)
    // optimized match 6: VME_CAEN_V1290_SHORT_SUBTDC_ERROR err[1]: (s32) => (0xffff8000,0x21000000)
    // optimized match 7: VME_CAEN_V1290_SHORT_SUBTDC_ERROR err[2]: (s32) => (0xffff8000,0x22000000)
    // optimized match 8: VME_CAEN_V1290_SHORT_SUBTDC_ERROR err[3]: (s32) => (0xffff8000,0x23000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(623,uint32,__match_peek);
    // differ = 23000000 : 24 25 29
    uint32 __match_index = 0 | /* 24,25 */ ((__match_peek >> 24) & 0x00000003) | /* 29,29 */ ((__match_peek >> 27) & 0x00000004);
    static const sint8 __match_index_array[8] = { 1, 2, 3, 4, 5, 6, 7, 8, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 0
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        CHECK_SPURIOUS_MATCH_DECL(612,spurious_match_abort_loop_3,VME_CAEN_V1290_SHORT_SUBTDC,/*tdc*/0,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(612,VME_CAEN_V1290_SHORT_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 2:
        CHECK_SPURIOUS_MATCH_DECL(614,spurious_match_abort_loop_3,VME_CAEN_V1290_SHORT_SUBTDC,/*tdc*/1,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(614,VME_CAEN_V1290_SHORT_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 3:
        CHECK_SPURIOUS_MATCH_DECL(616,spurious_match_abort_loop_3,VME_CAEN_V1290_SHORT_SUBTDC,/*tdc*/2,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(616,VME_CAEN_V1290_SHORT_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 4:
        CHECK_SPURIOUS_MATCH_DECL(618,spurious_match_abort_loop_3,VME_CAEN_V1290_SHORT_SUBTDC,/*tdc*/3,/*event_id*/(header.event_number & 0xfff)/*,data:member*/);
        UNPACK_DECL(618,VME_CAEN_V1290_SHORT_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
        break;
      case 5:
        CHECK_SPURIOUS_MATCH_DECL(619,spurious_match_abort_loop_3,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,/*tdc*/0);
        UNPACK_CHECK_NO_REVISIT(619,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[0],__visited2,0);
        UNPACK_DECL(619,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[0],/*tdc*/0);
        break;
      case 6:
        CHECK_SPURIOUS_MATCH_DECL(620,spurious_match_abort_loop_3,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,/*tdc*/1);
        UNPACK_CHECK_NO_REVISIT(620,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[1],__visited2,1);
        UNPACK_DECL(620,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[1],/*tdc*/1);
        break;
      case 7:
        CHECK_SPURIOUS_MATCH_DECL(621,spurious_match_abort_loop_3,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,/*tdc*/2);
        UNPACK_CHECK_NO_REVISIT(621,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[2],__visited2,2);
        UNPACK_DECL(621,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[2],/*tdc*/2);
        break;
      case 8:
        CHECK_SPURIOUS_MATCH_DECL(622,spurious_match_abort_loop_3,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,/*tdc*/3);
        UNPACK_CHECK_NO_REVISIT(622,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[3],__visited2,3);
        UNPACK_DECL(622,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[3],/*tdc*/3);
        break;
    }
  }
  spurious_match_abort_loop_3:;
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  READ_FROM_BUFFER_FULL(628,uint32 ,trigger,trigger.u32);
  CHECK_BITS_EQUAL(627,trigger.unnamed_27_31,17);
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._data;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
  READ_FROM_BUFFER_FULL(638,uint32 ,trailer,trailer.u32);
  CHECK_BITS_EQUAL(632,trailer.geom,geom);
  CHECK_WORD_COUNT(633,trailer.word_count,v1190_start,v1190_end,4,4);
  CHECK_BITS_EQUAL(637,trailer.unnamed_27_31,16);
  CHECK_UNNAMED_BITS_ZERO(638,trailer.u32,0x00f00000);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SHORT::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V1290_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT(geom)
template<typename __data_src_t>
bool VME_CAEN_V1290_SHORT::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 geom : 5; // 0..4
      uint32 event_number : 22; // 5..26
      uint32 unnamed_27_31 : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_27_31 : 5; // 27..31
      uint32 event_number : 22; // 5..26
      uint32 geom : 5; // 0..4
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(608,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(605,__header.geom,geom);
  MATCH_BITS_EQUAL(607,__header.unnamed_27_31,8);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V1290_SHORT::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V1290_SHORT.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V1290_SHORT(geom)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V1290_SHORT::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA24 data[32] ZERO_SUPPRESS_MULTI(128));
  // MARK_COUNT(v1190_start);
  void *__mark_v1190_start = __buffer._offset;
  // UINT32 header
  // {
    //  0_04: geom = MATCH(geom);
    //  5_26: event_number;
    // 27_31: 8;
  // }
  // select several

    // tdc[0] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=0,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[1] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=1,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[2] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=2,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // tdc[3] = VME_CAEN_V1290_SHORT_SUBTDC(tdc=3,event_id=(header.event_number & 0xfff),
                                         // data=data);
    // norevisit err[0] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=0);
    // norevisit err[1] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=1);
    // norevisit err[2] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=2);
    // norevisit err[3] = VME_CAEN_V1290_SHORT_SUBTDC_ERROR(tdc=3);
  {
    PACK_DECL(612,VME_CAEN_V1290_SHORT_SUBTDC,tdc[0],/*tdc*/0,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(614,VME_CAEN_V1290_SHORT_SUBTDC,tdc[1],/*tdc*/1,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(616,VME_CAEN_V1290_SHORT_SUBTDC,tdc[2],/*tdc*/2,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(618,VME_CAEN_V1290_SHORT_SUBTDC,tdc[3],/*tdc*/3,/*event_id*/(header.event_number & 0xfff),/*data*/data);
    PACK_DECL(619,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[0],/*tdc*/0);
    PACK_DECL(620,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[1],/*tdc*/1);
    PACK_DECL(621,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[2],/*tdc*/2);
    PACK_DECL(622,VME_CAEN_V1290_SHORT_SUBTDC_ERROR,err[3],/*tdc*/3);
  }
  // UINT32 trigger
  // {
    //  0_26: time_tag;
    // 27_31: 17;
  // }
  // MARK_COUNT(v1190_end);
  void *__mark_v1190_end = __buffer._offset;
  // UINT32 trailer
  // {
    //  0_04: geom = CHECK(geom);
    //  5_19: word_count = CHECK_COUNT(v1190_start,v1190_end,4,4);
    //    24: tdc_error;
    //    25: buffer_overflow;
    //    26: trigger_lost;
    // 27_31: 16;
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V1290_SHORT::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V775
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V775.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V775(geom,crate)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V775
class VME_CAEN_V775
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V775
class PACKER_VME_CAEN_V775
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA12_OVERFLOW data[32] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA12_OVERFLOW,DATA12_OVERFLOW,32> data;
  // UINT32 header NOENCODE
  // {
    //  8_13: count;
    // 16_23: crate = MATCH(crate);
    // 24_26: 2;
    // 27_31: geom = MATCH(geom);
  // }
  // list(0<=index<header.count)

    // UINT32 ch_data NOENCODE
    // {
      //  0_11: value;
      //    12: overflow;
      //    13: underflow;
      //    14: valid;
      // 16_20: channel;
      // 24_26: 0;
      // 27_31: geom = CHECK(geom);
      // ENCODE(data[channel],(value=value,overflow=overflow));
    // }
  // UINT32 eob
  // {
    //  0_23: event_number;
    // 24_26: 4;
    // 27_31: geom = CHECK(geom);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 event_number : 24; // 0..23
      uint32 unnamed_24_26 : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 unnamed_24_26 : 3; // 24..26
      uint32 event_number : 24; // 0..23
#endif
    };
    uint32  u32;
  } eob;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom,uint32 crate);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom,uint32 crate);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom,uint32 crate);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V775);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V775.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V775(geom,crate)
template<typename __data_src_t>
void VME_CAEN_V775::__unpack(__data_src_t &__buffer,uint32 geom,uint32 crate)
{
  // MEMBER(DATA12_OVERFLOW data[32] ZERO_SUPPRESS);
  // UINT32 header NOENCODE
  // {
    //  8_13: count;
    // 16_23: crate = MATCH(crate);
    // 24_26: 2;
    // 27_31: geom = MATCH(geom);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 dummy_0_7 : 8;
      uint32 count : 6; // 8..13
      uint32 dummy_14_15 : 2;
      uint32 crate : 8; // 16..23
      uint32 unnamed_24_26 : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 unnamed_24_26 : 3; // 24..26
      uint32 crate : 8; // 16..23
      uint32 dummy_14_15 : 2;
      uint32 count : 6; // 8..13
      uint32 dummy_0_7 : 8;
#endif
    };
    uint32  u32;
  } header;
  READ_FROM_BUFFER_FULL(710,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(707,header.crate,crate);
  CHECK_BITS_EQUAL(708,header.unnamed_24_26,2);
  CHECK_BITS_EQUAL(709,header.geom,geom);
  CHECK_UNNAMED_BITS_ZERO(710,header.u32,0x0000c0ff);
  // list(0<=index<header.count)

  for (uint32 index = 0; index < (uint32) (header.count); ++index)
  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_11: value;
      //    12: overflow;
      //    13: underflow;
      //    14: valid;
      // 16_20: channel;
      // 24_26: 0;
      // 27_31: geom = CHECK(geom);
      // ENCODE(data[channel],(value=value,overflow=overflow));
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 value : 12; // 0..11
        uint32 overflow : 1; // 12
        uint32 underflow : 1; // 13
        uint32 valid : 1; // 14
        uint32 dummy_15 : 1;
        uint32 channel : 5; // 16..20
        uint32 dummy_21_23 : 3;
        uint32 unnamed_24_26 : 3; // 24..26
        uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 geom : 5; // 27..31
        uint32 unnamed_24_26 : 3; // 24..26
        uint32 dummy_21_23 : 3;
        uint32 channel : 5; // 16..20
        uint32 dummy_15 : 1;
        uint32 valid : 1; // 14
        uint32 underflow : 1; // 13
        uint32 overflow : 1; // 12
        uint32 value : 12; // 0..11
#endif
      };
      uint32  u32;
    } ch_data;
    READ_FROM_BUFFER_FULL(723,uint32 ,ch_data,ch_data.u32);
    CHECK_BITS_EQUAL(720,ch_data.unnamed_24_26,0);
    CHECK_BITS_EQUAL(721,ch_data.geom,geom);
    CHECK_UNNAMED_BITS_ZERO(723,ch_data.u32,0x00e08000);
    {
      typedef __typeof__(*(&(data))) __array_t;
      typedef typename __array_t::item_t __item_t;
      __item_t &__item = data.insert_index(722,ch_data.channel);
      __item.value = ch_data.value;
      __item.overflow = ch_data.overflow;
    }
  }
  // UINT32 eob
  // {
    //  0_23: event_number;
    // 24_26: 4;
    // 27_31: geom = CHECK(geom);
  // }
  READ_FROM_BUFFER_FULL(730,uint32 ,eob,eob.u32);
  CHECK_BITS_EQUAL(728,eob.unnamed_24_26,4);
  CHECK_BITS_EQUAL(729,eob.geom,geom);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V775::__unpack,uint32 geom,uint32 crate);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V775.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V775(geom,crate)
template<typename __data_src_t>
bool VME_CAEN_V775::__match(__data_src_t &__buffer,uint32 geom,uint32 crate)
{
  // MEMBER(DATA12_OVERFLOW data[32] ZERO_SUPPRESS);
  // UINT32 header NOENCODE
  // {
    //  8_13: count;
    // 16_23: crate = MATCH(crate);
    // 24_26: 2;
    // 27_31: geom = MATCH(geom);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 dummy_0_7 : 8;
      uint32 count : 6; // 8..13
      uint32 dummy_14_15 : 2;
      uint32 crate : 8; // 16..23
      uint32 unnamed_24_26 : 3; // 24..26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 unnamed_24_26 : 3; // 24..26
      uint32 crate : 8; // 16..23
      uint32 dummy_14_15 : 2;
      uint32 count : 6; // 8..13
      uint32 dummy_0_7 : 8;
#endif
    };
    uint32  u32;
  } header;
  READ_FROM_BUFFER_FULL(710,uint32 ,header,header.u32);
  MATCH_BITS_EQUAL(707,header.crate,crate);
  MATCH_BITS_EQUAL(708,header.unnamed_24_26,2);
  MATCH_BITS_EQUAL(709,header.geom,geom);
  MATCH_UNNAMED_BITS_ZERO(710,header.u32,0x0000c0ff);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V775::__match,uint32 geom,uint32 crate);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V775.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V775(geom,crate)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V775::__packer(__data_dest_t &__buffer,uint32 geom,uint32 crate)
{
  // MEMBER(DATA12_OVERFLOW data[32] ZERO_SUPPRESS);
  // UINT32 header NOENCODE
  // {
    //  8_13: count;
    // 16_23: crate = MATCH(crate);
    // 24_26: 2;
    // 27_31: geom = MATCH(geom);
  // }
  // list(0<=index<header.count)

  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_11: value;
      //    12: overflow;
      //    13: underflow;
      //    14: valid;
      // 16_20: channel;
      // 24_26: 0;
      // 27_31: geom = CHECK(geom);
      // ENCODE(data[channel],(value=value,overflow=overflow));
    // }
  }
  // UINT32 eob
  // {
    //  0_23: event_number;
    // 24_26: 4;
    // 27_31: geom = CHECK(geom);
  // }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V775::__packer,uint32 geom,uint32 crate);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_CAEN_V830
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_CAEN_V830.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V830(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_CAEN_V830
class VME_CAEN_V830
#else//PACKER_CODE
# define DECLARED_PACKER_VME_CAEN_V830
class PACKER_VME_CAEN_V830
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA32,DATA32,32> data;
  // UINT32 header
  // {
    //  0_15: event_number;
    // 16_17: ts;
    // 18_23: count;
    //    26: 1;
    // 27_31: geom = MATCH(geom);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 event_number : 16; // 0..15
      uint32 ts : 2; // 16..17
      uint32 count : 6; // 18..23
      uint32 dummy_24_25 : 2;
      uint32 unnamed_26_26 : 1; // 26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 unnamed_26_26 : 1; // 26
      uint32 dummy_24_25 : 2;
      uint32 count : 6; // 18..23
      uint32 ts : 2; // 16..17
      uint32 event_number : 16; // 0..15
#endif
    };
    uint32  u32;
  } header;
  // list(0<=index<header.count)

    // UINT32 ch_data NOENCODE
    // {
      //  0_25: value;
      //    26: 0;
      // 27_31: channel;
      // ENCODE(data[channel],(value=value));
    // }

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_CAEN_V830);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_CAEN_V830.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V830(geom)
template<typename __data_src_t>
void VME_CAEN_V830::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  // UINT32 header
  // {
    //  0_15: event_number;
    // 16_17: ts;
    // 18_23: count;
    //    26: 1;
    // 27_31: geom = MATCH(geom);
  // }
  READ_FROM_BUFFER_FULL(743,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(741,header.unnamed_26_26,1);
  CHECK_BITS_EQUAL(742,header.geom,geom);
  CHECK_UNNAMED_BITS_ZERO(743,header.u32,0x03000000);
  // list(0<=index<header.count)

  for (uint32 index = 0; index < (uint32) (header.count); ++index)
  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_25: value;
      //    26: 0;
      // 27_31: channel;
      // ENCODE(data[channel],(value=value));
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 value : 26; // 0..25
        uint32 unnamed_26_26 : 1; // 26
        uint32 channel : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 channel : 5; // 27..31
        uint32 unnamed_26_26 : 1; // 26
        uint32 value : 26; // 0..25
#endif
      };
      uint32  u32;
    } ch_data;
    READ_FROM_BUFFER_FULL(752,uint32 ,ch_data,ch_data.u32);
    CHECK_BITS_EQUAL(749,ch_data.unnamed_26_26,0);
    {
      typedef __typeof__(*(&(data))) __array_t;
      typedef typename __array_t::item_t __item_t;
      __item_t &__item = data.insert_index(751,ch_data.channel);
      __item.value = ch_data.value;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V830::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_CAEN_V830.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V830(geom)
template<typename __data_src_t>
bool VME_CAEN_V830::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  // UINT32 header
  // {
    //  0_15: event_number;
    // 16_17: ts;
    // 18_23: count;
    //    26: 1;
    // 27_31: geom = MATCH(geom);
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 event_number : 16; // 0..15
      uint32 ts : 2; // 16..17
      uint32 count : 6; // 18..23
      uint32 dummy_24_25 : 2;
      uint32 unnamed_26_26 : 1; // 26
      uint32 geom : 5; // 27..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 geom : 5; // 27..31
      uint32 unnamed_26_26 : 1; // 26
      uint32 dummy_24_25 : 2;
      uint32 count : 6; // 18..23
      uint32 ts : 2; // 16..17
      uint32 event_number : 16; // 0..15
#endif
    };
    uint32  u32;
  } __header;
  READ_FROM_BUFFER_FULL(743,uint32 ,header,__header.u32);
  MATCH_BITS_EQUAL(741,__header.unnamed_26_26,1);
  MATCH_BITS_EQUAL(742,__header.geom,geom);
  MATCH_UNNAMED_BITS_ZERO(743,__header.u32,0x03000000);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_CAEN_V830::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_CAEN_V830.
 *
 * Do not edit - automatically generated.
 */

// VME_CAEN_V830(geom)
template<typename __data_dest_t>
void PACKER_VME_CAEN_V830::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA32 data[32] ZERO_SUPPRESS);
  // UINT32 header
  // {
    //  0_15: event_number;
    // 16_17: ts;
    // 18_23: count;
    //    26: 1;
    // 27_31: geom = MATCH(geom);
  // }
  // list(0<=index<header.count)

  {
    // UINT32 ch_data NOENCODE
    // {
      //  0_25: value;
      //    26: 0;
      // 27_31: channel;
      // ENCODE(data[channel],(value=value));
    // }
  }
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_CAEN_V830::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_MESYTEC_MADC32
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_MESYTEC_MADC32.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MADC32(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_MESYTEC_MADC32
class VME_MESYTEC_MADC32
#else//PACKER_CODE
# define DECLARED_PACKER_VME_MESYTEC_MADC32
class PACKER_VME_MESYTEC_MADC32
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA14_OVERFLOW data[32] ZERO_SUPPRESS);
  raw_array_zero_suppress<DATA14_OVERFLOW,DATA14_OVERFLOW,32> data;
  // MARK_COUNT(start);
  // UINT32 header NOENCODE
  // {
    //  0_11: word_number;
    // 12_14: adc_resol;
    //    15: out_form;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  // several UINT32 ch_data NOENCODE
  // {
    //  0_12: value;
    //    14: outofrange;
    // 16_20: channel;
    // 21_29: 32;
    // 30_31: 0;
    // ENCODE(data[channel],(value=value,overflow=outofrange));
  // }
  // optional UINT32 filler NOENCODE
  // {
    //  0_31: 0;
  // }
  // UINT32 end_of_event
  // {
    //  0_29: counter;
    // 30_31: 3;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 counter : 30; // 0..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 counter : 30; // 0..29
#endif
    };
    uint32  u32;
  } end_of_event;
  // MARK_COUNT(end);
  // CHECK_COUNT(header.word_number,start,end,( - 4),4)

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_MESYTEC_MADC32);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_MESYTEC_MADC32.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MADC32(geom)
template<typename __data_src_t>
void VME_MESYTEC_MADC32::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA14_OVERFLOW data[32] ZERO_SUPPRESS);
  // MARK_COUNT(start);
  void *__mark_start = __buffer._data;
  // UINT32 header NOENCODE
  // {
    //  0_11: word_number;
    // 12_14: adc_resol;
    //    15: out_form;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_number : 12; // 0..11
      uint32 adc_resol : 3; // 12..14
      uint32 out_form : 1; // 15
      uint32 geom : 8; // 16..23
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 geom : 8; // 16..23
      uint32 out_form : 1; // 15
      uint32 adc_resol : 3; // 12..14
      uint32 word_number : 12; // 0..11
#endif
    };
    uint32  u32;
  } header;
  READ_FROM_BUFFER_FULL(768,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(765,header.geom,geom);
  CHECK_BITS_EQUAL(766,header.unnamed_24_29,0);
  CHECK_BITS_EQUAL(767,header.unnamed_30_31,1);
  // several UINT32 ch_data NOENCODE
  // {
    //  0_12: value;
    //    14: outofrange;
    // 16_20: channel;
    // 21_29: 32;
    // 30_31: 0;
    // ENCODE(data[channel],(value=value,overflow=outofrange));
  // }
  for ( ; ; ) {
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 13; // 0..12
      uint32 dummy_13 : 1;
      uint32 outofrange : 1; // 14
      uint32 dummy_15 : 1;
      uint32 channel : 5; // 16..20
      uint32 unnamed_21_29 : 9; // 21..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 unnamed_21_29 : 9; // 21..29
      uint32 channel : 5; // 16..20
      uint32 dummy_15 : 1;
      uint32 outofrange : 1; // 14
      uint32 dummy_13 : 1;
      uint32 value : 13; // 0..12
#endif
    };
    uint32  u32;
  } ch_data;
  if (__buffer.empty()) goto data_done_4;
  PEEK_FROM_BUFFER_FULL(777,uint32 ,ch_data,ch_data.u32);
  CHECK_JUMP_BITS_EQUAL(774,ch_data.unnamed_21_29,32,data_done_4);
  CHECK_JUMP_BITS_EQUAL(775,ch_data.unnamed_30_31,0,data_done_4);
  CHECK_JUMP_UNNAMED_BITS_ZERO(777,ch_data.u32,0x0000a000,data_done_4);
  __buffer.advance(sizeof(ch_data.u32));
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(776,ch_data.channel);
    __item.value = ch_data.value;
    __item.overflow = ch_data.outofrange;
  }
  }
  data_done_4:;
  // optional UINT32 filler NOENCODE
  // {
    //  0_31: 0;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 unnamed_0_31 : 32; // 0..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_0_31 : 32; // 0..31
#endif
    };
    uint32  u32;
  } filler;
  if (__buffer.empty()) goto data_done_5;
  PEEK_FROM_BUFFER_FULL(781,uint32 ,filler,filler.u32);
  CHECK_JUMP_BITS_EQUAL(780,filler.unnamed_0_31,0,data_done_5);
  __buffer.advance(sizeof(filler.u32));
  data_done_5:;
  // UINT32 end_of_event
  // {
    //  0_29: counter;
    // 30_31: 3;
  // }
  READ_FROM_BUFFER_FULL(786,uint32 ,end_of_event,end_of_event.u32);
  CHECK_BITS_EQUAL(785,end_of_event.unnamed_30_31,3);
  // MARK_COUNT(end);
  void *__mark_end = __buffer._data;
  // CHECK_COUNT(header.word_number,start,end,( - 4),4)
  CHECK_WORD_COUNT(788,header.word_number,start,end,( - 4),4);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_MESYTEC_MADC32::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_MESYTEC_MADC32.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MADC32(geom)
template<typename __data_src_t>
bool VME_MESYTEC_MADC32::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA14_OVERFLOW data[32] ZERO_SUPPRESS);
  // MARK_COUNT(start);
  // UINT32 header NOENCODE
  // {
    //  0_11: word_number;
    // 12_14: adc_resol;
    //    15: out_form;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_number : 12; // 0..11
      uint32 adc_resol : 3; // 12..14
      uint32 out_form : 1; // 15
      uint32 geom : 8; // 16..23
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 geom : 8; // 16..23
      uint32 out_form : 1; // 15
      uint32 adc_resol : 3; // 12..14
      uint32 word_number : 12; // 0..11
#endif
    };
    uint32  u32;
  } header;
  READ_FROM_BUFFER_FULL(768,uint32 ,header,header.u32);
  MATCH_BITS_EQUAL(765,header.geom,geom);
  MATCH_BITS_EQUAL(766,header.unnamed_24_29,0);
  MATCH_BITS_EQUAL(767,header.unnamed_30_31,1);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_MESYTEC_MADC32::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_MESYTEC_MADC32.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MADC32(geom)
template<typename __data_dest_t>
void PACKER_VME_MESYTEC_MADC32::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA14_OVERFLOW data[32] ZERO_SUPPRESS);
  // MARK_COUNT(start);
  void *__mark_start = __buffer._offset;
  // UINT32 header NOENCODE
  // {
    //  0_11: word_number;
    // 12_14: adc_resol;
    //    15: out_form;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  // several UINT32 ch_data NOENCODE
  // {
    //  0_12: value;
    //    14: outofrange;
    // 16_20: channel;
    // 21_29: 32;
    // 30_31: 0;
    // ENCODE(data[channel],(value=value,overflow=outofrange));
  // }
  // optional UINT32 filler NOENCODE
  // {
    //  0_31: 0;
  // }
  // UINT32 end_of_event
  // {
    //  0_29: counter;
    // 30_31: 3;
  // }
  // MARK_COUNT(end);
  void *__mark_end = __buffer._offset;
  // CHECK_COUNT(header.word_number,start,end,( - 4),4)
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_MESYTEC_MADC32::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: VME_MESYTEC_MDPP16
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for VME_MESYTEC_MDPP16.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MDPP16(geom)
#if !PACKER_CODE
# define DECLARED_UNPACK_VME_MESYTEC_MDPP16
class VME_MESYTEC_MDPP16
#else//PACKER_CODE
# define DECLARED_PACKER_VME_MESYTEC_MDPP16
class PACKER_VME_MESYTEC_MDPP16
#endif//PACKER_CODE

{
public:
  // MEMBER(DATA16_OVERFLOW data[34] ZERO_SUPPRESS_MULTI(100));
  raw_array_multi_zero_suppress<DATA16_OVERFLOW,DATA16_OVERFLOW,34,100> data;
  // MARK_COUNT(start);
  // UINT32 header NOENCODE
  // {
    //  0_09: word_number;
    // 10_12: adc_res;
    // 13_15: tdc_res;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  // several UINT32 ch_data NOENCODE
  // {
    //  0_15: value;
    // 16_21: channel;
    //    22: overflow;
    //    23: pileup;
    // 24_27: 0;
    // 28_31: 1;
    // ENCODE(data[channel],(value=value,overflow=overflow,pileup=pileup));
  // }
  // several UINT32 fill_word NOENCODE
  // {
    //  0_31: 0;
  // }
  // UINT32 end_of_event
  // {
    //  0_29: counter;
    // 30_31: 3;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 counter : 30; // 0..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 counter : 30; // 0..29
#endif
    };
    uint32  u32;
  } end_of_event;
  // MARK_COUNT(end);
  // CHECK_COUNT(header.word_number,start,end,( - 4),4)

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer,uint32 geom);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer,uint32 geom);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer,uint32 geom);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(VME_MESYTEC_MDPP16);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for VME_MESYTEC_MDPP16.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MDPP16(geom)
template<typename __data_src_t>
void VME_MESYTEC_MDPP16::__unpack(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA16_OVERFLOW data[34] ZERO_SUPPRESS_MULTI(100));
  // MARK_COUNT(start);
  void *__mark_start = __buffer._data;
  // UINT32 header NOENCODE
  // {
    //  0_09: word_number;
    // 10_12: adc_res;
    // 13_15: tdc_res;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_number : 10; // 0..9
      uint32 adc_res : 3; // 10..12
      uint32 tdc_res : 3; // 13..15
      uint32 geom : 8; // 16..23
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 geom : 8; // 16..23
      uint32 tdc_res : 3; // 13..15
      uint32 adc_res : 3; // 10..12
      uint32 word_number : 10; // 0..9
#endif
    };
    uint32  u32;
  } header;
  READ_FROM_BUFFER_FULL(803,uint32 ,header,header.u32);
  CHECK_BITS_EQUAL(800,header.geom,geom);
  CHECK_BITS_EQUAL(801,header.unnamed_24_29,0);
  CHECK_BITS_EQUAL(802,header.unnamed_30_31,1);
  // several UINT32 ch_data NOENCODE
  // {
    //  0_15: value;
    // 16_21: channel;
    //    22: overflow;
    //    23: pileup;
    // 24_27: 0;
    // 28_31: 1;
    // ENCODE(data[channel],(value=value,overflow=overflow,pileup=pileup));
  // }
  for ( ; ; ) {
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 value : 16; // 0..15
      uint32 channel : 6; // 16..21
      uint32 overflow : 1; // 22
      uint32 pileup : 1; // 23
      uint32 unnamed_24_27 : 4; // 24..27
      uint32 unnamed_28_31 : 4; // 28..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_28_31 : 4; // 28..31
      uint32 unnamed_24_27 : 4; // 24..27
      uint32 pileup : 1; // 23
      uint32 overflow : 1; // 22
      uint32 channel : 6; // 16..21
      uint32 value : 16; // 0..15
#endif
    };
    uint32  u32;
  } ch_data;
  if (__buffer.empty()) goto data_done_6;
  PEEK_FROM_BUFFER_FULL(813,uint32 ,ch_data,ch_data.u32);
  CHECK_JUMP_BITS_EQUAL(810,ch_data.unnamed_24_27,0,data_done_6);
  CHECK_JUMP_BITS_EQUAL(811,ch_data.unnamed_28_31,1,data_done_6);
  __buffer.advance(sizeof(ch_data.u32));
  {
    typedef __typeof__(*(&(data))) __array_t;
    typedef typename __array_t::item_t __item_t;
    __item_t &__item = data.insert_index(812,ch_data.channel);
    __item.value = ch_data.value;
    __item.overflow = ch_data.overflow;
    __item.pileup = ch_data.pileup;
  }
  }
  data_done_6:;
  // several UINT32 fill_word NOENCODE
  // {
    //  0_31: 0;
  // }
  for ( ; ; ) {
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 unnamed_0_31 : 32; // 0..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_0_31 : 32; // 0..31
#endif
    };
    uint32  u32;
  } fill_word;
  if (__buffer.empty()) goto data_done_7;
  PEEK_FROM_BUFFER_FULL(817,uint32 ,fill_word,fill_word.u32);
  CHECK_JUMP_BITS_EQUAL(816,fill_word.unnamed_0_31,0,data_done_7);
  __buffer.advance(sizeof(fill_word.u32));
  }
  data_done_7:;
  // UINT32 end_of_event
  // {
    //  0_29: counter;
    // 30_31: 3;
  // }
  READ_FROM_BUFFER_FULL(822,uint32 ,end_of_event,end_of_event.u32);
  CHECK_BITS_EQUAL(821,end_of_event.unnamed_30_31,3);
  // MARK_COUNT(end);
  void *__mark_end = __buffer._data;
  // CHECK_COUNT(header.word_number,start,end,( - 4),4)
  CHECK_WORD_COUNT(824,header.word_number,start,end,( - 4),4);
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_MESYTEC_MDPP16::__unpack,uint32 geom);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for VME_MESYTEC_MDPP16.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MDPP16(geom)
template<typename __data_src_t>
bool VME_MESYTEC_MDPP16::__match(__data_src_t &__buffer,uint32 geom)
{
  // MEMBER(DATA16_OVERFLOW data[34] ZERO_SUPPRESS_MULTI(100));
  // MARK_COUNT(start);
  // UINT32 header NOENCODE
  // {
    //  0_09: word_number;
    // 10_12: adc_res;
    // 13_15: tdc_res;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 word_number : 10; // 0..9
      uint32 adc_res : 3; // 10..12
      uint32 tdc_res : 3; // 13..15
      uint32 geom : 8; // 16..23
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 unnamed_30_31 : 2; // 30..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_30_31 : 2; // 30..31
      uint32 unnamed_24_29 : 6; // 24..29
      uint32 geom : 8; // 16..23
      uint32 tdc_res : 3; // 13..15
      uint32 adc_res : 3; // 10..12
      uint32 word_number : 10; // 0..9
#endif
    };
    uint32  u32;
  } header;
  READ_FROM_BUFFER_FULL(803,uint32 ,header,header.u32);
  MATCH_BITS_EQUAL(800,header.geom,geom);
  MATCH_BITS_EQUAL(801,header.unnamed_24_29,0);
  MATCH_BITS_EQUAL(802,header.unnamed_30_31,1);
  return true;
  return false;
}
FORCE_IMPL_DATA_SRC_FCN_ARG(bool,VME_MESYTEC_MDPP16::__match,uint32 geom);

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for VME_MESYTEC_MDPP16.
 *
 * Do not edit - automatically generated.
 */

// VME_MESYTEC_MDPP16(geom)
template<typename __data_dest_t>
void PACKER_VME_MESYTEC_MDPP16::__packer(__data_dest_t &__buffer,uint32 geom)
{
  // MEMBER(DATA16_OVERFLOW data[34] ZERO_SUPPRESS_MULTI(100));
  // MARK_COUNT(start);
  void *__mark_start = __buffer._offset;
  // UINT32 header NOENCODE
  // {
    //  0_09: word_number;
    // 10_12: adc_res;
    // 13_15: tdc_res;
    // 16_23: geom = MATCH(geom);
    // 24_29: 0;
    // 30_31: 1;
  // }
  // several UINT32 ch_data NOENCODE
  // {
    //  0_15: value;
    // 16_21: channel;
    //    22: overflow;
    //    23: pileup;
    // 24_27: 0;
    // 28_31: 1;
    // ENCODE(data[channel],(value=value,overflow=overflow,pileup=pileup));
  // }
  // several UINT32 fill_word NOENCODE
  // {
    //  0_31: 0;
  // }
  // UINT32 end_of_event
  // {
    //  0_29: counter;
    // 30_31: 3;
  // }
  // MARK_COUNT(end);
  void *__mark_end = __buffer._offset;
  // CHECK_COUNT(header.word_number,start,end,( - 4),4)
}
FORCE_IMPL_DATA_SRC_FCN_ARG(void,VME_MESYTEC_MDPP16::__packer,uint32 geom);

/** END_PACKER ********************************************************/

//
// Generating code for: CROS3_REWRITE_SUBEVENT
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for CROS3_REWRITE_SUBEVENT.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(CROS3_REWRITE_SUBEVENT)
#if !PACKER_CODE
# define DECLARED_UNPACK_CROS3_REWRITE_SUBEVENT
class CROS3_REWRITE_SUBEVENT
#else//PACKER_CODE
# define DECLARED_PACKER_CROS3_REWRITE_SUBEVENT
class PACKER_CROS3_REWRITE_SUBEVENT
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // select several

    // norevisit ccb[0] = CROS3_REWRITE(ccb_id=1);
    // norevisit ccb[1] = CROS3_REWRITE(ccb_id=2);
  SINGLE(CROS3_REWRITE,ccb[2]);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(CROS3_REWRITE_SUBEVENT);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for CROS3_REWRITE_SUBEVENT.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(CROS3_REWRITE_SUBEVENT)
template<typename __data_src_t>
void CROS3_REWRITE_SUBEVENT::__unpack(__data_src_t &__buffer)
{
  // select several

    // norevisit ccb[0] = CROS3_REWRITE(ccb_id=1);
    // norevisit ccb[1] = CROS3_REWRITE(ccb_id=2);
  bitsone<2> __visited3;
  __visited3.clear();
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: CROS3_REWRITE ccb[0]: (s32) => (0x0f080000,0x01000000)
    // optimized match 2: CROS3_REWRITE ccb[1]: (s32) => (0x0f080000,0x02000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(833,uint32,__match_peek);
    // differ = 03000000 : 24 25
    uint32 __match_index = 0 | /* 24,25 */ ((__match_peek >> 24) & 0x00000003);
    static const sint8 __match_index_array[4] = { 0, 1, 2, 0, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 1
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        UNPACK_CHECK_NO_REVISIT(831,CROS3_REWRITE,ccb[0],__visited3,0);
        UNPACK_DECL(831,CROS3_REWRITE,ccb[0],/*ccb_id*/1);
        break;
      case 2:
        UNPACK_CHECK_NO_REVISIT(832,CROS3_REWRITE,ccb[1],__visited3,1);
        UNPACK_DECL(832,CROS3_REWRITE,ccb[1],/*ccb_id*/2);
        break;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,CROS3_REWRITE_SUBEVENT::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for CROS3_REWRITE_SUBEVENT.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(CROS3_REWRITE_SUBEVENT)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for CROS3_REWRITE_SUBEVENT.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(CROS3_REWRITE_SUBEVENT)
template<typename __data_dest_t>
void PACKER_CROS3_REWRITE_SUBEVENT::__packer(__data_dest_t &__buffer)
{
  // select several

    // norevisit ccb[0] = CROS3_REWRITE(ccb_id=1);
    // norevisit ccb[1] = CROS3_REWRITE(ccb_id=2);
  {
    PACK_DECL(831,CROS3_REWRITE,ccb[0],/*ccb_id*/1);
    PACK_DECL(832,CROS3_REWRITE,ccb[1],/*ccb_id*/2);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,CROS3_REWRITE_SUBEVENT::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: CROS3_SUBEVENT
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for CROS3_SUBEVENT.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(CROS3_SUBEVENT)
#if !PACKER_CODE
# define DECLARED_UNPACK_CROS3_SUBEVENT
class CROS3_SUBEVENT
#else//PACKER_CODE
# define DECLARED_PACKER_CROS3_SUBEVENT
class PACKER_CROS3_SUBEVENT
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // select several

    // external norevisit ccb[0] = EXT_CROS3(ccb_id=1);
    // external norevisit ccb[1] = EXT_CROS3(ccb_id=2);
  SINGLE(EXT_CROS3,ccb[2]);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(CROS3_SUBEVENT);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for CROS3_SUBEVENT.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(CROS3_SUBEVENT)
template<typename __data_src_t>
void CROS3_SUBEVENT::__unpack(__data_src_t &__buffer)
{
  // select several

    // external norevisit ccb[0] = EXT_CROS3(ccb_id=1);
    // external norevisit ccb[1] = EXT_CROS3(ccb_id=2);
  bitsone<2> __visited4;
  __visited4.clear();
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: EXT_CROS3 ccb[0]: could not get bits
    __buffer.peeking();
    MATCH_DECL(840,__match_no,1,EXT_CROS3,ccb[0],/*ccb_id*/1);
    MATCH_DECL(841,__match_no,2,EXT_CROS3,ccb[1],/*ccb_id*/2);
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        UNPACK_CHECK_NO_REVISIT(840,EXT_CROS3,ccb[0],__visited4,0);
        UNPACK_DECL(840,EXT_CROS3,ccb[0],/*ccb_id*/1);
        break;
      case 2:
        UNPACK_CHECK_NO_REVISIT(841,EXT_CROS3,ccb[1],__visited4,1);
        UNPACK_DECL(841,EXT_CROS3,ccb[1],/*ccb_id*/2);
        break;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,CROS3_SUBEVENT::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for CROS3_SUBEVENT.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(CROS3_SUBEVENT)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for CROS3_SUBEVENT.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(CROS3_SUBEVENT)
template<typename __data_dest_t>
void PACKER_CROS3_SUBEVENT::__packer(__data_dest_t &__buffer)
{
  // select several

    // external norevisit ccb[0] = EXT_CROS3(ccb_id=1);
    // external norevisit ccb[1] = EXT_CROS3(ccb_id=2);
  {
    PACK_DECL(840,EXT_CROS3,ccb[0],/*ccb_id*/1);
    PACK_DECL(841,EXT_CROS3,ccb[1],/*ccb_id*/2);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,CROS3_SUBEVENT::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: DUMMY
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for DUMMY.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(DUMMY)
#if !PACKER_CODE
# define DECLARED_UNPACK_DUMMY
class DUMMY
#else//PACKER_CODE
# define DECLARED_PACKER_DUMMY
class PACKER_DUMMY
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // select several

    // d = DUMMY_WORD();
  SINGLE(DUMMY_WORD,d);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(DUMMY);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for DUMMY.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(DUMMY)
template<typename __data_src_t>
void DUMMY::__unpack(__data_src_t &__buffer)
{
  // select several

    // d = DUMMY_WORD();
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: DUMMY_WORD d: (s32)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(850,uint32,__match_peek);
    // differ = 00000000 :
    uint32 __match_index = 0;
    static const sint8 __match_index_array[1] = { 1, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 1
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        UNPACK_DECL(849,DUMMY_WORD,d);
        break;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,DUMMY::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for DUMMY.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(DUMMY)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for DUMMY.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(DUMMY)
template<typename __data_dest_t>
void PACKER_DUMMY::__packer(__data_dest_t &__buffer)
{
  // select several

    // d = DUMMY_WORD();
  {
    PACK_DECL(849,DUMMY_WORD,d);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,DUMMY::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_CAMAC_CONVERTER
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_CAMAC_CONVERTER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_CONVERTER)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_CAMAC_CONVERTER
class LAND_CAMAC_CONVERTER
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_CAMAC_CONVERTER
class PACKER_LAND_CAMAC_CONVERTER
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // UINT16 tpat;
  uint16  tpat;
  // UINT16 tprev;
  uint16  tprev;
  // UINT16 tnext;
  uint16  tnext;
  // UINT16 tprev2;
  uint16  tprev2;
  // if(EXTERNAL has_data)

#ifndef __PSDC__
  uint32 has_data() const;
#endif//!__PSDC__
    // aPHI14829 = CAMAC_PHILLIPS_7164(channels=16,mark_channel_no=1);
    // qSIA0429 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    // qSIA0480 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    // tSIA0400 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    // tC_FRS120 = CAMAC_SILENA_4418(channels=6,mark_channel_no=0);
    // tSIA0426 = CAMAC_SILENA_4418(channels=4,mark_channel_no=0);
    // qSIA0458 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    SINGLE(CAMAC_PHILLIPS_7164,aPHI14829);
    SINGLE(CAMAC_SILENA_4418,qSIA0480);
    SINGLE(CAMAC_SILENA_4418,qSIA0429);
    SINGLE(CAMAC_SILENA_4418,tSIA0400);
    SINGLE(CAMAC_SILENA_4418,tC_FRS120);
    SINGLE(CAMAC_SILENA_4418,tSIA0426);
    SINGLE(CAMAC_SILENA_4418,qSIA0458);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_CAMAC_CONVERTER);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_CAMAC_CONVERTER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_CONVERTER)
template<typename __data_src_t>
void LAND_CAMAC_CONVERTER::__unpack(__data_src_t &__buffer)
{
  // UINT16 tpat;
  READ_FROM_BUFFER(855,uint16 ,tpat);
  // UINT16 tprev;
  READ_FROM_BUFFER(856,uint16 ,tprev);
  // UINT16 tnext;
  READ_FROM_BUFFER(857,uint16 ,tnext);
  // UINT16 tprev2;
  READ_FROM_BUFFER(858,uint16 ,tprev2);
  // if(EXTERNAL has_data)

  if (has_data())
  {
    // aPHI14829 = CAMAC_PHILLIPS_7164(channels=16,mark_channel_no=1);
    UNPACK_DECL(861,CAMAC_PHILLIPS_7164,aPHI14829,/*channels*/16,/*mark_channel_no*/1);
    // qSIA0429 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    UNPACK_DECL(862,CAMAC_SILENA_4418,qSIA0429,/*channels*/8,/*mark_channel_no*/0);
    // qSIA0480 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    UNPACK_DECL(863,CAMAC_SILENA_4418,qSIA0480,/*channels*/8,/*mark_channel_no*/0);
    // tSIA0400 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    UNPACK_DECL(864,CAMAC_SILENA_4418,tSIA0400,/*channels*/8,/*mark_channel_no*/0);
    // tC_FRS120 = CAMAC_SILENA_4418(channels=6,mark_channel_no=0);
    UNPACK_DECL(865,CAMAC_SILENA_4418,tC_FRS120,/*channels*/6,/*mark_channel_no*/0);
    // tSIA0426 = CAMAC_SILENA_4418(channels=4,mark_channel_no=0);
    UNPACK_DECL(866,CAMAC_SILENA_4418,tSIA0426,/*channels*/4,/*mark_channel_no*/0);
    // qSIA0458 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    UNPACK_DECL(867,CAMAC_SILENA_4418,qSIA0458,/*channels*/8,/*mark_channel_no*/0);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_CONVERTER::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_CAMAC_CONVERTER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_CONVERTER)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_CAMAC_CONVERTER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_CONVERTER)
template<typename __data_dest_t>
void PACKER_LAND_CAMAC_CONVERTER::__packer(__data_dest_t &__buffer)
{
  // UINT16 tpat;
  // UINT16 tprev;
  // UINT16 tnext;
  // UINT16 tprev2;
  // if(EXTERNAL has_data)

  if (has_data())
  {
    // aPHI14829 = CAMAC_PHILLIPS_7164(channels=16,mark_channel_no=1);
    PACK_DECL(861,CAMAC_PHILLIPS_7164,aPHI14829,/*channels*/16,/*mark_channel_no*/1);
    // qSIA0429 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    PACK_DECL(862,CAMAC_SILENA_4418,qSIA0429,/*channels*/8,/*mark_channel_no*/0);
    // qSIA0480 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    PACK_DECL(863,CAMAC_SILENA_4418,qSIA0480,/*channels*/8,/*mark_channel_no*/0);
    // tSIA0400 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    PACK_DECL(864,CAMAC_SILENA_4418,tSIA0400,/*channels*/8,/*mark_channel_no*/0);
    // tC_FRS120 = CAMAC_SILENA_4418(channels=6,mark_channel_no=0);
    PACK_DECL(865,CAMAC_SILENA_4418,tC_FRS120,/*channels*/6,/*mark_channel_no*/0);
    // tSIA0426 = CAMAC_SILENA_4418(channels=4,mark_channel_no=0);
    PACK_DECL(866,CAMAC_SILENA_4418,tSIA0426,/*channels*/4,/*mark_channel_no*/0);
    // qSIA0458 = CAMAC_SILENA_4418(channels=8,mark_channel_no=0);
    PACK_DECL(867,CAMAC_SILENA_4418,qSIA0458,/*channels*/8,/*mark_channel_no*/0);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_CONVERTER::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_CAMAC_PILEUP
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_CAMAC_PILEUP.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_PILEUP)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_CAMAC_PILEUP
class LAND_CAMAC_PILEUP
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_CAMAC_PILEUP
class PACKER_LAND_CAMAC_PILEUP
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // select several

    // tdc = CAMAC_LECROY_2277_1CH_HACK(channel=0,edge=1,high_byte=0);
  SINGLE(CAMAC_LECROY_2277_1CH_HACK,tdc);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_CAMAC_PILEUP);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_CAMAC_PILEUP.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_PILEUP)
template<typename __data_src_t>
void LAND_CAMAC_PILEUP::__unpack(__data_src_t &__buffer)
{
  // select several

    // tdc = CAMAC_LECROY_2277_1CH_HACK(channel=0,edge=1,high_byte=0);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: CAMAC_LECROY_2277_1CH_HACK tdc: (s32) => (0xffff0000,0x00010000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(876,uint32,__match_peek);
    // differ = 00000000 :
    uint32 __match_index = 0;
    static const sint8 __match_index_array[1] = { 1, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 1
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        UNPACK_DECL(875,CAMAC_LECROY_2277_1CH_HACK,tdc,/*channel*/0,/*edge*/1,/*high_byte*/0);
        break;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_PILEUP::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_CAMAC_PILEUP.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_PILEUP)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_CAMAC_PILEUP.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_PILEUP)
template<typename __data_dest_t>
void PACKER_LAND_CAMAC_PILEUP::__packer(__data_dest_t &__buffer)
{
  // select several

    // tdc = CAMAC_LECROY_2277_1CH_HACK(channel=0,edge=1,high_byte=0);
  {
    PACK_DECL(875,CAMAC_LECROY_2277_1CH_HACK,tdc,/*channel*/0,/*edge*/1,/*high_byte*/0);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_PILEUP::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_CAMAC_SCALER
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_CAMAC_SCALER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_SCALER)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_CAMAC_SCALER
class LAND_CAMAC_SCALER
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_CAMAC_SCALER
class PACKER_LAND_CAMAC_SCALER
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // scaler0 = CAMAC_LECROY_4434(channels=32);
  // scaler1 = CAMAC_LECROY_4434(channels=32);
  // scaler2 = CAMAC_LECROY_4434(channels=32);
  // scaler3 = SOFT_SCALER32(channels=16);
  // if(EXTERNAL has_timestamp)

#ifndef __PSDC__
  uint32 has_timestamp() const;
#endif//!__PSDC__
    // UINT32 timestamp;
    uint32  timestamp;
    // UINT32 endianess
    // {
      //  0_31: 0x87654321;
    // }
    union
    {
      struct
      {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint32 unnamed_0_31 : 32; // 0..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
        uint32 unnamed_0_31 : 32; // 0..31
#endif
      };
      uint32  u32;
    } endianess;
  SINGLE(CAMAC_LECROY_4434,scaler0);
  SINGLE(CAMAC_LECROY_4434,scaler2);
  SINGLE(CAMAC_LECROY_4434,scaler1);
  SINGLE(SOFT_SCALER32,scaler3);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_CAMAC_SCALER);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_CAMAC_SCALER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_SCALER)
template<typename __data_src_t>
void LAND_CAMAC_SCALER::__unpack(__data_src_t &__buffer)
{
  // scaler0 = CAMAC_LECROY_4434(channels=32);
  UNPACK_DECL(881,CAMAC_LECROY_4434,scaler0,/*channels*/32);
  // scaler1 = CAMAC_LECROY_4434(channels=32);
  UNPACK_DECL(882,CAMAC_LECROY_4434,scaler1,/*channels*/32);
  // scaler2 = CAMAC_LECROY_4434(channels=32);
  UNPACK_DECL(883,CAMAC_LECROY_4434,scaler2,/*channels*/32);
  // scaler3 = SOFT_SCALER32(channels=16);
  UNPACK_DECL(884,SOFT_SCALER32,scaler3,/*channels*/16);
  // if(EXTERNAL has_timestamp)

  if (has_timestamp())
  {
    // UINT32 timestamp;
    READ_FROM_BUFFER(887,uint32 ,timestamp);
    // UINT32 endianess
    // {
      //  0_31: 0x87654321;
    // }
    READ_FROM_BUFFER_FULL(891,uint32 ,endianess,endianess.u32);
    CHECK_BITS_EQUAL(890,endianess.unnamed_0_31,0x87654321);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_SCALER::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_CAMAC_SCALER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_SCALER)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_CAMAC_SCALER.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_SCALER)
template<typename __data_dest_t>
void PACKER_LAND_CAMAC_SCALER::__packer(__data_dest_t &__buffer)
{
  // scaler0 = CAMAC_LECROY_4434(channels=32);
  PACK_DECL(881,CAMAC_LECROY_4434,scaler0,/*channels*/32);
  // scaler1 = CAMAC_LECROY_4434(channels=32);
  PACK_DECL(882,CAMAC_LECROY_4434,scaler1,/*channels*/32);
  // scaler2 = CAMAC_LECROY_4434(channels=32);
  PACK_DECL(883,CAMAC_LECROY_4434,scaler2,/*channels*/32);
  // scaler3 = SOFT_SCALER32(channels=16);
  PACK_DECL(884,SOFT_SCALER32,scaler3,/*channels*/16);
  // if(EXTERNAL has_timestamp)

  if (has_timestamp())
  {
    // UINT32 timestamp;
    // UINT32 endianess
    // {
      //  0_31: 0x87654321;
    // }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_SCALER::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_CAMAC_START_STOP_STAMP
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_CAMAC_START_STOP_STAMP.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_START_STOP_STAMP)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_CAMAC_START_STOP_STAMP
class LAND_CAMAC_START_STOP_STAMP
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_CAMAC_START_STOP_STAMP
class PACKER_LAND_CAMAC_START_STOP_STAMP
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // UINT32 timestamp;
  uint32  timestamp;
  // UINT32 endianess
  // {
    //  0_31: 0x87654321;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 unnamed_0_31 : 32; // 0..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_0_31 : 32; // 0..31
#endif
    };
    uint32  u32;
  } endianess;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_CAMAC_START_STOP_STAMP);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_CAMAC_START_STOP_STAMP.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_START_STOP_STAMP)
template<typename __data_src_t>
void LAND_CAMAC_START_STOP_STAMP::__unpack(__data_src_t &__buffer)
{
  // UINT32 timestamp;
  READ_FROM_BUFFER(897,uint32 ,timestamp);
  // UINT32 endianess
  // {
    //  0_31: 0x87654321;
  // }
  READ_FROM_BUFFER_FULL(901,uint32 ,endianess,endianess.u32);
  CHECK_BITS_EQUAL(900,endianess.unnamed_0_31,0x87654321);
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_START_STOP_STAMP::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_CAMAC_START_STOP_STAMP.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_START_STOP_STAMP)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_CAMAC_START_STOP_STAMP.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_START_STOP_STAMP)
template<typename __data_dest_t>
void PACKER_LAND_CAMAC_START_STOP_STAMP::__packer(__data_dest_t &__buffer)
{
  // UINT32 timestamp;
  // UINT32 endianess
  // {
    //  0_31: 0x87654321;
  // }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_START_STOP_STAMP::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_CAMAC_TCAL_INFO
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_CAMAC_TCAL_INFO.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_TCAL_INFO)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_CAMAC_TCAL_INFO
class LAND_CAMAC_TCAL_INFO
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_CAMAC_TCAL_INFO
class PACKER_LAND_CAMAC_TCAL_INFO
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // UINT32 info;
  uint32  info;
  // select several

    // rtcal = RANDOM_TCAL(id=231);
    // ntp = NTP_MESSAGE(id=239);
  SINGLE(RANDOM_TCAL,rtcal);
  SINGLE(NTP_MESSAGE,ntp);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_CAMAC_TCAL_INFO);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_CAMAC_TCAL_INFO.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_TCAL_INFO)
template<typename __data_src_t>
void LAND_CAMAC_TCAL_INFO::__unpack(__data_src_t &__buffer)
{
  // UINT32 info;
  READ_FROM_BUFFER(906,uint32 ,info);
  // select several

    // rtcal = RANDOM_TCAL(id=231);
    // ntp = NTP_MESSAGE(id=239);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: RANDOM_TCAL rtcal: (s32) => (0xfff00000,0xe7000000)
    // optimized match 2: NTP_MESSAGE ntp: (s32) => (0xfffe0000,0xef000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(911,uint32,__match_peek);
    // differ = 08000000 : 27
    uint32 __match_index = 0 | /* 27,27 */ ((__match_peek >> 27) & 0x00000001);
    static const sint8 __match_index_array[2] = { 1, 2, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 1
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        UNPACK_DECL(909,RANDOM_TCAL,rtcal,/*id*/231);
        break;
      case 2:
        UNPACK_DECL(910,NTP_MESSAGE,ntp,/*id*/239);
        break;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_TCAL_INFO::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_CAMAC_TCAL_INFO.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_TCAL_INFO)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_CAMAC_TCAL_INFO.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_CAMAC_TCAL_INFO)
template<typename __data_dest_t>
void PACKER_LAND_CAMAC_TCAL_INFO::__packer(__data_dest_t &__buffer)
{
  // UINT32 info;
  // select several

    // rtcal = RANDOM_TCAL(id=231);
    // ntp = NTP_MESSAGE(id=239);
  {
    PACK_DECL(909,RANDOM_TCAL,rtcal,/*id*/231);
    PACK_DECL(910,NTP_MESSAGE,ntp,/*id*/239);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_CAMAC_TCAL_INFO::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_FASTBUS1
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_FASTBUS1.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS1)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_FASTBUS1
class LAND_FASTBUS1
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_FASTBUS1
class PACKER_LAND_FASTBUS1
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // select several

    // Q47342 = FASTBUS_LECROY_1885(geom=7,channels=96);
    // Q11111 = FASTBUS_LECROY_1885(geom=8,channels=96);
    // Q46848 = FASTBUS_LECROY_1885(geom=10,channels=96);
    // Q47315 = FASTBUS_LECROY_1885(geom=11,channels=96);
    // Q17320 = FASTBUS_LECROY_1885(geom=13,channels=96);
    // Q15372 = FASTBUS_LECROY_1885(geom=15,channels=96);
    // Q46962 = FASTBUS_LECROY_1885(geom=16,channels=96);
    // Q46993 = FASTBUS_LECROY_1885(geom=18,channels=96);
    // Q15358 = FASTBUS_LECROY_1885(geom=20,channels=96);
    // Q47264 = FASTBUS_LECROY_1885(geom=23,channels=96);
    // T81855 = FASTBUS_LECROY_1875(geom=3,channels=64);
    // T87044 = FASTBUS_LECROY_1875(geom=4,channels=64);
    // T87024 = FASTBUS_LECROY_1875(geom=5,channels=64);
    // T81800 = FASTBUS_LECROY_1875(geom=6,channels=64);
  SINGLE(FASTBUS_LECROY_1885,Q47342);
  SINGLE(FASTBUS_LECROY_1885,Q46848);
  SINGLE(FASTBUS_LECROY_1885,Q11111);
  SINGLE(FASTBUS_LECROY_1885,Q47315);
  SINGLE(FASTBUS_LECROY_1885,Q17320);
  SINGLE(FASTBUS_LECROY_1885,Q15372);
  SINGLE(FASTBUS_LECROY_1885,Q46962);
  SINGLE(FASTBUS_LECROY_1885,Q46993);
  SINGLE(FASTBUS_LECROY_1885,Q15358);
  SINGLE(FASTBUS_LECROY_1885,Q47264);
  SINGLE(FASTBUS_LECROY_1875,T81855);
  SINGLE(FASTBUS_LECROY_1875,T87044);
  SINGLE(FASTBUS_LECROY_1875,T87024);
  SINGLE(FASTBUS_LECROY_1875,T81800);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_FASTBUS1);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_FASTBUS1.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS1)
template<typename __data_src_t>
void LAND_FASTBUS1::__unpack(__data_src_t &__buffer)
{
  // select several

    // Q47342 = FASTBUS_LECROY_1885(geom=7,channels=96);
    // Q11111 = FASTBUS_LECROY_1885(geom=8,channels=96);
    // Q46848 = FASTBUS_LECROY_1885(geom=10,channels=96);
    // Q47315 = FASTBUS_LECROY_1885(geom=11,channels=96);
    // Q17320 = FASTBUS_LECROY_1885(geom=13,channels=96);
    // Q15372 = FASTBUS_LECROY_1885(geom=15,channels=96);
    // Q46962 = FASTBUS_LECROY_1885(geom=16,channels=96);
    // Q46993 = FASTBUS_LECROY_1885(geom=18,channels=96);
    // Q15358 = FASTBUS_LECROY_1885(geom=20,channels=96);
    // Q47264 = FASTBUS_LECROY_1885(geom=23,channels=96);
    // T81855 = FASTBUS_LECROY_1875(geom=3,channels=64);
    // T87044 = FASTBUS_LECROY_1875(geom=4,channels=64);
    // T87024 = FASTBUS_LECROY_1875(geom=5,channels=64);
    // T81800 = FASTBUS_LECROY_1875(geom=6,channels=64);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: FASTBUS_LECROY_1885 Q47342: (s32) => (0xff00f000,0x38000000)
    // optimized match 2: FASTBUS_LECROY_1885 Q11111: (s32) => (0xff00f000,0x40000000)
    // optimized match 3: FASTBUS_LECROY_1885 Q46848: (s32) => (0xff00f000,0x50000000)
    // optimized match 4: FASTBUS_LECROY_1885 Q47315: (s32) => (0xff00f000,0x58000000)
    // optimized match 5: FASTBUS_LECROY_1885 Q17320: (s32) => (0xff00f000,0x68000000)
    // optimized match 6: FASTBUS_LECROY_1885 Q15372: (s32) => (0xff00f000,0x78000000)
    // optimized match 7: FASTBUS_LECROY_1885 Q46962: (s32) => (0xff00f000,0x80000000)
    // optimized match 8: FASTBUS_LECROY_1885 Q46993: (s32) => (0xff00f000,0x90000000)
    // optimized match 9: FASTBUS_LECROY_1885 Q15358: (s32) => (0xff00f000,0xa0000000)
    // optimized match 10: FASTBUS_LECROY_1885 Q47264: (s32) => (0xff00f000,0xb8000000)
    // optimized match 11: FASTBUS_LECROY_1875 T81855: (s32) => (0xff40f000,0x18000000)
    // optimized match 12: FASTBUS_LECROY_1875 T87044: (s32) => (0xff40f000,0x20000000)
    // optimized match 13: FASTBUS_LECROY_1875 T87024: (s32) => (0xff40f000,0x28000000)
    // optimized match 14: FASTBUS_LECROY_1875 T81800: (s32) => (0xff40f000,0x30000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(932,uint32,__match_peek);
    // differ = f8000000 : 27 28 29 30 31
    uint32 __match_index = 0 | /* 27,31 */ ((__match_peek >> 27) & 0x0000001f);
    static const sint8 __match_index_array[32] = { 0, 0, 0, 11, 12, 13, 14, 1, 2, 0, 3, 4, 0, 5, 0, 6, 7, 0, 8, 0, 9, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 1
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        UNPACK_DECL(918,FASTBUS_LECROY_1885,Q47342,/*geom*/7,/*channels*/96);
        break;
      case 2:
        UNPACK_DECL(919,FASTBUS_LECROY_1885,Q11111,/*geom*/8,/*channels*/96);
        break;
      case 3:
        UNPACK_DECL(920,FASTBUS_LECROY_1885,Q46848,/*geom*/10,/*channels*/96);
        break;
      case 4:
        UNPACK_DECL(921,FASTBUS_LECROY_1885,Q47315,/*geom*/11,/*channels*/96);
        break;
      case 5:
        UNPACK_DECL(922,FASTBUS_LECROY_1885,Q17320,/*geom*/13,/*channels*/96);
        break;
      case 6:
        UNPACK_DECL(923,FASTBUS_LECROY_1885,Q15372,/*geom*/15,/*channels*/96);
        break;
      case 7:
        UNPACK_DECL(924,FASTBUS_LECROY_1885,Q46962,/*geom*/16,/*channels*/96);
        break;
      case 8:
        UNPACK_DECL(925,FASTBUS_LECROY_1885,Q46993,/*geom*/18,/*channels*/96);
        break;
      case 9:
        UNPACK_DECL(926,FASTBUS_LECROY_1885,Q15358,/*geom*/20,/*channels*/96);
        break;
      case 10:
        UNPACK_DECL(927,FASTBUS_LECROY_1885,Q47264,/*geom*/23,/*channels*/96);
        break;
      case 11:
        UNPACK_DECL(928,FASTBUS_LECROY_1875,T81855,/*geom*/3,/*channels*/64);
        break;
      case 12:
        UNPACK_DECL(929,FASTBUS_LECROY_1875,T87044,/*geom*/4,/*channels*/64);
        break;
      case 13:
        UNPACK_DECL(930,FASTBUS_LECROY_1875,T87024,/*geom*/5,/*channels*/64);
        break;
      case 14:
        UNPACK_DECL(931,FASTBUS_LECROY_1875,T81800,/*geom*/6,/*channels*/64);
        break;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS1::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_FASTBUS1.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS1)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_FASTBUS1.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS1)
template<typename __data_dest_t>
void PACKER_LAND_FASTBUS1::__packer(__data_dest_t &__buffer)
{
  // select several

    // Q47342 = FASTBUS_LECROY_1885(geom=7,channels=96);
    // Q11111 = FASTBUS_LECROY_1885(geom=8,channels=96);
    // Q46848 = FASTBUS_LECROY_1885(geom=10,channels=96);
    // Q47315 = FASTBUS_LECROY_1885(geom=11,channels=96);
    // Q17320 = FASTBUS_LECROY_1885(geom=13,channels=96);
    // Q15372 = FASTBUS_LECROY_1885(geom=15,channels=96);
    // Q46962 = FASTBUS_LECROY_1885(geom=16,channels=96);
    // Q46993 = FASTBUS_LECROY_1885(geom=18,channels=96);
    // Q15358 = FASTBUS_LECROY_1885(geom=20,channels=96);
    // Q47264 = FASTBUS_LECROY_1885(geom=23,channels=96);
    // T81855 = FASTBUS_LECROY_1875(geom=3,channels=64);
    // T87044 = FASTBUS_LECROY_1875(geom=4,channels=64);
    // T87024 = FASTBUS_LECROY_1875(geom=5,channels=64);
    // T81800 = FASTBUS_LECROY_1875(geom=6,channels=64);
  {
    PACK_DECL(918,FASTBUS_LECROY_1885,Q47342,/*geom*/7,/*channels*/96);
    PACK_DECL(919,FASTBUS_LECROY_1885,Q11111,/*geom*/8,/*channels*/96);
    PACK_DECL(920,FASTBUS_LECROY_1885,Q46848,/*geom*/10,/*channels*/96);
    PACK_DECL(921,FASTBUS_LECROY_1885,Q47315,/*geom*/11,/*channels*/96);
    PACK_DECL(922,FASTBUS_LECROY_1885,Q17320,/*geom*/13,/*channels*/96);
    PACK_DECL(923,FASTBUS_LECROY_1885,Q15372,/*geom*/15,/*channels*/96);
    PACK_DECL(924,FASTBUS_LECROY_1885,Q46962,/*geom*/16,/*channels*/96);
    PACK_DECL(925,FASTBUS_LECROY_1885,Q46993,/*geom*/18,/*channels*/96);
    PACK_DECL(926,FASTBUS_LECROY_1885,Q15358,/*geom*/20,/*channels*/96);
    PACK_DECL(927,FASTBUS_LECROY_1885,Q47264,/*geom*/23,/*channels*/96);
    PACK_DECL(928,FASTBUS_LECROY_1875,T81855,/*geom*/3,/*channels*/64);
    PACK_DECL(929,FASTBUS_LECROY_1875,T87044,/*geom*/4,/*channels*/64);
    PACK_DECL(930,FASTBUS_LECROY_1875,T87024,/*geom*/5,/*channels*/64);
    PACK_DECL(931,FASTBUS_LECROY_1875,T81800,/*geom*/6,/*channels*/64);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS1::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_FASTBUS2
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_FASTBUS2.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS2)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_FASTBUS2
class LAND_FASTBUS2
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_FASTBUS2
class PACKER_LAND_FASTBUS2
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // select several

    // Q75266 = FASTBUS_LECROY_1885(geom=17,channels=96);
    // T87047 = FASTBUS_LECROY_1875(geom=1,channels=64);
    // T48854 = FASTBUS_LECROY_1875(geom=2,channels=64);
    // T81808 = FASTBUS_LECROY_1875(geom=3,channels=64);
    // T81859 = FASTBUS_LECROY_1875(geom=4,channels=64);
    // T81795 = FASTBUS_LECROY_1875(geom=5,channels=64);
    // T81806 = FASTBUS_LECROY_1875(geom=6,channels=64);
    // T48834 = FASTBUS_LECROY_1875(geom=7,channels=64);
  SINGLE(FASTBUS_LECROY_1885,Q75266);
  SINGLE(FASTBUS_LECROY_1875,T48854);
  SINGLE(FASTBUS_LECROY_1875,T87047);
  SINGLE(FASTBUS_LECROY_1875,T81808);
  SINGLE(FASTBUS_LECROY_1875,T81859);
  SINGLE(FASTBUS_LECROY_1875,T81795);
  SINGLE(FASTBUS_LECROY_1875,T81806);
  SINGLE(FASTBUS_LECROY_1875,T48834);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_FASTBUS2);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_FASTBUS2.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS2)
template<typename __data_src_t>
void LAND_FASTBUS2::__unpack(__data_src_t &__buffer)
{
  // select several

    // Q75266 = FASTBUS_LECROY_1885(geom=17,channels=96);
    // T87047 = FASTBUS_LECROY_1875(geom=1,channels=64);
    // T48854 = FASTBUS_LECROY_1875(geom=2,channels=64);
    // T81808 = FASTBUS_LECROY_1875(geom=3,channels=64);
    // T81859 = FASTBUS_LECROY_1875(geom=4,channels=64);
    // T81795 = FASTBUS_LECROY_1875(geom=5,channels=64);
    // T81806 = FASTBUS_LECROY_1875(geom=6,channels=64);
    // T48834 = FASTBUS_LECROY_1875(geom=7,channels=64);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: FASTBUS_LECROY_1885 Q75266: (s32) => (0xff00f000,0x88000000)
    // optimized match 2: FASTBUS_LECROY_1875 T87047: (s32) => (0xff40f000,0x08000000)
    // optimized match 3: FASTBUS_LECROY_1875 T48854: (s32) => (0xff40f000,0x10000000)
    // optimized match 4: FASTBUS_LECROY_1875 T81808: (s32) => (0xff40f000,0x18000000)
    // optimized match 5: FASTBUS_LECROY_1875 T81859: (s32) => (0xff40f000,0x20000000)
    // optimized match 6: FASTBUS_LECROY_1875 T81795: (s32) => (0xff40f000,0x28000000)
    // optimized match 7: FASTBUS_LECROY_1875 T81806: (s32) => (0xff40f000,0x30000000)
    // optimized match 8: FASTBUS_LECROY_1875 T48834: (s32) => (0xff40f000,0x38000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(947,uint32,__match_peek);
    // differ = b8000000 : 27 28 29 31
    uint32 __match_index = 0 | /* 27,29 */ ((__match_peek >> 27) & 0x00000007) | /* 31,31 */ ((__match_peek >> 28) & 0x00000008);
    static const sint8 __match_index_array[16] = { 0, 2, 3, 4, 5, 6, 7, 8, 0, 1, 0, 0, 0, 0, 0, 0, };
    __match_no = __match_index_array[__match_index];
    // last_subevent_item = 1
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        UNPACK_DECL(939,FASTBUS_LECROY_1885,Q75266,/*geom*/17,/*channels*/96);
        break;
      case 2:
        UNPACK_DECL(940,FASTBUS_LECROY_1875,T87047,/*geom*/1,/*channels*/64);
        break;
      case 3:
        UNPACK_DECL(941,FASTBUS_LECROY_1875,T48854,/*geom*/2,/*channels*/64);
        break;
      case 4:
        UNPACK_DECL(942,FASTBUS_LECROY_1875,T81808,/*geom*/3,/*channels*/64);
        break;
      case 5:
        UNPACK_DECL(943,FASTBUS_LECROY_1875,T81859,/*geom*/4,/*channels*/64);
        break;
      case 6:
        UNPACK_DECL(944,FASTBUS_LECROY_1875,T81795,/*geom*/5,/*channels*/64);
        break;
      case 7:
        UNPACK_DECL(945,FASTBUS_LECROY_1875,T81806,/*geom*/6,/*channels*/64);
        break;
      case 8:
        UNPACK_DECL(946,FASTBUS_LECROY_1875,T48834,/*geom*/7,/*channels*/64);
        break;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS2::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_FASTBUS2.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS2)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_FASTBUS2.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS2)
template<typename __data_dest_t>
void PACKER_LAND_FASTBUS2::__packer(__data_dest_t &__buffer)
{
  // select several

    // Q75266 = FASTBUS_LECROY_1885(geom=17,channels=96);
    // T87047 = FASTBUS_LECROY_1875(geom=1,channels=64);
    // T48854 = FASTBUS_LECROY_1875(geom=2,channels=64);
    // T81808 = FASTBUS_LECROY_1875(geom=3,channels=64);
    // T81859 = FASTBUS_LECROY_1875(geom=4,channels=64);
    // T81795 = FASTBUS_LECROY_1875(geom=5,channels=64);
    // T81806 = FASTBUS_LECROY_1875(geom=6,channels=64);
    // T48834 = FASTBUS_LECROY_1875(geom=7,channels=64);
  {
    PACK_DECL(939,FASTBUS_LECROY_1885,Q75266,/*geom*/17,/*channels*/96);
    PACK_DECL(940,FASTBUS_LECROY_1875,T87047,/*geom*/1,/*channels*/64);
    PACK_DECL(941,FASTBUS_LECROY_1875,T48854,/*geom*/2,/*channels*/64);
    PACK_DECL(942,FASTBUS_LECROY_1875,T81808,/*geom*/3,/*channels*/64);
    PACK_DECL(943,FASTBUS_LECROY_1875,T81859,/*geom*/4,/*channels*/64);
    PACK_DECL(944,FASTBUS_LECROY_1875,T81795,/*geom*/5,/*channels*/64);
    PACK_DECL(945,FASTBUS_LECROY_1875,T81806,/*geom*/6,/*channels*/64);
    PACK_DECL(946,FASTBUS_LECROY_1875,T48834,/*geom*/7,/*channels*/64);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS2::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_FASTBUS_ERROR
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_FASTBUS_ERROR.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS_ERROR)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_FASTBUS_ERROR
class LAND_FASTBUS_ERROR
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_FASTBUS_ERROR
class PACKER_LAND_FASTBUS_ERROR
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // UINT32 error_code
  // {
    //     0: timeout_waiting_smi;
    //     1: illegal_block_transfer;
    //     2: fifa_address_overflow;
    //     3: fifa_register_error;
    //    16: init_error;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 timeout_waiting_smi : 1; // 0
      uint32 illegal_block_transfer : 1; // 1
      uint32 fifa_address_overflow : 1; // 2
      uint32 fifa_register_error : 1; // 3
      uint32 dummy_4_15 : 12;
      uint32 init_error : 1; // 16
      uint32 dummy_17_31 : 15;
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 dummy_17_31 : 15;
      uint32 init_error : 1; // 16
      uint32 dummy_4_15 : 12;
      uint32 fifa_register_error : 1; // 3
      uint32 fifa_address_overflow : 1; // 2
      uint32 illegal_block_transfer : 1; // 1
      uint32 timeout_waiting_smi : 1; // 0
#endif
    };
    uint32  u32;
  } error_code;
  // UINT32 error_num;
  uint32  error_num;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_FASTBUS_ERROR);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_FASTBUS_ERROR.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS_ERROR)
template<typename __data_src_t>
void LAND_FASTBUS_ERROR::__unpack(__data_src_t &__buffer)
{
  // UINT32 error_code
  // {
    //     0: timeout_waiting_smi;
    //     1: illegal_block_transfer;
    //     2: fifa_address_overflow;
    //     3: fifa_register_error;
    //    16: init_error;
  // }
  READ_FROM_BUFFER_FULL(959,uint32 ,error_code,error_code.u32);
  CHECK_UNNAMED_BITS_ZERO(959,error_code.u32,0xfffefff0);
  // UINT32 error_num;
  READ_FROM_BUFFER(960,uint32 ,error_num);
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS_ERROR::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_FASTBUS_ERROR.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS_ERROR)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_FASTBUS_ERROR.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS_ERROR)
template<typename __data_dest_t>
void PACKER_LAND_FASTBUS_ERROR::__packer(__data_dest_t &__buffer)
{
  // UINT32 error_code
  // {
    //     0: timeout_waiting_smi;
    //     1: illegal_block_transfer;
    //     2: fifa_address_overflow;
    //     3: fifa_register_error;
    //    16: init_error;
  // }
  // UINT32 error_num;
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS_ERROR::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_FASTBUS_ERROR_NGF
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_FASTBUS_ERROR_NGF.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS_ERROR_NGF)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_FASTBUS_ERROR_NGF
class LAND_FASTBUS_ERROR_NGF
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_FASTBUS_ERROR_NGF
class PACKER_LAND_FASTBUS_ERROR_NGF
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // UINT32 magic
  // {
    //  0_31: 0x10000000;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 unnamed_0_31 : 32; // 0..31
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 unnamed_0_31 : 32; // 0..31
#endif
    };
    uint32  u32;
  } magic;
  // UINT32 error_code
  // {
    //     0: error;
    //     1: uninitialized;
    //     2: ss1;
    //     3: wc;
    //     4: mid;
    //     5: fifo_empty;
    //     6: fifo_not_empty;
    //     7: not_finished;
    //     8: bad_end_addr;
    //     9: word_lost;
  // }
  union
  {
    struct
    {
#if __BYTE_ORDER == __LITTLE_ENDIAN
      uint32 error : 1; // 0
      uint32 uninitialized : 1; // 1
      uint32 ss1 : 1; // 2
      uint32 wc : 1; // 3
      uint32 mid : 1; // 4
      uint32 fifo_empty : 1; // 5
      uint32 fifo_not_empty : 1; // 6
      uint32 not_finished : 1; // 7
      uint32 bad_end_addr : 1; // 8
      uint32 word_lost : 1; // 9
      uint32 dummy_10_31 : 22;
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
      uint32 dummy_10_31 : 22;
      uint32 word_lost : 1; // 9
      uint32 bad_end_addr : 1; // 8
      uint32 not_finished : 1; // 7
      uint32 fifo_not_empty : 1; // 6
      uint32 fifo_empty : 1; // 5
      uint32 mid : 1; // 4
      uint32 wc : 1; // 3
      uint32 ss1 : 1; // 2
      uint32 uninitialized : 1; // 1
      uint32 error : 1; // 0
#endif
    };
    uint32  u32;
  } error_code;

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_FASTBUS_ERROR_NGF);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_FASTBUS_ERROR_NGF.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS_ERROR_NGF)
template<typename __data_src_t>
void LAND_FASTBUS_ERROR_NGF::__unpack(__data_src_t &__buffer)
{
  // UINT32 magic
  // {
    //  0_31: 0x10000000;
  // }
  READ_FROM_BUFFER_FULL(968,uint32 ,magic,magic.u32);
  CHECK_BITS_EQUAL(967,magic.unnamed_0_31,0x10000000);
  // UINT32 error_code
  // {
    //     0: error;
    //     1: uninitialized;
    //     2: ss1;
    //     3: wc;
    //     4: mid;
    //     5: fifo_empty;
    //     6: fifo_not_empty;
    //     7: not_finished;
    //     8: bad_end_addr;
    //     9: word_lost;
  // }
  READ_FROM_BUFFER_FULL(981,uint32 ,error_code,error_code.u32);
  CHECK_UNNAMED_BITS_ZERO(981,error_code.u32,0xfffffc00);
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS_ERROR_NGF::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_FASTBUS_ERROR_NGF.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS_ERROR_NGF)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_FASTBUS_ERROR_NGF.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_FASTBUS_ERROR_NGF)
template<typename __data_dest_t>
void PACKER_LAND_FASTBUS_ERROR_NGF::__packer(__data_dest_t &__buffer)
{
  // UINT32 magic
  // {
    //  0_31: 0x10000000;
  // }
  // UINT32 error_code
  // {
    //     0: error;
    //     1: uninitialized;
    //     2: ss1;
    //     3: wc;
    //     4: mid;
    //     5: fifo_empty;
    //     6: fifo_not_empty;
    //     7: not_finished;
    //     8: bad_end_addr;
    //     9: word_lost;
  // }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_FASTBUS_ERROR_NGF::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: LAND_VME
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for LAND_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_VME)
#if !PACKER_CODE
# define DECLARED_UNPACK_LAND_VME
class LAND_VME
#else//PACKER_CODE
# define DECLARED_PACKER_LAND_VME
class PACKER_LAND_VME
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // vme = LAND_STD_VME();
  // select several

    // tCAEN0614 = VME_CAEN_V775(geom=16,crate=130);
    // qCAEN0472 = VME_CAEN_V775(geom=0,crate=1);
    // scaler[0] = VME_CAEN_V830(geom=30);
    // scaler[1] = VME_CAEN_V830(geom=31);
  SINGLE(VME_CAEN_V775,tCAEN0614);
  SINGLE(VME_CAEN_V830,scaler[2]);
  SINGLE(VME_CAEN_V775,qCAEN0472);
  SINGLE(LAND_STD_VME,vme);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(LAND_VME);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for LAND_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_VME)
template<typename __data_src_t>
void LAND_VME::__unpack(__data_src_t &__buffer)
{
  // vme = LAND_STD_VME();
  UNPACK_DECL(986,LAND_STD_VME,vme);
  // select several

    // tCAEN0614 = VME_CAEN_V775(geom=16,crate=130);
    // qCAEN0472 = VME_CAEN_V775(geom=0,crate=1);
    // scaler[0] = VME_CAEN_V830(geom=30);
    // scaler[1] = VME_CAEN_V830(geom=31);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: VME_CAEN_V775 tCAEN0614: (s32) => (0xffffc0ff,0x82820000)
    // optimized match 2: VME_CAEN_V775 qCAEN0472: (s32) => (0xffffc0ff,0x02010000)
    // optimized match 3: VME_CAEN_V830 scaler[0]: (s32) => (0xff000000,0xf4000000)
    // optimized match 4: VME_CAEN_V830 scaler[1]: (s32) => (0xff000000,0xfc000000)
    {
    uint32 __match_peek;
    PEEK_FROM_BUFFER(993,uint32,__match_peek);
    // differ = fe830000 : 16 17 23 25 26 27 28 29 30 31
    // select on bit 30, partition: 1:2(d2) 0:2(d2)
    if (__match_peek & 0x40000000) {
      MATCH_DECL_QUICK(991,__match_no,3,scaler[0],__match_peek,0xff000000,0xf4000000);
      MATCH_DECL_QUICK(992,__match_no,4,scaler[1],__match_peek,0xff000000,0xfc000000);
    } else {
      MATCH_DECL_QUICK(989,__match_no,1,tCAEN0614,__match_peek,0xffffc0ff,0x82820000);
      MATCH_DECL_QUICK(990,__match_no,2,qCAEN0472,__match_peek,0xffffc0ff,0x02010000);
    }
    // last_subevent_item = 1
    }
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        UNPACK_DECL(989,VME_CAEN_V775,tCAEN0614,/*geom*/16,/*crate*/130);
        break;
      case 2:
        UNPACK_DECL(990,VME_CAEN_V775,qCAEN0472,/*geom*/0,/*crate*/1);
        break;
      case 3:
        UNPACK_DECL(991,VME_CAEN_V830,scaler[0],/*geom*/30);
        break;
      case 4:
        UNPACK_DECL(992,VME_CAEN_V830,scaler[1],/*geom*/31);
        break;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_VME::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for LAND_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_VME)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for LAND_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(LAND_VME)
template<typename __data_dest_t>
void PACKER_LAND_VME::__packer(__data_dest_t &__buffer)
{
  // vme = LAND_STD_VME();
  PACK_DECL(986,LAND_STD_VME,vme);
  // select several

    // tCAEN0614 = VME_CAEN_V775(geom=16,crate=130);
    // qCAEN0472 = VME_CAEN_V775(geom=0,crate=1);
    // scaler[0] = VME_CAEN_V830(geom=30);
    // scaler[1] = VME_CAEN_V830(geom=31);
  {
    PACK_DECL(989,VME_CAEN_V775,tCAEN0614,/*geom*/16,/*crate*/130);
    PACK_DECL(990,VME_CAEN_V775,qCAEN0472,/*geom*/0,/*crate*/1);
    PACK_DECL(991,VME_CAEN_V830,scaler[0],/*geom*/30);
    PACK_DECL(992,VME_CAEN_V830,scaler[1],/*geom*/31);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,LAND_VME::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: SIDEREM01_VME
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for SIDEREM01_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(SIDEREM01_VME)
#if !PACKER_CODE
# define DECLARED_UNPACK_SIDEREM01_VME
class SIDEREM01_VME
#else//PACKER_CODE
# define DECLARED_PACKER_SIDEREM01_VME
class PACKER_SIDEREM01_VME
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // select several

    // external sst[0] = EXT_SST(siderem=1,gtb=0,sam=5,branch=0);
    // external sst[1] = EXT_SST(siderem=2,gtb=0,sam=5,branch=0);
    // external sst[2] = EXT_SST(siderem=1,gtb=1,sam=5,branch=0);
  SINGLE(EXT_SST,sst[3]);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(SIDEREM01_VME);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for SIDEREM01_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(SIDEREM01_VME)
template<typename __data_src_t>
void SIDEREM01_VME::__unpack(__data_src_t &__buffer)
{
  // select several

    // external sst[0] = EXT_SST(siderem=1,gtb=0,sam=5,branch=0);
    // external sst[1] = EXT_SST(siderem=2,gtb=0,sam=5,branch=0);
    // external sst[2] = EXT_SST(siderem=1,gtb=1,sam=5,branch=0);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: EXT_SST sst[0]: could not get bits
    __buffer.peeking();
    MATCH_DECL(1000,__match_no,1,EXT_SST,sst[0],/*sam*/5,/*gtb*/0,/*siderem*/1,/*branch*/0);
    MATCH_DECL(1001,__match_no,2,EXT_SST,sst[1],/*sam*/5,/*gtb*/0,/*siderem*/2,/*branch*/0);
    MATCH_DECL(1002,__match_no,3,EXT_SST,sst[2],/*sam*/5,/*gtb*/1,/*siderem*/1,/*branch*/0);
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        UNPACK_DECL(1000,EXT_SST,sst[0],/*sam*/5,/*gtb*/0,/*siderem*/1,/*branch*/0);
        break;
      case 2:
        UNPACK_DECL(1001,EXT_SST,sst[1],/*sam*/5,/*gtb*/0,/*siderem*/2,/*branch*/0);
        break;
      case 3:
        UNPACK_DECL(1002,EXT_SST,sst[2],/*sam*/5,/*gtb*/1,/*siderem*/1,/*branch*/0);
        break;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,SIDEREM01_VME::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for SIDEREM01_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(SIDEREM01_VME)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for SIDEREM01_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(SIDEREM01_VME)
template<typename __data_dest_t>
void PACKER_SIDEREM01_VME::__packer(__data_dest_t &__buffer)
{
  // select several

    // external sst[0] = EXT_SST(siderem=1,gtb=0,sam=5,branch=0);
    // external sst[1] = EXT_SST(siderem=2,gtb=0,sam=5,branch=0);
    // external sst[2] = EXT_SST(siderem=1,gtb=1,sam=5,branch=0);
  {
    PACK_DECL(1000,EXT_SST,sst[0],/*sam*/5,/*gtb*/0,/*siderem*/1,/*branch*/0);
    PACK_DECL(1001,EXT_SST,sst[1],/*sam*/5,/*gtb*/0,/*siderem*/2,/*branch*/0);
    PACK_DECL(1002,EXT_SST,sst[2],/*sam*/5,/*gtb*/1,/*siderem*/1,/*branch*/0);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,SIDEREM01_VME::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for: SIDEREM02_VME
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for SIDEREM02_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(SIDEREM02_VME)
#if !PACKER_CODE
# define DECLARED_UNPACK_SIDEREM02_VME
class SIDEREM02_VME
#else//PACKER_CODE
# define DECLARED_PACKER_SIDEREM02_VME
class PACKER_SIDEREM02_VME
#endif//PACKER_CODE
 : public unpack_subevent_base
{
public:
  // select several

    // external sst[0] = EXT_SST(siderem=1,gtb=0,sam=5,branch=1);
    // external sst[1] = EXT_SST(siderem=1,gtb=1,sam=5,branch=1);
    // external sst[2] = EXT_SST(siderem=2,gtb=1,sam=5,branch=1);
  SINGLE(EXT_SST,sst[3]);

public:
#ifndef __PSDC__
# if !PACKER_CODE
template<typename __data_src_t>
  void __unpack(__data_src_t &__buffer);
template<typename __data_src_t>
  static bool __match(__data_src_t &__buffer);
  // void __clean();
# else//PACKER_CODE
template<typename __data_dest_t>
  void __packer(__data_dest_t &__buffer);
# endif//PACKER_CODE

  STRUCT_FCNS_DECL(SIDEREM02_VME);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for SIDEREM02_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(SIDEREM02_VME)
template<typename __data_src_t>
void SIDEREM02_VME::__unpack(__data_src_t &__buffer)
{
  // select several

    // external sst[0] = EXT_SST(siderem=1,gtb=0,sam=5,branch=1);
    // external sst[1] = EXT_SST(siderem=1,gtb=1,sam=5,branch=1);
    // external sst[2] = EXT_SST(siderem=2,gtb=1,sam=5,branch=1);
  for ( ; ; )
  {
    if (__buffer.empty()) break;
    int __match_no = 0;
    // optimized match 1: EXT_SST sst[0]: could not get bits
    __buffer.peeking();
    MATCH_DECL(1010,__match_no,1,EXT_SST,sst[0],/*sam*/5,/*gtb*/0,/*siderem*/1,/*branch*/1);
    MATCH_DECL(1011,__match_no,2,EXT_SST,sst[1],/*sam*/5,/*gtb*/1,/*siderem*/1,/*branch*/1);
    MATCH_DECL(1012,__match_no,3,EXT_SST,sst[2],/*sam*/5,/*gtb*/1,/*siderem*/2,/*branch*/1);
    if (!__match_no) break;
    switch (__match_no)
    {
      case 1:
        UNPACK_DECL(1010,EXT_SST,sst[0],/*sam*/5,/*gtb*/0,/*siderem*/1,/*branch*/1);
        break;
      case 2:
        UNPACK_DECL(1011,EXT_SST,sst[1],/*sam*/5,/*gtb*/1,/*siderem*/1,/*branch*/1);
        break;
      case 3:
        UNPACK_DECL(1012,EXT_SST,sst[2],/*sam*/5,/*gtb*/1,/*siderem*/2,/*branch*/1);
        break;
    }
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,SIDEREM02_VME::__unpack);

/** END_UNPACKER ******************************************************/


/** BEGIN_MATCHER ******************************************************
 *
 * Event matcher for SIDEREM02_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(SIDEREM02_VME)
// No __match function for subevents.

/** END_MATCHER *******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for SIDEREM02_VME.
 *
 * Do not edit - automatically generated.
 */

// SUBEVENT(SIDEREM02_VME)
template<typename __data_dest_t>
void PACKER_SIDEREM02_VME::__packer(__data_dest_t &__buffer)
{
  // select several

    // external sst[0] = EXT_SST(siderem=1,gtb=0,sam=5,branch=1);
    // external sst[1] = EXT_SST(siderem=1,gtb=1,sam=5,branch=1);
    // external sst[2] = EXT_SST(siderem=2,gtb=1,sam=5,branch=1);
  {
    PACK_DECL(1010,EXT_SST,sst[0],/*sam*/5,/*gtb*/0,/*siderem*/1,/*branch*/1);
    PACK_DECL(1011,EXT_SST,sst[1],/*sam*/5,/*gtb*/1,/*siderem*/1,/*branch*/1);
    PACK_DECL(1012,EXT_SST,sst[2],/*sam*/5,/*gtb*/1,/*siderem*/2,/*branch*/1);
  }
}
FORCE_IMPL_DATA_SRC_FCN(void,SIDEREM02_VME::__packer);

/** END_PACKER ********************************************************/

//
// Generating code for EVENT
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for EVENT.
 *
 * Do not edit - automatically generated.
 */

// EVENT
class unpack_event : public unpack_event_base
{
public:
  // cros3 = CROS3_SUBEVENT(type=85,subtype=0x2134);
  // cros3_rewrite = CROS3_REWRITE_SUBEVENT(type=85,subtype=0x213e);
  // sst1 = SIDEREM01_VME(type=82,subtype=0x2008,control=3);
  // sst2 = SIDEREM02_VME(type=82,subtype=0x2008,control=2);
  // camac = LAND_CAMAC_CONVERTER(type=34,subtype=0xc80);
  // fastbus1 = LAND_FASTBUS1(type=32,subtype=0xc3a,subcrate=1);
  // fastbus2 = LAND_FASTBUS2(type=32,subtype=0xc3a,subcrate=2);
  // acq = DUMMY(type=35,subtype=0xc1c);
  // vme = LAND_VME(type=88,subtype=0x2260,control=5);
  // camac_tcal_info = LAND_CAMAC_TCAL_INFO(type=0x26ce,subtype=0xc7f);
  // camac_scalers = LAND_CAMAC_SCALER(type=34,subtype=0xc1c);
  // fastbus1_error = LAND_FASTBUS_ERROR_NGF(type=31,subtype=0xc3b,subcrate=1);
  // fastbus2_error = LAND_FASTBUS_ERROR_NGF(type=31,subtype=0xc3b,subcrate=2);
  // pileup = LAND_CAMAC_PILEUP(type=34,subtype=0xdac,control=1);
SINGLE(LAND_CAMAC_PILEUP,pileup);
SINGLE(LAND_VME,vme);
SINGLE(CROS3_SUBEVENT,cros3);
SINGLE(SIDEREM01_VME,sst1);
SINGLE(CROS3_REWRITE_SUBEVENT,cros3_rewrite);
SINGLE(SIDEREM02_VME,sst2);
SINGLE(LAND_CAMAC_CONVERTER,camac);
SINGLE(LAND_FASTBUS1,fastbus1);
SINGLE(LAND_FASTBUS2,fastbus2);
SINGLE(DUMMY,acq);
SINGLE(LAND_CAMAC_TCAL_INFO,camac_tcal_info);
SINGLE(LAND_CAMAC_SCALER,camac_scalers);
SINGLE(LAND_FASTBUS_ERROR_NGF,fastbus1_error);
SINGLE(LAND_FASTBUS_ERROR_NGF,fastbus2_error);
public:
#ifndef __PSDC__
  bitsone<14> __visited;
  void __clear_visited() { __visited.clear(); }
  bool ignore_unknown_subevent() { return false; }
#endif//!__PSDC__

public:
#ifndef __PSDC__
template<typename __data_src_t>
  int __unpack_subevent(subevent_header *__header,__data_src_t &__buffer);
  int __revoke_subevent(subevent_header *__header);
  // void __clean_event();

  STRUCT_FCNS_DECL(unpack_event);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for EVENT.
 *
 * Do not edit - automatically generated.
 */

// EVENT
template<typename __data_src_t>
int unpack_event::__unpack_subevent(subevent_header *__header,__data_src_t &__buffer)
  // cros3 = CROS3_SUBEVENT(type=85,subtype=0x2134);
  // cros3_rewrite = CROS3_REWRITE_SUBEVENT(type=85,subtype=0x213e);
  // sst1 = SIDEREM01_VME(type=82,subtype=0x2008,control=3);
  // sst2 = SIDEREM02_VME(type=82,subtype=0x2008,control=2);
  // camac = LAND_CAMAC_CONVERTER(type=34,subtype=0xc80);
  // fastbus1 = LAND_FASTBUS1(type=32,subtype=0xc3a,subcrate=1);
  // fastbus2 = LAND_FASTBUS2(type=32,subtype=0xc3a,subcrate=2);
  // acq = DUMMY(type=35,subtype=0xc1c);
  // vme = LAND_VME(type=88,subtype=0x2260,control=5);
  // camac_tcal_info = LAND_CAMAC_TCAL_INFO(type=0x26ce,subtype=0xc7f);
  // camac_scalers = LAND_CAMAC_SCALER(type=34,subtype=0xc1c);
  // fastbus1_error = LAND_FASTBUS_ERROR_NGF(type=31,subtype=0xc3b,subcrate=1);
  // fastbus2_error = LAND_FASTBUS_ERROR_NGF(type=31,subtype=0xc3b,subcrate=2);
  // pileup = LAND_CAMAC_PILEUP(type=34,subtype=0xdac,control=1);
{
  int __match_no = 0;
  MATCH_SUBEVENT_DECL(1022,__match_no,1,((VES10_1_type==85)&&(VES10_1_subtype==0x2134)),cros3);
  MATCH_SUBEVENT_DECL(1023,__match_no,2,((VES10_1_type==85)&&(VES10_1_subtype==0x213e)),cros3_rewrite);
  MATCH_SUBEVENT_DECL(1024,__match_no,3,((VES10_1_type==82)&&(VES10_1_subtype==0x2008)&&(VES10_1_control==3)),sst1);
  MATCH_SUBEVENT_DECL(1025,__match_no,4,((VES10_1_type==82)&&(VES10_1_subtype==0x2008)&&(VES10_1_control==2)),sst2);
  MATCH_SUBEVENT_DECL(1026,__match_no,5,((VES10_1_type==34)&&(VES10_1_subtype==0xc80)),camac);
  MATCH_SUBEVENT_DECL(1027,__match_no,6,((VES10_1_type==32)&&(VES10_1_subtype==0xc3a)&&(VES10_1_subcrate==1)),fastbus1);
  MATCH_SUBEVENT_DECL(1028,__match_no,7,((VES10_1_type==32)&&(VES10_1_subtype==0xc3a)&&(VES10_1_subcrate==2)),fastbus2);
  MATCH_SUBEVENT_DECL(1029,__match_no,8,((VES10_1_type==35)&&(VES10_1_subtype==0xc1c)),acq);
  MATCH_SUBEVENT_DECL(1030,__match_no,9,((VES10_1_type==88)&&(VES10_1_subtype==0x2260)&&(VES10_1_control==5)),vme);
  MATCH_SUBEVENT_DECL(1031,__match_no,10,((VES10_1_type==0x26ce)&&(VES10_1_subtype==0xc7f)),camac_tcal_info);
  MATCH_SUBEVENT_DECL(1032,__match_no,11,((VES10_1_type==34)&&(VES10_1_subtype==0xc1c)),camac_scalers);
  MATCH_SUBEVENT_DECL(1033,__match_no,12,((VES10_1_type==31)&&(VES10_1_subtype==0xc3b)&&(VES10_1_subcrate==1)),fastbus1_error);
  MATCH_SUBEVENT_DECL(1034,__match_no,13,((VES10_1_type==31)&&(VES10_1_subtype==0xc3b)&&(VES10_1_subcrate==2)),fastbus2_error);
  MATCH_SUBEVENT_DECL(1035,__match_no,14,((VES10_1_type==34)&&(VES10_1_subtype==0xdac)&&(VES10_1_control==1)),pileup);
  if (!__match_no) return 0;
  switch (__match_no)
  {
    case 1:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1022,CROS3_SUBEVENT,cros3,0);
      UNPACK_SUBEVENT_DECL(1022,0,CROS3_SUBEVENT,cros3);
      break;
    case 2:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1023,CROS3_REWRITE_SUBEVENT,cros3_rewrite,1);
      UNPACK_SUBEVENT_DECL(1023,0,CROS3_REWRITE_SUBEVENT,cros3_rewrite);
      break;
    case 3:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1024,SIDEREM01_VME,sst1,2);
      UNPACK_SUBEVENT_DECL(1024,0,SIDEREM01_VME,sst1);
      break;
    case 4:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1025,SIDEREM02_VME,sst2,3);
      UNPACK_SUBEVENT_DECL(1025,0,SIDEREM02_VME,sst2);
      break;
    case 5:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1026,LAND_CAMAC_CONVERTER,camac,4);
      UNPACK_SUBEVENT_DECL(1026,0,LAND_CAMAC_CONVERTER,camac);
      break;
    case 6:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1027,LAND_FASTBUS1,fastbus1,5);
      UNPACK_SUBEVENT_DECL(1027,0,LAND_FASTBUS1,fastbus1);
      break;
    case 7:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1028,LAND_FASTBUS2,fastbus2,6);
      UNPACK_SUBEVENT_DECL(1028,0,LAND_FASTBUS2,fastbus2);
      break;
    case 8:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1029,DUMMY,acq,7);
      UNPACK_SUBEVENT_DECL(1029,0,DUMMY,acq);
      break;
    case 9:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1030,LAND_VME,vme,8);
      UNPACK_SUBEVENT_DECL(1030,0,LAND_VME,vme);
      break;
    case 10:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1031,LAND_CAMAC_TCAL_INFO,camac_tcal_info,9);
      UNPACK_SUBEVENT_DECL(1031,0,LAND_CAMAC_TCAL_INFO,camac_tcal_info);
      break;
    case 11:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1032,LAND_CAMAC_SCALER,camac_scalers,10);
      UNPACK_SUBEVENT_DECL(1032,0,LAND_CAMAC_SCALER,camac_scalers);
      break;
    case 12:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1033,LAND_FASTBUS_ERROR_NGF,fastbus1_error,11);
      UNPACK_SUBEVENT_DECL(1033,0,LAND_FASTBUS_ERROR_NGF,fastbus1_error);
      break;
    case 13:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1034,LAND_FASTBUS_ERROR_NGF,fastbus2_error,12);
      UNPACK_SUBEVENT_DECL(1034,0,LAND_FASTBUS_ERROR_NGF,fastbus2_error);
      break;
    case 14:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1035,LAND_CAMAC_PILEUP,pileup,13);
      UNPACK_SUBEVENT_DECL(1035,0,LAND_CAMAC_PILEUP,pileup);
      break;
  }
  return 0;
}
FORCE_IMPL_DATA_SRC_FCN_HDR(int,unpack_event::__unpack_subevent);

/** END_UNPACKER ******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for EVENT.
 *
 * Do not edit - automatically generated.
 */

// EVENT
  // cros3 = CROS3_SUBEVENT(type=85,subtype=0x2134);
  // cros3_rewrite = CROS3_REWRITE_SUBEVENT(type=85,subtype=0x213e);
  // sst1 = SIDEREM01_VME(type=82,subtype=0x2008,control=3);
  // sst2 = SIDEREM02_VME(type=82,subtype=0x2008,control=2);
  // camac = LAND_CAMAC_CONVERTER(type=34,subtype=0xc80);
  // fastbus1 = LAND_FASTBUS1(type=32,subtype=0xc3a,subcrate=1);
  // fastbus2 = LAND_FASTBUS2(type=32,subtype=0xc3a,subcrate=2);
  // acq = DUMMY(type=35,subtype=0xc1c);
  // vme = LAND_VME(type=88,subtype=0x2260,control=5);
  // camac_tcal_info = LAND_CAMAC_TCAL_INFO(type=0x26ce,subtype=0xc7f);
  // camac_scalers = LAND_CAMAC_SCALER(type=34,subtype=0xc1c);
  // fastbus1_error = LAND_FASTBUS_ERROR_NGF(type=31,subtype=0xc3b,subcrate=1);
  // fastbus2_error = LAND_FASTBUS_ERROR_NGF(type=31,subtype=0xc3b,subcrate=2);
  // pileup = LAND_CAMAC_PILEUP(type=34,subtype=0xdac,control=1);
{
}

/** END_PACKER ********************************************************/


/** BEGIN_REVOKE *******************************************************
 *
 * Event revoker for EVENT.
 *
 * Do not edit - automatically generated.
 */

// EVENT
int unpack_event::__revoke_subevent(subevent_header *__header)
  // cros3 = CROS3_SUBEVENT(type=85,subtype=0x2134);
  // cros3_rewrite = CROS3_REWRITE_SUBEVENT(type=85,subtype=0x213e);
  // sst1 = SIDEREM01_VME(type=82,subtype=0x2008,control=3);
  // sst2 = SIDEREM02_VME(type=82,subtype=0x2008,control=2);
  // camac = LAND_CAMAC_CONVERTER(type=34,subtype=0xc80);
  // fastbus1 = LAND_FASTBUS1(type=32,subtype=0xc3a,subcrate=1);
  // fastbus2 = LAND_FASTBUS2(type=32,subtype=0xc3a,subcrate=2);
  // acq = DUMMY(type=35,subtype=0xc1c);
  // vme = LAND_VME(type=88,subtype=0x2260,control=5);
  // camac_tcal_info = LAND_CAMAC_TCAL_INFO(type=0x26ce,subtype=0xc7f);
  // camac_scalers = LAND_CAMAC_SCALER(type=34,subtype=0xc1c);
  // fastbus1_error = LAND_FASTBUS_ERROR_NGF(type=31,subtype=0xc3b,subcrate=1);
  // fastbus2_error = LAND_FASTBUS_ERROR_NGF(type=31,subtype=0xc3b,subcrate=2);
  // pileup = LAND_CAMAC_PILEUP(type=34,subtype=0xdac,control=1);
{
  int __match_no = 0;
  MATCH_SUBEVENT_DECL(1022,__match_no,1,((VES10_1_type==85)&&(VES10_1_subtype==0x2134)),cros3);
  MATCH_SUBEVENT_DECL(1023,__match_no,2,((VES10_1_type==85)&&(VES10_1_subtype==0x213e)),cros3_rewrite);
  MATCH_SUBEVENT_DECL(1024,__match_no,3,((VES10_1_type==82)&&(VES10_1_subtype==0x2008)&&(VES10_1_control==3)),sst1);
  MATCH_SUBEVENT_DECL(1025,__match_no,4,((VES10_1_type==82)&&(VES10_1_subtype==0x2008)&&(VES10_1_control==2)),sst2);
  MATCH_SUBEVENT_DECL(1026,__match_no,5,((VES10_1_type==34)&&(VES10_1_subtype==0xc80)),camac);
  MATCH_SUBEVENT_DECL(1027,__match_no,6,((VES10_1_type==32)&&(VES10_1_subtype==0xc3a)&&(VES10_1_subcrate==1)),fastbus1);
  MATCH_SUBEVENT_DECL(1028,__match_no,7,((VES10_1_type==32)&&(VES10_1_subtype==0xc3a)&&(VES10_1_subcrate==2)),fastbus2);
  MATCH_SUBEVENT_DECL(1029,__match_no,8,((VES10_1_type==35)&&(VES10_1_subtype==0xc1c)),acq);
  MATCH_SUBEVENT_DECL(1030,__match_no,9,((VES10_1_type==88)&&(VES10_1_subtype==0x2260)&&(VES10_1_control==5)),vme);
  MATCH_SUBEVENT_DECL(1031,__match_no,10,((VES10_1_type==0x26ce)&&(VES10_1_subtype==0xc7f)),camac_tcal_info);
  MATCH_SUBEVENT_DECL(1032,__match_no,11,((VES10_1_type==34)&&(VES10_1_subtype==0xc1c)),camac_scalers);
  MATCH_SUBEVENT_DECL(1033,__match_no,12,((VES10_1_type==31)&&(VES10_1_subtype==0xc3b)&&(VES10_1_subcrate==1)),fastbus1_error);
  MATCH_SUBEVENT_DECL(1034,__match_no,13,((VES10_1_type==31)&&(VES10_1_subtype==0xc3b)&&(VES10_1_subcrate==2)),fastbus2_error);
  MATCH_SUBEVENT_DECL(1035,__match_no,14,((VES10_1_type==34)&&(VES10_1_subtype==0xdac)&&(VES10_1_control==1)),pileup);
  if (!__match_no) return 0;
  switch (__match_no)
  {
    case 1:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1022,CROS3_SUBEVENT,cros3,0);
      REVOKE_SUBEVENT_DECL(1022,0,CROS3_SUBEVENT,cros3);
      break;
    case 2:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1023,CROS3_REWRITE_SUBEVENT,cros3_rewrite,1);
      REVOKE_SUBEVENT_DECL(1023,0,CROS3_REWRITE_SUBEVENT,cros3_rewrite);
      break;
    case 3:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1024,SIDEREM01_VME,sst1,2);
      REVOKE_SUBEVENT_DECL(1024,0,SIDEREM01_VME,sst1);
      break;
    case 4:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1025,SIDEREM02_VME,sst2,3);
      REVOKE_SUBEVENT_DECL(1025,0,SIDEREM02_VME,sst2);
      break;
    case 5:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1026,LAND_CAMAC_CONVERTER,camac,4);
      REVOKE_SUBEVENT_DECL(1026,0,LAND_CAMAC_CONVERTER,camac);
      break;
    case 6:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1027,LAND_FASTBUS1,fastbus1,5);
      REVOKE_SUBEVENT_DECL(1027,0,LAND_FASTBUS1,fastbus1);
      break;
    case 7:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1028,LAND_FASTBUS2,fastbus2,6);
      REVOKE_SUBEVENT_DECL(1028,0,LAND_FASTBUS2,fastbus2);
      break;
    case 8:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1029,DUMMY,acq,7);
      REVOKE_SUBEVENT_DECL(1029,0,DUMMY,acq);
      break;
    case 9:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1030,LAND_VME,vme,8);
      REVOKE_SUBEVENT_DECL(1030,0,LAND_VME,vme);
      break;
    case 10:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1031,LAND_CAMAC_TCAL_INFO,camac_tcal_info,9);
      REVOKE_SUBEVENT_DECL(1031,0,LAND_CAMAC_TCAL_INFO,camac_tcal_info);
      break;
    case 11:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1032,LAND_CAMAC_SCALER,camac_scalers,10);
      REVOKE_SUBEVENT_DECL(1032,0,LAND_CAMAC_SCALER,camac_scalers);
      break;
    case 12:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1033,LAND_FASTBUS_ERROR_NGF,fastbus1_error,11);
      REVOKE_SUBEVENT_DECL(1033,0,LAND_FASTBUS_ERROR_NGF,fastbus1_error);
      break;
    case 13:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1034,LAND_FASTBUS_ERROR_NGF,fastbus2_error,12);
      REVOKE_SUBEVENT_DECL(1034,0,LAND_FASTBUS_ERROR_NGF,fastbus2_error);
      break;
    case 14:
      UNPACK_SUBEVENT_CHECK_NO_REVISIT(1035,LAND_CAMAC_PILEUP,pileup,13);
      REVOKE_SUBEVENT_DECL(1035,0,LAND_CAMAC_PILEUP,pileup);
      break;
  }
  return 0;
}

/** END_REVOKE ********************************************************/


/** BEGIN_SUBEVENT_NAMES ***********************************************
 *
 * Mappings of names for [incl|excl] name lookup.
 *
 * Do not edit - automatically generated.
 */

{ "cros3", "type=85:subtype=0x2134" },
{ "cros3_rewrite", "type=85:subtype=0x213e" },
{ "sst1", "type=82:subtype=0x2008:control=3" },
{ "sst2", "type=82:subtype=0x2008:control=2" },
{ "camac", "type=34:subtype=0xc80" },
{ "fastbus1", "type=32:subtype=0xc3a:subcrate=1" },
{ "fastbus2", "type=32:subtype=0xc3a:subcrate=2" },
{ "acq", "type=35:subtype=0xc1c" },
{ "vme", "type=88:subtype=0x2260:control=5" },
{ "camac_tcal_info", "type=0x26ce:subtype=0xc7f" },
{ "camac_scalers", "type=34:subtype=0xc1c" },
{ "fastbus1_error", "type=31:subtype=0xc3b:subcrate=1" },
{ "fastbus2_error", "type=31:subtype=0xc3b:subcrate=2" },
{ "pileup", "type=34:subtype=0xdac:control=1" },

/** END_SUBEVENT_NAMES ************************************************/

//
// Generating code for EVENT
//

/** BEGIN_STRUCTURES ***************************************************
 *
 * Event unpacker associated structures for EVENT.
 *
 * Do not edit - automatically generated.
 */

// STICKY_EVENT
class unpack_sticky_event : public unpack_sticky_event_base
{
public:
public:
#ifndef __PSDC__
  void __clear_visited() { }
  bool ignore_unknown_subevent() { return false; }
#endif//!__PSDC__

public:
#ifndef __PSDC__
template<typename __data_src_t>
  int __unpack_subevent(subevent_header *__header,__data_src_t &__buffer);
  int __revoke_subevent(subevent_header *__header);
  // void __clean_event();

  STRUCT_FCNS_DECL(unpack_sticky_event);
#endif//!__PSDC__
};

/** END_STRUCTURES ****************************************************/


/** BEGIN_UNPACKER *****************************************************
 *
 * Event unpacker for EVENT.
 *
 * Do not edit - automatically generated.
 */

// STICKY_EVENT
template<typename __data_src_t>
int unpack_sticky_event::__unpack_subevent(subevent_header *__header,__data_src_t &__buffer)
{
  int __match_no = 0;
  if (!__match_no) return 0;
  switch (__match_no)
  {
  }
  return 0;
}
FORCE_IMPL_DATA_SRC_FCN_HDR(int,unpack_sticky_event::__unpack_subevent);

/** END_UNPACKER ******************************************************/


/** BEGIN_PACKER *******************************************************
 *
 * Event packer for EVENT.
 *
 * Do not edit - automatically generated.
 */

// STICKY_EVENT
{
}

/** END_PACKER ********************************************************/


/** BEGIN_REVOKE *******************************************************
 *
 * Event revoker for EVENT.
 *
 * Do not edit - automatically generated.
 */

// STICKY_EVENT
int unpack_sticky_event::__revoke_subevent(subevent_header *__header)
{
  int __match_no = 0;
  if (!__match_no) return 0;
  switch (__match_no)
  {
  }
  return 0;
}

/** END_REVOKE ********************************************************/


/** BEGIN_SUBEVENT_NAMES ***********************************************
 *
 * Mappings of names for [incl|excl] name lookup.
 *
 * Do not edit - automatically generated.
 */


/** END_SUBEVENT_NAMES ************************************************/


/** BEGIN_UNPACKER_DEFINES *********************************************
 *
 * Control
 *
 * Do not edit - automatically generated.
 */

#define STICKY_EVENT_IS_NONTRIVIAL  0


/** END_UNPACKER_DEFINES **********************************************/

/**********************************************************/
/**********************************************************
 * Generating event structure...
 */


/** BEGIN_EVENT_RAW_STRUCTURE ******************************************
 *
 * Event data structure.
 *
 * Do not edit - automatically generated.
 */

//DUMPY: 3 0
//DUMPY: 35 1
class raw_event_GFI
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_GFI);
#endif//!__PSDC__
} ;

class raw_event_MASTER
{
public:
  DATA32 ACCEPT;
  DATA32 WANTED;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_MASTER);
#endif//!__PSDC__
} ;

//DUMPY: 10 0
//DUMPY: 20 1
//DUMPY: 2 0
class raw_event_N
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_N);
#endif//!__PSDC__
} ;

//DUMPY: 16 1
//DUMPY: 2 0
class raw_event_NTF
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_NTF);
#endif//!__PSDC__
} ;

//DUMPY: 16 2
class raw_event_PILEUP
{
public:
  DATA16 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_PILEUP);
#endif//!__PSDC__
} ;

//DUMPY: 1 0
//DUMPY: 4 0
class raw_event_POS
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_POS);
#endif//!__PSDC__
} ;

//DUMPY: 2 0
//DUMPY: 5 0
class raw_event_PSP
{
public:
  DATA12 E;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_PSP);
#endif//!__PSDC__
} ;

//DUMPY: 1 0
//DUMPY: 4 0
class raw_event_ROL
{
public:
  DATA12 E;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_ROL);
#endif//!__PSDC__
} ;

//DUMPY: 2 0
//DUMPY: 2 0
class raw_event_SCI
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_SCI);
#endif//!__PSDC__
} ;

//DUMPY: 2 0
//DUMPY: 1 0
class raw_event_STR
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_STR);
#endif//!__PSDC__
} ;

//DUMPY: 32 1
//DUMPY: 2 0
class raw_event_TFW
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_TFW);
#endif//!__PSDC__
} ;

//DUMPY: 1 0
//DUMPY: 20 1
//DUMPY: 2 0
class raw_event_V
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_V);
#endif//!__PSDC__
} ;

//DUMPY: 162 1
//DUMPY: 2 0
class raw_event_XB
{
public:
  DATA12 E;
  DATA12 T;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_XB);
#endif//!__PSDC__
} ;

//DUMPY: 1 0
class raw_event_XBSUM
{
public:
  DATA12 E;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_XBSUM);
#endif//!__PSDC__
} ;

//DUMPY: 6 0
//DUMPY: 1024 1
class raw_event_SST
{
public:
  DATA12 E;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event_SST);
#endif//!__PSDC__
} ;

class raw_event : public raw_event_base
{
public:
//DUMPY: 3 0
//DUMPY: 35 1
  raw_array_zero_suppress<raw_event_GFI,raw_event_GFI,35>
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ GFI[3];
  raw_event_MASTER
  /* {
  public:
    DATA32 ACCEPT;
    DATA32 WANTED;
  } */ MASTER;
//DUMPY: 10 0
//DUMPY: 20 1
//DUMPY: 2 0
  raw_array_zero_suppress_1<raw_event_N,raw_event_N[2],20,2>
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ N[10];
//DUMPY: 16 1
//DUMPY: 2 0
  raw_array_zero_suppress_1<raw_event_NTF,raw_event_NTF[2],16,2>
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ NTF;
//DUMPY: 16 2
  raw_list_ii_zero_suppress<raw_event_PILEUP,raw_event_PILEUP,16>
  /* {
  public:
    DATA16 T;
  } */ PILEUP;
//DUMPY: 1 0
//DUMPY: 4 0
  raw_event_POS
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ POS[1][4];
//DUMPY: 2 0
//DUMPY: 5 0
  raw_event_PSP
  /* {
  public:
    DATA12 E;
  } */ PSP[2][5];
//DUMPY: 1 0
//DUMPY: 4 0
  raw_event_ROL
  /* {
  public:
    DATA12 E;
  } */ ROL[1][4];
//DUMPY: 2 0
//DUMPY: 2 0
  raw_event_SCI
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ SCI[2][2];
//DUMPY: 2 0
//DUMPY: 1 0
  raw_event_STR
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ STR[2][1];
//DUMPY: 32 1
//DUMPY: 2 0
  raw_array_zero_suppress_1<raw_event_TFW,raw_event_TFW[2],32,2>
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ TFW;
//DUMPY: 1 0
//DUMPY: 20 1
//DUMPY: 2 0
  raw_array_zero_suppress_1<raw_event_V,raw_event_V[2],20,2>
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ V[1];
//DUMPY: 162 1
//DUMPY: 2 0
  raw_array_zero_suppress_1<raw_event_XB,raw_event_XB[2],162,2>
  /* {
  public:
    DATA12 E;
    DATA12 T;
  } */ XB;
//DUMPY: 1 0
  raw_event_XBSUM
  /* {
  public:
    DATA12 E;
  } */ XBSUM[1];
  uint16 IPED;
//DUMPY: 6 0
//DUMPY: 1024 1
  raw_array_zero_suppress<raw_event_SST,raw_event_SST,1024>
  /* {
  public:
    DATA12 E;
  } */ SST[6];
  float TCALE;
  float TCALT;

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_event);
#endif//!__PSDC__
} ;

/** END_EVENT_RAW_STRUCTURE *******************************************/


/** BEGIN_EVENT_CAL_STRUCTURE ******************************************
 *
 * Event data structure.
 *
 * Do not edit - automatically generated.
 */

class cal_event : public cal_event_base
{
public:

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(cal_event);
#endif//!__PSDC__
} ;

/** END_EVENT_CAL_STRUCTURE *******************************************/


/** BEGIN_EVENT_RAW_STRUCTURE ******************************************
 *
 * Event data structure.
 *
 * Do not edit - automatically generated.
 */

class raw_sticky : public raw_sticky_base
{
public:

public:
#ifndef __PSDC__
  STRUCT_FCNS_DECL(raw_sticky);
#endif//!__PSDC__
} ;

/** END_EVENT_RAW_STRUCTURE *******************************************/


/** BEGIN_EVENT_DATA_MAPPING *******************************************
 *
 * Event data mapping.
 *
 * Do not edit - automatically generated.
 */

// The order in this file does not matter.
// This information parsed once and not treated eventwise,
// it is used to initialize a structure.

SIGNAL_MAPPING(DATA12,GFI01_01_E,fastbus1.Q46848.data[32],GFI[0][0].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],0)*/
SIGNAL_MAPPING(DATA12,GFI01_02_E,fastbus1.Q46848.data[1],GFI[0][1].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],1)*/
SIGNAL_MAPPING(DATA12,GFI01_03_E,fastbus1.Q46848.data[2],GFI[0][2].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],2)*/
SIGNAL_MAPPING(DATA12,GFI01_04_E,fastbus1.Q46848.data[3],GFI[0][3].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],3)*/
SIGNAL_MAPPING(DATA12,GFI01_05_E,fastbus1.Q46848.data[4],GFI[0][4].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],4)*/
SIGNAL_MAPPING(DATA12,GFI01_06_E,fastbus1.Q46848.data[5],GFI[0][5].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],5)*/
SIGNAL_MAPPING(DATA12,GFI01_07_E,fastbus1.Q46848.data[6],GFI[0][6].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],6)*/
SIGNAL_MAPPING(DATA12,GFI01_08_E,fastbus1.Q46848.data[7],GFI[0][7].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],7)*/
SIGNAL_MAPPING(DATA12,GFI01_09_E,fastbus1.Q46848.data[8],GFI[0][8].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],8)*/
SIGNAL_MAPPING(DATA12,GFI01_10_E,fastbus1.Q46848.data[9],GFI[0][9].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],9)*/
SIGNAL_MAPPING(DATA12,GFI01_11_E,fastbus1.Q46848.data[10],GFI[0][10].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],10)*/
SIGNAL_MAPPING(DATA12,GFI01_12_E,fastbus1.Q46848.data[11],GFI[0][11].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],11)*/
SIGNAL_MAPPING(DATA12,GFI01_13_E,fastbus1.Q46848.data[12],GFI[0][12].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],12)*/
SIGNAL_MAPPING(DATA12,GFI01_14_E,fastbus1.Q46848.data[13],GFI[0][13].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],13)*/
SIGNAL_MAPPING(DATA12,GFI01_15_E,fastbus1.Q46848.data[14],GFI[0][14].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],14)*/
SIGNAL_MAPPING(DATA12,GFI01_16_E,fastbus1.Q46848.data[15],GFI[0][15].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],15)*/
SIGNAL_MAPPING(DATA12,GFI01_17_E,fastbus1.Q46848.data[16],GFI[0][16].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],16)*/
SIGNAL_MAPPING(DATA12,GFI01_18_E,fastbus1.Q46848.data[17],GFI[0][17].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],17)*/
SIGNAL_MAPPING(DATA12,GFI01_19_E,fastbus1.Q46848.data[18],GFI[0][18].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],18)*/
SIGNAL_MAPPING(DATA12,GFI01_20_E,fastbus1.Q46848.data[19],GFI[0][19].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],19)*/
SIGNAL_MAPPING(DATA12,GFI01_21_E,fastbus1.Q46848.data[20],GFI[0][20].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],20)*/
SIGNAL_MAPPING(DATA12,GFI01_22_E,fastbus1.Q46848.data[21],GFI[0][21].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],21)*/
SIGNAL_MAPPING(DATA12,GFI01_23_E,fastbus1.Q46848.data[22],GFI[0][22].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],22)*/
SIGNAL_MAPPING(DATA12,GFI01_24_E,fastbus1.Q46848.data[23],GFI[0][23].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],23)*/
SIGNAL_MAPPING(DATA12,GFI01_25_E,fastbus1.Q46848.data[24],GFI[0][24].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],24)*/
SIGNAL_MAPPING(DATA12,GFI01_26_E,fastbus1.Q46848.data[25],GFI[0][25].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],25)*/
SIGNAL_MAPPING(DATA12,GFI01_27_E,fastbus1.Q46848.data[26],GFI[0][26].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],26)*/
SIGNAL_MAPPING(DATA12,GFI01_28_E,fastbus1.Q46848.data[27],GFI[0][27].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],27)*/
SIGNAL_MAPPING(DATA12,GFI01_29_E,fastbus1.Q46848.data[28],GFI[0][28].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],28)*/
SIGNAL_MAPPING(DATA12,GFI01_30_E,fastbus1.Q46848.data[29],GFI[0][29].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],29)*/
SIGNAL_MAPPING(DATA12,GFI01_31_E,fastbus1.Q46848.data[30],GFI[0][30].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],30)*/
SIGNAL_MAPPING(DATA12,GFI01_32_E,fastbus1.Q46848.data[31],GFI[0][31].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],31)*/
SIGNAL_MAPPING(DATA12,GFI01_33_E,fastbus1.Q46848.data[0],GFI[0][32].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],32)*/
SIGNAL_MAPPING(DATA12,GFI01_34_E,fastbus1.Q46848.data[33],GFI[0][33].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],33)*/
SIGNAL_MAPPING(DATA12,GFI01_35_E,camac.qSIA0458.data[4],GFI[0][34].E);/*,ZERO_SUPPRESS_ITEM(GFI[0],34)*/
SIGNAL_MAPPING(DATA12,GFI01_35_T,camac.tC_FRS120.data[3],GFI[0][34].T);/*,ZERO_SUPPRESS_ITEM(GFI[0],34)*/
SIGNAL_MAPPING(DATA12,GFI02_01_E,fastbus1.Q47264.data[0],GFI[1][0].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],0)*/
SIGNAL_MAPPING(DATA12,GFI02_02_E,fastbus1.Q47264.data[1],GFI[1][1].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],1)*/
SIGNAL_MAPPING(DATA12,GFI02_03_E,fastbus1.Q47264.data[2],GFI[1][2].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],2)*/
SIGNAL_MAPPING(DATA12,GFI02_04_E,fastbus1.Q47264.data[3],GFI[1][3].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],3)*/
SIGNAL_MAPPING(DATA12,GFI02_05_E,fastbus1.Q47264.data[4],GFI[1][4].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],4)*/
SIGNAL_MAPPING(DATA12,GFI02_06_E,fastbus1.Q47264.data[5],GFI[1][5].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],5)*/
SIGNAL_MAPPING(DATA12,GFI02_07_E,fastbus1.Q47264.data[68],GFI[1][6].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],6)*/
SIGNAL_MAPPING(DATA12,GFI02_08_E,fastbus1.Q47264.data[7],GFI[1][7].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],7)*/
SIGNAL_MAPPING(DATA12,GFI02_09_E,fastbus1.Q47264.data[8],GFI[1][8].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],8)*/
SIGNAL_MAPPING(DATA12,GFI02_10_E,fastbus1.Q47264.data[9],GFI[1][9].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],9)*/
SIGNAL_MAPPING(DATA12,GFI02_11_E,fastbus1.Q47264.data[10],GFI[1][10].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],10)*/
SIGNAL_MAPPING(DATA12,GFI02_12_E,fastbus1.Q47264.data[11],GFI[1][11].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],11)*/
SIGNAL_MAPPING(DATA12,GFI02_13_E,fastbus1.Q47264.data[12],GFI[1][12].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],12)*/
SIGNAL_MAPPING(DATA12,GFI02_14_E,fastbus1.Q47264.data[13],GFI[1][13].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],13)*/
SIGNAL_MAPPING(DATA12,GFI02_15_E,fastbus1.Q47264.data[14],GFI[1][14].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],14)*/
SIGNAL_MAPPING(DATA12,GFI02_16_E,fastbus1.Q47264.data[15],GFI[1][15].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],15)*/
SIGNAL_MAPPING(DATA12,GFI02_17_E,fastbus1.Q47264.data[16],GFI[1][16].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],16)*/
SIGNAL_MAPPING(DATA12,GFI02_18_E,fastbus1.Q47264.data[17],GFI[1][17].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],17)*/
SIGNAL_MAPPING(DATA12,GFI02_19_E,fastbus1.Q47264.data[18],GFI[1][18].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],18)*/
SIGNAL_MAPPING(DATA12,GFI02_20_E,fastbus1.Q47264.data[19],GFI[1][19].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],19)*/
SIGNAL_MAPPING(DATA12,GFI02_21_E,fastbus1.Q47264.data[20],GFI[1][20].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],20)*/
SIGNAL_MAPPING(DATA12,GFI02_22_E,fastbus1.Q47264.data[21],GFI[1][21].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],21)*/
SIGNAL_MAPPING(DATA12,GFI02_23_E,fastbus1.Q47264.data[22],GFI[1][22].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],22)*/
SIGNAL_MAPPING(DATA12,GFI02_24_E,fastbus1.Q47264.data[23],GFI[1][23].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],23)*/
SIGNAL_MAPPING(DATA12,GFI02_25_E,fastbus1.Q47264.data[24],GFI[1][24].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],24)*/
SIGNAL_MAPPING(DATA12,GFI02_26_E,fastbus1.Q47264.data[25],GFI[1][25].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],25)*/
SIGNAL_MAPPING(DATA12,GFI02_27_E,fastbus1.Q47264.data[26],GFI[1][26].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],26)*/
SIGNAL_MAPPING(DATA12,GFI02_28_E,fastbus1.Q47264.data[27],GFI[1][27].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],27)*/
SIGNAL_MAPPING(DATA12,GFI02_29_E,fastbus1.Q47264.data[28],GFI[1][28].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],28)*/
SIGNAL_MAPPING(DATA12,GFI02_30_E,fastbus1.Q47264.data[29],GFI[1][29].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],29)*/
SIGNAL_MAPPING(DATA12,GFI02_31_E,fastbus1.Q47264.data[30],GFI[1][30].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],30)*/
SIGNAL_MAPPING(DATA12,GFI02_32_E,fastbus1.Q47264.data[31],GFI[1][31].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],31)*/
SIGNAL_MAPPING(DATA12,GFI02_33_E,fastbus1.Q47264.data[64],GFI[1][32].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],32)*/
SIGNAL_MAPPING(DATA12,GFI02_34_E,fastbus1.Q47264.data[65],GFI[1][33].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],33)*/
SIGNAL_MAPPING(DATA12,GFI02_35_E,camac.qSIA0458.data[5],GFI[1][34].E);/*,ZERO_SUPPRESS_ITEM(GFI[1],34)*/
SIGNAL_MAPPING(DATA12,GFI02_35_T,camac.tC_FRS120.data[4],GFI[1][34].T);/*,ZERO_SUPPRESS_ITEM(GFI[1],34)*/
SIGNAL_MAPPING(DATA12,GFI03_01_E,fastbus1.Q47264.data[32],GFI[2][0].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],0)*/
SIGNAL_MAPPING(DATA12,GFI03_02_E,fastbus1.Q47264.data[33],GFI[2][1].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],1)*/
SIGNAL_MAPPING(DATA12,GFI03_03_E,fastbus1.Q47264.data[34],GFI[2][2].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],2)*/
SIGNAL_MAPPING(DATA12,GFI03_04_E,fastbus1.Q47264.data[35],GFI[2][3].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],3)*/
SIGNAL_MAPPING(DATA12,GFI03_05_E,fastbus1.Q47264.data[36],GFI[2][4].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],4)*/
SIGNAL_MAPPING(DATA12,GFI03_06_E,fastbus1.Q47264.data[37],GFI[2][5].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],5)*/
SIGNAL_MAPPING(DATA12,GFI03_07_E,fastbus1.Q47264.data[38],GFI[2][6].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],6)*/
SIGNAL_MAPPING(DATA12,GFI03_08_E,fastbus1.Q47264.data[39],GFI[2][7].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],7)*/
SIGNAL_MAPPING(DATA12,GFI03_09_E,fastbus1.Q47264.data[40],GFI[2][8].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],8)*/
SIGNAL_MAPPING(DATA12,GFI03_10_E,fastbus1.Q47264.data[41],GFI[2][9].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],9)*/
SIGNAL_MAPPING(DATA12,GFI03_11_E,fastbus1.Q47264.data[42],GFI[2][10].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],10)*/
SIGNAL_MAPPING(DATA12,GFI03_12_E,fastbus1.Q47264.data[43],GFI[2][11].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],11)*/
SIGNAL_MAPPING(DATA12,GFI03_13_E,fastbus1.Q47264.data[44],GFI[2][12].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],12)*/
SIGNAL_MAPPING(DATA12,GFI03_14_E,fastbus1.Q47264.data[45],GFI[2][13].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],13)*/
SIGNAL_MAPPING(DATA12,GFI03_15_E,fastbus1.Q47264.data[46],GFI[2][14].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],14)*/
SIGNAL_MAPPING(DATA12,GFI03_16_E,fastbus1.Q47264.data[47],GFI[2][15].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],15)*/
SIGNAL_MAPPING(DATA12,GFI03_17_E,fastbus1.Q47264.data[48],GFI[2][16].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],16)*/
SIGNAL_MAPPING(DATA12,GFI03_18_E,fastbus1.Q47264.data[49],GFI[2][17].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],17)*/
SIGNAL_MAPPING(DATA12,GFI03_19_E,fastbus1.Q47264.data[50],GFI[2][18].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],18)*/
SIGNAL_MAPPING(DATA12,GFI03_20_E,fastbus1.Q47264.data[51],GFI[2][19].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],19)*/
SIGNAL_MAPPING(DATA12,GFI03_21_E,fastbus1.Q47264.data[52],GFI[2][20].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],20)*/
SIGNAL_MAPPING(DATA12,GFI03_22_E,fastbus1.Q47264.data[53],GFI[2][21].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],21)*/
SIGNAL_MAPPING(DATA12,GFI03_23_E,fastbus1.Q47264.data[54],GFI[2][22].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],22)*/
SIGNAL_MAPPING(DATA12,GFI03_24_E,fastbus1.Q47264.data[55],GFI[2][23].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],23)*/
SIGNAL_MAPPING(DATA12,GFI03_25_E,fastbus1.Q47264.data[56],GFI[2][24].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],24)*/
SIGNAL_MAPPING(DATA12,GFI03_26_E,fastbus1.Q47264.data[57],GFI[2][25].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],25)*/
SIGNAL_MAPPING(DATA12,GFI03_27_E,fastbus1.Q47264.data[58],GFI[2][26].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],26)*/
SIGNAL_MAPPING(DATA12,GFI03_28_E,fastbus1.Q47264.data[59],GFI[2][27].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],27)*/
SIGNAL_MAPPING(DATA12,GFI03_29_E,fastbus1.Q47264.data[60],GFI[2][28].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],28)*/
SIGNAL_MAPPING(DATA12,GFI03_30_E,fastbus1.Q47264.data[61],GFI[2][29].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],29)*/
SIGNAL_MAPPING(DATA12,GFI03_31_E,fastbus1.Q47264.data[62],GFI[2][30].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],30)*/
SIGNAL_MAPPING(DATA12,GFI03_32_E,fastbus1.Q47264.data[63],GFI[2][31].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],31)*/
SIGNAL_MAPPING(DATA12,GFI03_33_E,fastbus1.Q47264.data[66],GFI[2][32].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],32)*/
SIGNAL_MAPPING(DATA12,GFI03_34_E,fastbus1.Q47264.data[67],GFI[2][33].E);/*,ZERO_SUPPRESS_ITEM(GFI[2],33)*/
SIGNAL_MAPPING(DATA32,MASTER_ACCEPT,vme.scaler[1].data[0],MASTER.ACCEPT);
SIGNAL_MAPPING(DATA32,MASTER_WANTED,vme.scaler[1].data[1],MASTER.WANTED);
SIGNAL_MAPPING(DATA12,N01_01_1_E,fastbus1.Q46993.data[0],N[0][0][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],0)*/
SIGNAL_MAPPING(DATA12,N01_01_1_T,fastbus2.T48834.data[0],N[0][0][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],0)*/
SIGNAL_MAPPING(DATA12,N01_01_2_E,fastbus1.Q46993.data[44],N[0][0][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],0)*/
SIGNAL_MAPPING(DATA12,N01_01_2_T,fastbus2.T81795.data[12],N[0][0][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],0)*/
SIGNAL_MAPPING(DATA12,N01_02_1_E,fastbus1.Q46993.data[4],N[0][1][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],1)*/
SIGNAL_MAPPING(DATA12,N01_02_1_T,fastbus2.T48834.data[4],N[0][1][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],1)*/
SIGNAL_MAPPING(DATA12,N01_02_2_E,fastbus1.Q46993.data[40],N[0][1][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],1)*/
SIGNAL_MAPPING(DATA12,N01_02_2_T,fastbus2.T81795.data[8],N[0][1][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],1)*/
SIGNAL_MAPPING(DATA12,N01_03_1_E,fastbus1.Q46993.data[8],N[0][2][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],2)*/
SIGNAL_MAPPING(DATA12,N01_03_1_T,fastbus2.T48834.data[8],N[0][2][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],2)*/
SIGNAL_MAPPING(DATA12,N01_03_2_E,fastbus1.Q46993.data[16],N[0][2][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],2)*/
SIGNAL_MAPPING(DATA12,N01_03_2_T,fastbus2.T81806.data[0],N[0][2][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],2)*/
SIGNAL_MAPPING(DATA12,N01_04_1_E,fastbus1.Q46993.data[12],N[0][3][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],3)*/
SIGNAL_MAPPING(DATA12,N01_04_1_T,fastbus2.T48834.data[12],N[0][3][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],3)*/
SIGNAL_MAPPING(DATA12,N01_04_2_E,fastbus1.Q46993.data[20],N[0][3][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],3)*/
SIGNAL_MAPPING(DATA12,N01_04_2_T,fastbus2.T81806.data[4],N[0][3][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],3)*/
SIGNAL_MAPPING(DATA12,N01_05_1_E,fastbus1.Q46993.data[1],N[0][4][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],4)*/
SIGNAL_MAPPING(DATA12,N01_05_1_T,fastbus2.T48834.data[1],N[0][4][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],4)*/
SIGNAL_MAPPING(DATA12,N01_05_2_E,fastbus1.Q46993.data[41],N[0][4][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],4)*/
SIGNAL_MAPPING(DATA12,N01_05_2_T,fastbus2.T81795.data[9],N[0][4][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],4)*/
SIGNAL_MAPPING(DATA12,N01_06_1_E,fastbus1.Q46993.data[5],N[0][5][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],5)*/
SIGNAL_MAPPING(DATA12,N01_06_1_T,fastbus2.T48834.data[5],N[0][5][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],5)*/
SIGNAL_MAPPING(DATA12,N01_06_2_E,fastbus1.Q46993.data[45],N[0][5][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],5)*/
SIGNAL_MAPPING(DATA12,N01_06_2_T,fastbus2.T81795.data[13],N[0][5][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],5)*/
SIGNAL_MAPPING(DATA12,N01_07_1_E,fastbus1.Q46993.data[9],N[0][6][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],6)*/
SIGNAL_MAPPING(DATA12,N01_07_1_T,fastbus2.T48834.data[9],N[0][6][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],6)*/
SIGNAL_MAPPING(DATA12,N01_07_2_E,fastbus1.Q46993.data[24],N[0][6][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],6)*/
SIGNAL_MAPPING(DATA12,N01_07_2_T,fastbus2.T81806.data[8],N[0][6][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],6)*/
SIGNAL_MAPPING(DATA12,N01_08_1_E,fastbus1.Q46993.data[13],N[0][7][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],7)*/
SIGNAL_MAPPING(DATA12,N01_08_1_T,fastbus2.T48834.data[13],N[0][7][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],7)*/
SIGNAL_MAPPING(DATA12,N01_08_2_E,fastbus1.Q46993.data[28],N[0][7][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],7)*/
SIGNAL_MAPPING(DATA12,N01_08_2_T,fastbus2.T81806.data[12],N[0][7][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],7)*/
SIGNAL_MAPPING(DATA12,N01_09_1_E,fastbus1.Q46993.data[2],N[0][8][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],8)*/
SIGNAL_MAPPING(DATA12,N01_09_1_T,fastbus2.T48834.data[2],N[0][8][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],8)*/
SIGNAL_MAPPING(DATA12,N01_09_2_E,fastbus1.Q46993.data[17],N[0][8][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],8)*/
SIGNAL_MAPPING(DATA12,N01_09_2_T,fastbus2.T81806.data[1],N[0][8][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],8)*/
SIGNAL_MAPPING(DATA12,N01_10_1_E,fastbus1.Q46993.data[6],N[0][9][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],9)*/
SIGNAL_MAPPING(DATA12,N01_10_1_T,fastbus2.T48834.data[6],N[0][9][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],9)*/
SIGNAL_MAPPING(DATA12,N01_10_2_E,fastbus1.Q46993.data[21],N[0][9][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],9)*/
SIGNAL_MAPPING(DATA12,N01_10_2_T,fastbus2.T81806.data[5],N[0][9][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],9)*/
SIGNAL_MAPPING(DATA12,N01_11_1_E,fastbus1.Q46993.data[10],N[0][10][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],10)*/
SIGNAL_MAPPING(DATA12,N01_11_1_T,fastbus2.T48834.data[10],N[0][10][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],10)*/
SIGNAL_MAPPING(DATA12,N01_11_2_E,fastbus1.Q46993.data[25],N[0][10][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],10)*/
SIGNAL_MAPPING(DATA12,N01_11_2_T,fastbus2.T81806.data[9],N[0][10][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],10)*/
SIGNAL_MAPPING(DATA12,N01_12_1_E,fastbus1.Q46993.data[14],N[0][11][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],11)*/
SIGNAL_MAPPING(DATA12,N01_12_1_T,fastbus2.T48834.data[14],N[0][11][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],11)*/
SIGNAL_MAPPING(DATA12,N01_12_2_E,fastbus1.Q46993.data[29],N[0][11][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],11)*/
SIGNAL_MAPPING(DATA12,N01_12_2_T,fastbus2.T81806.data[13],N[0][11][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],11)*/
SIGNAL_MAPPING(DATA12,N01_13_1_E,fastbus1.Q46993.data[3],N[0][12][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],12)*/
SIGNAL_MAPPING(DATA12,N01_13_1_T,fastbus2.T48834.data[3],N[0][12][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],12)*/
SIGNAL_MAPPING(DATA12,N01_13_2_E,fastbus1.Q46993.data[18],N[0][12][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],12)*/
SIGNAL_MAPPING(DATA12,N01_13_2_T,fastbus2.T81806.data[2],N[0][12][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],12)*/
SIGNAL_MAPPING(DATA12,N01_14_1_E,fastbus1.Q46993.data[7],N[0][13][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],13)*/
SIGNAL_MAPPING(DATA12,N01_14_1_T,fastbus2.T48834.data[7],N[0][13][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],13)*/
SIGNAL_MAPPING(DATA12,N01_14_2_E,fastbus1.Q46993.data[22],N[0][13][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],13)*/
SIGNAL_MAPPING(DATA12,N01_14_2_T,fastbus2.T81806.data[6],N[0][13][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],13)*/
SIGNAL_MAPPING(DATA12,N01_15_1_E,fastbus1.Q46993.data[46],N[0][14][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],14)*/
SIGNAL_MAPPING(DATA12,N01_15_1_T,fastbus2.T81795.data[14],N[0][14][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],14)*/
SIGNAL_MAPPING(DATA12,N01_15_2_E,fastbus1.Q46993.data[26],N[0][14][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],14)*/
SIGNAL_MAPPING(DATA12,N01_15_2_T,fastbus2.T81806.data[10],N[0][14][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],14)*/
SIGNAL_MAPPING(DATA12,N01_16_1_E,fastbus1.Q46993.data[42],N[0][15][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],15)*/
SIGNAL_MAPPING(DATA12,N01_16_1_T,fastbus2.T81795.data[10],N[0][15][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],15)*/
SIGNAL_MAPPING(DATA12,N01_16_2_E,fastbus1.Q46993.data[30],N[0][15][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],15)*/
SIGNAL_MAPPING(DATA12,N01_16_2_T,fastbus2.T81806.data[14],N[0][15][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],15)*/
SIGNAL_MAPPING(DATA12,N01_17_1_E,fastbus1.Q46993.data[11],N[0][16][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],16)*/
SIGNAL_MAPPING(DATA12,N01_17_1_T,fastbus2.T48834.data[11],N[0][16][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],16)*/
SIGNAL_MAPPING(DATA12,N01_17_2_E,fastbus1.Q46993.data[19],N[0][16][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],16)*/
SIGNAL_MAPPING(DATA12,N01_17_2_T,fastbus2.T81806.data[3],N[0][16][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],16)*/
SIGNAL_MAPPING(DATA12,N01_18_1_E,fastbus1.Q46993.data[15],N[0][17][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],17)*/
SIGNAL_MAPPING(DATA12,N01_18_1_T,fastbus2.T48834.data[15],N[0][17][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],17)*/
SIGNAL_MAPPING(DATA12,N01_18_2_E,fastbus1.Q46993.data[23],N[0][17][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],17)*/
SIGNAL_MAPPING(DATA12,N01_18_2_T,fastbus2.T81806.data[7],N[0][17][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],17)*/
SIGNAL_MAPPING(DATA12,N01_19_1_E,fastbus1.Q46993.data[47],N[0][18][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],18)*/
SIGNAL_MAPPING(DATA12,N01_19_1_T,fastbus2.T81795.data[15],N[0][18][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],18)*/
SIGNAL_MAPPING(DATA12,N01_19_2_E,fastbus1.Q46993.data[27],N[0][18][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],18)*/
SIGNAL_MAPPING(DATA12,N01_19_2_T,fastbus2.T81806.data[11],N[0][18][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],18)*/
SIGNAL_MAPPING(DATA12,N01_20_1_E,fastbus1.Q46993.data[43],N[0][19][0].E);/*,ZERO_SUPPRESS_ITEM(N[0],19)*/
SIGNAL_MAPPING(DATA12,N01_20_1_T,fastbus2.T81795.data[11],N[0][19][0].T);/*,ZERO_SUPPRESS_ITEM(N[0],19)*/
SIGNAL_MAPPING(DATA12,N01_20_2_E,fastbus1.Q46993.data[31],N[0][19][1].E);/*,ZERO_SUPPRESS_ITEM(N[0],19)*/
SIGNAL_MAPPING(DATA12,N01_20_2_T,fastbus2.T81806.data[15],N[0][19][1].T);/*,ZERO_SUPPRESS_ITEM(N[0],19)*/
SIGNAL_MAPPING(DATA12,N02_01_1_E,fastbus1.Q15358.data[0],N[1][0][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],0)*/
SIGNAL_MAPPING(DATA12,N02_01_1_T,fastbus2.T81859.data[0],N[1][0][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],0)*/
SIGNAL_MAPPING(DATA12,N02_01_2_E,fastbus1.Q46993.data[36],N[1][0][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],0)*/
SIGNAL_MAPPING(DATA12,N02_01_2_T,fastbus2.T81795.data[4],N[1][0][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],0)*/
SIGNAL_MAPPING(DATA12,N02_02_1_E,fastbus1.Q15358.data[4],N[1][1][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],1)*/
SIGNAL_MAPPING(DATA12,N02_02_1_T,fastbus2.T81859.data[4],N[1][1][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],1)*/
SIGNAL_MAPPING(DATA12,N02_02_2_E,fastbus1.Q46993.data[32],N[1][1][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],1)*/
SIGNAL_MAPPING(DATA12,N02_02_2_T,fastbus2.T81795.data[0],N[1][1][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],1)*/
SIGNAL_MAPPING(DATA12,N02_03_1_E,fastbus1.Q15358.data[8],N[1][2][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],2)*/
SIGNAL_MAPPING(DATA12,N02_03_1_T,fastbus2.T81859.data[8],N[1][2][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],2)*/
SIGNAL_MAPPING(DATA12,N02_03_2_E,fastbus1.Q15358.data[16],N[1][2][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],2)*/
SIGNAL_MAPPING(DATA12,N02_03_2_T,fastbus2.T81808.data[0],N[1][2][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],2)*/
SIGNAL_MAPPING(DATA12,N02_04_1_E,fastbus1.Q15358.data[12],N[1][3][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],3)*/
SIGNAL_MAPPING(DATA12,N02_04_1_T,fastbus2.T81859.data[12],N[1][3][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],3)*/
SIGNAL_MAPPING(DATA12,N02_04_2_E,fastbus1.Q15358.data[20],N[1][3][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],3)*/
SIGNAL_MAPPING(DATA12,N02_04_2_T,fastbus2.T81808.data[4],N[1][3][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],3)*/
SIGNAL_MAPPING(DATA12,N02_05_1_E,fastbus1.Q15358.data[1],N[1][4][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],4)*/
SIGNAL_MAPPING(DATA12,N02_05_1_T,fastbus2.T81859.data[1],N[1][4][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],4)*/
SIGNAL_MAPPING(DATA12,N02_05_2_E,fastbus1.Q46993.data[37],N[1][4][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],4)*/
SIGNAL_MAPPING(DATA12,N02_05_2_T,fastbus2.T81795.data[5],N[1][4][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],4)*/
SIGNAL_MAPPING(DATA12,N02_06_1_E,fastbus1.Q15358.data[5],N[1][5][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],5)*/
SIGNAL_MAPPING(DATA12,N02_06_1_T,fastbus2.T81859.data[5],N[1][5][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],5)*/
SIGNAL_MAPPING(DATA12,N02_06_2_E,fastbus1.Q46993.data[33],N[1][5][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],5)*/
SIGNAL_MAPPING(DATA12,N02_06_2_T,fastbus2.T81795.data[1],N[1][5][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],5)*/
SIGNAL_MAPPING(DATA12,N02_07_1_E,fastbus1.Q15358.data[9],N[1][6][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],6)*/
SIGNAL_MAPPING(DATA12,N02_07_1_T,fastbus2.T81859.data[9],N[1][6][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],6)*/
SIGNAL_MAPPING(DATA12,N02_07_2_E,fastbus1.Q15358.data[24],N[1][6][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],6)*/
SIGNAL_MAPPING(DATA12,N02_07_2_T,fastbus2.T81808.data[8],N[1][6][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],6)*/
SIGNAL_MAPPING(DATA12,N02_08_1_E,fastbus1.Q15358.data[13],N[1][7][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],7)*/
SIGNAL_MAPPING(DATA12,N02_08_1_T,fastbus2.T81859.data[13],N[1][7][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],7)*/
SIGNAL_MAPPING(DATA12,N02_08_2_E,fastbus1.Q15358.data[28],N[1][7][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],7)*/
SIGNAL_MAPPING(DATA12,N02_08_2_T,fastbus2.T81808.data[12],N[1][7][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],7)*/
SIGNAL_MAPPING(DATA12,N02_09_1_E,fastbus1.Q15358.data[2],N[1][8][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],8)*/
SIGNAL_MAPPING(DATA12,N02_09_1_T,fastbus2.T81859.data[2],N[1][8][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],8)*/
SIGNAL_MAPPING(DATA12,N02_09_2_E,fastbus1.Q15358.data[17],N[1][8][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],8)*/
SIGNAL_MAPPING(DATA12,N02_09_2_T,fastbus2.T81808.data[1],N[1][8][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],8)*/
SIGNAL_MAPPING(DATA12,N02_10_1_E,fastbus1.Q15358.data[6],N[1][9][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],9)*/
SIGNAL_MAPPING(DATA12,N02_10_1_T,fastbus2.T81859.data[6],N[1][9][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],9)*/
SIGNAL_MAPPING(DATA12,N02_10_2_E,fastbus1.Q15358.data[21],N[1][9][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],9)*/
SIGNAL_MAPPING(DATA12,N02_10_2_T,fastbus2.T81808.data[5],N[1][9][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],9)*/
SIGNAL_MAPPING(DATA12,N02_11_1_E,fastbus1.Q15358.data[10],N[1][10][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],10)*/
SIGNAL_MAPPING(DATA12,N02_11_1_T,fastbus2.T81859.data[10],N[1][10][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],10)*/
SIGNAL_MAPPING(DATA12,N02_11_2_E,fastbus1.Q15358.data[25],N[1][10][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],10)*/
SIGNAL_MAPPING(DATA12,N02_11_2_T,fastbus2.T81808.data[9],N[1][10][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],10)*/
SIGNAL_MAPPING(DATA12,N02_12_1_E,fastbus1.Q15358.data[14],N[1][11][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],11)*/
SIGNAL_MAPPING(DATA12,N02_12_1_T,fastbus2.T81859.data[14],N[1][11][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],11)*/
SIGNAL_MAPPING(DATA12,N02_12_2_E,fastbus1.Q15358.data[29],N[1][11][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],11)*/
SIGNAL_MAPPING(DATA12,N02_12_2_T,fastbus2.T81808.data[13],N[1][11][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],11)*/
SIGNAL_MAPPING(DATA12,N02_13_1_E,fastbus1.Q15358.data[3],N[1][12][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],12)*/
SIGNAL_MAPPING(DATA12,N02_13_1_T,fastbus2.T81859.data[3],N[1][12][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],12)*/
SIGNAL_MAPPING(DATA12,N02_13_2_E,fastbus1.Q15358.data[18],N[1][12][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],12)*/
SIGNAL_MAPPING(DATA12,N02_13_2_T,fastbus2.T81808.data[2],N[1][12][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],12)*/
SIGNAL_MAPPING(DATA12,N02_14_1_E,fastbus1.Q15358.data[7],N[1][13][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],13)*/
SIGNAL_MAPPING(DATA12,N02_14_1_T,fastbus2.T81859.data[7],N[1][13][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],13)*/
SIGNAL_MAPPING(DATA12,N02_14_2_E,fastbus1.Q15358.data[22],N[1][13][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],13)*/
SIGNAL_MAPPING(DATA12,N02_14_2_T,fastbus2.T81808.data[6],N[1][13][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],13)*/
SIGNAL_MAPPING(DATA12,N02_15_1_E,fastbus1.Q46993.data[38],N[1][14][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],14)*/
SIGNAL_MAPPING(DATA12,N02_15_1_T,fastbus2.T81795.data[6],N[1][14][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],14)*/
SIGNAL_MAPPING(DATA12,N02_15_2_E,fastbus1.Q15358.data[26],N[1][14][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],14)*/
SIGNAL_MAPPING(DATA12,N02_15_2_T,fastbus2.T81808.data[10],N[1][14][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],14)*/
SIGNAL_MAPPING(DATA12,N02_16_1_E,fastbus1.Q46993.data[34],N[1][15][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],15)*/
SIGNAL_MAPPING(DATA12,N02_16_1_T,fastbus2.T81795.data[2],N[1][15][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],15)*/
SIGNAL_MAPPING(DATA12,N02_16_2_E,fastbus1.Q15358.data[30],N[1][15][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],15)*/
SIGNAL_MAPPING(DATA12,N02_16_2_T,fastbus2.T81808.data[14],N[1][15][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],15)*/
SIGNAL_MAPPING(DATA12,N02_17_1_E,fastbus1.Q15358.data[11],N[1][16][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],16)*/
SIGNAL_MAPPING(DATA12,N02_17_1_T,fastbus2.T81859.data[11],N[1][16][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],16)*/
SIGNAL_MAPPING(DATA12,N02_17_2_E,fastbus1.Q15358.data[19],N[1][16][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],16)*/
SIGNAL_MAPPING(DATA12,N02_17_2_T,fastbus2.T81808.data[3],N[1][16][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],16)*/
SIGNAL_MAPPING(DATA12,N02_18_1_E,fastbus1.Q15358.data[15],N[1][17][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],17)*/
SIGNAL_MAPPING(DATA12,N02_18_1_T,fastbus2.T81859.data[15],N[1][17][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],17)*/
SIGNAL_MAPPING(DATA12,N02_18_2_E,fastbus1.Q15358.data[23],N[1][17][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],17)*/
SIGNAL_MAPPING(DATA12,N02_18_2_T,fastbus2.T81808.data[7],N[1][17][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],17)*/
SIGNAL_MAPPING(DATA12,N02_19_1_E,fastbus1.Q46993.data[39],N[1][18][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],18)*/
SIGNAL_MAPPING(DATA12,N02_19_1_T,fastbus2.T81795.data[7],N[1][18][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],18)*/
SIGNAL_MAPPING(DATA12,N02_19_2_E,fastbus1.Q15358.data[27],N[1][18][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],18)*/
SIGNAL_MAPPING(DATA12,N02_19_2_T,fastbus2.T81808.data[11],N[1][18][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],18)*/
SIGNAL_MAPPING(DATA12,N02_20_1_E,fastbus1.Q46993.data[35],N[1][19][0].E);/*,ZERO_SUPPRESS_ITEM(N[1],19)*/
SIGNAL_MAPPING(DATA12,N02_20_1_T,fastbus2.T81795.data[3],N[1][19][0].T);/*,ZERO_SUPPRESS_ITEM(N[1],19)*/
SIGNAL_MAPPING(DATA12,N02_20_2_E,fastbus1.Q15358.data[31],N[1][19][1].E);/*,ZERO_SUPPRESS_ITEM(N[1],19)*/
SIGNAL_MAPPING(DATA12,N02_20_2_T,fastbus2.T81808.data[15],N[1][19][1].T);/*,ZERO_SUPPRESS_ITEM(N[1],19)*/
SIGNAL_MAPPING(DATA12,N03_01_1_E,fastbus1.Q15358.data[32],N[2][0][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],0)*/
SIGNAL_MAPPING(DATA12,N03_01_1_T,fastbus2.T48854.data[0],N[2][0][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],0)*/
SIGNAL_MAPPING(DATA12,N03_01_2_E,fastbus1.Q46962.data[28],N[2][0][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],0)*/
SIGNAL_MAPPING(DATA12,N03_01_2_T,fastbus2.T48834.data[28],N[2][0][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],0)*/
SIGNAL_MAPPING(DATA12,N03_02_1_E,fastbus1.Q15358.data[36],N[2][1][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],1)*/
SIGNAL_MAPPING(DATA12,N03_02_1_T,fastbus2.T48854.data[4],N[2][1][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],1)*/
SIGNAL_MAPPING(DATA12,N03_02_2_E,fastbus1.Q46962.data[24],N[2][1][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],1)*/
SIGNAL_MAPPING(DATA12,N03_02_2_T,fastbus2.T48834.data[24],N[2][1][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],1)*/
SIGNAL_MAPPING(DATA12,N03_03_1_E,fastbus1.Q15358.data[40],N[2][2][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],2)*/
SIGNAL_MAPPING(DATA12,N03_03_1_T,fastbus2.T48854.data[8],N[2][2][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],2)*/
SIGNAL_MAPPING(DATA12,N03_03_2_E,fastbus1.Q46962.data[0],N[2][2][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],2)*/
SIGNAL_MAPPING(DATA12,N03_03_2_T,fastbus2.T87047.data[0],N[2][2][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],2)*/
SIGNAL_MAPPING(DATA12,N03_04_1_E,fastbus1.Q15358.data[44],N[2][3][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],3)*/
SIGNAL_MAPPING(DATA12,N03_04_1_T,fastbus2.T48854.data[12],N[2][3][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],3)*/
SIGNAL_MAPPING(DATA12,N03_04_2_E,fastbus1.Q46962.data[4],N[2][3][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],3)*/
SIGNAL_MAPPING(DATA12,N03_04_2_T,fastbus2.T87047.data[4],N[2][3][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],3)*/
SIGNAL_MAPPING(DATA12,N03_05_1_E,fastbus1.Q15358.data[33],N[2][4][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],4)*/
SIGNAL_MAPPING(DATA12,N03_05_1_T,fastbus2.T48854.data[1],N[2][4][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],4)*/
SIGNAL_MAPPING(DATA12,N03_05_2_E,fastbus1.Q46962.data[25],N[2][4][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],4)*/
SIGNAL_MAPPING(DATA12,N03_05_2_T,fastbus2.T48834.data[25],N[2][4][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],4)*/
SIGNAL_MAPPING(DATA12,N03_06_1_E,fastbus1.Q15358.data[37],N[2][5][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],5)*/
SIGNAL_MAPPING(DATA12,N03_06_1_T,fastbus2.T48854.data[5],N[2][5][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],5)*/
SIGNAL_MAPPING(DATA12,N03_06_2_E,fastbus1.Q46962.data[29],N[2][5][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],5)*/
SIGNAL_MAPPING(DATA12,N03_06_2_T,fastbus2.T48834.data[29],N[2][5][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],5)*/
SIGNAL_MAPPING(DATA12,N03_07_1_E,fastbus1.Q15358.data[41],N[2][6][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],6)*/
SIGNAL_MAPPING(DATA12,N03_07_1_T,fastbus2.T48854.data[9],N[2][6][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],6)*/
SIGNAL_MAPPING(DATA12,N03_07_2_E,fastbus1.Q46962.data[8],N[2][6][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],6)*/
SIGNAL_MAPPING(DATA12,N03_07_2_T,fastbus2.T87047.data[8],N[2][6][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],6)*/
SIGNAL_MAPPING(DATA12,N03_08_1_E,fastbus1.Q15358.data[45],N[2][7][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],7)*/
SIGNAL_MAPPING(DATA12,N03_08_1_T,fastbus2.T48854.data[13],N[2][7][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],7)*/
SIGNAL_MAPPING(DATA12,N03_08_2_E,fastbus1.Q46962.data[12],N[2][7][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],7)*/
SIGNAL_MAPPING(DATA12,N03_08_2_T,fastbus2.T87047.data[12],N[2][7][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],7)*/
SIGNAL_MAPPING(DATA12,N03_09_1_E,fastbus1.Q15358.data[34],N[2][8][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],8)*/
SIGNAL_MAPPING(DATA12,N03_09_1_T,fastbus2.T48854.data[2],N[2][8][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],8)*/
SIGNAL_MAPPING(DATA12,N03_09_2_E,fastbus1.Q46962.data[1],N[2][8][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],8)*/
SIGNAL_MAPPING(DATA12,N03_09_2_T,fastbus2.T87047.data[1],N[2][8][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],8)*/
SIGNAL_MAPPING(DATA12,N03_10_1_E,fastbus1.Q15358.data[38],N[2][9][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],9)*/
SIGNAL_MAPPING(DATA12,N03_10_1_T,fastbus2.T48854.data[6],N[2][9][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],9)*/
SIGNAL_MAPPING(DATA12,N03_10_2_E,fastbus1.Q46962.data[5],N[2][9][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],9)*/
SIGNAL_MAPPING(DATA12,N03_10_2_T,fastbus2.T87047.data[5],N[2][9][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],9)*/
SIGNAL_MAPPING(DATA12,N03_11_1_E,fastbus1.Q15358.data[42],N[2][10][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],10)*/
SIGNAL_MAPPING(DATA12,N03_11_1_T,fastbus2.T48854.data[10],N[2][10][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],10)*/
SIGNAL_MAPPING(DATA12,N03_11_2_E,fastbus1.Q46962.data[9],N[2][10][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],10)*/
SIGNAL_MAPPING(DATA12,N03_11_2_T,fastbus2.T87047.data[9],N[2][10][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],10)*/
SIGNAL_MAPPING(DATA12,N03_12_1_E,fastbus1.Q15358.data[46],N[2][11][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],11)*/
SIGNAL_MAPPING(DATA12,N03_12_1_T,fastbus2.T48854.data[14],N[2][11][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],11)*/
SIGNAL_MAPPING(DATA12,N03_12_2_E,fastbus1.Q46962.data[13],N[2][11][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],11)*/
SIGNAL_MAPPING(DATA12,N03_12_2_T,fastbus2.T87047.data[13],N[2][11][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],11)*/
SIGNAL_MAPPING(DATA12,N03_13_1_E,fastbus1.Q15358.data[35],N[2][12][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],12)*/
SIGNAL_MAPPING(DATA12,N03_13_1_T,fastbus2.T48854.data[3],N[2][12][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],12)*/
SIGNAL_MAPPING(DATA12,N03_13_2_E,fastbus1.Q46962.data[2],N[2][12][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],12)*/
SIGNAL_MAPPING(DATA12,N03_13_2_T,fastbus2.T87047.data[2],N[2][12][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],12)*/
SIGNAL_MAPPING(DATA12,N03_14_1_E,fastbus1.Q15358.data[39],N[2][13][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],13)*/
SIGNAL_MAPPING(DATA12,N03_14_1_T,fastbus2.T48854.data[7],N[2][13][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],13)*/
SIGNAL_MAPPING(DATA12,N03_14_2_E,fastbus1.Q46962.data[6],N[2][13][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],13)*/
SIGNAL_MAPPING(DATA12,N03_14_2_T,fastbus2.T87047.data[6],N[2][13][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],13)*/
SIGNAL_MAPPING(DATA12,N03_15_1_E,fastbus1.Q46962.data[30],N[2][14][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],14)*/
SIGNAL_MAPPING(DATA12,N03_15_1_T,fastbus2.T48834.data[30],N[2][14][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],14)*/
SIGNAL_MAPPING(DATA12,N03_15_2_E,fastbus1.Q46962.data[10],N[2][14][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],14)*/
SIGNAL_MAPPING(DATA12,N03_15_2_T,fastbus2.T87047.data[10],N[2][14][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],14)*/
SIGNAL_MAPPING(DATA12,N03_16_1_E,fastbus1.Q46962.data[26],N[2][15][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],15)*/
SIGNAL_MAPPING(DATA12,N03_16_1_T,fastbus2.T48834.data[26],N[2][15][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],15)*/
SIGNAL_MAPPING(DATA12,N03_16_2_E,fastbus1.Q46962.data[14],N[2][15][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],15)*/
SIGNAL_MAPPING(DATA12,N03_16_2_T,fastbus2.T87047.data[14],N[2][15][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],15)*/
SIGNAL_MAPPING(DATA12,N03_17_1_E,fastbus1.Q15358.data[43],N[2][16][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],16)*/
SIGNAL_MAPPING(DATA12,N03_17_1_T,fastbus2.T48854.data[11],N[2][16][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],16)*/
SIGNAL_MAPPING(DATA12,N03_17_2_E,fastbus1.Q46962.data[3],N[2][16][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],16)*/
SIGNAL_MAPPING(DATA12,N03_17_2_T,fastbus2.T87047.data[3],N[2][16][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],16)*/
SIGNAL_MAPPING(DATA12,N03_18_1_E,fastbus1.Q15358.data[47],N[2][17][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],17)*/
SIGNAL_MAPPING(DATA12,N03_18_1_T,fastbus2.T48854.data[15],N[2][17][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],17)*/
SIGNAL_MAPPING(DATA12,N03_18_2_E,fastbus1.Q46962.data[7],N[2][17][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],17)*/
SIGNAL_MAPPING(DATA12,N03_18_2_T,fastbus2.T87047.data[7],N[2][17][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],17)*/
SIGNAL_MAPPING(DATA12,N03_19_1_E,fastbus1.Q46962.data[31],N[2][18][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],18)*/
SIGNAL_MAPPING(DATA12,N03_19_1_T,fastbus2.T48834.data[31],N[2][18][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],18)*/
SIGNAL_MAPPING(DATA12,N03_19_2_E,fastbus1.Q46962.data[11],N[2][18][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],18)*/
SIGNAL_MAPPING(DATA12,N03_19_2_T,fastbus2.T87047.data[11],N[2][18][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],18)*/
SIGNAL_MAPPING(DATA12,N03_20_1_E,fastbus1.Q46962.data[27],N[2][19][0].E);/*,ZERO_SUPPRESS_ITEM(N[2],19)*/
SIGNAL_MAPPING(DATA12,N03_20_1_T,fastbus2.T48834.data[27],N[2][19][0].T);/*,ZERO_SUPPRESS_ITEM(N[2],19)*/
SIGNAL_MAPPING(DATA12,N03_20_2_E,fastbus1.Q46962.data[15],N[2][19][1].E);/*,ZERO_SUPPRESS_ITEM(N[2],19)*/
SIGNAL_MAPPING(DATA12,N03_20_2_T,fastbus2.T87047.data[15],N[2][19][1].T);/*,ZERO_SUPPRESS_ITEM(N[2],19)*/
SIGNAL_MAPPING(DATA12,N04_01_1_E,fastbus1.Q46962.data[32],N[3][0][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],0)*/
SIGNAL_MAPPING(DATA12,N04_01_1_T,fastbus2.T81806.data[16],N[3][0][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],0)*/
SIGNAL_MAPPING(DATA12,N04_01_2_E,fastbus1.Q46962.data[20],N[3][0][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],0)*/
SIGNAL_MAPPING(DATA12,N04_01_2_T,fastbus2.T48834.data[20],N[3][0][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],0)*/
SIGNAL_MAPPING(DATA12,N04_02_1_E,fastbus1.Q46962.data[36],N[3][1][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],1)*/
SIGNAL_MAPPING(DATA12,N04_02_1_T,fastbus2.T81806.data[20],N[3][1][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],1)*/
SIGNAL_MAPPING(DATA12,N04_02_2_E,fastbus1.Q46962.data[16],N[3][1][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],1)*/
SIGNAL_MAPPING(DATA12,N04_02_2_T,fastbus2.T48834.data[16],N[3][1][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],1)*/
SIGNAL_MAPPING(DATA12,N04_03_1_E,fastbus1.Q46962.data[40],N[3][2][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],2)*/
SIGNAL_MAPPING(DATA12,N04_03_1_T,fastbus2.T81806.data[24],N[3][2][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],2)*/
SIGNAL_MAPPING(DATA12,N04_03_2_E,fastbus1.Q15372.data[0],N[3][2][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],2)*/
SIGNAL_MAPPING(DATA12,N04_03_2_T,fastbus2.T81795.data[16],N[3][2][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],2)*/
SIGNAL_MAPPING(DATA12,N04_04_1_E,fastbus1.Q46962.data[44],N[3][3][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],3)*/
SIGNAL_MAPPING(DATA12,N04_04_1_T,fastbus2.T81806.data[28],N[3][3][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],3)*/
SIGNAL_MAPPING(DATA12,N04_04_2_E,fastbus1.Q15372.data[4],N[3][3][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],3)*/
SIGNAL_MAPPING(DATA12,N04_04_2_T,fastbus2.T81795.data[20],N[3][3][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],3)*/
SIGNAL_MAPPING(DATA12,N04_05_1_E,fastbus1.Q46962.data[33],N[3][4][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],4)*/
SIGNAL_MAPPING(DATA12,N04_05_1_T,fastbus2.T81806.data[17],N[3][4][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],4)*/
SIGNAL_MAPPING(DATA12,N04_05_2_E,fastbus1.Q46962.data[21],N[3][4][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],4)*/
SIGNAL_MAPPING(DATA12,N04_05_2_T,fastbus2.T48834.data[21],N[3][4][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],4)*/
SIGNAL_MAPPING(DATA12,N04_06_1_E,fastbus1.Q46962.data[37],N[3][5][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],5)*/
SIGNAL_MAPPING(DATA12,N04_06_1_T,fastbus2.T81806.data[21],N[3][5][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],5)*/
SIGNAL_MAPPING(DATA12,N04_06_2_E,fastbus1.Q46962.data[17],N[3][5][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],5)*/
SIGNAL_MAPPING(DATA12,N04_06_2_T,fastbus2.T48834.data[17],N[3][5][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],5)*/
SIGNAL_MAPPING(DATA12,N04_07_1_E,fastbus1.Q46962.data[41],N[3][6][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],6)*/
SIGNAL_MAPPING(DATA12,N04_07_1_T,fastbus2.T81806.data[25],N[3][6][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],6)*/
SIGNAL_MAPPING(DATA12,N04_07_2_E,fastbus1.Q15372.data[8],N[3][6][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],6)*/
SIGNAL_MAPPING(DATA12,N04_07_2_T,fastbus2.T81795.data[24],N[3][6][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],6)*/
SIGNAL_MAPPING(DATA12,N04_08_1_E,fastbus1.Q46962.data[45],N[3][7][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],7)*/
SIGNAL_MAPPING(DATA12,N04_08_1_T,fastbus2.T81806.data[29],N[3][7][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],7)*/
SIGNAL_MAPPING(DATA12,N04_08_2_E,fastbus1.Q15372.data[12],N[3][7][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],7)*/
SIGNAL_MAPPING(DATA12,N04_08_2_T,fastbus2.T81795.data[28],N[3][7][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],7)*/
SIGNAL_MAPPING(DATA12,N04_09_1_E,fastbus1.Q46962.data[34],N[3][8][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],8)*/
SIGNAL_MAPPING(DATA12,N04_09_1_T,fastbus2.T81806.data[18],N[3][8][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],8)*/
SIGNAL_MAPPING(DATA12,N04_09_2_E,fastbus1.Q15372.data[1],N[3][8][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],8)*/
SIGNAL_MAPPING(DATA12,N04_09_2_T,fastbus2.T81795.data[17],N[3][8][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],8)*/
SIGNAL_MAPPING(DATA12,N04_10_1_E,fastbus1.Q46962.data[38],N[3][9][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],9)*/
SIGNAL_MAPPING(DATA12,N04_10_1_T,fastbus2.T81806.data[22],N[3][9][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],9)*/
SIGNAL_MAPPING(DATA12,N04_10_2_E,fastbus1.Q15372.data[5],N[3][9][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],9)*/
SIGNAL_MAPPING(DATA12,N04_10_2_T,fastbus2.T81795.data[21],N[3][9][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],9)*/
SIGNAL_MAPPING(DATA12,N04_11_1_E,fastbus1.Q46962.data[42],N[3][10][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],10)*/
SIGNAL_MAPPING(DATA12,N04_11_1_T,fastbus2.T81806.data[26],N[3][10][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],10)*/
SIGNAL_MAPPING(DATA12,N04_11_2_E,fastbus1.Q15372.data[9],N[3][10][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],10)*/
SIGNAL_MAPPING(DATA12,N04_11_2_T,fastbus2.T81795.data[25],N[3][10][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],10)*/
SIGNAL_MAPPING(DATA12,N04_12_1_E,fastbus1.Q46962.data[46],N[3][11][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],11)*/
SIGNAL_MAPPING(DATA12,N04_12_1_T,fastbus2.T81806.data[30],N[3][11][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],11)*/
SIGNAL_MAPPING(DATA12,N04_12_2_E,fastbus1.Q15372.data[13],N[3][11][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],11)*/
SIGNAL_MAPPING(DATA12,N04_12_2_T,fastbus2.T81795.data[29],N[3][11][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],11)*/
SIGNAL_MAPPING(DATA12,N04_13_1_E,fastbus1.Q46962.data[35],N[3][12][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],12)*/
SIGNAL_MAPPING(DATA12,N04_13_1_T,fastbus2.T81806.data[19],N[3][12][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],12)*/
SIGNAL_MAPPING(DATA12,N04_13_2_E,fastbus1.Q15372.data[2],N[3][12][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],12)*/
SIGNAL_MAPPING(DATA12,N04_13_2_T,fastbus2.T81795.data[18],N[3][12][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],12)*/
SIGNAL_MAPPING(DATA12,N04_14_1_E,fastbus1.Q46962.data[39],N[3][13][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],13)*/
SIGNAL_MAPPING(DATA12,N04_14_1_T,fastbus2.T81806.data[23],N[3][13][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],13)*/
SIGNAL_MAPPING(DATA12,N04_14_2_E,fastbus1.Q15372.data[6],N[3][13][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],13)*/
SIGNAL_MAPPING(DATA12,N04_14_2_T,fastbus2.T81795.data[22],N[3][13][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],13)*/
SIGNAL_MAPPING(DATA12,N04_15_1_E,fastbus1.Q46962.data[22],N[3][14][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],14)*/
SIGNAL_MAPPING(DATA12,N04_15_1_T,fastbus2.T48834.data[22],N[3][14][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],14)*/
SIGNAL_MAPPING(DATA12,N04_15_2_E,fastbus1.Q15372.data[10],N[3][14][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],14)*/
SIGNAL_MAPPING(DATA12,N04_15_2_T,fastbus2.T81795.data[26],N[3][14][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],14)*/
SIGNAL_MAPPING(DATA12,N04_16_1_E,fastbus1.Q46962.data[18],N[3][15][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],15)*/
SIGNAL_MAPPING(DATA12,N04_16_1_T,fastbus2.T48834.data[18],N[3][15][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],15)*/
SIGNAL_MAPPING(DATA12,N04_16_2_E,fastbus1.Q15372.data[14],N[3][15][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],15)*/
SIGNAL_MAPPING(DATA12,N04_16_2_T,fastbus2.T81795.data[30],N[3][15][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],15)*/
SIGNAL_MAPPING(DATA12,N04_17_1_E,fastbus1.Q46962.data[43],N[3][16][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],16)*/
SIGNAL_MAPPING(DATA12,N04_17_1_T,fastbus2.T81806.data[27],N[3][16][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],16)*/
SIGNAL_MAPPING(DATA12,N04_17_2_E,fastbus1.Q15372.data[3],N[3][16][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],16)*/
SIGNAL_MAPPING(DATA12,N04_17_2_T,fastbus2.T81795.data[19],N[3][16][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],16)*/
SIGNAL_MAPPING(DATA12,N04_18_1_E,fastbus1.Q46962.data[47],N[3][17][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],17)*/
SIGNAL_MAPPING(DATA12,N04_18_1_T,fastbus2.T81806.data[31],N[3][17][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],17)*/
SIGNAL_MAPPING(DATA12,N04_18_2_E,fastbus1.Q15372.data[7],N[3][17][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],17)*/
SIGNAL_MAPPING(DATA12,N04_18_2_T,fastbus2.T81795.data[23],N[3][17][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],17)*/
SIGNAL_MAPPING(DATA12,N04_19_1_E,fastbus1.Q46962.data[23],N[3][18][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],18)*/
SIGNAL_MAPPING(DATA12,N04_19_1_T,fastbus2.T48834.data[23],N[3][18][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],18)*/
SIGNAL_MAPPING(DATA12,N04_19_2_E,fastbus1.Q15372.data[11],N[3][18][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],18)*/
SIGNAL_MAPPING(DATA12,N04_19_2_T,fastbus2.T81795.data[27],N[3][18][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],18)*/
SIGNAL_MAPPING(DATA12,N04_20_1_E,fastbus1.Q46962.data[19],N[3][19][0].E);/*,ZERO_SUPPRESS_ITEM(N[3],19)*/
SIGNAL_MAPPING(DATA12,N04_20_1_T,fastbus2.T48834.data[19],N[3][19][0].T);/*,ZERO_SUPPRESS_ITEM(N[3],19)*/
SIGNAL_MAPPING(DATA12,N04_20_2_E,fastbus1.Q15372.data[15],N[3][19][1].E);/*,ZERO_SUPPRESS_ITEM(N[3],19)*/
SIGNAL_MAPPING(DATA12,N04_20_2_T,fastbus2.T81795.data[31],N[3][19][1].T);/*,ZERO_SUPPRESS_ITEM(N[3],19)*/
SIGNAL_MAPPING(DATA12,N05_01_1_E,fastbus1.Q15372.data[16],N[4][0][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],0)*/
SIGNAL_MAPPING(DATA12,N05_01_1_T,fastbus2.T81859.data[16],N[4][0][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],0)*/
SIGNAL_MAPPING(DATA12,N05_01_2_E,fastbus1.Q47315.data[12],N[4][0][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],0)*/
SIGNAL_MAPPING(DATA12,N05_01_2_T,fastbus2.T48854.data[28],N[4][0][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],0)*/
SIGNAL_MAPPING(DATA12,N05_02_1_E,fastbus1.Q15372.data[20],N[4][1][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],1)*/
SIGNAL_MAPPING(DATA12,N05_02_1_T,fastbus2.T81859.data[20],N[4][1][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],1)*/
SIGNAL_MAPPING(DATA12,N05_02_2_E,fastbus1.Q47315.data[8],N[4][1][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],1)*/
SIGNAL_MAPPING(DATA12,N05_02_2_T,fastbus2.T48854.data[24],N[4][1][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],1)*/
SIGNAL_MAPPING(DATA12,N05_03_1_E,fastbus1.Q15372.data[24],N[4][2][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],2)*/
SIGNAL_MAPPING(DATA12,N05_03_1_T,fastbus2.T81859.data[24],N[4][2][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],2)*/
SIGNAL_MAPPING(DATA12,N05_03_2_E,fastbus1.Q15372.data[32],N[4][2][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],2)*/
SIGNAL_MAPPING(DATA12,N05_03_2_T,fastbus2.T81808.data[16],N[4][2][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],2)*/
SIGNAL_MAPPING(DATA12,N05_04_1_E,fastbus1.Q15372.data[28],N[4][3][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],3)*/
SIGNAL_MAPPING(DATA12,N05_04_1_T,fastbus2.T81859.data[28],N[4][3][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],3)*/
SIGNAL_MAPPING(DATA12,N05_04_2_E,fastbus1.Q15372.data[36],N[4][3][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],3)*/
SIGNAL_MAPPING(DATA12,N05_04_2_T,fastbus2.T81808.data[20],N[4][3][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],3)*/
SIGNAL_MAPPING(DATA12,N05_05_1_E,fastbus1.Q15372.data[17],N[4][4][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],4)*/
SIGNAL_MAPPING(DATA12,N05_05_1_T,fastbus2.T81859.data[17],N[4][4][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],4)*/
SIGNAL_MAPPING(DATA12,N05_05_2_E,fastbus1.Q47315.data[9],N[4][4][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],4)*/
SIGNAL_MAPPING(DATA12,N05_05_2_T,fastbus2.T48854.data[25],N[4][4][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],4)*/
SIGNAL_MAPPING(DATA12,N05_06_1_E,fastbus1.Q15372.data[21],N[4][5][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],5)*/
SIGNAL_MAPPING(DATA12,N05_06_1_T,fastbus2.T81859.data[21],N[4][5][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],5)*/
SIGNAL_MAPPING(DATA12,N05_06_2_E,fastbus1.Q47315.data[13],N[4][5][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],5)*/
SIGNAL_MAPPING(DATA12,N05_06_2_T,fastbus2.T48854.data[29],N[4][5][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],5)*/
SIGNAL_MAPPING(DATA12,N05_07_1_E,fastbus1.Q15372.data[25],N[4][6][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],6)*/
SIGNAL_MAPPING(DATA12,N05_07_1_T,fastbus2.T81859.data[25],N[4][6][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],6)*/
SIGNAL_MAPPING(DATA12,N05_07_2_E,fastbus1.Q15372.data[40],N[4][6][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],6)*/
SIGNAL_MAPPING(DATA12,N05_07_2_T,fastbus2.T81808.data[24],N[4][6][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],6)*/
SIGNAL_MAPPING(DATA12,N05_08_1_E,fastbus1.Q15372.data[29],N[4][7][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],7)*/
SIGNAL_MAPPING(DATA12,N05_08_1_T,fastbus2.T81859.data[29],N[4][7][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],7)*/
SIGNAL_MAPPING(DATA12,N05_08_2_E,fastbus1.Q15372.data[44],N[4][7][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],7)*/
SIGNAL_MAPPING(DATA12,N05_08_2_T,fastbus2.T81808.data[28],N[4][7][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],7)*/
SIGNAL_MAPPING(DATA12,N05_09_1_E,fastbus1.Q15372.data[18],N[4][8][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],8)*/
SIGNAL_MAPPING(DATA12,N05_09_1_T,fastbus2.T81859.data[18],N[4][8][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],8)*/
SIGNAL_MAPPING(DATA12,N05_09_2_E,fastbus1.Q15372.data[33],N[4][8][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],8)*/
SIGNAL_MAPPING(DATA12,N05_09_2_T,fastbus2.T81808.data[17],N[4][8][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],8)*/
SIGNAL_MAPPING(DATA12,N05_10_1_E,fastbus1.Q15372.data[22],N[4][9][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],9)*/
SIGNAL_MAPPING(DATA12,N05_10_1_T,fastbus2.T81859.data[22],N[4][9][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],9)*/
SIGNAL_MAPPING(DATA12,N05_10_2_E,fastbus1.Q15372.data[37],N[4][9][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],9)*/
SIGNAL_MAPPING(DATA12,N05_10_2_T,fastbus2.T81808.data[21],N[4][9][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],9)*/
SIGNAL_MAPPING(DATA12,N05_11_1_E,fastbus1.Q15372.data[26],N[4][10][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],10)*/
SIGNAL_MAPPING(DATA12,N05_11_1_T,fastbus2.T81859.data[26],N[4][10][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],10)*/
SIGNAL_MAPPING(DATA12,N05_11_2_E,fastbus1.Q15372.data[41],N[4][10][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],10)*/
SIGNAL_MAPPING(DATA12,N05_11_2_T,fastbus2.T81808.data[25],N[4][10][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],10)*/
SIGNAL_MAPPING(DATA12,N05_12_1_E,fastbus1.Q15372.data[30],N[4][11][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],11)*/
SIGNAL_MAPPING(DATA12,N05_12_1_T,fastbus2.T81859.data[30],N[4][11][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],11)*/
SIGNAL_MAPPING(DATA12,N05_12_2_E,fastbus1.Q15372.data[45],N[4][11][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],11)*/
SIGNAL_MAPPING(DATA12,N05_12_2_T,fastbus2.T81808.data[29],N[4][11][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],11)*/
SIGNAL_MAPPING(DATA12,N05_13_1_E,fastbus1.Q15372.data[19],N[4][12][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],12)*/
SIGNAL_MAPPING(DATA12,N05_13_1_T,fastbus2.T81859.data[19],N[4][12][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],12)*/
SIGNAL_MAPPING(DATA12,N05_13_2_E,fastbus1.Q15372.data[34],N[4][12][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],12)*/
SIGNAL_MAPPING(DATA12,N05_13_2_T,fastbus2.T81808.data[18],N[4][12][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],12)*/
SIGNAL_MAPPING(DATA12,N05_14_1_E,fastbus1.Q15372.data[23],N[4][13][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],13)*/
SIGNAL_MAPPING(DATA12,N05_14_1_T,fastbus2.T81859.data[23],N[4][13][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],13)*/
SIGNAL_MAPPING(DATA12,N05_14_2_E,fastbus1.Q15372.data[38],N[4][13][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],13)*/
SIGNAL_MAPPING(DATA12,N05_14_2_T,fastbus2.T81808.data[22],N[4][13][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],13)*/
SIGNAL_MAPPING(DATA12,N05_15_1_E,fastbus1.Q47315.data[14],N[4][14][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],14)*/
SIGNAL_MAPPING(DATA12,N05_15_1_T,fastbus2.T48854.data[30],N[4][14][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],14)*/
SIGNAL_MAPPING(DATA12,N05_15_2_E,fastbus1.Q15372.data[42],N[4][14][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],14)*/
SIGNAL_MAPPING(DATA12,N05_15_2_T,fastbus2.T81808.data[26],N[4][14][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],14)*/
SIGNAL_MAPPING(DATA12,N05_16_1_E,fastbus1.Q47315.data[10],N[4][15][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],15)*/
SIGNAL_MAPPING(DATA12,N05_16_1_T,fastbus2.T48854.data[26],N[4][15][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],15)*/
SIGNAL_MAPPING(DATA12,N05_16_2_E,fastbus1.Q15372.data[46],N[4][15][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],15)*/
SIGNAL_MAPPING(DATA12,N05_16_2_T,fastbus2.T81808.data[30],N[4][15][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],15)*/
SIGNAL_MAPPING(DATA12,N05_17_1_E,fastbus1.Q15372.data[27],N[4][16][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],16)*/
SIGNAL_MAPPING(DATA12,N05_17_1_T,fastbus2.T81859.data[27],N[4][16][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],16)*/
SIGNAL_MAPPING(DATA12,N05_17_2_E,fastbus1.Q15372.data[35],N[4][16][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],16)*/
SIGNAL_MAPPING(DATA12,N05_17_2_T,fastbus2.T81808.data[19],N[4][16][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],16)*/
SIGNAL_MAPPING(DATA12,N05_18_1_E,fastbus1.Q15372.data[31],N[4][17][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],17)*/
SIGNAL_MAPPING(DATA12,N05_18_1_T,fastbus2.T81859.data[31],N[4][17][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],17)*/
SIGNAL_MAPPING(DATA12,N05_18_2_E,fastbus1.Q15372.data[39],N[4][17][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],17)*/
SIGNAL_MAPPING(DATA12,N05_18_2_T,fastbus2.T81808.data[23],N[4][17][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],17)*/
SIGNAL_MAPPING(DATA12,N05_19_1_E,fastbus1.Q47315.data[15],N[4][18][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],18)*/
SIGNAL_MAPPING(DATA12,N05_19_1_T,fastbus2.T48854.data[31],N[4][18][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],18)*/
SIGNAL_MAPPING(DATA12,N05_19_2_E,fastbus1.Q15372.data[43],N[4][18][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],18)*/
SIGNAL_MAPPING(DATA12,N05_19_2_T,fastbus2.T81808.data[27],N[4][18][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],18)*/
SIGNAL_MAPPING(DATA12,N05_20_1_E,fastbus1.Q47315.data[11],N[4][19][0].E);/*,ZERO_SUPPRESS_ITEM(N[4],19)*/
SIGNAL_MAPPING(DATA12,N05_20_1_T,fastbus2.T48854.data[27],N[4][19][0].T);/*,ZERO_SUPPRESS_ITEM(N[4],19)*/
SIGNAL_MAPPING(DATA12,N05_20_2_E,fastbus1.Q15372.data[47],N[4][19][1].E);/*,ZERO_SUPPRESS_ITEM(N[4],19)*/
SIGNAL_MAPPING(DATA12,N05_20_2_T,fastbus2.T81808.data[31],N[4][19][1].T);/*,ZERO_SUPPRESS_ITEM(N[4],19)*/
SIGNAL_MAPPING(DATA12,N06_01_1_E,fastbus1.Q47315.data[16],N[5][0][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],0)*/
SIGNAL_MAPPING(DATA12,N06_01_1_T,fastbus2.T87047.data[16],N[5][0][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],0)*/
SIGNAL_MAPPING(DATA12,N06_01_2_E,fastbus1.Q47315.data[4],N[5][0][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],0)*/
SIGNAL_MAPPING(DATA12,N06_01_2_T,fastbus2.T48854.data[20],N[5][0][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],0)*/
SIGNAL_MAPPING(DATA12,N06_02_1_E,fastbus1.Q47315.data[20],N[5][1][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],1)*/
SIGNAL_MAPPING(DATA12,N06_02_1_T,fastbus2.T87047.data[20],N[5][1][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],1)*/
SIGNAL_MAPPING(DATA12,N06_02_2_E,fastbus1.Q47315.data[0],N[5][1][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],1)*/
SIGNAL_MAPPING(DATA12,N06_02_2_T,fastbus2.T48854.data[16],N[5][1][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],1)*/
SIGNAL_MAPPING(DATA12,N06_03_1_E,fastbus1.Q47315.data[24],N[5][2][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],2)*/
SIGNAL_MAPPING(DATA12,N06_03_1_T,fastbus2.T87047.data[24],N[5][2][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],2)*/
SIGNAL_MAPPING(DATA12,N06_03_2_E,fastbus1.Q46993.data[48],N[5][2][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],2)*/
SIGNAL_MAPPING(DATA12,N06_03_2_T,fastbus2.T48834.data[32],N[5][2][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],2)*/
SIGNAL_MAPPING(DATA12,N06_04_1_E,fastbus1.Q47315.data[28],N[5][3][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],3)*/
SIGNAL_MAPPING(DATA12,N06_04_1_T,fastbus2.T87047.data[28],N[5][3][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],3)*/
SIGNAL_MAPPING(DATA12,N06_04_2_E,fastbus1.Q46993.data[52],N[5][3][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],3)*/
SIGNAL_MAPPING(DATA12,N06_04_2_T,fastbus2.T48834.data[36],N[5][3][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],3)*/
SIGNAL_MAPPING(DATA12,N06_05_1_E,fastbus1.Q47315.data[17],N[5][4][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],4)*/
SIGNAL_MAPPING(DATA12,N06_05_1_T,fastbus2.T87047.data[17],N[5][4][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],4)*/
SIGNAL_MAPPING(DATA12,N06_05_2_E,fastbus1.Q47315.data[5],N[5][4][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],4)*/
SIGNAL_MAPPING(DATA12,N06_05_2_T,fastbus2.T48854.data[21],N[5][4][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],4)*/
SIGNAL_MAPPING(DATA12,N06_06_1_E,fastbus1.Q47315.data[21],N[5][5][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],5)*/
SIGNAL_MAPPING(DATA12,N06_06_1_T,fastbus2.T87047.data[21],N[5][5][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],5)*/
SIGNAL_MAPPING(DATA12,N06_06_2_E,fastbus1.Q47315.data[1],N[5][5][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],5)*/
SIGNAL_MAPPING(DATA12,N06_06_2_T,fastbus2.T48854.data[17],N[5][5][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],5)*/
SIGNAL_MAPPING(DATA12,N06_07_1_E,fastbus1.Q47315.data[25],N[5][6][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],6)*/
SIGNAL_MAPPING(DATA12,N06_07_1_T,fastbus2.T87047.data[25],N[5][6][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],6)*/
SIGNAL_MAPPING(DATA12,N06_07_2_E,fastbus1.Q46993.data[56],N[5][6][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],6)*/
SIGNAL_MAPPING(DATA12,N06_07_2_T,fastbus2.T48834.data[40],N[5][6][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],6)*/
SIGNAL_MAPPING(DATA12,N06_08_1_E,fastbus1.Q47315.data[29],N[5][7][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],7)*/
SIGNAL_MAPPING(DATA12,N06_08_1_T,fastbus2.T87047.data[29],N[5][7][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],7)*/
SIGNAL_MAPPING(DATA12,N06_08_2_E,fastbus1.Q46993.data[60],N[5][7][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],7)*/
SIGNAL_MAPPING(DATA12,N06_08_2_T,fastbus2.T48834.data[44],N[5][7][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],7)*/
SIGNAL_MAPPING(DATA12,N06_09_1_E,fastbus1.Q47315.data[18],N[5][8][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],8)*/
SIGNAL_MAPPING(DATA12,N06_09_1_T,fastbus2.T87047.data[18],N[5][8][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],8)*/
SIGNAL_MAPPING(DATA12,N06_09_2_E,fastbus1.Q46993.data[49],N[5][8][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],8)*/
SIGNAL_MAPPING(DATA12,N06_09_2_T,fastbus2.T48834.data[33],N[5][8][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],8)*/
SIGNAL_MAPPING(DATA12,N06_10_1_E,fastbus1.Q47315.data[22],N[5][9][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],9)*/
SIGNAL_MAPPING(DATA12,N06_10_1_T,fastbus2.T87047.data[22],N[5][9][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],9)*/
SIGNAL_MAPPING(DATA12,N06_10_2_E,fastbus1.Q46993.data[53],N[5][9][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],9)*/
SIGNAL_MAPPING(DATA12,N06_10_2_T,fastbus2.T48834.data[37],N[5][9][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],9)*/
SIGNAL_MAPPING(DATA12,N06_11_1_E,fastbus1.Q47315.data[26],N[5][10][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],10)*/
SIGNAL_MAPPING(DATA12,N06_11_1_T,fastbus2.T87047.data[26],N[5][10][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],10)*/
SIGNAL_MAPPING(DATA12,N06_11_2_E,fastbus1.Q46993.data[57],N[5][10][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],10)*/
SIGNAL_MAPPING(DATA12,N06_11_2_T,fastbus2.T48834.data[41],N[5][10][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],10)*/
SIGNAL_MAPPING(DATA12,N06_12_1_E,fastbus1.Q47315.data[30],N[5][11][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],11)*/
SIGNAL_MAPPING(DATA12,N06_12_1_T,fastbus2.T87047.data[30],N[5][11][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],11)*/
SIGNAL_MAPPING(DATA12,N06_12_2_E,fastbus1.Q46993.data[61],N[5][11][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],11)*/
SIGNAL_MAPPING(DATA12,N06_12_2_T,fastbus2.T48834.data[45],N[5][11][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],11)*/
SIGNAL_MAPPING(DATA12,N06_13_1_E,fastbus1.Q47315.data[19],N[5][12][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],12)*/
SIGNAL_MAPPING(DATA12,N06_13_1_T,fastbus2.T87047.data[19],N[5][12][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],12)*/
SIGNAL_MAPPING(DATA12,N06_13_2_E,fastbus1.Q46993.data[50],N[5][12][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],12)*/
SIGNAL_MAPPING(DATA12,N06_13_2_T,fastbus2.T48834.data[34],N[5][12][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],12)*/
SIGNAL_MAPPING(DATA12,N06_14_1_E,fastbus1.Q47315.data[23],N[5][13][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],13)*/
SIGNAL_MAPPING(DATA12,N06_14_1_T,fastbus2.T87047.data[23],N[5][13][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],13)*/
SIGNAL_MAPPING(DATA12,N06_14_2_E,fastbus1.Q46993.data[54],N[5][13][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],13)*/
SIGNAL_MAPPING(DATA12,N06_14_2_T,fastbus2.T48834.data[38],N[5][13][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],13)*/
SIGNAL_MAPPING(DATA12,N06_15_1_E,fastbus1.Q47315.data[6],N[5][14][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],14)*/
SIGNAL_MAPPING(DATA12,N06_15_1_T,fastbus2.T48854.data[22],N[5][14][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],14)*/
SIGNAL_MAPPING(DATA12,N06_15_2_E,fastbus1.Q46993.data[58],N[5][14][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],14)*/
SIGNAL_MAPPING(DATA12,N06_15_2_T,fastbus2.T48834.data[42],N[5][14][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],14)*/
SIGNAL_MAPPING(DATA12,N06_16_1_E,fastbus1.Q47315.data[2],N[5][15][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],15)*/
SIGNAL_MAPPING(DATA12,N06_16_1_T,fastbus2.T48854.data[18],N[5][15][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],15)*/
SIGNAL_MAPPING(DATA12,N06_16_2_E,fastbus1.Q46993.data[62],N[5][15][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],15)*/
SIGNAL_MAPPING(DATA12,N06_16_2_T,fastbus2.T48834.data[46],N[5][15][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],15)*/
SIGNAL_MAPPING(DATA12,N06_17_1_E,fastbus1.Q47315.data[27],N[5][16][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],16)*/
SIGNAL_MAPPING(DATA12,N06_17_1_T,fastbus2.T87047.data[27],N[5][16][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],16)*/
SIGNAL_MAPPING(DATA12,N06_17_2_E,fastbus1.Q46993.data[51],N[5][16][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],16)*/
SIGNAL_MAPPING(DATA12,N06_17_2_T,fastbus2.T48834.data[35],N[5][16][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],16)*/
SIGNAL_MAPPING(DATA12,N06_18_1_E,fastbus1.Q47315.data[31],N[5][17][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],17)*/
SIGNAL_MAPPING(DATA12,N06_18_1_T,fastbus2.T87047.data[31],N[5][17][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],17)*/
SIGNAL_MAPPING(DATA12,N06_18_2_E,fastbus1.Q46993.data[55],N[5][17][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],17)*/
SIGNAL_MAPPING(DATA12,N06_18_2_T,fastbus2.T48834.data[39],N[5][17][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],17)*/
SIGNAL_MAPPING(DATA12,N06_19_1_E,fastbus1.Q47315.data[7],N[5][18][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],18)*/
SIGNAL_MAPPING(DATA12,N06_19_1_T,fastbus2.T48854.data[23],N[5][18][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],18)*/
SIGNAL_MAPPING(DATA12,N06_19_2_E,fastbus1.Q46993.data[59],N[5][18][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],18)*/
SIGNAL_MAPPING(DATA12,N06_19_2_T,fastbus2.T48834.data[43],N[5][18][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],18)*/
SIGNAL_MAPPING(DATA12,N06_20_1_E,fastbus1.Q47315.data[3],N[5][19][0].E);/*,ZERO_SUPPRESS_ITEM(N[5],19)*/
SIGNAL_MAPPING(DATA12,N06_20_1_T,fastbus2.T48854.data[19],N[5][19][0].T);/*,ZERO_SUPPRESS_ITEM(N[5],19)*/
SIGNAL_MAPPING(DATA12,N06_20_2_E,fastbus1.Q46993.data[63],N[5][19][1].E);/*,ZERO_SUPPRESS_ITEM(N[5],19)*/
SIGNAL_MAPPING(DATA12,N06_20_2_T,fastbus2.T48834.data[47],N[5][19][1].T);/*,ZERO_SUPPRESS_ITEM(N[5],19)*/
SIGNAL_MAPPING(DATA12,N07_01_1_E,fastbus1.Q46993.data[64],N[6][0][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],0)*/
SIGNAL_MAPPING(DATA12,N07_01_1_T,fastbus2.T81806.data[32],N[6][0][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],0)*/
SIGNAL_MAPPING(DATA12,N07_01_2_E,fastbus1.Q15358.data[60],N[6][0][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],0)*/
SIGNAL_MAPPING(DATA12,N07_01_2_T,fastbus2.T81859.data[44],N[6][0][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],0)*/
SIGNAL_MAPPING(DATA12,N07_02_1_E,fastbus1.Q46993.data[68],N[6][1][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],1)*/
SIGNAL_MAPPING(DATA12,N07_02_1_T,fastbus2.T81806.data[36],N[6][1][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],1)*/
SIGNAL_MAPPING(DATA12,N07_02_2_E,fastbus1.Q15358.data[56],N[6][1][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],1)*/
SIGNAL_MAPPING(DATA12,N07_02_2_T,fastbus2.T81859.data[40],N[6][1][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],1)*/
SIGNAL_MAPPING(DATA12,N07_03_1_E,fastbus1.Q46993.data[72],N[6][2][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],2)*/
SIGNAL_MAPPING(DATA12,N07_03_1_T,fastbus2.T81806.data[40],N[6][2][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],2)*/
SIGNAL_MAPPING(DATA12,N07_03_2_E,fastbus1.Q46993.data[80],N[6][2][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],2)*/
SIGNAL_MAPPING(DATA12,N07_03_2_T,fastbus2.T81795.data[32],N[6][2][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],2)*/
SIGNAL_MAPPING(DATA12,N07_04_1_E,fastbus1.Q46993.data[76],N[6][3][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],3)*/
SIGNAL_MAPPING(DATA12,N07_04_1_T,fastbus2.T81806.data[44],N[6][3][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],3)*/
SIGNAL_MAPPING(DATA12,N07_04_2_E,fastbus1.Q46993.data[84],N[6][3][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],3)*/
SIGNAL_MAPPING(DATA12,N07_04_2_T,fastbus2.T81795.data[36],N[6][3][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],3)*/
SIGNAL_MAPPING(DATA12,N07_05_1_E,fastbus1.Q46993.data[65],N[6][4][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],4)*/
SIGNAL_MAPPING(DATA12,N07_05_1_T,fastbus2.T81806.data[33],N[6][4][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],4)*/
SIGNAL_MAPPING(DATA12,N07_05_2_E,fastbus1.Q15358.data[57],N[6][4][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],4)*/
SIGNAL_MAPPING(DATA12,N07_05_2_T,fastbus2.T81859.data[41],N[6][4][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],4)*/
SIGNAL_MAPPING(DATA12,N07_06_1_E,fastbus1.Q46993.data[69],N[6][5][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],5)*/
SIGNAL_MAPPING(DATA12,N07_06_1_T,fastbus2.T81806.data[37],N[6][5][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],5)*/
SIGNAL_MAPPING(DATA12,N07_06_2_E,fastbus1.Q15358.data[61],N[6][5][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],5)*/
SIGNAL_MAPPING(DATA12,N07_06_2_T,fastbus2.T81859.data[45],N[6][5][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],5)*/
SIGNAL_MAPPING(DATA12,N07_07_1_E,fastbus1.Q46993.data[73],N[6][6][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],6)*/
SIGNAL_MAPPING(DATA12,N07_07_1_T,fastbus2.T81806.data[41],N[6][6][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],6)*/
SIGNAL_MAPPING(DATA12,N07_07_2_E,fastbus1.Q46993.data[88],N[6][6][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],6)*/
SIGNAL_MAPPING(DATA12,N07_07_2_T,fastbus2.T81795.data[40],N[6][6][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],6)*/
SIGNAL_MAPPING(DATA12,N07_08_1_E,fastbus1.Q46993.data[77],N[6][7][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],7)*/
SIGNAL_MAPPING(DATA12,N07_08_1_T,fastbus2.T81806.data[45],N[6][7][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],7)*/
SIGNAL_MAPPING(DATA12,N07_08_2_E,fastbus1.Q46993.data[92],N[6][7][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],7)*/
SIGNAL_MAPPING(DATA12,N07_08_2_T,fastbus2.T81795.data[44],N[6][7][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],7)*/
SIGNAL_MAPPING(DATA12,N07_09_1_E,fastbus1.Q46993.data[66],N[6][8][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],8)*/
SIGNAL_MAPPING(DATA12,N07_09_1_T,fastbus2.T81806.data[34],N[6][8][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],8)*/
SIGNAL_MAPPING(DATA12,N07_09_2_E,fastbus1.Q46993.data[81],N[6][8][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],8)*/
SIGNAL_MAPPING(DATA12,N07_09_2_T,fastbus2.T81795.data[33],N[6][8][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],8)*/
SIGNAL_MAPPING(DATA12,N07_10_1_E,fastbus1.Q46993.data[70],N[6][9][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],9)*/
SIGNAL_MAPPING(DATA12,N07_10_1_T,fastbus2.T81806.data[38],N[6][9][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],9)*/
SIGNAL_MAPPING(DATA12,N07_10_2_E,fastbus1.Q46993.data[85],N[6][9][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],9)*/
SIGNAL_MAPPING(DATA12,N07_10_2_T,fastbus2.T81795.data[37],N[6][9][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],9)*/
SIGNAL_MAPPING(DATA12,N07_11_1_E,fastbus1.Q46993.data[74],N[6][10][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],10)*/
SIGNAL_MAPPING(DATA12,N07_11_1_T,fastbus2.T81806.data[42],N[6][10][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],10)*/
SIGNAL_MAPPING(DATA12,N07_11_2_E,fastbus1.Q46993.data[89],N[6][10][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],10)*/
SIGNAL_MAPPING(DATA12,N07_11_2_T,fastbus2.T81795.data[41],N[6][10][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],10)*/
SIGNAL_MAPPING(DATA12,N07_12_1_E,fastbus1.Q46993.data[78],N[6][11][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],11)*/
SIGNAL_MAPPING(DATA12,N07_12_1_T,fastbus2.T81806.data[46],N[6][11][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],11)*/
SIGNAL_MAPPING(DATA12,N07_12_2_E,fastbus1.Q46993.data[93],N[6][11][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],11)*/
SIGNAL_MAPPING(DATA12,N07_12_2_T,fastbus2.T81795.data[45],N[6][11][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],11)*/
SIGNAL_MAPPING(DATA12,N07_13_1_E,fastbus1.Q46993.data[67],N[6][12][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],12)*/
SIGNAL_MAPPING(DATA12,N07_13_1_T,fastbus2.T81806.data[35],N[6][12][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],12)*/
SIGNAL_MAPPING(DATA12,N07_13_2_E,fastbus1.Q46993.data[82],N[6][12][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],12)*/
SIGNAL_MAPPING(DATA12,N07_13_2_T,fastbus2.T81795.data[34],N[6][12][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],12)*/
SIGNAL_MAPPING(DATA12,N07_14_1_E,fastbus1.Q46993.data[71],N[6][13][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],13)*/
SIGNAL_MAPPING(DATA12,N07_14_1_T,fastbus2.T81806.data[39],N[6][13][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],13)*/
SIGNAL_MAPPING(DATA12,N07_14_2_E,fastbus1.Q46993.data[86],N[6][13][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],13)*/
SIGNAL_MAPPING(DATA12,N07_14_2_T,fastbus2.T81795.data[38],N[6][13][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],13)*/
SIGNAL_MAPPING(DATA12,N07_15_1_E,fastbus1.Q15358.data[62],N[6][14][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],14)*/
SIGNAL_MAPPING(DATA12,N07_15_1_T,fastbus2.T81859.data[46],N[6][14][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],14)*/
SIGNAL_MAPPING(DATA12,N07_15_2_E,fastbus1.Q46993.data[90],N[6][14][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],14)*/
SIGNAL_MAPPING(DATA12,N07_15_2_T,fastbus2.T81795.data[42],N[6][14][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],14)*/
SIGNAL_MAPPING(DATA12,N07_16_1_E,fastbus1.Q15358.data[58],N[6][15][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],15)*/
SIGNAL_MAPPING(DATA12,N07_16_1_T,fastbus2.T81859.data[42],N[6][15][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],15)*/
SIGNAL_MAPPING(DATA12,N07_16_2_E,fastbus1.Q46993.data[94],N[6][15][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],15)*/
SIGNAL_MAPPING(DATA12,N07_16_2_T,fastbus2.T81795.data[46],N[6][15][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],15)*/
SIGNAL_MAPPING(DATA12,N07_17_1_E,fastbus1.Q46993.data[75],N[6][16][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],16)*/
SIGNAL_MAPPING(DATA12,N07_17_1_T,fastbus2.T81806.data[43],N[6][16][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],16)*/
SIGNAL_MAPPING(DATA12,N07_17_2_E,fastbus1.Q46993.data[83],N[6][16][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],16)*/
SIGNAL_MAPPING(DATA12,N07_17_2_T,fastbus2.T81795.data[35],N[6][16][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],16)*/
SIGNAL_MAPPING(DATA12,N07_18_1_E,fastbus1.Q46993.data[79],N[6][17][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],17)*/
SIGNAL_MAPPING(DATA12,N07_18_1_T,fastbus2.T81806.data[47],N[6][17][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],17)*/
SIGNAL_MAPPING(DATA12,N07_18_2_E,fastbus1.Q46993.data[87],N[6][17][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],17)*/
SIGNAL_MAPPING(DATA12,N07_18_2_T,fastbus2.T81795.data[39],N[6][17][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],17)*/
SIGNAL_MAPPING(DATA12,N07_19_1_E,fastbus1.Q15358.data[63],N[6][18][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],18)*/
SIGNAL_MAPPING(DATA12,N07_19_1_T,fastbus2.T81859.data[47],N[6][18][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],18)*/
SIGNAL_MAPPING(DATA12,N07_19_2_E,fastbus1.Q46993.data[91],N[6][18][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],18)*/
SIGNAL_MAPPING(DATA12,N07_19_2_T,fastbus2.T81795.data[43],N[6][18][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],18)*/
SIGNAL_MAPPING(DATA12,N07_20_1_E,fastbus1.Q15358.data[59],N[6][19][0].E);/*,ZERO_SUPPRESS_ITEM(N[6],19)*/
SIGNAL_MAPPING(DATA12,N07_20_1_T,fastbus2.T81859.data[43],N[6][19][0].T);/*,ZERO_SUPPRESS_ITEM(N[6],19)*/
SIGNAL_MAPPING(DATA12,N07_20_2_E,fastbus1.Q46993.data[95],N[6][19][1].E);/*,ZERO_SUPPRESS_ITEM(N[6],19)*/
SIGNAL_MAPPING(DATA12,N07_20_2_T,fastbus2.T81795.data[47],N[6][19][1].T);/*,ZERO_SUPPRESS_ITEM(N[6],19)*/
SIGNAL_MAPPING(DATA12,N08_01_1_E,fastbus1.Q15358.data[64],N[7][0][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],0)*/
SIGNAL_MAPPING(DATA12,N08_01_1_T,fastbus2.T81808.data[32],N[7][0][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],0)*/
SIGNAL_MAPPING(DATA12,N08_01_2_E,fastbus1.Q15358.data[52],N[7][0][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],0)*/
SIGNAL_MAPPING(DATA12,N08_01_2_T,fastbus2.T81859.data[36],N[7][0][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],0)*/
SIGNAL_MAPPING(DATA12,N08_02_1_E,fastbus1.Q15358.data[68],N[7][1][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],1)*/
SIGNAL_MAPPING(DATA12,N08_02_1_T,fastbus2.T81808.data[36],N[7][1][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],1)*/
SIGNAL_MAPPING(DATA12,N08_02_2_E,fastbus1.Q15358.data[48],N[7][1][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],1)*/
SIGNAL_MAPPING(DATA12,N08_02_2_T,fastbus2.T81859.data[32],N[7][1][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],1)*/
SIGNAL_MAPPING(DATA12,N08_03_1_E,fastbus1.Q15358.data[72],N[7][2][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],2)*/
SIGNAL_MAPPING(DATA12,N08_03_1_T,fastbus2.T81808.data[40],N[7][2][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],2)*/
SIGNAL_MAPPING(DATA12,N08_03_2_E,fastbus1.Q15358.data[80],N[7][2][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],2)*/
SIGNAL_MAPPING(DATA12,N08_03_2_T,fastbus2.T48854.data[32],N[7][2][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],2)*/
SIGNAL_MAPPING(DATA12,N08_04_1_E,fastbus1.Q15358.data[76],N[7][3][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],3)*/
SIGNAL_MAPPING(DATA12,N08_04_1_T,fastbus2.T81808.data[44],N[7][3][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],3)*/
SIGNAL_MAPPING(DATA12,N08_04_2_E,fastbus1.Q15358.data[84],N[7][3][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],3)*/
SIGNAL_MAPPING(DATA12,N08_04_2_T,fastbus2.T48854.data[36],N[7][3][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],3)*/
SIGNAL_MAPPING(DATA12,N08_05_1_E,fastbus1.Q15358.data[65],N[7][4][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],4)*/
SIGNAL_MAPPING(DATA12,N08_05_1_T,fastbus2.T81808.data[33],N[7][4][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],4)*/
SIGNAL_MAPPING(DATA12,N08_05_2_E,fastbus1.Q15358.data[53],N[7][4][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],4)*/
SIGNAL_MAPPING(DATA12,N08_05_2_T,fastbus2.T81859.data[37],N[7][4][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],4)*/
SIGNAL_MAPPING(DATA12,N08_06_1_E,fastbus1.Q15358.data[69],N[7][5][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],5)*/
SIGNAL_MAPPING(DATA12,N08_06_1_T,fastbus2.T81808.data[37],N[7][5][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],5)*/
SIGNAL_MAPPING(DATA12,N08_06_2_E,fastbus1.Q15358.data[49],N[7][5][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],5)*/
SIGNAL_MAPPING(DATA12,N08_06_2_T,fastbus2.T81859.data[33],N[7][5][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],5)*/
SIGNAL_MAPPING(DATA12,N08_07_1_E,fastbus1.Q15358.data[73],N[7][6][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],6)*/
SIGNAL_MAPPING(DATA12,N08_07_1_T,fastbus2.T81808.data[41],N[7][6][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],6)*/
SIGNAL_MAPPING(DATA12,N08_07_2_E,fastbus1.Q15358.data[88],N[7][6][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],6)*/
SIGNAL_MAPPING(DATA12,N08_07_2_T,fastbus2.T48854.data[40],N[7][6][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],6)*/
SIGNAL_MAPPING(DATA12,N08_08_1_E,fastbus1.Q15358.data[77],N[7][7][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],7)*/
SIGNAL_MAPPING(DATA12,N08_08_1_T,fastbus2.T81808.data[45],N[7][7][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],7)*/
SIGNAL_MAPPING(DATA12,N08_08_2_E,fastbus1.Q15358.data[92],N[7][7][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],7)*/
SIGNAL_MAPPING(DATA12,N08_08_2_T,fastbus2.T48854.data[44],N[7][7][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],7)*/
SIGNAL_MAPPING(DATA12,N08_09_1_E,fastbus1.Q15358.data[66],N[7][8][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],8)*/
SIGNAL_MAPPING(DATA12,N08_09_1_T,fastbus2.T81808.data[34],N[7][8][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],8)*/
SIGNAL_MAPPING(DATA12,N08_09_2_E,fastbus1.Q15358.data[81],N[7][8][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],8)*/
SIGNAL_MAPPING(DATA12,N08_09_2_T,fastbus2.T48854.data[33],N[7][8][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],8)*/
SIGNAL_MAPPING(DATA12,N08_10_1_E,fastbus1.Q15358.data[70],N[7][9][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],9)*/
SIGNAL_MAPPING(DATA12,N08_10_1_T,fastbus2.T81808.data[38],N[7][9][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],9)*/
SIGNAL_MAPPING(DATA12,N08_10_2_E,fastbus1.Q15358.data[85],N[7][9][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],9)*/
SIGNAL_MAPPING(DATA12,N08_10_2_T,fastbus2.T48854.data[37],N[7][9][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],9)*/
SIGNAL_MAPPING(DATA12,N08_11_1_E,fastbus1.Q15358.data[74],N[7][10][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],10)*/
SIGNAL_MAPPING(DATA12,N08_11_1_T,fastbus2.T81808.data[42],N[7][10][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],10)*/
SIGNAL_MAPPING(DATA12,N08_11_2_E,fastbus1.Q15358.data[89],N[7][10][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],10)*/
SIGNAL_MAPPING(DATA12,N08_11_2_T,fastbus2.T48854.data[41],N[7][10][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],10)*/
SIGNAL_MAPPING(DATA12,N08_12_1_E,fastbus1.Q15358.data[78],N[7][11][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],11)*/
SIGNAL_MAPPING(DATA12,N08_12_1_T,fastbus2.T81808.data[46],N[7][11][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],11)*/
SIGNAL_MAPPING(DATA12,N08_12_2_E,fastbus1.Q15358.data[93],N[7][11][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],11)*/
SIGNAL_MAPPING(DATA12,N08_12_2_T,fastbus2.T48854.data[45],N[7][11][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],11)*/
SIGNAL_MAPPING(DATA12,N08_13_1_E,fastbus1.Q15358.data[67],N[7][12][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],12)*/
SIGNAL_MAPPING(DATA12,N08_13_1_T,fastbus2.T81808.data[35],N[7][12][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],12)*/
SIGNAL_MAPPING(DATA12,N08_13_2_E,fastbus1.Q15358.data[82],N[7][12][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],12)*/
SIGNAL_MAPPING(DATA12,N08_13_2_T,fastbus2.T48854.data[34],N[7][12][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],12)*/
SIGNAL_MAPPING(DATA12,N08_14_1_E,fastbus1.Q15358.data[71],N[7][13][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],13)*/
SIGNAL_MAPPING(DATA12,N08_14_1_T,fastbus2.T81808.data[39],N[7][13][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],13)*/
SIGNAL_MAPPING(DATA12,N08_14_2_E,fastbus1.Q15358.data[86],N[7][13][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],13)*/
SIGNAL_MAPPING(DATA12,N08_14_2_T,fastbus2.T48854.data[38],N[7][13][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],13)*/
SIGNAL_MAPPING(DATA12,N08_15_1_E,fastbus1.Q15358.data[54],N[7][14][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],14)*/
SIGNAL_MAPPING(DATA12,N08_15_1_T,fastbus2.T81859.data[38],N[7][14][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],14)*/
SIGNAL_MAPPING(DATA12,N08_15_2_E,fastbus1.Q15358.data[90],N[7][14][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],14)*/
SIGNAL_MAPPING(DATA12,N08_15_2_T,fastbus2.T48854.data[42],N[7][14][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],14)*/
SIGNAL_MAPPING(DATA12,N08_16_1_E,fastbus1.Q15358.data[50],N[7][15][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],15)*/
SIGNAL_MAPPING(DATA12,N08_16_1_T,fastbus2.T81859.data[34],N[7][15][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],15)*/
SIGNAL_MAPPING(DATA12,N08_16_2_E,fastbus1.Q15358.data[94],N[7][15][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],15)*/
SIGNAL_MAPPING(DATA12,N08_16_2_T,fastbus2.T48854.data[46],N[7][15][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],15)*/
SIGNAL_MAPPING(DATA12,N08_17_1_E,fastbus1.Q15358.data[75],N[7][16][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],16)*/
SIGNAL_MAPPING(DATA12,N08_17_1_T,fastbus2.T81808.data[43],N[7][16][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],16)*/
SIGNAL_MAPPING(DATA12,N08_17_2_E,fastbus1.Q15358.data[83],N[7][16][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],16)*/
SIGNAL_MAPPING(DATA12,N08_17_2_T,fastbus2.T48854.data[35],N[7][16][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],16)*/
SIGNAL_MAPPING(DATA12,N08_18_1_E,fastbus1.Q15358.data[79],N[7][17][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],17)*/
SIGNAL_MAPPING(DATA12,N08_18_1_T,fastbus2.T81808.data[47],N[7][17][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],17)*/
SIGNAL_MAPPING(DATA12,N08_18_2_E,fastbus1.Q15358.data[87],N[7][17][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],17)*/
SIGNAL_MAPPING(DATA12,N08_18_2_T,fastbus2.T48854.data[39],N[7][17][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],17)*/
SIGNAL_MAPPING(DATA12,N08_19_1_E,fastbus1.Q15358.data[55],N[7][18][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],18)*/
SIGNAL_MAPPING(DATA12,N08_19_1_T,fastbus2.T81859.data[39],N[7][18][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],18)*/
SIGNAL_MAPPING(DATA12,N08_19_2_E,fastbus1.Q15358.data[91],N[7][18][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],18)*/
SIGNAL_MAPPING(DATA12,N08_19_2_T,fastbus2.T48854.data[43],N[7][18][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],18)*/
SIGNAL_MAPPING(DATA12,N08_20_1_E,fastbus1.Q15358.data[51],N[7][19][0].E);/*,ZERO_SUPPRESS_ITEM(N[7],19)*/
SIGNAL_MAPPING(DATA12,N08_20_1_T,fastbus2.T81859.data[35],N[7][19][0].T);/*,ZERO_SUPPRESS_ITEM(N[7],19)*/
SIGNAL_MAPPING(DATA12,N08_20_2_E,fastbus1.Q15358.data[95],N[7][19][1].E);/*,ZERO_SUPPRESS_ITEM(N[7],19)*/
SIGNAL_MAPPING(DATA12,N08_20_2_T,fastbus2.T48854.data[47],N[7][19][1].T);/*,ZERO_SUPPRESS_ITEM(N[7],19)*/
SIGNAL_MAPPING(DATA12,N09_01_1_E,fastbus1.Q46962.data[48],N[8][0][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],0)*/
SIGNAL_MAPPING(DATA12,N09_01_1_T,fastbus2.T87047.data[32],N[8][0][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],0)*/
SIGNAL_MAPPING(DATA12,N09_01_2_E,fastbus1.Q46962.data[92],N[8][0][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],0)*/
SIGNAL_MAPPING(DATA12,N09_01_2_T,fastbus2.T81808.data[60],N[8][0][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],0)*/
SIGNAL_MAPPING(DATA12,N09_02_1_E,fastbus1.Q46962.data[52],N[8][1][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],1)*/
SIGNAL_MAPPING(DATA12,N09_02_1_T,fastbus2.T87047.data[36],N[8][1][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],1)*/
SIGNAL_MAPPING(DATA12,N09_02_2_E,fastbus1.Q46962.data[88],N[8][1][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],1)*/
SIGNAL_MAPPING(DATA12,N09_02_2_T,fastbus2.T81808.data[56],N[8][1][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],1)*/
SIGNAL_MAPPING(DATA12,N09_03_1_E,fastbus1.Q46962.data[56],N[8][2][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],2)*/
SIGNAL_MAPPING(DATA12,N09_03_1_T,fastbus2.T87047.data[40],N[8][2][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],2)*/
SIGNAL_MAPPING(DATA12,N09_03_2_E,fastbus1.Q46962.data[64],N[8][2][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],2)*/
SIGNAL_MAPPING(DATA12,N09_03_2_T,fastbus2.T81859.data[48],N[8][2][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],2)*/
SIGNAL_MAPPING(DATA12,N09_04_1_E,fastbus1.Q46962.data[60],N[8][3][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],3)*/
SIGNAL_MAPPING(DATA12,N09_04_1_T,fastbus2.T87047.data[44],N[8][3][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],3)*/
SIGNAL_MAPPING(DATA12,N09_04_2_E,fastbus1.Q46962.data[68],N[8][3][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],3)*/
SIGNAL_MAPPING(DATA12,N09_04_2_T,fastbus2.T81859.data[52],N[8][3][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],3)*/
SIGNAL_MAPPING(DATA12,N09_05_1_E,fastbus1.Q46962.data[49],N[8][4][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],4)*/
SIGNAL_MAPPING(DATA12,N09_05_1_T,fastbus2.T87047.data[33],N[8][4][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],4)*/
SIGNAL_MAPPING(DATA12,N09_05_2_E,fastbus1.Q46962.data[89],N[8][4][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],4)*/
SIGNAL_MAPPING(DATA12,N09_05_2_T,fastbus2.T81808.data[57],N[8][4][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],4)*/
SIGNAL_MAPPING(DATA12,N09_06_1_E,fastbus1.Q46962.data[53],N[8][5][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],5)*/
SIGNAL_MAPPING(DATA12,N09_06_1_T,fastbus2.T87047.data[37],N[8][5][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],5)*/
SIGNAL_MAPPING(DATA12,N09_06_2_E,fastbus1.Q46962.data[93],N[8][5][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],5)*/
SIGNAL_MAPPING(DATA12,N09_06_2_T,fastbus2.T81808.data[61],N[8][5][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],5)*/
SIGNAL_MAPPING(DATA12,N09_07_1_E,fastbus1.Q46962.data[57],N[8][6][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],6)*/
SIGNAL_MAPPING(DATA12,N09_07_1_T,fastbus2.T87047.data[41],N[8][6][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],6)*/
SIGNAL_MAPPING(DATA12,N09_07_2_E,fastbus1.Q46962.data[72],N[8][6][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],6)*/
SIGNAL_MAPPING(DATA12,N09_07_2_T,fastbus2.T81859.data[56],N[8][6][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],6)*/
SIGNAL_MAPPING(DATA12,N09_08_1_E,fastbus1.Q46962.data[61],N[8][7][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],7)*/
SIGNAL_MAPPING(DATA12,N09_08_1_T,fastbus2.T87047.data[45],N[8][7][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],7)*/
SIGNAL_MAPPING(DATA12,N09_08_2_E,fastbus1.Q46962.data[76],N[8][7][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],7)*/
SIGNAL_MAPPING(DATA12,N09_08_2_T,fastbus2.T81859.data[60],N[8][7][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],7)*/
SIGNAL_MAPPING(DATA12,N09_09_1_E,fastbus1.Q46962.data[50],N[8][8][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],8)*/
SIGNAL_MAPPING(DATA12,N09_09_1_T,fastbus2.T87047.data[34],N[8][8][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],8)*/
SIGNAL_MAPPING(DATA12,N09_09_2_E,fastbus1.Q46962.data[65],N[8][8][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],8)*/
SIGNAL_MAPPING(DATA12,N09_09_2_T,fastbus2.T81859.data[49],N[8][8][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],8)*/
SIGNAL_MAPPING(DATA12,N09_10_1_E,fastbus1.Q46962.data[54],N[8][9][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],9)*/
SIGNAL_MAPPING(DATA12,N09_10_1_T,fastbus2.T87047.data[38],N[8][9][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],9)*/
SIGNAL_MAPPING(DATA12,N09_10_2_E,fastbus1.Q46962.data[69],N[8][9][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],9)*/
SIGNAL_MAPPING(DATA12,N09_10_2_T,fastbus2.T81859.data[53],N[8][9][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],9)*/
SIGNAL_MAPPING(DATA12,N09_11_1_E,fastbus1.Q46962.data[58],N[8][10][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],10)*/
SIGNAL_MAPPING(DATA12,N09_11_1_T,fastbus2.T87047.data[42],N[8][10][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],10)*/
SIGNAL_MAPPING(DATA12,N09_11_2_E,fastbus1.Q46962.data[73],N[8][10][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],10)*/
SIGNAL_MAPPING(DATA12,N09_11_2_T,fastbus2.T81859.data[57],N[8][10][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],10)*/
SIGNAL_MAPPING(DATA12,N09_12_1_E,fastbus1.Q46962.data[62],N[8][11][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],11)*/
SIGNAL_MAPPING(DATA12,N09_12_1_T,fastbus2.T87047.data[46],N[8][11][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],11)*/
SIGNAL_MAPPING(DATA12,N09_12_2_E,fastbus1.Q46962.data[77],N[8][11][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],11)*/
SIGNAL_MAPPING(DATA12,N09_12_2_T,fastbus2.T81859.data[61],N[8][11][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],11)*/
SIGNAL_MAPPING(DATA12,N09_13_1_E,fastbus1.Q46962.data[51],N[8][12][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],12)*/
SIGNAL_MAPPING(DATA12,N09_13_1_T,fastbus2.T87047.data[35],N[8][12][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],12)*/
SIGNAL_MAPPING(DATA12,N09_13_2_E,fastbus1.Q46962.data[66],N[8][12][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],12)*/
SIGNAL_MAPPING(DATA12,N09_13_2_T,fastbus2.T81859.data[50],N[8][12][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],12)*/
SIGNAL_MAPPING(DATA12,N09_14_1_E,fastbus1.Q46962.data[55],N[8][13][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],13)*/
SIGNAL_MAPPING(DATA12,N09_14_1_T,fastbus2.T87047.data[39],N[8][13][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],13)*/
SIGNAL_MAPPING(DATA12,N09_14_2_E,fastbus1.Q46962.data[70],N[8][13][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],13)*/
SIGNAL_MAPPING(DATA12,N09_14_2_T,fastbus2.T81859.data[54],N[8][13][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],13)*/
SIGNAL_MAPPING(DATA12,N09_15_1_E,fastbus1.Q46962.data[94],N[8][14][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],14)*/
SIGNAL_MAPPING(DATA12,N09_15_1_T,fastbus2.T81808.data[62],N[8][14][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],14)*/
SIGNAL_MAPPING(DATA12,N09_15_2_E,fastbus1.Q46962.data[74],N[8][14][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],14)*/
SIGNAL_MAPPING(DATA12,N09_15_2_T,fastbus2.T81859.data[58],N[8][14][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],14)*/
SIGNAL_MAPPING(DATA12,N09_16_1_E,fastbus1.Q46962.data[90],N[8][15][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],15)*/
SIGNAL_MAPPING(DATA12,N09_16_1_T,fastbus2.T81808.data[58],N[8][15][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],15)*/
SIGNAL_MAPPING(DATA12,N09_16_2_E,fastbus1.Q46962.data[78],N[8][15][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],15)*/
SIGNAL_MAPPING(DATA12,N09_16_2_T,fastbus2.T81859.data[62],N[8][15][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],15)*/
SIGNAL_MAPPING(DATA12,N09_17_1_E,fastbus1.Q46962.data[59],N[8][16][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],16)*/
SIGNAL_MAPPING(DATA12,N09_17_1_T,fastbus2.T87047.data[43],N[8][16][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],16)*/
SIGNAL_MAPPING(DATA12,N09_17_2_E,fastbus1.Q46962.data[67],N[8][16][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],16)*/
SIGNAL_MAPPING(DATA12,N09_17_2_T,fastbus2.T81859.data[51],N[8][16][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],16)*/
SIGNAL_MAPPING(DATA12,N09_18_1_E,fastbus1.Q46962.data[63],N[8][17][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],17)*/
SIGNAL_MAPPING(DATA12,N09_18_1_T,fastbus2.T87047.data[47],N[8][17][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],17)*/
SIGNAL_MAPPING(DATA12,N09_18_2_E,fastbus1.Q46962.data[71],N[8][17][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],17)*/
SIGNAL_MAPPING(DATA12,N09_18_2_T,fastbus2.T81859.data[55],N[8][17][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],17)*/
SIGNAL_MAPPING(DATA12,N09_19_1_E,fastbus1.Q46962.data[95],N[8][18][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],18)*/
SIGNAL_MAPPING(DATA12,N09_19_1_T,fastbus2.T81808.data[63],N[8][18][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],18)*/
SIGNAL_MAPPING(DATA12,N09_19_2_E,fastbus1.Q46962.data[75],N[8][18][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],18)*/
SIGNAL_MAPPING(DATA12,N09_19_2_T,fastbus2.T81859.data[59],N[8][18][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],18)*/
SIGNAL_MAPPING(DATA12,N09_20_1_E,fastbus1.Q46962.data[91],N[8][19][0].E);/*,ZERO_SUPPRESS_ITEM(N[8],19)*/
SIGNAL_MAPPING(DATA12,N09_20_1_T,fastbus2.T81808.data[59],N[8][19][0].T);/*,ZERO_SUPPRESS_ITEM(N[8],19)*/
SIGNAL_MAPPING(DATA12,N09_20_2_E,fastbus1.Q46962.data[79],N[8][19][1].E);/*,ZERO_SUPPRESS_ITEM(N[8],19)*/
SIGNAL_MAPPING(DATA12,N09_20_2_T,fastbus2.T81859.data[63],N[8][19][1].T);/*,ZERO_SUPPRESS_ITEM(N[8],19)*/
SIGNAL_MAPPING(DATA12,N10_01_1_E,fastbus1.Q15372.data[64],N[9][0][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],0)*/
SIGNAL_MAPPING(DATA12,N10_01_1_T,fastbus2.T48854.data[48],N[9][0][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],0)*/
SIGNAL_MAPPING(DATA12,N10_01_2_E,fastbus1.Q46962.data[84],N[9][0][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],0)*/
SIGNAL_MAPPING(DATA12,N10_01_2_T,fastbus2.T81808.data[52],N[9][0][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],0)*/
SIGNAL_MAPPING(DATA12,N10_02_1_E,fastbus1.Q15372.data[68],N[9][1][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],1)*/
SIGNAL_MAPPING(DATA12,N10_02_1_T,fastbus2.T48854.data[52],N[9][1][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],1)*/
SIGNAL_MAPPING(DATA12,N10_02_2_E,fastbus1.Q46962.data[80],N[9][1][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],1)*/
SIGNAL_MAPPING(DATA12,N10_02_2_T,fastbus2.T81808.data[48],N[9][1][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],1)*/
SIGNAL_MAPPING(DATA12,N10_03_1_E,fastbus1.Q15372.data[72],N[9][2][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],2)*/
SIGNAL_MAPPING(DATA12,N10_03_1_T,fastbus2.T48854.data[56],N[9][2][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],2)*/
SIGNAL_MAPPING(DATA12,N10_03_2_E,fastbus1.Q15372.data[80],N[9][2][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],2)*/
SIGNAL_MAPPING(DATA12,N10_03_2_T,fastbus2.T87047.data[48],N[9][2][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],2)*/
SIGNAL_MAPPING(DATA12,N10_04_1_E,fastbus1.Q15372.data[76],N[9][3][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],3)*/
SIGNAL_MAPPING(DATA12,N10_04_1_T,fastbus2.T48854.data[60],N[9][3][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],3)*/
SIGNAL_MAPPING(DATA12,N10_04_2_E,fastbus1.Q15372.data[84],N[9][3][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],3)*/
SIGNAL_MAPPING(DATA12,N10_04_2_T,fastbus2.T87047.data[52],N[9][3][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],3)*/
SIGNAL_MAPPING(DATA12,N10_05_1_E,fastbus1.Q15372.data[65],N[9][4][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],4)*/
SIGNAL_MAPPING(DATA12,N10_05_1_T,fastbus2.T48854.data[49],N[9][4][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],4)*/
SIGNAL_MAPPING(DATA12,N10_05_2_E,fastbus1.Q46962.data[85],N[9][4][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],4)*/
SIGNAL_MAPPING(DATA12,N10_05_2_T,fastbus2.T81808.data[53],N[9][4][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],4)*/
SIGNAL_MAPPING(DATA12,N10_06_1_E,fastbus1.Q15372.data[69],N[9][5][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],5)*/
SIGNAL_MAPPING(DATA12,N10_06_1_T,fastbus2.T48854.data[53],N[9][5][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],5)*/
SIGNAL_MAPPING(DATA12,N10_06_2_E,fastbus1.Q46962.data[81],N[9][5][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],5)*/
SIGNAL_MAPPING(DATA12,N10_06_2_T,fastbus2.T81808.data[49],N[9][5][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],5)*/
SIGNAL_MAPPING(DATA12,N10_07_1_E,fastbus1.Q15372.data[73],N[9][6][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],6)*/
SIGNAL_MAPPING(DATA12,N10_07_1_T,fastbus2.T48854.data[57],N[9][6][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],6)*/
SIGNAL_MAPPING(DATA12,N10_07_2_E,fastbus1.Q15372.data[88],N[9][6][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],6)*/
SIGNAL_MAPPING(DATA12,N10_07_2_T,fastbus2.T87047.data[56],N[9][6][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],6)*/
SIGNAL_MAPPING(DATA12,N10_08_1_E,fastbus1.Q15372.data[77],N[9][7][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],7)*/
SIGNAL_MAPPING(DATA12,N10_08_1_T,fastbus2.T48854.data[61],N[9][7][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],7)*/
SIGNAL_MAPPING(DATA12,N10_08_2_E,fastbus1.Q15372.data[92],N[9][7][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],7)*/
SIGNAL_MAPPING(DATA12,N10_08_2_T,fastbus2.T87047.data[60],N[9][7][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],7)*/
SIGNAL_MAPPING(DATA12,N10_09_1_E,fastbus1.Q15372.data[66],N[9][8][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],8)*/
SIGNAL_MAPPING(DATA12,N10_09_1_T,fastbus2.T48854.data[50],N[9][8][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],8)*/
SIGNAL_MAPPING(DATA12,N10_09_2_E,fastbus1.Q15372.data[81],N[9][8][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],8)*/
SIGNAL_MAPPING(DATA12,N10_09_2_T,fastbus2.T87047.data[49],N[9][8][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],8)*/
SIGNAL_MAPPING(DATA12,N10_10_1_E,fastbus1.Q15372.data[70],N[9][9][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],9)*/
SIGNAL_MAPPING(DATA12,N10_10_1_T,fastbus2.T48854.data[54],N[9][9][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],9)*/
SIGNAL_MAPPING(DATA12,N10_10_2_E,fastbus1.Q15372.data[85],N[9][9][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],9)*/
SIGNAL_MAPPING(DATA12,N10_10_2_T,fastbus2.T87047.data[53],N[9][9][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],9)*/
SIGNAL_MAPPING(DATA12,N10_11_1_E,fastbus1.Q15372.data[74],N[9][10][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],10)*/
SIGNAL_MAPPING(DATA12,N10_11_1_T,fastbus2.T48854.data[58],N[9][10][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],10)*/
SIGNAL_MAPPING(DATA12,N10_11_2_E,fastbus1.Q15372.data[89],N[9][10][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],10)*/
SIGNAL_MAPPING(DATA12,N10_11_2_T,fastbus2.T87047.data[57],N[9][10][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],10)*/
SIGNAL_MAPPING(DATA12,N10_12_1_E,fastbus1.Q15372.data[79],N[9][11][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],11)*/
SIGNAL_MAPPING(DATA12,N10_12_1_T,fastbus2.T48854.data[63],N[9][11][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],11)*/
SIGNAL_MAPPING(DATA12,N10_12_2_E,fastbus1.Q15372.data[93],N[9][11][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],11)*/
SIGNAL_MAPPING(DATA12,N10_12_2_T,fastbus2.T87047.data[61],N[9][11][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],11)*/
SIGNAL_MAPPING(DATA12,N10_13_1_E,fastbus1.Q15372.data[67],N[9][12][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],12)*/
SIGNAL_MAPPING(DATA12,N10_13_1_T,fastbus2.T48854.data[51],N[9][12][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],12)*/
SIGNAL_MAPPING(DATA12,N10_13_2_E,fastbus1.Q15372.data[82],N[9][12][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],12)*/
SIGNAL_MAPPING(DATA12,N10_13_2_T,fastbus2.T87047.data[50],N[9][12][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],12)*/
SIGNAL_MAPPING(DATA12,N10_14_1_E,fastbus1.Q15372.data[71],N[9][13][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],13)*/
SIGNAL_MAPPING(DATA12,N10_14_1_T,fastbus2.T48854.data[55],N[9][13][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],13)*/
SIGNAL_MAPPING(DATA12,N10_14_2_E,fastbus1.Q15372.data[86],N[9][13][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],13)*/
SIGNAL_MAPPING(DATA12,N10_14_2_T,fastbus2.T87047.data[54],N[9][13][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],13)*/
SIGNAL_MAPPING(DATA12,N10_15_1_E,fastbus1.Q46962.data[86],N[9][14][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],14)*/
SIGNAL_MAPPING(DATA12,N10_15_1_T,fastbus2.T81808.data[54],N[9][14][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],14)*/
SIGNAL_MAPPING(DATA12,N10_15_2_E,fastbus1.Q15372.data[90],N[9][14][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],14)*/
SIGNAL_MAPPING(DATA12,N10_15_2_T,fastbus2.T87047.data[58],N[9][14][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],14)*/
SIGNAL_MAPPING(DATA12,N10_16_1_E,fastbus1.Q46962.data[82],N[9][15][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],15)*/
SIGNAL_MAPPING(DATA12,N10_16_1_T,fastbus2.T81808.data[50],N[9][15][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],15)*/
SIGNAL_MAPPING(DATA12,N10_16_2_E,fastbus1.Q15372.data[94],N[9][15][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],15)*/
SIGNAL_MAPPING(DATA12,N10_16_2_T,fastbus2.T87047.data[62],N[9][15][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],15)*/
SIGNAL_MAPPING(DATA12,N10_17_1_E,fastbus1.Q15372.data[75],N[9][16][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],16)*/
SIGNAL_MAPPING(DATA12,N10_17_1_T,fastbus2.T48854.data[59],N[9][16][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],16)*/
SIGNAL_MAPPING(DATA12,N10_17_2_E,fastbus1.Q15372.data[83],N[9][16][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],16)*/
SIGNAL_MAPPING(DATA12,N10_17_2_T,fastbus2.T87047.data[51],N[9][16][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],16)*/
SIGNAL_MAPPING(DATA12,N10_18_1_E,fastbus1.Q15372.data[78],N[9][17][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],17)*/
SIGNAL_MAPPING(DATA12,N10_18_1_T,fastbus2.T48854.data[62],N[9][17][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],17)*/
SIGNAL_MAPPING(DATA12,N10_18_2_E,fastbus1.Q15372.data[87],N[9][17][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],17)*/
SIGNAL_MAPPING(DATA12,N10_18_2_T,fastbus2.T87047.data[55],N[9][17][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],17)*/
SIGNAL_MAPPING(DATA12,N10_19_1_E,fastbus1.Q46962.data[87],N[9][18][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],18)*/
SIGNAL_MAPPING(DATA12,N10_19_1_T,fastbus2.T81808.data[55],N[9][18][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],18)*/
SIGNAL_MAPPING(DATA12,N10_19_2_E,fastbus1.Q15372.data[91],N[9][18][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],18)*/
SIGNAL_MAPPING(DATA12,N10_19_2_T,fastbus2.T87047.data[59],N[9][18][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],18)*/
SIGNAL_MAPPING(DATA12,N10_20_1_E,fastbus1.Q46962.data[83],N[9][19][0].E);/*,ZERO_SUPPRESS_ITEM(N[9],19)*/
SIGNAL_MAPPING(DATA12,N10_20_1_T,fastbus2.T81808.data[51],N[9][19][0].T);/*,ZERO_SUPPRESS_ITEM(N[9],19)*/
SIGNAL_MAPPING(DATA12,N10_20_2_E,fastbus1.Q15372.data[95],N[9][19][1].E);/*,ZERO_SUPPRESS_ITEM(N[9],19)*/
SIGNAL_MAPPING(DATA12,N10_20_2_T,fastbus2.T87047.data[63],N[9][19][1].T);/*,ZERO_SUPPRESS_ITEM(N[9],19)*/
SIGNAL_MAPPING(DATA12,NTF01_1_E,vme.qCAEN0472.data[0],NTF[0][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,0)*/
SIGNAL_MAPPING(DATA12,NTF01_1_T,vme.tCAEN0614.data[0],NTF[0][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,0)*/
SIGNAL_MAPPING(DATA12,NTF01_2_E,vme.qCAEN0472.data[2],NTF[0][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,0)*/
SIGNAL_MAPPING(DATA12,NTF01_2_T,vme.tCAEN0614.data[2],NTF[0][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,0)*/
SIGNAL_MAPPING(DATA12,NTF02_1_E,vme.qCAEN0472.data[5],NTF[1][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,1)*/
SIGNAL_MAPPING(DATA12,NTF02_1_T,vme.tCAEN0614.data[5],NTF[1][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,1)*/
SIGNAL_MAPPING(DATA12,NTF02_2_E,vme.qCAEN0472.data[7],NTF[1][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,1)*/
SIGNAL_MAPPING(DATA12,NTF02_2_T,vme.tCAEN0614.data[7],NTF[1][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,1)*/
SIGNAL_MAPPING(DATA12,NTF03_1_E,vme.qCAEN0472.data[8],NTF[2][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,2)*/
SIGNAL_MAPPING(DATA12,NTF03_1_T,vme.tCAEN0614.data[8],NTF[2][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,2)*/
SIGNAL_MAPPING(DATA12,NTF03_2_E,vme.qCAEN0472.data[10],NTF[2][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,2)*/
SIGNAL_MAPPING(DATA12,NTF03_2_T,vme.tCAEN0614.data[10],NTF[2][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,2)*/
SIGNAL_MAPPING(DATA12,NTF04_1_E,vme.qCAEN0472.data[13],NTF[3][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,3)*/
SIGNAL_MAPPING(DATA12,NTF04_1_T,vme.tCAEN0614.data[13],NTF[3][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,3)*/
SIGNAL_MAPPING(DATA12,NTF04_2_E,vme.qCAEN0472.data[15],NTF[3][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,3)*/
SIGNAL_MAPPING(DATA12,NTF04_2_T,vme.tCAEN0614.data[15],NTF[3][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,3)*/
SIGNAL_MAPPING(DATA12,NTF05_1_E,vme.qCAEN0472.data[1],NTF[4][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,4)*/
SIGNAL_MAPPING(DATA12,NTF05_1_T,vme.tCAEN0614.data[1],NTF[4][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,4)*/
SIGNAL_MAPPING(DATA12,NTF05_2_E,vme.qCAEN0472.data[3],NTF[4][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,4)*/
SIGNAL_MAPPING(DATA12,NTF05_2_T,vme.tCAEN0614.data[3],NTF[4][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,4)*/
SIGNAL_MAPPING(DATA12,NTF06_1_E,vme.qCAEN0472.data[4],NTF[5][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,5)*/
SIGNAL_MAPPING(DATA12,NTF06_1_T,vme.tCAEN0614.data[4],NTF[5][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,5)*/
SIGNAL_MAPPING(DATA12,NTF06_2_E,vme.qCAEN0472.data[6],NTF[5][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,5)*/
SIGNAL_MAPPING(DATA12,NTF06_2_T,vme.tCAEN0614.data[6],NTF[5][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,5)*/
SIGNAL_MAPPING(DATA12,NTF07_1_E,vme.qCAEN0472.data[9],NTF[6][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,6)*/
SIGNAL_MAPPING(DATA12,NTF07_1_T,vme.tCAEN0614.data[9],NTF[6][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,6)*/
SIGNAL_MAPPING(DATA12,NTF07_2_E,vme.qCAEN0472.data[11],NTF[6][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,6)*/
SIGNAL_MAPPING(DATA12,NTF07_2_T,vme.tCAEN0614.data[11],NTF[6][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,6)*/
SIGNAL_MAPPING(DATA12,NTF08_1_E,vme.qCAEN0472.data[12],NTF[7][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,7)*/
SIGNAL_MAPPING(DATA12,NTF08_1_T,vme.tCAEN0614.data[12],NTF[7][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,7)*/
SIGNAL_MAPPING(DATA12,NTF08_2_E,vme.qCAEN0472.data[14],NTF[7][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,7)*/
SIGNAL_MAPPING(DATA12,NTF08_2_T,vme.tCAEN0614.data[14],NTF[7][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,7)*/
SIGNAL_MAPPING(DATA12,NTF09_1_E,vme.qCAEN0472.data[16],NTF[8][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,8)*/
SIGNAL_MAPPING(DATA12,NTF09_1_T,vme.tCAEN0614.data[16],NTF[8][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,8)*/
SIGNAL_MAPPING(DATA12,NTF09_2_E,vme.qCAEN0472.data[18],NTF[8][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,8)*/
SIGNAL_MAPPING(DATA12,NTF09_2_T,vme.tCAEN0614.data[18],NTF[8][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,8)*/
SIGNAL_MAPPING(DATA12,NTF10_1_E,vme.qCAEN0472.data[21],NTF[9][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,9)*/
SIGNAL_MAPPING(DATA12,NTF10_1_T,vme.tCAEN0614.data[21],NTF[9][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,9)*/
SIGNAL_MAPPING(DATA12,NTF10_2_E,vme.qCAEN0472.data[23],NTF[9][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,9)*/
SIGNAL_MAPPING(DATA12,NTF10_2_T,vme.tCAEN0614.data[23],NTF[9][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,9)*/
SIGNAL_MAPPING(DATA12,NTF11_1_E,vme.qCAEN0472.data[24],NTF[10][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,10)*/
SIGNAL_MAPPING(DATA12,NTF11_1_T,vme.tCAEN0614.data[24],NTF[10][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,10)*/
SIGNAL_MAPPING(DATA12,NTF11_2_E,vme.qCAEN0472.data[26],NTF[10][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,10)*/
SIGNAL_MAPPING(DATA12,NTF11_2_T,vme.tCAEN0614.data[26],NTF[10][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,10)*/
SIGNAL_MAPPING(DATA12,NTF12_1_E,vme.qCAEN0472.data[29],NTF[11][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,11)*/
SIGNAL_MAPPING(DATA12,NTF12_1_T,vme.tCAEN0614.data[29],NTF[11][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,11)*/
SIGNAL_MAPPING(DATA12,NTF12_2_E,vme.qCAEN0472.data[31],NTF[11][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,11)*/
SIGNAL_MAPPING(DATA12,NTF12_2_T,vme.tCAEN0614.data[31],NTF[11][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,11)*/
SIGNAL_MAPPING(DATA12,NTF13_1_E,vme.qCAEN0472.data[17],NTF[12][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,12)*/
SIGNAL_MAPPING(DATA12,NTF13_1_T,vme.tCAEN0614.data[17],NTF[12][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,12)*/
SIGNAL_MAPPING(DATA12,NTF13_2_E,vme.qCAEN0472.data[19],NTF[12][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,12)*/
SIGNAL_MAPPING(DATA12,NTF13_2_T,vme.tCAEN0614.data[19],NTF[12][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,12)*/
SIGNAL_MAPPING(DATA12,NTF14_1_E,vme.qCAEN0472.data[20],NTF[13][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,13)*/
SIGNAL_MAPPING(DATA12,NTF14_1_T,vme.tCAEN0614.data[20],NTF[13][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,13)*/
SIGNAL_MAPPING(DATA12,NTF14_2_E,vme.qCAEN0472.data[22],NTF[13][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,13)*/
SIGNAL_MAPPING(DATA12,NTF14_2_T,vme.tCAEN0614.data[22],NTF[13][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,13)*/
SIGNAL_MAPPING(DATA12,NTF15_1_E,vme.qCAEN0472.data[25],NTF[14][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,14)*/
SIGNAL_MAPPING(DATA12,NTF15_1_T,vme.tCAEN0614.data[25],NTF[14][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,14)*/
SIGNAL_MAPPING(DATA12,NTF15_2_E,vme.qCAEN0472.data[27],NTF[14][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,14)*/
SIGNAL_MAPPING(DATA12,NTF15_2_T,vme.tCAEN0614.data[27],NTF[14][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,14)*/
SIGNAL_MAPPING(DATA12,NTF16_1_E,vme.qCAEN0472.data[28],NTF[15][0].E);/*,ZERO_SUPPRESS_ITEM(NTF,15)*/
SIGNAL_MAPPING(DATA12,NTF16_1_T,vme.tCAEN0614.data[28],NTF[15][0].T);/*,ZERO_SUPPRESS_ITEM(NTF,15)*/
SIGNAL_MAPPING(DATA12,NTF16_2_E,vme.qCAEN0472.data[30],NTF[15][1].E);/*,ZERO_SUPPRESS_ITEM(NTF,15)*/
SIGNAL_MAPPING(DATA12,NTF16_2_T,vme.tCAEN0614.data[30],NTF[15][1].T);/*,ZERO_SUPPRESS_ITEM(NTF,15)*/
SIGNAL_MAPPING(DATA16,PILEUP_1_T,pileup.tdc.data,PILEUP[0].T);
SIGNAL_MAPPING(DATA12,POS01_01_E,camac.qSIA0429.data[0],POS[0][0].E);
SIGNAL_MAPPING(DATA12,POS01_01_T,camac.tSIA0426.data[0],POS[0][0].T);
SIGNAL_MAPPING(DATA12,POS01_02_E,camac.qSIA0429.data[1],POS[0][1].E);
SIGNAL_MAPPING(DATA12,POS01_02_T,camac.tSIA0426.data[1],POS[0][1].T);
SIGNAL_MAPPING(DATA12,POS01_03_E,camac.qSIA0429.data[2],POS[0][2].E);
SIGNAL_MAPPING(DATA12,POS01_03_T,camac.tSIA0426.data[2],POS[0][2].T);
SIGNAL_MAPPING(DATA12,POS01_04_E,camac.qSIA0429.data[3],POS[0][3].E);
SIGNAL_MAPPING(DATA12,POS01_04_T,camac.tSIA0426.data[3],POS[0][3].T);
SIGNAL_MAPPING(DATA12,PSP01_01_E,camac.aPHI14829.data[0],PSP[0][0].E);
SIGNAL_MAPPING(DATA12,PSP01_02_E,camac.aPHI14829.data[1],PSP[0][1].E);
SIGNAL_MAPPING(DATA12,PSP01_03_E,camac.aPHI14829.data[2],PSP[0][2].E);
SIGNAL_MAPPING(DATA12,PSP01_04_E,camac.aPHI14829.data[3],PSP[0][3].E);
SIGNAL_MAPPING(DATA12,PSP01_05_E,camac.aPHI14829.data[12],PSP[0][4].E);
SIGNAL_MAPPING(DATA12,PSP02_01_E,camac.aPHI14829.data[4],PSP[1][0].E);
SIGNAL_MAPPING(DATA12,PSP02_02_E,camac.aPHI14829.data[5],PSP[1][1].E);
SIGNAL_MAPPING(DATA12,PSP02_03_E,camac.aPHI14829.data[6],PSP[1][2].E);
SIGNAL_MAPPING(DATA12,PSP02_04_E,camac.aPHI14829.data[7],PSP[1][3].E);
SIGNAL_MAPPING(DATA12,PSP02_05_E,camac.aPHI14829.data[13],PSP[1][4].E);
SIGNAL_MAPPING(DATA12,ROL01_01_E,camac.qSIA0429.data[4],ROL[0][0].E);
SIGNAL_MAPPING(DATA12,ROL01_02_E,camac.qSIA0429.data[5],ROL[0][1].E);
SIGNAL_MAPPING(DATA12,ROL01_03_E,camac.qSIA0429.data[6],ROL[0][2].E);
SIGNAL_MAPPING(DATA12,ROL01_04_E,camac.qSIA0429.data[7],ROL[0][3].E);
SIGNAL_MAPPING(DATA12,SCI01_01_E,camac.qSIA0480.data[7],SCI[0][0].E);
SIGNAL_MAPPING(DATA12,SCI01_01_T,camac.tSIA0400.data[4],SCI[0][0].T);
SIGNAL_MAPPING(DATA12,SCI01_02_E,camac.qSIA0480.data[6],SCI[0][1].E);
SIGNAL_MAPPING(DATA12,SCI01_02_T,camac.tSIA0400.data[5],SCI[0][1].T);
SIGNAL_MAPPING(DATA12,SCI02_01_E,camac.qSIA0480.data[4],SCI[1][0].E);
SIGNAL_MAPPING(DATA12,SCI02_01_T,camac.tSIA0400.data[6],SCI[1][0].T);
SIGNAL_MAPPING(DATA12,SCI02_02_E,camac.qSIA0480.data[5],SCI[1][1].E);
SIGNAL_MAPPING(DATA12,SCI02_02_T,camac.tSIA0400.data[7],SCI[1][1].T);
SIGNAL_MAPPING(DATA12,STR1_01_E,camac.qSIA0458.data[0],STR[0][0].E);
SIGNAL_MAPPING(DATA12,STR2_01_E,camac.qSIA0458.data[1],STR[1][0].E);
SIGNAL_MAPPING(DATA12,STR2_01_T,camac.tC_FRS120.data[1],STR[1][0].T);
SIGNAL_MAPPING(DATA12,TFW01_1_E,fastbus1.Q17320.data[32],TFW[0][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,0)*/
SIGNAL_MAPPING(DATA12,TFW01_1_T,fastbus1.T81855.data[48],TFW[0][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,0)*/
SIGNAL_MAPPING(DATA12,TFW01_2_E,fastbus1.Q17320.data[34],TFW[0][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,0)*/
SIGNAL_MAPPING(DATA12,TFW01_2_T,fastbus1.T81855.data[50],TFW[0][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,0)*/
SIGNAL_MAPPING(DATA12,TFW02_1_E,fastbus1.Q17320.data[36],TFW[1][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,1)*/
SIGNAL_MAPPING(DATA12,TFW02_1_T,fastbus1.T81855.data[52],TFW[1][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,1)*/
SIGNAL_MAPPING(DATA12,TFW02_2_E,fastbus1.Q17320.data[38],TFW[1][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,1)*/
SIGNAL_MAPPING(DATA12,TFW02_2_T,fastbus1.T81855.data[54],TFW[1][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,1)*/
SIGNAL_MAPPING(DATA12,TFW03_1_E,fastbus1.Q17320.data[40],TFW[2][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,2)*/
SIGNAL_MAPPING(DATA12,TFW03_1_T,fastbus1.T81855.data[56],TFW[2][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,2)*/
SIGNAL_MAPPING(DATA12,TFW03_2_E,fastbus1.Q17320.data[42],TFW[2][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,2)*/
SIGNAL_MAPPING(DATA12,TFW03_2_T,fastbus1.T81855.data[58],TFW[2][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,2)*/
SIGNAL_MAPPING(DATA12,TFW04_1_E,fastbus1.Q17320.data[44],TFW[3][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,3)*/
SIGNAL_MAPPING(DATA12,TFW04_1_T,fastbus1.T81855.data[60],TFW[3][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,3)*/
SIGNAL_MAPPING(DATA12,TFW04_2_E,fastbus1.Q17320.data[46],TFW[3][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,3)*/
SIGNAL_MAPPING(DATA12,TFW04_2_T,fastbus1.T81855.data[62],TFW[3][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,3)*/
SIGNAL_MAPPING(DATA12,TFW05_1_E,fastbus1.Q17320.data[33],TFW[4][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,4)*/
SIGNAL_MAPPING(DATA12,TFW05_1_T,fastbus1.T81855.data[49],TFW[4][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,4)*/
SIGNAL_MAPPING(DATA12,TFW05_2_E,fastbus1.Q17320.data[35],TFW[4][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,4)*/
SIGNAL_MAPPING(DATA12,TFW05_2_T,fastbus1.T81855.data[51],TFW[4][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,4)*/
SIGNAL_MAPPING(DATA12,TFW06_1_E,fastbus1.Q17320.data[37],TFW[5][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,5)*/
SIGNAL_MAPPING(DATA12,TFW06_1_T,fastbus1.T81855.data[53],TFW[5][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,5)*/
SIGNAL_MAPPING(DATA12,TFW06_2_E,fastbus1.Q17320.data[39],TFW[5][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,5)*/
SIGNAL_MAPPING(DATA12,TFW06_2_T,fastbus1.T81855.data[55],TFW[5][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,5)*/
SIGNAL_MAPPING(DATA12,TFW07_1_E,fastbus1.Q17320.data[41],TFW[6][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,6)*/
SIGNAL_MAPPING(DATA12,TFW07_1_T,fastbus1.T81855.data[57],TFW[6][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,6)*/
SIGNAL_MAPPING(DATA12,TFW07_2_E,fastbus1.Q17320.data[43],TFW[6][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,6)*/
SIGNAL_MAPPING(DATA12,TFW07_2_T,fastbus1.T81855.data[59],TFW[6][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,6)*/
SIGNAL_MAPPING(DATA12,TFW08_1_E,fastbus1.Q17320.data[45],TFW[7][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,7)*/
SIGNAL_MAPPING(DATA12,TFW08_1_T,fastbus1.T81855.data[61],TFW[7][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,7)*/
SIGNAL_MAPPING(DATA12,TFW08_2_E,fastbus1.Q17320.data[47],TFW[7][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,7)*/
SIGNAL_MAPPING(DATA12,TFW08_2_T,fastbus1.T81855.data[63],TFW[7][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,7)*/
SIGNAL_MAPPING(DATA12,TFW09_1_E,fastbus1.Q17320.data[16],TFW[8][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,8)*/
SIGNAL_MAPPING(DATA12,TFW09_1_T,fastbus1.T81855.data[32],TFW[8][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,8)*/
SIGNAL_MAPPING(DATA12,TFW09_2_E,fastbus1.Q17320.data[18],TFW[8][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,8)*/
SIGNAL_MAPPING(DATA12,TFW09_2_T,fastbus1.T81855.data[34],TFW[8][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,8)*/
SIGNAL_MAPPING(DATA12,TFW10_1_E,fastbus1.Q17320.data[20],TFW[9][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,9)*/
SIGNAL_MAPPING(DATA12,TFW10_1_T,fastbus1.T81855.data[36],TFW[9][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,9)*/
SIGNAL_MAPPING(DATA12,TFW10_2_E,fastbus1.Q17320.data[22],TFW[9][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,9)*/
SIGNAL_MAPPING(DATA12,TFW10_2_T,fastbus1.T81855.data[38],TFW[9][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,9)*/
SIGNAL_MAPPING(DATA12,TFW11_1_E,fastbus1.Q17320.data[24],TFW[10][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,10)*/
SIGNAL_MAPPING(DATA12,TFW11_1_T,fastbus1.T81855.data[40],TFW[10][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,10)*/
SIGNAL_MAPPING(DATA12,TFW11_2_E,fastbus1.Q17320.data[26],TFW[10][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,10)*/
SIGNAL_MAPPING(DATA12,TFW11_2_T,fastbus1.T81855.data[42],TFW[10][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,10)*/
SIGNAL_MAPPING(DATA12,TFW12_1_E,fastbus1.Q17320.data[28],TFW[11][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,11)*/
SIGNAL_MAPPING(DATA12,TFW12_1_T,fastbus1.T81855.data[44],TFW[11][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,11)*/
SIGNAL_MAPPING(DATA12,TFW12_2_E,fastbus1.Q17320.data[30],TFW[11][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,11)*/
SIGNAL_MAPPING(DATA12,TFW12_2_T,fastbus1.T81855.data[46],TFW[11][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,11)*/
SIGNAL_MAPPING(DATA12,TFW13_1_E,fastbus1.Q17320.data[17],TFW[12][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,12)*/
SIGNAL_MAPPING(DATA12,TFW13_1_T,fastbus1.T81855.data[33],TFW[12][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,12)*/
SIGNAL_MAPPING(DATA12,TFW13_2_E,fastbus1.Q17320.data[19],TFW[12][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,12)*/
SIGNAL_MAPPING(DATA12,TFW13_2_T,fastbus1.T81855.data[35],TFW[12][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,12)*/
SIGNAL_MAPPING(DATA12,TFW14_1_E,fastbus1.Q17320.data[21],TFW[13][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,13)*/
SIGNAL_MAPPING(DATA12,TFW14_1_T,fastbus1.T81855.data[37],TFW[13][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,13)*/
SIGNAL_MAPPING(DATA12,TFW14_2_E,fastbus1.Q17320.data[23],TFW[13][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,13)*/
SIGNAL_MAPPING(DATA12,TFW14_2_T,fastbus1.T81855.data[39],TFW[13][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,13)*/
SIGNAL_MAPPING(DATA12,TFW15_1_E,fastbus1.Q17320.data[25],TFW[14][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,14)*/
SIGNAL_MAPPING(DATA12,TFW15_1_T,fastbus1.T81855.data[41],TFW[14][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,14)*/
SIGNAL_MAPPING(DATA12,TFW15_2_E,fastbus1.Q17320.data[27],TFW[14][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,14)*/
SIGNAL_MAPPING(DATA12,TFW15_2_T,fastbus1.T81855.data[43],TFW[14][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,14)*/
SIGNAL_MAPPING(DATA12,TFW16_1_E,fastbus1.Q17320.data[29],TFW[15][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,15)*/
SIGNAL_MAPPING(DATA12,TFW16_1_T,fastbus1.T81855.data[45],TFW[15][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,15)*/
SIGNAL_MAPPING(DATA12,TFW16_2_E,fastbus1.Q17320.data[31],TFW[15][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,15)*/
SIGNAL_MAPPING(DATA12,TFW16_2_T,fastbus1.T81855.data[47],TFW[15][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,15)*/
SIGNAL_MAPPING(DATA12,TFW17_1_E,fastbus1.Q17320.data[80],TFW[16][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,16)*/
SIGNAL_MAPPING(DATA12,TFW17_1_T,fastbus1.T81855.data[16],TFW[16][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,16)*/
SIGNAL_MAPPING(DATA12,TFW17_2_E,fastbus1.Q17320.data[82],TFW[16][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,16)*/
SIGNAL_MAPPING(DATA12,TFW17_2_T,fastbus1.T81855.data[18],TFW[16][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,16)*/
SIGNAL_MAPPING(DATA12,TFW18_1_E,fastbus1.Q17320.data[84],TFW[17][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,17)*/
SIGNAL_MAPPING(DATA12,TFW18_1_T,fastbus1.T81855.data[20],TFW[17][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,17)*/
SIGNAL_MAPPING(DATA12,TFW18_2_E,fastbus1.Q17320.data[86],TFW[17][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,17)*/
SIGNAL_MAPPING(DATA12,TFW18_2_T,fastbus1.T81855.data[22],TFW[17][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,17)*/
SIGNAL_MAPPING(DATA12,TFW19_1_E,fastbus1.Q17320.data[88],TFW[18][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,18)*/
SIGNAL_MAPPING(DATA12,TFW19_1_T,fastbus1.T81855.data[24],TFW[18][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,18)*/
SIGNAL_MAPPING(DATA12,TFW19_2_E,fastbus1.Q17320.data[90],TFW[18][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,18)*/
SIGNAL_MAPPING(DATA12,TFW19_2_T,fastbus1.T81855.data[26],TFW[18][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,18)*/
SIGNAL_MAPPING(DATA12,TFW20_1_E,fastbus1.Q17320.data[92],TFW[19][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,19)*/
SIGNAL_MAPPING(DATA12,TFW20_1_T,fastbus1.T81855.data[28],TFW[19][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,19)*/
SIGNAL_MAPPING(DATA12,TFW20_2_E,fastbus1.Q17320.data[94],TFW[19][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,19)*/
SIGNAL_MAPPING(DATA12,TFW20_2_T,fastbus1.T81855.data[30],TFW[19][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,19)*/
SIGNAL_MAPPING(DATA12,TFW21_1_E,fastbus1.Q17320.data[81],TFW[20][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,20)*/
SIGNAL_MAPPING(DATA12,TFW21_1_T,fastbus1.T81855.data[17],TFW[20][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,20)*/
SIGNAL_MAPPING(DATA12,TFW21_2_E,fastbus1.Q17320.data[83],TFW[20][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,20)*/
SIGNAL_MAPPING(DATA12,TFW21_2_T,fastbus1.T81855.data[19],TFW[20][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,20)*/
SIGNAL_MAPPING(DATA12,TFW22_1_E,fastbus1.Q17320.data[85],TFW[21][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,21)*/
SIGNAL_MAPPING(DATA12,TFW22_1_T,fastbus1.T81855.data[21],TFW[21][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,21)*/
SIGNAL_MAPPING(DATA12,TFW22_2_E,fastbus1.Q17320.data[87],TFW[21][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,21)*/
SIGNAL_MAPPING(DATA12,TFW22_2_T,fastbus1.T81855.data[23],TFW[21][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,21)*/
SIGNAL_MAPPING(DATA12,TFW23_1_E,fastbus1.Q17320.data[89],TFW[22][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,22)*/
SIGNAL_MAPPING(DATA12,TFW23_1_T,fastbus1.T81855.data[25],TFW[22][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,22)*/
SIGNAL_MAPPING(DATA12,TFW23_2_E,fastbus1.Q17320.data[91],TFW[22][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,22)*/
SIGNAL_MAPPING(DATA12,TFW23_2_T,fastbus1.T81855.data[27],TFW[22][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,22)*/
SIGNAL_MAPPING(DATA12,TFW24_1_E,fastbus1.Q17320.data[93],TFW[23][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,23)*/
SIGNAL_MAPPING(DATA12,TFW24_1_T,fastbus1.T81855.data[29],TFW[23][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,23)*/
SIGNAL_MAPPING(DATA12,TFW24_2_E,fastbus1.Q17320.data[95],TFW[23][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,23)*/
SIGNAL_MAPPING(DATA12,TFW24_2_T,fastbus1.T81855.data[31],TFW[23][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,23)*/
SIGNAL_MAPPING(DATA12,TFW25_1_E,fastbus1.Q17320.data[48],TFW[24][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,24)*/
SIGNAL_MAPPING(DATA12,TFW25_1_T,fastbus1.T81855.data[0],TFW[24][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,24)*/
SIGNAL_MAPPING(DATA12,TFW25_2_E,fastbus1.Q17320.data[50],TFW[24][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,24)*/
SIGNAL_MAPPING(DATA12,TFW25_2_T,fastbus1.T81855.data[2],TFW[24][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,24)*/
SIGNAL_MAPPING(DATA12,TFW26_1_E,fastbus1.Q17320.data[52],TFW[25][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,25)*/
SIGNAL_MAPPING(DATA12,TFW26_1_T,fastbus1.T81855.data[4],TFW[25][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,25)*/
SIGNAL_MAPPING(DATA12,TFW26_2_E,fastbus1.Q17320.data[54],TFW[25][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,25)*/
SIGNAL_MAPPING(DATA12,TFW26_2_T,fastbus1.T81855.data[6],TFW[25][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,25)*/
SIGNAL_MAPPING(DATA12,TFW27_1_E,fastbus1.Q17320.data[56],TFW[26][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,26)*/
SIGNAL_MAPPING(DATA12,TFW27_1_T,fastbus1.T81855.data[8],TFW[26][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,26)*/
SIGNAL_MAPPING(DATA12,TFW27_2_E,fastbus1.Q17320.data[58],TFW[26][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,26)*/
SIGNAL_MAPPING(DATA12,TFW27_2_T,fastbus1.T81855.data[10],TFW[26][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,26)*/
SIGNAL_MAPPING(DATA12,TFW28_1_E,fastbus1.Q17320.data[60],TFW[27][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,27)*/
SIGNAL_MAPPING(DATA12,TFW28_1_T,fastbus1.T81855.data[12],TFW[27][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,27)*/
SIGNAL_MAPPING(DATA12,TFW28_2_E,fastbus1.Q17320.data[62],TFW[27][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,27)*/
SIGNAL_MAPPING(DATA12,TFW28_2_T,fastbus1.T81855.data[14],TFW[27][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,27)*/
SIGNAL_MAPPING(DATA12,TFW29_1_E,fastbus1.Q17320.data[49],TFW[28][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,28)*/
SIGNAL_MAPPING(DATA12,TFW29_1_T,fastbus1.T81855.data[1],TFW[28][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,28)*/
SIGNAL_MAPPING(DATA12,TFW29_2_E,fastbus1.Q17320.data[51],TFW[28][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,28)*/
SIGNAL_MAPPING(DATA12,TFW29_2_T,fastbus1.T81855.data[3],TFW[28][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,28)*/
SIGNAL_MAPPING(DATA12,TFW30_1_E,fastbus1.Q17320.data[53],TFW[29][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,29)*/
SIGNAL_MAPPING(DATA12,TFW30_1_T,fastbus1.T81855.data[5],TFW[29][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,29)*/
SIGNAL_MAPPING(DATA12,TFW30_2_E,fastbus1.Q17320.data[55],TFW[29][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,29)*/
SIGNAL_MAPPING(DATA12,TFW30_2_T,fastbus1.T81855.data[7],TFW[29][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,29)*/
SIGNAL_MAPPING(DATA12,TFW31_1_E,fastbus1.Q17320.data[57],TFW[30][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,30)*/
SIGNAL_MAPPING(DATA12,TFW31_1_T,fastbus1.T81855.data[9],TFW[30][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,30)*/
SIGNAL_MAPPING(DATA12,TFW31_2_E,fastbus1.Q17320.data[59],TFW[30][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,30)*/
SIGNAL_MAPPING(DATA12,TFW31_2_T,fastbus1.T81855.data[11],TFW[30][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,30)*/
SIGNAL_MAPPING(DATA12,TFW32_1_E,fastbus1.Q17320.data[61],TFW[31][0].E);/*,ZERO_SUPPRESS_ITEM(TFW,31)*/
SIGNAL_MAPPING(DATA12,TFW32_1_T,fastbus1.T81855.data[13],TFW[31][0].T);/*,ZERO_SUPPRESS_ITEM(TFW,31)*/
SIGNAL_MAPPING(DATA12,TFW32_2_E,fastbus1.Q17320.data[63],TFW[31][1].E);/*,ZERO_SUPPRESS_ITEM(TFW,31)*/
SIGNAL_MAPPING(DATA12,TFW32_2_T,fastbus1.T81855.data[15],TFW[31][1].T);/*,ZERO_SUPPRESS_ITEM(TFW,31)*/
SIGNAL_MAPPING(DATA12,V1_01_1_E,fastbus1.Q15372.data[48],V[0][0][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],0)*/
SIGNAL_MAPPING(DATA12,V1_01_1_T,fastbus2.T81795.data[48],V[0][0][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],0)*/
SIGNAL_MAPPING(DATA12,V1_01_2_E,fastbus1.Q17320.data[1],V[0][0][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],0)*/
SIGNAL_MAPPING(DATA12,V1_01_2_T,fastbus1.T87024.data[49],V[0][0][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],0)*/
SIGNAL_MAPPING(DATA12,V1_02_1_E,fastbus1.Q15372.data[52],V[0][1][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],1)*/
SIGNAL_MAPPING(DATA12,V1_02_1_T,fastbus2.T81795.data[52],V[0][1][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],1)*/
SIGNAL_MAPPING(DATA12,V1_02_2_E,fastbus1.Q17320.data[3],V[0][1][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],1)*/
SIGNAL_MAPPING(DATA12,V1_02_2_T,fastbus1.T87024.data[51],V[0][1][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],1)*/
SIGNAL_MAPPING(DATA12,V1_03_1_E,fastbus1.Q15372.data[56],V[0][2][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],2)*/
SIGNAL_MAPPING(DATA12,V1_03_1_T,fastbus2.T81795.data[56],V[0][2][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],2)*/
SIGNAL_MAPPING(DATA12,V1_03_2_E,fastbus1.Q47315.data[32],V[0][2][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],2)*/
SIGNAL_MAPPING(DATA12,V1_03_2_T,fastbus1.T87044.data[48],V[0][2][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],2)*/
SIGNAL_MAPPING(DATA12,V1_04_1_E,fastbus1.Q15372.data[60],V[0][3][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],3)*/
SIGNAL_MAPPING(DATA12,V1_04_1_T,fastbus2.T81795.data[60],V[0][3][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],3)*/
SIGNAL_MAPPING(DATA12,V1_04_2_E,fastbus1.Q47315.data[36],V[0][3][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],3)*/
SIGNAL_MAPPING(DATA12,V1_04_2_T,fastbus1.T87044.data[52],V[0][3][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],3)*/
SIGNAL_MAPPING(DATA12,V1_05_1_E,fastbus1.Q15372.data[49],V[0][4][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],4)*/
SIGNAL_MAPPING(DATA12,V1_05_1_T,fastbus2.T81795.data[49],V[0][4][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],4)*/
SIGNAL_MAPPING(DATA12,V1_05_2_E,fastbus1.Q17320.data[5],V[0][4][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],4)*/
SIGNAL_MAPPING(DATA12,V1_05_2_T,fastbus1.T87024.data[53],V[0][4][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],4)*/
SIGNAL_MAPPING(DATA12,V1_06_1_E,fastbus1.Q15372.data[53],V[0][5][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],5)*/
SIGNAL_MAPPING(DATA12,V1_06_1_T,fastbus2.T81795.data[53],V[0][5][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],5)*/
SIGNAL_MAPPING(DATA12,V1_06_2_E,fastbus1.Q17320.data[7],V[0][5][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],5)*/
SIGNAL_MAPPING(DATA12,V1_06_2_T,fastbus1.T87024.data[55],V[0][5][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],5)*/
SIGNAL_MAPPING(DATA12,V1_07_1_E,fastbus1.Q15372.data[57],V[0][6][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],6)*/
SIGNAL_MAPPING(DATA12,V1_07_1_T,fastbus2.T81795.data[57],V[0][6][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],6)*/
SIGNAL_MAPPING(DATA12,V1_07_2_E,fastbus1.Q47315.data[40],V[0][6][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],6)*/
SIGNAL_MAPPING(DATA12,V1_07_2_T,fastbus1.T87044.data[56],V[0][6][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],6)*/
SIGNAL_MAPPING(DATA12,V1_08_1_E,fastbus1.Q15372.data[61],V[0][7][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],7)*/
SIGNAL_MAPPING(DATA12,V1_08_1_T,fastbus2.T81795.data[61],V[0][7][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],7)*/
SIGNAL_MAPPING(DATA12,V1_08_2_E,fastbus1.Q47315.data[44],V[0][7][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],7)*/
SIGNAL_MAPPING(DATA12,V1_08_2_T,fastbus1.T87044.data[60],V[0][7][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],7)*/
SIGNAL_MAPPING(DATA12,V1_09_1_E,fastbus1.Q15372.data[50],V[0][8][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],8)*/
SIGNAL_MAPPING(DATA12,V1_09_1_T,fastbus2.T81795.data[50],V[0][8][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],8)*/
SIGNAL_MAPPING(DATA12,V1_09_2_E,fastbus1.Q47315.data[33],V[0][8][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],8)*/
SIGNAL_MAPPING(DATA12,V1_09_2_T,fastbus1.T87044.data[49],V[0][8][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],8)*/
SIGNAL_MAPPING(DATA12,V1_10_1_E,fastbus1.Q15372.data[54],V[0][9][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],9)*/
SIGNAL_MAPPING(DATA12,V1_10_1_T,fastbus2.T81795.data[54],V[0][9][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],9)*/
SIGNAL_MAPPING(DATA12,V1_10_2_E,fastbus1.Q47315.data[37],V[0][9][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],9)*/
SIGNAL_MAPPING(DATA12,V1_10_2_T,fastbus1.T87044.data[53],V[0][9][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],9)*/
SIGNAL_MAPPING(DATA12,V1_11_1_E,fastbus1.Q15372.data[58],V[0][10][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],10)*/
SIGNAL_MAPPING(DATA12,V1_11_1_T,fastbus2.T81795.data[58],V[0][10][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],10)*/
SIGNAL_MAPPING(DATA12,V1_11_2_E,fastbus1.Q47315.data[41],V[0][10][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],10)*/
SIGNAL_MAPPING(DATA12,V1_11_2_T,fastbus1.T87044.data[57],V[0][10][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],10)*/
SIGNAL_MAPPING(DATA12,V1_12_1_E,fastbus1.Q15372.data[62],V[0][11][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],11)*/
SIGNAL_MAPPING(DATA12,V1_12_1_T,fastbus2.T81795.data[62],V[0][11][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],11)*/
SIGNAL_MAPPING(DATA12,V1_12_2_E,fastbus1.Q47315.data[45],V[0][11][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],11)*/
SIGNAL_MAPPING(DATA12,V1_12_2_T,fastbus1.T87044.data[61],V[0][11][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],11)*/
SIGNAL_MAPPING(DATA12,V1_13_1_E,fastbus1.Q15372.data[51],V[0][12][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],12)*/
SIGNAL_MAPPING(DATA12,V1_13_1_T,fastbus2.T81795.data[51],V[0][12][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],12)*/
SIGNAL_MAPPING(DATA12,V1_13_2_E,fastbus1.Q47315.data[34],V[0][12][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],12)*/
SIGNAL_MAPPING(DATA12,V1_13_2_T,fastbus1.T87044.data[50],V[0][12][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],12)*/
SIGNAL_MAPPING(DATA12,V1_14_1_E,fastbus1.Q15372.data[55],V[0][13][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],13)*/
SIGNAL_MAPPING(DATA12,V1_14_1_T,fastbus2.T81795.data[55],V[0][13][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],13)*/
SIGNAL_MAPPING(DATA12,V1_14_2_E,fastbus1.Q47315.data[38],V[0][13][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],13)*/
SIGNAL_MAPPING(DATA12,V1_14_2_T,fastbus1.T87044.data[54],V[0][13][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],13)*/
SIGNAL_MAPPING(DATA12,V1_15_1_E,fastbus1.Q17320.data[0],V[0][14][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],14)*/
SIGNAL_MAPPING(DATA12,V1_15_1_T,fastbus1.T87024.data[48],V[0][14][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],14)*/
SIGNAL_MAPPING(DATA12,V1_15_2_E,fastbus1.Q47315.data[42],V[0][14][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],14)*/
SIGNAL_MAPPING(DATA12,V1_15_2_T,fastbus1.T87044.data[58],V[0][14][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],14)*/
SIGNAL_MAPPING(DATA12,V1_16_1_E,fastbus1.Q17320.data[2],V[0][15][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],15)*/
SIGNAL_MAPPING(DATA12,V1_16_1_T,fastbus1.T87024.data[50],V[0][15][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],15)*/
SIGNAL_MAPPING(DATA12,V1_16_2_E,fastbus1.Q47315.data[46],V[0][15][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],15)*/
SIGNAL_MAPPING(DATA12,V1_16_2_T,fastbus1.T87044.data[62],V[0][15][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],15)*/
SIGNAL_MAPPING(DATA12,V1_17_1_E,fastbus1.Q15372.data[59],V[0][16][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],16)*/
SIGNAL_MAPPING(DATA12,V1_17_1_T,fastbus2.T81795.data[59],V[0][16][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],16)*/
SIGNAL_MAPPING(DATA12,V1_17_2_E,fastbus1.Q47315.data[35],V[0][16][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],16)*/
SIGNAL_MAPPING(DATA12,V1_17_2_T,fastbus1.T87044.data[51],V[0][16][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],16)*/
SIGNAL_MAPPING(DATA12,V1_18_1_E,fastbus1.Q15372.data[63],V[0][17][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],17)*/
SIGNAL_MAPPING(DATA12,V1_18_1_T,fastbus2.T81795.data[63],V[0][17][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],17)*/
SIGNAL_MAPPING(DATA12,V1_18_2_E,fastbus1.Q47315.data[39],V[0][17][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],17)*/
SIGNAL_MAPPING(DATA12,V1_18_2_T,fastbus1.T87044.data[55],V[0][17][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],17)*/
SIGNAL_MAPPING(DATA12,V1_19_1_E,fastbus1.Q17320.data[4],V[0][18][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],18)*/
SIGNAL_MAPPING(DATA12,V1_19_1_T,fastbus1.T87024.data[52],V[0][18][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],18)*/
SIGNAL_MAPPING(DATA12,V1_19_2_E,fastbus1.Q47315.data[43],V[0][18][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],18)*/
SIGNAL_MAPPING(DATA12,V1_19_2_T,fastbus1.T87044.data[59],V[0][18][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],18)*/
SIGNAL_MAPPING(DATA12,V1_20_1_E,fastbus1.Q17320.data[6],V[0][19][0].E);/*,ZERO_SUPPRESS_ITEM(V[0],19)*/
SIGNAL_MAPPING(DATA12,V1_20_1_T,fastbus1.T87024.data[54],V[0][19][0].T);/*,ZERO_SUPPRESS_ITEM(V[0],19)*/
SIGNAL_MAPPING(DATA12,V1_20_2_E,fastbus1.Q47315.data[47],V[0][19][1].E);/*,ZERO_SUPPRESS_ITEM(V[0],19)*/
SIGNAL_MAPPING(DATA12,V1_20_2_T,fastbus1.T87044.data[63],V[0][19][1].T);/*,ZERO_SUPPRESS_ITEM(V[0],19)*/
SIGNAL_MAPPING(DATA12,XB001_1_E,fastbus1.Q11111.data[0],XB[0][0].E);/*,ZERO_SUPPRESS_ITEM(XB,0)*/
SIGNAL_MAPPING(DATA12,XB001_1_T,fastbus1.T81800.data[24],XB[0][0].T);/*,ZERO_SUPPRESS_ITEM(XB,0)*/
SIGNAL_MAPPING(DATA12,XB002_1_E,fastbus1.Q11111.data[2],XB[1][0].E);/*,ZERO_SUPPRESS_ITEM(XB,1)*/
SIGNAL_MAPPING(DATA12,XB002_1_T,fastbus1.T81800.data[26],XB[1][0].T);/*,ZERO_SUPPRESS_ITEM(XB,1)*/
SIGNAL_MAPPING(DATA12,XB003_1_E,fastbus1.Q11111.data[4],XB[2][0].E);/*,ZERO_SUPPRESS_ITEM(XB,2)*/
SIGNAL_MAPPING(DATA12,XB003_1_T,fastbus1.T81800.data[28],XB[2][0].T);/*,ZERO_SUPPRESS_ITEM(XB,2)*/
SIGNAL_MAPPING(DATA12,XB003_2_E,fastbus2.Q75266.data[31],XB[2][1].E);/*,ZERO_SUPPRESS_ITEM(XB,2)*/
SIGNAL_MAPPING(DATA12,XB004_1_E,fastbus1.Q11111.data[6],XB[3][0].E);/*,ZERO_SUPPRESS_ITEM(XB,3)*/
SIGNAL_MAPPING(DATA12,XB004_1_T,fastbus1.T81800.data[30],XB[3][0].T);/*,ZERO_SUPPRESS_ITEM(XB,3)*/
SIGNAL_MAPPING(DATA12,XB004_2_E,fastbus2.Q75266.data[7],XB[3][1].E);/*,ZERO_SUPPRESS_ITEM(XB,3)*/
SIGNAL_MAPPING(DATA12,XB005_1_E,fastbus1.Q11111.data[8],XB[4][0].E);/*,ZERO_SUPPRESS_ITEM(XB,4)*/
SIGNAL_MAPPING(DATA12,XB005_1_T,fastbus1.T81800.data[32],XB[4][0].T);/*,ZERO_SUPPRESS_ITEM(XB,4)*/
SIGNAL_MAPPING(DATA12,XB006_1_E,fastbus1.Q11111.data[10],XB[5][0].E);/*,ZERO_SUPPRESS_ITEM(XB,5)*/
SIGNAL_MAPPING(DATA12,XB006_1_T,fastbus1.T81800.data[34],XB[5][0].T);/*,ZERO_SUPPRESS_ITEM(XB,5)*/
SIGNAL_MAPPING(DATA12,XB007_1_E,fastbus1.Q11111.data[12],XB[6][0].E);/*,ZERO_SUPPRESS_ITEM(XB,6)*/
SIGNAL_MAPPING(DATA12,XB007_1_T,fastbus1.T81800.data[36],XB[6][0].T);/*,ZERO_SUPPRESS_ITEM(XB,6)*/
SIGNAL_MAPPING(DATA12,XB008_1_E,fastbus1.Q11111.data[14],XB[7][0].E);/*,ZERO_SUPPRESS_ITEM(XB,7)*/
SIGNAL_MAPPING(DATA12,XB008_1_T,fastbus1.T81800.data[38],XB[7][0].T);/*,ZERO_SUPPRESS_ITEM(XB,7)*/
SIGNAL_MAPPING(DATA12,XB009_1_E,fastbus1.Q46848.data[57],XB[8][0].E);/*,ZERO_SUPPRESS_ITEM(XB,8)*/
SIGNAL_MAPPING(DATA12,XB009_1_T,fastbus1.T81800.data[52],XB[8][0].T);/*,ZERO_SUPPRESS_ITEM(XB,8)*/
SIGNAL_MAPPING(DATA12,XB010_1_E,fastbus1.Q11111.data[18],XB[9][0].E);/*,ZERO_SUPPRESS_ITEM(XB,9)*/
SIGNAL_MAPPING(DATA12,XB010_1_T,fastbus1.T87044.data[34],XB[9][0].T);/*,ZERO_SUPPRESS_ITEM(XB,9)*/
SIGNAL_MAPPING(DATA12,XB010_2_E,fastbus2.Q75266.data[23],XB[9][1].E);/*,ZERO_SUPPRESS_ITEM(XB,9)*/
SIGNAL_MAPPING(DATA12,XB011_1_E,fastbus1.Q11111.data[20],XB[10][0].E);/*,ZERO_SUPPRESS_ITEM(XB,10)*/
SIGNAL_MAPPING(DATA12,XB011_1_T,fastbus1.T87044.data[36],XB[10][0].T);/*,ZERO_SUPPRESS_ITEM(XB,10)*/
SIGNAL_MAPPING(DATA12,XB011_2_E,fastbus2.Q75266.data[6],XB[10][1].E);/*,ZERO_SUPPRESS_ITEM(XB,10)*/
SIGNAL_MAPPING(DATA12,XB012_1_E,fastbus1.Q11111.data[22],XB[11][0].E);/*,ZERO_SUPPRESS_ITEM(XB,11)*/
SIGNAL_MAPPING(DATA12,XB012_1_T,fastbus1.T87044.data[38],XB[11][0].T);/*,ZERO_SUPPRESS_ITEM(XB,11)*/
SIGNAL_MAPPING(DATA12,XB012_2_E,fastbus2.Q75266.data[22],XB[11][1].E);/*,ZERO_SUPPRESS_ITEM(XB,11)*/
SIGNAL_MAPPING(DATA12,XB013_1_E,fastbus1.Q11111.data[24],XB[12][0].E);/*,ZERO_SUPPRESS_ITEM(XB,12)*/
SIGNAL_MAPPING(DATA12,XB013_1_T,fastbus1.T81800.data[8],XB[12][0].T);/*,ZERO_SUPPRESS_ITEM(XB,12)*/
SIGNAL_MAPPING(DATA12,XB013_2_E,fastbus2.Q75266.data[30],XB[12][1].E);/*,ZERO_SUPPRESS_ITEM(XB,12)*/
SIGNAL_MAPPING(DATA12,XB014_1_E,fastbus1.Q11111.data[26],XB[13][0].E);/*,ZERO_SUPPRESS_ITEM(XB,13)*/
SIGNAL_MAPPING(DATA12,XB014_1_T,fastbus1.T81800.data[10],XB[13][0].T);/*,ZERO_SUPPRESS_ITEM(XB,13)*/
SIGNAL_MAPPING(DATA12,XB014_2_E,fastbus2.Q75266.data[21],XB[13][1].E);/*,ZERO_SUPPRESS_ITEM(XB,13)*/
SIGNAL_MAPPING(DATA12,XB015_1_E,fastbus1.Q11111.data[28],XB[14][0].E);/*,ZERO_SUPPRESS_ITEM(XB,14)*/
SIGNAL_MAPPING(DATA12,XB015_1_T,fastbus1.T81800.data[12],XB[14][0].T);/*,ZERO_SUPPRESS_ITEM(XB,14)*/
SIGNAL_MAPPING(DATA12,XB016_1_E,fastbus1.Q11111.data[30],XB[15][0].E);/*,ZERO_SUPPRESS_ITEM(XB,15)*/
SIGNAL_MAPPING(DATA12,XB016_1_T,fastbus1.T81800.data[14],XB[15][0].T);/*,ZERO_SUPPRESS_ITEM(XB,15)*/
SIGNAL_MAPPING(DATA12,XB017_1_E,fastbus1.Q11111.data[32],XB[16][0].E);/*,ZERO_SUPPRESS_ITEM(XB,16)*/
SIGNAL_MAPPING(DATA12,XB017_1_T,fastbus1.T87044.data[0],XB[16][0].T);/*,ZERO_SUPPRESS_ITEM(XB,16)*/
SIGNAL_MAPPING(DATA12,XB018_1_E,fastbus1.Q11111.data[34],XB[17][0].E);/*,ZERO_SUPPRESS_ITEM(XB,17)*/
SIGNAL_MAPPING(DATA12,XB018_1_T,fastbus1.T87044.data[2],XB[17][0].T);/*,ZERO_SUPPRESS_ITEM(XB,17)*/
SIGNAL_MAPPING(DATA12,XB019_1_E,fastbus1.Q11111.data[36],XB[18][0].E);/*,ZERO_SUPPRESS_ITEM(XB,18)*/
SIGNAL_MAPPING(DATA12,XB019_1_T,fastbus1.T87044.data[4],XB[18][0].T);/*,ZERO_SUPPRESS_ITEM(XB,18)*/
SIGNAL_MAPPING(DATA12,XB020_1_E,fastbus1.Q11111.data[38],XB[19][0].E);/*,ZERO_SUPPRESS_ITEM(XB,19)*/
SIGNAL_MAPPING(DATA12,XB020_1_T,fastbus1.T87044.data[6],XB[19][0].T);/*,ZERO_SUPPRESS_ITEM(XB,19)*/
SIGNAL_MAPPING(DATA12,XB021_1_E,fastbus1.Q11111.data[40],XB[20][0].E);/*,ZERO_SUPPRESS_ITEM(XB,20)*/
SIGNAL_MAPPING(DATA12,XB021_1_T,fastbus1.T87044.data[8],XB[20][0].T);/*,ZERO_SUPPRESS_ITEM(XB,20)*/
SIGNAL_MAPPING(DATA12,XB022_1_E,fastbus1.Q11111.data[42],XB[21][0].E);/*,ZERO_SUPPRESS_ITEM(XB,21)*/
SIGNAL_MAPPING(DATA12,XB022_1_T,fastbus1.T87044.data[10],XB[21][0].T);/*,ZERO_SUPPRESS_ITEM(XB,21)*/
SIGNAL_MAPPING(DATA12,XB023_1_E,fastbus1.Q11111.data[44],XB[22][0].E);/*,ZERO_SUPPRESS_ITEM(XB,22)*/
SIGNAL_MAPPING(DATA12,XB023_1_T,fastbus1.T87044.data[12],XB[22][0].T);/*,ZERO_SUPPRESS_ITEM(XB,22)*/
SIGNAL_MAPPING(DATA12,XB023_2_E,fastbus2.Q75266.data[29],XB[22][1].E);/*,ZERO_SUPPRESS_ITEM(XB,22)*/
SIGNAL_MAPPING(DATA12,XB024_1_E,fastbus1.Q11111.data[46],XB[23][0].E);/*,ZERO_SUPPRESS_ITEM(XB,23)*/
SIGNAL_MAPPING(DATA12,XB024_1_T,fastbus1.T87044.data[14],XB[23][0].T);/*,ZERO_SUPPRESS_ITEM(XB,23)*/
SIGNAL_MAPPING(DATA12,XB024_2_E,fastbus2.Q75266.data[15],XB[23][1].E);/*,ZERO_SUPPRESS_ITEM(XB,23)*/
SIGNAL_MAPPING(DATA12,XB025_1_E,fastbus1.Q11111.data[48],XB[24][0].E);/*,ZERO_SUPPRESS_ITEM(XB,24)*/
SIGNAL_MAPPING(DATA12,XB025_1_T,fastbus1.T87024.data[24],XB[24][0].T);/*,ZERO_SUPPRESS_ITEM(XB,24)*/
SIGNAL_MAPPING(DATA12,XB025_2_E,fastbus2.Q75266.data[28],XB[24][1].E);/*,ZERO_SUPPRESS_ITEM(XB,24)*/
SIGNAL_MAPPING(DATA12,XB026_1_E,fastbus1.Q11111.data[50],XB[25][0].E);/*,ZERO_SUPPRESS_ITEM(XB,25)*/
SIGNAL_MAPPING(DATA12,XB026_1_T,fastbus1.T87024.data[26],XB[25][0].T);/*,ZERO_SUPPRESS_ITEM(XB,25)*/
SIGNAL_MAPPING(DATA12,XB026_2_E,fastbus2.Q75266.data[5],XB[25][1].E);/*,ZERO_SUPPRESS_ITEM(XB,25)*/
SIGNAL_MAPPING(DATA12,XB027_1_E,fastbus1.Q11111.data[52],XB[26][0].E);/*,ZERO_SUPPRESS_ITEM(XB,26)*/
SIGNAL_MAPPING(DATA12,XB027_1_T,fastbus1.T87024.data[28],XB[26][0].T);/*,ZERO_SUPPRESS_ITEM(XB,26)*/
SIGNAL_MAPPING(DATA12,XB027_2_E,fastbus2.Q75266.data[14],XB[26][1].E);/*,ZERO_SUPPRESS_ITEM(XB,26)*/
SIGNAL_MAPPING(DATA12,XB028_1_E,fastbus1.Q11111.data[54],XB[27][0].E);/*,ZERO_SUPPRESS_ITEM(XB,27)*/
SIGNAL_MAPPING(DATA12,XB028_1_T,fastbus1.T87024.data[30],XB[27][0].T);/*,ZERO_SUPPRESS_ITEM(XB,27)*/
SIGNAL_MAPPING(DATA12,XB028_2_E,fastbus2.Q75266.data[4],XB[27][1].E);/*,ZERO_SUPPRESS_ITEM(XB,27)*/
SIGNAL_MAPPING(DATA12,XB029_1_E,fastbus1.Q11111.data[56],XB[28][0].E);/*,ZERO_SUPPRESS_ITEM(XB,28)*/
SIGNAL_MAPPING(DATA12,XB029_1_T,fastbus1.T87024.data[32],XB[28][0].T);/*,ZERO_SUPPRESS_ITEM(XB,28)*/
SIGNAL_MAPPING(DATA12,XB030_1_E,fastbus1.Q11111.data[58],XB[29][0].E);/*,ZERO_SUPPRESS_ITEM(XB,29)*/
SIGNAL_MAPPING(DATA12,XB030_1_T,fastbus1.T87024.data[34],XB[29][0].T);/*,ZERO_SUPPRESS_ITEM(XB,29)*/
SIGNAL_MAPPING(DATA12,XB031_1_E,fastbus1.Q11111.data[60],XB[30][0].E);/*,ZERO_SUPPRESS_ITEM(XB,30)*/
SIGNAL_MAPPING(DATA12,XB031_1_T,fastbus1.T87024.data[36],XB[30][0].T);/*,ZERO_SUPPRESS_ITEM(XB,30)*/
SIGNAL_MAPPING(DATA12,XB032_1_E,fastbus1.Q11111.data[62],XB[31][0].E);/*,ZERO_SUPPRESS_ITEM(XB,31)*/
SIGNAL_MAPPING(DATA12,XB032_1_T,fastbus1.T87024.data[38],XB[31][0].T);/*,ZERO_SUPPRESS_ITEM(XB,31)*/
SIGNAL_MAPPING(DATA12,XB033_1_E,fastbus1.Q11111.data[33],XB[32][0].E);/*,ZERO_SUPPRESS_ITEM(XB,32)*/
SIGNAL_MAPPING(DATA12,XB033_1_T,fastbus1.T87044.data[1],XB[32][0].T);/*,ZERO_SUPPRESS_ITEM(XB,32)*/
SIGNAL_MAPPING(DATA12,XB034_1_E,fastbus1.Q11111.data[35],XB[33][0].E);/*,ZERO_SUPPRESS_ITEM(XB,33)*/
SIGNAL_MAPPING(DATA12,XB034_1_T,fastbus1.T87044.data[3],XB[33][0].T);/*,ZERO_SUPPRESS_ITEM(XB,33)*/
SIGNAL_MAPPING(DATA12,XB035_1_E,fastbus1.Q11111.data[37],XB[34][0].E);/*,ZERO_SUPPRESS_ITEM(XB,34)*/
SIGNAL_MAPPING(DATA12,XB035_1_T,fastbus1.T87044.data[5],XB[34][0].T);/*,ZERO_SUPPRESS_ITEM(XB,34)*/
SIGNAL_MAPPING(DATA12,XB036_1_E,fastbus1.Q11111.data[39],XB[35][0].E);/*,ZERO_SUPPRESS_ITEM(XB,35)*/
SIGNAL_MAPPING(DATA12,XB036_1_T,fastbus1.T87044.data[7],XB[35][0].T);/*,ZERO_SUPPRESS_ITEM(XB,35)*/
SIGNAL_MAPPING(DATA12,XB037_1_E,fastbus1.Q11111.data[41],XB[36][0].E);/*,ZERO_SUPPRESS_ITEM(XB,36)*/
SIGNAL_MAPPING(DATA12,XB037_1_T,fastbus1.T87044.data[9],XB[36][0].T);/*,ZERO_SUPPRESS_ITEM(XB,36)*/
SIGNAL_MAPPING(DATA12,XB038_1_E,fastbus1.Q11111.data[43],XB[37][0].E);/*,ZERO_SUPPRESS_ITEM(XB,37)*/
SIGNAL_MAPPING(DATA12,XB038_1_T,fastbus1.T87044.data[11],XB[37][0].T);/*,ZERO_SUPPRESS_ITEM(XB,37)*/
SIGNAL_MAPPING(DATA12,XB039_1_E,fastbus1.Q11111.data[45],XB[38][0].E);/*,ZERO_SUPPRESS_ITEM(XB,38)*/
SIGNAL_MAPPING(DATA12,XB039_1_T,fastbus1.T87044.data[13],XB[38][0].T);/*,ZERO_SUPPRESS_ITEM(XB,38)*/
SIGNAL_MAPPING(DATA12,XB039_2_E,fastbus2.Q75266.data[3],XB[38][1].E);/*,ZERO_SUPPRESS_ITEM(XB,38)*/
SIGNAL_MAPPING(DATA12,XB040_1_E,fastbus1.Q11111.data[47],XB[39][0].E);/*,ZERO_SUPPRESS_ITEM(XB,39)*/
SIGNAL_MAPPING(DATA12,XB040_1_T,fastbus1.T87044.data[15],XB[39][0].T);/*,ZERO_SUPPRESS_ITEM(XB,39)*/
SIGNAL_MAPPING(DATA12,XB040_2_E,fastbus2.Q75266.data[20],XB[39][1].E);/*,ZERO_SUPPRESS_ITEM(XB,39)*/
SIGNAL_MAPPING(DATA12,XB041_1_E,fastbus1.Q11111.data[17],XB[40][0].E);/*,ZERO_SUPPRESS_ITEM(XB,40)*/
SIGNAL_MAPPING(DATA12,XB041_1_T,fastbus1.T87044.data[33],XB[40][0].T);/*,ZERO_SUPPRESS_ITEM(XB,40)*/
SIGNAL_MAPPING(DATA12,XB041_2_E,fastbus2.Q75266.data[19],XB[40][1].E);/*,ZERO_SUPPRESS_ITEM(XB,40)*/
SIGNAL_MAPPING(DATA12,XB042_1_E,fastbus1.Q11111.data[19],XB[41][0].E);/*,ZERO_SUPPRESS_ITEM(XB,41)*/
SIGNAL_MAPPING(DATA12,XB042_1_T,fastbus1.T87044.data[35],XB[41][0].T);/*,ZERO_SUPPRESS_ITEM(XB,41)*/
SIGNAL_MAPPING(DATA12,XB042_2_E,fastbus2.Q75266.data[13],XB[41][1].E);/*,ZERO_SUPPRESS_ITEM(XB,41)*/
SIGNAL_MAPPING(DATA12,XB043_1_E,fastbus1.Q11111.data[21],XB[42][0].E);/*,ZERO_SUPPRESS_ITEM(XB,42)*/
SIGNAL_MAPPING(DATA12,XB043_1_T,fastbus1.T87044.data[37],XB[42][0].T);/*,ZERO_SUPPRESS_ITEM(XB,42)*/
SIGNAL_MAPPING(DATA12,XB043_2_E,fastbus2.Q75266.data[27],XB[42][1].E);/*,ZERO_SUPPRESS_ITEM(XB,42)*/
SIGNAL_MAPPING(DATA12,XB044_1_E,fastbus1.Q11111.data[23],XB[43][0].E);/*,ZERO_SUPPRESS_ITEM(XB,43)*/
SIGNAL_MAPPING(DATA12,XB044_1_T,fastbus1.T87044.data[39],XB[43][0].T);/*,ZERO_SUPPRESS_ITEM(XB,43)*/
SIGNAL_MAPPING(DATA12,XB044_2_E,fastbus2.Q75266.data[26],XB[43][1].E);/*,ZERO_SUPPRESS_ITEM(XB,43)*/
SIGNAL_MAPPING(DATA12,XB045_1_E,fastbus1.Q11111.data[25],XB[44][0].E);/*,ZERO_SUPPRESS_ITEM(XB,44)*/
SIGNAL_MAPPING(DATA12,XB045_1_T,fastbus1.T81800.data[9],XB[44][0].T);/*,ZERO_SUPPRESS_ITEM(XB,44)*/
SIGNAL_MAPPING(DATA12,XB045_2_E,fastbus2.Q75266.data[18],XB[44][1].E);/*,ZERO_SUPPRESS_ITEM(XB,44)*/
SIGNAL_MAPPING(DATA12,XB046_1_E,fastbus1.Q11111.data[27],XB[45][0].E);/*,ZERO_SUPPRESS_ITEM(XB,45)*/
SIGNAL_MAPPING(DATA12,XB046_1_T,fastbus1.T81800.data[11],XB[45][0].T);/*,ZERO_SUPPRESS_ITEM(XB,45)*/
SIGNAL_MAPPING(DATA12,XB047_1_E,fastbus1.Q11111.data[29],XB[46][0].E);/*,ZERO_SUPPRESS_ITEM(XB,46)*/
SIGNAL_MAPPING(DATA12,XB047_1_T,fastbus1.T81800.data[13],XB[46][0].T);/*,ZERO_SUPPRESS_ITEM(XB,46)*/
SIGNAL_MAPPING(DATA12,XB048_1_E,fastbus1.Q11111.data[31],XB[47][0].E);/*,ZERO_SUPPRESS_ITEM(XB,47)*/
SIGNAL_MAPPING(DATA12,XB048_1_T,fastbus1.T81800.data[15],XB[47][0].T);/*,ZERO_SUPPRESS_ITEM(XB,47)*/
SIGNAL_MAPPING(DATA12,XB049_1_E,fastbus1.Q11111.data[1],XB[48][0].E);/*,ZERO_SUPPRESS_ITEM(XB,48)*/
SIGNAL_MAPPING(DATA12,XB049_1_T,fastbus1.T81800.data[25],XB[48][0].T);/*,ZERO_SUPPRESS_ITEM(XB,48)*/
SIGNAL_MAPPING(DATA12,XB050_1_E,fastbus1.Q11111.data[3],XB[49][0].E);/*,ZERO_SUPPRESS_ITEM(XB,49)*/
SIGNAL_MAPPING(DATA12,XB050_1_T,fastbus1.T81800.data[27],XB[49][0].T);/*,ZERO_SUPPRESS_ITEM(XB,49)*/
SIGNAL_MAPPING(DATA12,XB051_1_E,fastbus1.Q11111.data[5],XB[50][0].E);/*,ZERO_SUPPRESS_ITEM(XB,50)*/
SIGNAL_MAPPING(DATA12,XB051_1_T,fastbus1.T81800.data[29],XB[50][0].T);/*,ZERO_SUPPRESS_ITEM(XB,50)*/
SIGNAL_MAPPING(DATA12,XB052_1_E,fastbus1.Q11111.data[7],XB[51][0].E);/*,ZERO_SUPPRESS_ITEM(XB,51)*/
SIGNAL_MAPPING(DATA12,XB052_1_T,fastbus1.T81800.data[31],XB[51][0].T);/*,ZERO_SUPPRESS_ITEM(XB,51)*/
SIGNAL_MAPPING(DATA12,XB053_1_E,fastbus1.Q11111.data[9],XB[52][0].E);/*,ZERO_SUPPRESS_ITEM(XB,52)*/
SIGNAL_MAPPING(DATA12,XB053_1_T,fastbus1.T81800.data[33],XB[52][0].T);/*,ZERO_SUPPRESS_ITEM(XB,52)*/
SIGNAL_MAPPING(DATA12,XB054_1_E,fastbus1.Q11111.data[11],XB[53][0].E);/*,ZERO_SUPPRESS_ITEM(XB,53)*/
SIGNAL_MAPPING(DATA12,XB054_1_T,fastbus1.T81800.data[35],XB[53][0].T);/*,ZERO_SUPPRESS_ITEM(XB,53)*/
SIGNAL_MAPPING(DATA12,XB055_1_E,fastbus1.Q11111.data[13],XB[54][0].E);/*,ZERO_SUPPRESS_ITEM(XB,54)*/
SIGNAL_MAPPING(DATA12,XB055_1_T,fastbus1.T81800.data[37],XB[54][0].T);/*,ZERO_SUPPRESS_ITEM(XB,54)*/
SIGNAL_MAPPING(DATA12,XB056_1_E,fastbus1.Q11111.data[15],XB[55][0].E);/*,ZERO_SUPPRESS_ITEM(XB,55)*/
SIGNAL_MAPPING(DATA12,XB056_1_T,fastbus1.T81800.data[39],XB[55][0].T);/*,ZERO_SUPPRESS_ITEM(XB,55)*/
SIGNAL_MAPPING(DATA12,XB057_1_E,fastbus1.Q47342.data[64],XB[56][0].E);/*,ZERO_SUPPRESS_ITEM(XB,56)*/
SIGNAL_MAPPING(DATA12,XB057_1_T,fastbus1.T87024.data[0],XB[56][0].T);/*,ZERO_SUPPRESS_ITEM(XB,56)*/
SIGNAL_MAPPING(DATA12,XB057_2_E,fastbus2.Q75266.data[25],XB[56][1].E);/*,ZERO_SUPPRESS_ITEM(XB,56)*/
SIGNAL_MAPPING(DATA12,XB058_1_E,fastbus1.Q47342.data[66],XB[57][0].E);/*,ZERO_SUPPRESS_ITEM(XB,57)*/
SIGNAL_MAPPING(DATA12,XB058_1_T,fastbus1.T87024.data[2],XB[57][0].T);/*,ZERO_SUPPRESS_ITEM(XB,57)*/
SIGNAL_MAPPING(DATA12,XB058_2_E,fastbus2.Q75266.data[12],XB[57][1].E);/*,ZERO_SUPPRESS_ITEM(XB,57)*/
SIGNAL_MAPPING(DATA12,XB059_1_E,fastbus1.Q47342.data[68],XB[58][0].E);/*,ZERO_SUPPRESS_ITEM(XB,58)*/
SIGNAL_MAPPING(DATA12,XB059_1_T,fastbus1.T87024.data[4],XB[58][0].T);/*,ZERO_SUPPRESS_ITEM(XB,58)*/
SIGNAL_MAPPING(DATA12,XB059_2_E,fastbus2.Q75266.data[24],XB[58][1].E);/*,ZERO_SUPPRESS_ITEM(XB,58)*/
SIGNAL_MAPPING(DATA12,XB060_1_E,fastbus1.Q47342.data[70],XB[59][0].E);/*,ZERO_SUPPRESS_ITEM(XB,59)*/
SIGNAL_MAPPING(DATA12,XB060_1_T,fastbus1.T87024.data[6],XB[59][0].T);/*,ZERO_SUPPRESS_ITEM(XB,59)*/
SIGNAL_MAPPING(DATA12,XB060_2_E,fastbus2.Q75266.data[11],XB[59][1].E);/*,ZERO_SUPPRESS_ITEM(XB,59)*/
SIGNAL_MAPPING(DATA12,XB061_1_E,fastbus1.Q47342.data[72],XB[60][0].E);/*,ZERO_SUPPRESS_ITEM(XB,60)*/
SIGNAL_MAPPING(DATA12,XB061_1_T,fastbus1.T87024.data[8],XB[60][0].T);/*,ZERO_SUPPRESS_ITEM(XB,60)*/
SIGNAL_MAPPING(DATA12,XB061_2_E,fastbus2.Q75266.data[2],XB[60][1].E);/*,ZERO_SUPPRESS_ITEM(XB,60)*/
SIGNAL_MAPPING(DATA12,XB062_1_E,fastbus1.Q47342.data[74],XB[61][0].E);/*,ZERO_SUPPRESS_ITEM(XB,61)*/
SIGNAL_MAPPING(DATA12,XB062_1_T,fastbus1.T87024.data[10],XB[61][0].T);/*,ZERO_SUPPRESS_ITEM(XB,61)*/
SIGNAL_MAPPING(DATA12,XB062_2_E,fastbus2.Q75266.data[10],XB[61][1].E);/*,ZERO_SUPPRESS_ITEM(XB,61)*/
SIGNAL_MAPPING(DATA12,XB063_1_E,fastbus1.Q47342.data[76],XB[62][0].E);/*,ZERO_SUPPRESS_ITEM(XB,62)*/
SIGNAL_MAPPING(DATA12,XB063_1_T,fastbus1.T87024.data[12],XB[62][0].T);/*,ZERO_SUPPRESS_ITEM(XB,62)*/
SIGNAL_MAPPING(DATA12,XB063_2_E,fastbus2.Q75266.data[1],XB[62][1].E);/*,ZERO_SUPPRESS_ITEM(XB,62)*/
SIGNAL_MAPPING(DATA12,XB064_1_E,fastbus1.Q47342.data[78],XB[63][0].E);/*,ZERO_SUPPRESS_ITEM(XB,63)*/
SIGNAL_MAPPING(DATA12,XB064_1_T,fastbus1.T87024.data[14],XB[63][0].T);/*,ZERO_SUPPRESS_ITEM(XB,63)*/
SIGNAL_MAPPING(DATA12,XB064_2_E,fastbus2.Q75266.data[9],XB[63][1].E);/*,ZERO_SUPPRESS_ITEM(XB,63)*/
SIGNAL_MAPPING(DATA12,XB065_1_E,fastbus1.Q11111.data[64],XB[64][0].E);/*,ZERO_SUPPRESS_ITEM(XB,64)*/
SIGNAL_MAPPING(DATA12,XB065_1_T,fastbus1.T81800.data[40],XB[64][0].T);/*,ZERO_SUPPRESS_ITEM(XB,64)*/
SIGNAL_MAPPING(DATA12,XB065_2_E,fastbus2.Q75266.data[0],XB[64][1].E);/*,ZERO_SUPPRESS_ITEM(XB,64)*/
SIGNAL_MAPPING(DATA12,XB066_1_E,fastbus1.Q11111.data[66],XB[65][0].E);/*,ZERO_SUPPRESS_ITEM(XB,65)*/
SIGNAL_MAPPING(DATA12,XB066_1_T,fastbus1.T81800.data[42],XB[65][0].T);/*,ZERO_SUPPRESS_ITEM(XB,65)*/
SIGNAL_MAPPING(DATA12,XB067_1_E,fastbus1.Q11111.data[68],XB[66][0].E);/*,ZERO_SUPPRESS_ITEM(XB,66)*/
SIGNAL_MAPPING(DATA12,XB067_1_T,fastbus1.T81800.data[44],XB[66][0].T);/*,ZERO_SUPPRESS_ITEM(XB,66)*/
SIGNAL_MAPPING(DATA12,XB068_1_E,fastbus1.Q11111.data[70],XB[67][0].E);/*,ZERO_SUPPRESS_ITEM(XB,67)*/
SIGNAL_MAPPING(DATA12,XB068_1_T,fastbus1.T81800.data[46],XB[67][0].T);/*,ZERO_SUPPRESS_ITEM(XB,67)*/
SIGNAL_MAPPING(DATA12,XB069_1_E,fastbus1.Q11111.data[72],XB[68][0].E);/*,ZERO_SUPPRESS_ITEM(XB,68)*/
SIGNAL_MAPPING(DATA12,XB069_1_T,fastbus1.T87024.data[40],XB[68][0].T);/*,ZERO_SUPPRESS_ITEM(XB,68)*/
SIGNAL_MAPPING(DATA12,XB070_1_E,fastbus1.Q11111.data[74],XB[69][0].E);/*,ZERO_SUPPRESS_ITEM(XB,69)*/
SIGNAL_MAPPING(DATA12,XB070_1_T,fastbus1.T87024.data[42],XB[69][0].T);/*,ZERO_SUPPRESS_ITEM(XB,69)*/
SIGNAL_MAPPING(DATA12,XB071_1_E,fastbus1.Q11111.data[76],XB[70][0].E);/*,ZERO_SUPPRESS_ITEM(XB,70)*/
SIGNAL_MAPPING(DATA12,XB071_1_T,fastbus1.T87024.data[44],XB[70][0].T);/*,ZERO_SUPPRESS_ITEM(XB,70)*/
SIGNAL_MAPPING(DATA12,XB072_1_E,fastbus1.Q11111.data[78],XB[71][0].E);/*,ZERO_SUPPRESS_ITEM(XB,71)*/
SIGNAL_MAPPING(DATA12,XB072_1_T,fastbus1.T87024.data[46],XB[71][0].T);/*,ZERO_SUPPRESS_ITEM(XB,71)*/
SIGNAL_MAPPING(DATA12,XB073_1_E,fastbus1.Q11111.data[16],XB[72][0].E);/*,ZERO_SUPPRESS_ITEM(XB,72)*/
SIGNAL_MAPPING(DATA12,XB073_1_T,fastbus1.T87044.data[32],XB[72][0].T);/*,ZERO_SUPPRESS_ITEM(XB,72)*/
SIGNAL_MAPPING(DATA12,XB074_1_E,fastbus1.Q46848.data[51],XB[73][0].E);/*,ZERO_SUPPRESS_ITEM(XB,73)*/
SIGNAL_MAPPING(DATA12,XB074_1_T,fastbus1.T81800.data[63],XB[73][0].T);/*,ZERO_SUPPRESS_ITEM(XB,73)*/
SIGNAL_MAPPING(DATA12,XB075_1_E,fastbus1.Q46848.data[53],XB[74][0].E);/*,ZERO_SUPPRESS_ITEM(XB,74)*/
SIGNAL_MAPPING(DATA12,XB075_1_T,fastbus1.T81800.data[49],XB[74][0].T);/*,ZERO_SUPPRESS_ITEM(XB,74)*/
SIGNAL_MAPPING(DATA12,XB076_1_E,fastbus1.Q46848.data[55],XB[75][0].E);/*,ZERO_SUPPRESS_ITEM(XB,75)*/
SIGNAL_MAPPING(DATA12,XB076_1_T,fastbus1.T81800.data[51],XB[75][0].T);/*,ZERO_SUPPRESS_ITEM(XB,75)*/
SIGNAL_MAPPING(DATA12,XB078_1_E,fastbus1.Q46848.data[59],XB[77][0].E);/*,ZERO_SUPPRESS_ITEM(XB,77)*/
SIGNAL_MAPPING(DATA12,XB078_1_T,fastbus1.T81800.data[56],XB[77][0].T);/*,ZERO_SUPPRESS_ITEM(XB,77)*/
SIGNAL_MAPPING(DATA12,XB078_2_E,fastbus2.Q75266.data[8],XB[77][1].E);/*,ZERO_SUPPRESS_ITEM(XB,77)*/
SIGNAL_MAPPING(DATA12,XB079_1_E,fastbus1.Q46848.data[61],XB[78][0].E);/*,ZERO_SUPPRESS_ITEM(XB,78)*/
SIGNAL_MAPPING(DATA12,XB079_1_T,fastbus1.T81800.data[57],XB[78][0].T);/*,ZERO_SUPPRESS_ITEM(XB,78)*/
SIGNAL_MAPPING(DATA12,XB079_2_E,fastbus2.Q75266.data[17],XB[78][1].E);/*,ZERO_SUPPRESS_ITEM(XB,78)*/
SIGNAL_MAPPING(DATA12,XB080_1_E,fastbus1.Q46848.data[63],XB[79][0].E);/*,ZERO_SUPPRESS_ITEM(XB,79)*/
SIGNAL_MAPPING(DATA12,XB080_1_T,fastbus1.T81800.data[58],XB[79][0].T);/*,ZERO_SUPPRESS_ITEM(XB,79)*/
SIGNAL_MAPPING(DATA12,XB080_2_E,fastbus2.Q75266.data[16],XB[79][1].E);/*,ZERO_SUPPRESS_ITEM(XB,79)*/
SIGNAL_MAPPING(DATA12,XB083_1_E,fastbus1.Q11111.data[53],XB[82][0].E);/*,ZERO_SUPPRESS_ITEM(XB,82)*/
SIGNAL_MAPPING(DATA12,XB083_1_T,fastbus1.T87024.data[29],XB[82][0].T);/*,ZERO_SUPPRESS_ITEM(XB,82)*/
SIGNAL_MAPPING(DATA12,XB084_1_E,fastbus1.Q11111.data[55],XB[83][0].E);/*,ZERO_SUPPRESS_ITEM(XB,83)*/
SIGNAL_MAPPING(DATA12,XB084_1_T,fastbus1.T87024.data[31],XB[83][0].T);/*,ZERO_SUPPRESS_ITEM(XB,83)*/
SIGNAL_MAPPING(DATA12,XB085_1_E,fastbus1.Q11111.data[57],XB[84][0].E);/*,ZERO_SUPPRESS_ITEM(XB,84)*/
SIGNAL_MAPPING(DATA12,XB085_1_T,fastbus1.T87024.data[33],XB[84][0].T);/*,ZERO_SUPPRESS_ITEM(XB,84)*/
SIGNAL_MAPPING(DATA12,XB086_1_E,fastbus1.Q11111.data[59],XB[85][0].E);/*,ZERO_SUPPRESS_ITEM(XB,85)*/
SIGNAL_MAPPING(DATA12,XB086_1_T,fastbus1.T87024.data[35],XB[85][0].T);/*,ZERO_SUPPRESS_ITEM(XB,85)*/
SIGNAL_MAPPING(DATA12,XB087_1_E,fastbus1.Q11111.data[61],XB[86][0].E);/*,ZERO_SUPPRESS_ITEM(XB,86)*/
SIGNAL_MAPPING(DATA12,XB087_1_T,fastbus1.T87024.data[37],XB[86][0].T);/*,ZERO_SUPPRESS_ITEM(XB,86)*/
SIGNAL_MAPPING(DATA12,XB087_2_E,fastbus2.Q75266.data[47],XB[86][1].E);/*,ZERO_SUPPRESS_ITEM(XB,86)*/
SIGNAL_MAPPING(DATA12,XB088_1_E,fastbus1.Q11111.data[63],XB[87][0].E);/*,ZERO_SUPPRESS_ITEM(XB,87)*/
SIGNAL_MAPPING(DATA12,XB088_1_T,fastbus1.T87024.data[39],XB[87][0].T);/*,ZERO_SUPPRESS_ITEM(XB,87)*/
SIGNAL_MAPPING(DATA12,XB088_2_E,fastbus2.Q75266.data[55],XB[87][1].E);/*,ZERO_SUPPRESS_ITEM(XB,87)*/
SIGNAL_MAPPING(DATA12,XB089_1_E,fastbus1.Q47342.data[16],XB[88][0].E);/*,ZERO_SUPPRESS_ITEM(XB,88)*/
SIGNAL_MAPPING(DATA12,XB089_1_T,fastbus1.T87044.data[24],XB[88][0].T);/*,ZERO_SUPPRESS_ITEM(XB,88)*/
SIGNAL_MAPPING(DATA12,XB089_2_E,fastbus2.Q75266.data[54],XB[88][1].E);/*,ZERO_SUPPRESS_ITEM(XB,88)*/
SIGNAL_MAPPING(DATA12,XB090_1_E,fastbus1.Q47342.data[18],XB[89][0].E);/*,ZERO_SUPPRESS_ITEM(XB,89)*/
SIGNAL_MAPPING(DATA12,XB090_1_T,fastbus1.T87044.data[26],XB[89][0].T);/*,ZERO_SUPPRESS_ITEM(XB,89)*/
SIGNAL_MAPPING(DATA12,XB090_2_E,fastbus2.Q75266.data[46],XB[89][1].E);/*,ZERO_SUPPRESS_ITEM(XB,89)*/
SIGNAL_MAPPING(DATA12,XB091_1_E,fastbus1.Q47342.data[20],XB[90][0].E);/*,ZERO_SUPPRESS_ITEM(XB,90)*/
SIGNAL_MAPPING(DATA12,XB091_1_T,fastbus1.T87044.data[28],XB[90][0].T);/*,ZERO_SUPPRESS_ITEM(XB,90)*/
SIGNAL_MAPPING(DATA12,XB091_2_E,fastbus2.Q75266.data[39],XB[90][1].E);/*,ZERO_SUPPRESS_ITEM(XB,90)*/
SIGNAL_MAPPING(DATA12,XB092_1_E,fastbus1.Q47342.data[22],XB[91][0].E);/*,ZERO_SUPPRESS_ITEM(XB,91)*/
SIGNAL_MAPPING(DATA12,XB092_1_T,fastbus1.T87044.data[30],XB[91][0].T);/*,ZERO_SUPPRESS_ITEM(XB,91)*/
SIGNAL_MAPPING(DATA12,XB092_2_E,fastbus2.Q75266.data[45],XB[91][1].E);/*,ZERO_SUPPRESS_ITEM(XB,91)*/
SIGNAL_MAPPING(DATA12,XB093_1_E,fastbus1.Q47342.data[24],XB[92][0].E);/*,ZERO_SUPPRESS_ITEM(XB,92)*/
SIGNAL_MAPPING(DATA12,XB093_1_T,fastbus1.T87044.data[40],XB[92][0].T);/*,ZERO_SUPPRESS_ITEM(XB,92)*/
SIGNAL_MAPPING(DATA12,XB093_2_E,fastbus2.Q75266.data[38],XB[92][1].E);/*,ZERO_SUPPRESS_ITEM(XB,92)*/
SIGNAL_MAPPING(DATA12,XB094_1_E,fastbus1.Q47342.data[26],XB[93][0].E);/*,ZERO_SUPPRESS_ITEM(XB,93)*/
SIGNAL_MAPPING(DATA12,XB094_1_T,fastbus1.T87044.data[42],XB[93][0].T);/*,ZERO_SUPPRESS_ITEM(XB,93)*/
SIGNAL_MAPPING(DATA12,XB094_2_E,fastbus2.Q75266.data[44],XB[93][1].E);/*,ZERO_SUPPRESS_ITEM(XB,93)*/
SIGNAL_MAPPING(DATA12,XB095_1_E,fastbus1.Q47342.data[28],XB[94][0].E);/*,ZERO_SUPPRESS_ITEM(XB,94)*/
SIGNAL_MAPPING(DATA12,XB095_1_T,fastbus1.T87044.data[44],XB[94][0].T);/*,ZERO_SUPPRESS_ITEM(XB,94)*/
SIGNAL_MAPPING(DATA12,XB095_2_E,fastbus2.Q75266.data[37],XB[94][1].E);/*,ZERO_SUPPRESS_ITEM(XB,94)*/
SIGNAL_MAPPING(DATA12,XB096_1_E,fastbus1.Q47342.data[30],XB[95][0].E);/*,ZERO_SUPPRESS_ITEM(XB,95)*/
SIGNAL_MAPPING(DATA12,XB096_1_T,fastbus1.T87044.data[46],XB[95][0].T);/*,ZERO_SUPPRESS_ITEM(XB,95)*/
SIGNAL_MAPPING(DATA12,XB097_1_E,fastbus1.Q47342.data[48],XB[96][0].E);/*,ZERO_SUPPRESS_ITEM(XB,96)*/
SIGNAL_MAPPING(DATA12,XB097_1_T,fastbus1.T87024.data[16],XB[96][0].T);/*,ZERO_SUPPRESS_ITEM(XB,96)*/
SIGNAL_MAPPING(DATA12,XB098_1_E,fastbus1.Q47342.data[50],XB[97][0].E);/*,ZERO_SUPPRESS_ITEM(XB,97)*/
SIGNAL_MAPPING(DATA12,XB098_1_T,fastbus1.T87024.data[18],XB[97][0].T);/*,ZERO_SUPPRESS_ITEM(XB,97)*/
SIGNAL_MAPPING(DATA12,XB099_1_E,fastbus1.Q47342.data[52],XB[98][0].E);/*,ZERO_SUPPRESS_ITEM(XB,98)*/
SIGNAL_MAPPING(DATA12,XB099_1_T,fastbus1.T87024.data[20],XB[98][0].T);/*,ZERO_SUPPRESS_ITEM(XB,98)*/
SIGNAL_MAPPING(DATA12,XB100_1_E,fastbus1.Q47342.data[54],XB[99][0].E);/*,ZERO_SUPPRESS_ITEM(XB,99)*/
SIGNAL_MAPPING(DATA12,XB100_1_T,fastbus1.T87024.data[22],XB[99][0].T);/*,ZERO_SUPPRESS_ITEM(XB,99)*/
SIGNAL_MAPPING(DATA12,XB101_1_E,fastbus1.Q47342.data[56],XB[100][0].E);/*,ZERO_SUPPRESS_ITEM(XB,100)*/
SIGNAL_MAPPING(DATA12,XB101_1_T,fastbus1.T81800.data[16],XB[100][0].T);/*,ZERO_SUPPRESS_ITEM(XB,100)*/
SIGNAL_MAPPING(DATA12,XB102_1_E,fastbus1.Q47342.data[58],XB[101][0].E);/*,ZERO_SUPPRESS_ITEM(XB,101)*/
SIGNAL_MAPPING(DATA12,XB102_1_T,fastbus1.T81800.data[18],XB[101][0].T);/*,ZERO_SUPPRESS_ITEM(XB,101)*/
SIGNAL_MAPPING(DATA12,XB103_1_E,fastbus1.Q47342.data[60],XB[102][0].E);/*,ZERO_SUPPRESS_ITEM(XB,102)*/
SIGNAL_MAPPING(DATA12,XB103_1_T,fastbus1.T81800.data[20],XB[102][0].T);/*,ZERO_SUPPRESS_ITEM(XB,102)*/
SIGNAL_MAPPING(DATA12,XB104_1_E,fastbus1.Q47342.data[62],XB[103][0].E);/*,ZERO_SUPPRESS_ITEM(XB,103)*/
SIGNAL_MAPPING(DATA12,XB104_1_T,fastbus1.T81800.data[22],XB[103][0].T);/*,ZERO_SUPPRESS_ITEM(XB,103)*/
SIGNAL_MAPPING(DATA12,XB105_1_E,fastbus1.Q47342.data[33],XB[104][0].E);/*,ZERO_SUPPRESS_ITEM(XB,104)*/
SIGNAL_MAPPING(DATA12,XB105_1_T,fastbus1.T87044.data[17],XB[104][0].T);/*,ZERO_SUPPRESS_ITEM(XB,104)*/
SIGNAL_MAPPING(DATA12,XB106_1_E,fastbus1.Q47342.data[35],XB[105][0].E);/*,ZERO_SUPPRESS_ITEM(XB,105)*/
SIGNAL_MAPPING(DATA12,XB106_1_T,fastbus1.T87044.data[19],XB[105][0].T);/*,ZERO_SUPPRESS_ITEM(XB,105)*/
SIGNAL_MAPPING(DATA12,XB107_1_E,fastbus1.Q47342.data[37],XB[106][0].E);/*,ZERO_SUPPRESS_ITEM(XB,106)*/
SIGNAL_MAPPING(DATA12,XB107_1_T,fastbus1.T87044.data[21],XB[106][0].T);/*,ZERO_SUPPRESS_ITEM(XB,106)*/
SIGNAL_MAPPING(DATA12,XB108_1_E,fastbus1.Q47342.data[39],XB[107][0].E);/*,ZERO_SUPPRESS_ITEM(XB,107)*/
SIGNAL_MAPPING(DATA12,XB108_1_T,fastbus1.T87044.data[23],XB[107][0].T);/*,ZERO_SUPPRESS_ITEM(XB,107)*/
SIGNAL_MAPPING(DATA12,XB109_1_E,fastbus1.Q47342.data[41],XB[108][0].E);/*,ZERO_SUPPRESS_ITEM(XB,108)*/
SIGNAL_MAPPING(DATA12,XB109_1_T,fastbus1.T81800.data[1],XB[108][0].T);/*,ZERO_SUPPRESS_ITEM(XB,108)*/
SIGNAL_MAPPING(DATA12,XB109_2_E,fastbus2.Q75266.data[63],XB[108][1].E);/*,ZERO_SUPPRESS_ITEM(XB,108)*/
SIGNAL_MAPPING(DATA12,XB110_1_E,fastbus1.Q47342.data[43],XB[109][0].E);/*,ZERO_SUPPRESS_ITEM(XB,109)*/
SIGNAL_MAPPING(DATA12,XB110_1_T,fastbus1.T81800.data[3],XB[109][0].T);/*,ZERO_SUPPRESS_ITEM(XB,109)*/
SIGNAL_MAPPING(DATA12,XB110_2_E,fastbus2.Q75266.data[43],XB[109][1].E);/*,ZERO_SUPPRESS_ITEM(XB,109)*/
SIGNAL_MAPPING(DATA12,XB111_1_E,fastbus1.Q47342.data[45],XB[110][0].E);/*,ZERO_SUPPRESS_ITEM(XB,110)*/
SIGNAL_MAPPING(DATA12,XB111_1_T,fastbus1.T81800.data[5],XB[110][0].T);/*,ZERO_SUPPRESS_ITEM(XB,110)*/
SIGNAL_MAPPING(DATA12,XB111_2_E,fastbus2.Q75266.data[62],XB[110][1].E);/*,ZERO_SUPPRESS_ITEM(XB,110)*/
SIGNAL_MAPPING(DATA12,XB112_1_E,fastbus1.Q47342.data[47],XB[111][0].E);/*,ZERO_SUPPRESS_ITEM(XB,111)*/
SIGNAL_MAPPING(DATA12,XB112_1_T,fastbus1.T81800.data[7],XB[111][0].T);/*,ZERO_SUPPRESS_ITEM(XB,111)*/
SIGNAL_MAPPING(DATA12,XB112_2_E,fastbus2.Q75266.data[53],XB[111][1].E);/*,ZERO_SUPPRESS_ITEM(XB,111)*/
SIGNAL_MAPPING(DATA12,XB113_1_E,fastbus1.Q47342.data[65],XB[112][0].E);/*,ZERO_SUPPRESS_ITEM(XB,112)*/
SIGNAL_MAPPING(DATA12,XB113_1_T,fastbus1.T87024.data[1],XB[112][0].T);/*,ZERO_SUPPRESS_ITEM(XB,112)*/
SIGNAL_MAPPING(DATA12,XB113_2_E,fastbus2.Q75266.data[42],XB[112][1].E);/*,ZERO_SUPPRESS_ITEM(XB,112)*/
SIGNAL_MAPPING(DATA12,XB114_1_E,fastbus1.Q47342.data[67],XB[113][0].E);/*,ZERO_SUPPRESS_ITEM(XB,113)*/
SIGNAL_MAPPING(DATA12,XB114_1_T,fastbus1.T87024.data[3],XB[113][0].T);/*,ZERO_SUPPRESS_ITEM(XB,113)*/
SIGNAL_MAPPING(DATA12,XB114_2_E,fastbus2.Q75266.data[61],XB[113][1].E);/*,ZERO_SUPPRESS_ITEM(XB,113)*/
SIGNAL_MAPPING(DATA12,XB115_1_E,fastbus1.Q47342.data[69],XB[114][0].E);/*,ZERO_SUPPRESS_ITEM(XB,114)*/
SIGNAL_MAPPING(DATA12,XB115_1_T,fastbus1.T87024.data[5],XB[114][0].T);/*,ZERO_SUPPRESS_ITEM(XB,114)*/
SIGNAL_MAPPING(DATA12,XB115_2_E,fastbus2.Q75266.data[60],XB[114][1].E);/*,ZERO_SUPPRESS_ITEM(XB,114)*/
SIGNAL_MAPPING(DATA12,XB116_1_E,fastbus1.Q47342.data[71],XB[115][0].E);/*,ZERO_SUPPRESS_ITEM(XB,115)*/
SIGNAL_MAPPING(DATA12,XB116_1_T,fastbus1.T87024.data[7],XB[115][0].T);/*,ZERO_SUPPRESS_ITEM(XB,115)*/
SIGNAL_MAPPING(DATA12,XB116_2_E,fastbus2.Q75266.data[52],XB[115][1].E);/*,ZERO_SUPPRESS_ITEM(XB,115)*/
SIGNAL_MAPPING(DATA12,XB117_1_E,fastbus1.Q47342.data[73],XB[116][0].E);/*,ZERO_SUPPRESS_ITEM(XB,116)*/
SIGNAL_MAPPING(DATA12,XB117_1_T,fastbus1.T87024.data[9],XB[116][0].T);/*,ZERO_SUPPRESS_ITEM(XB,116)*/
SIGNAL_MAPPING(DATA12,XB118_1_E,fastbus1.Q47342.data[75],XB[117][0].E);/*,ZERO_SUPPRESS_ITEM(XB,117)*/
SIGNAL_MAPPING(DATA12,XB118_1_T,fastbus1.T87024.data[11],XB[117][0].T);/*,ZERO_SUPPRESS_ITEM(XB,117)*/
SIGNAL_MAPPING(DATA12,XB119_1_E,fastbus1.Q47342.data[77],XB[118][0].E);/*,ZERO_SUPPRESS_ITEM(XB,118)*/
SIGNAL_MAPPING(DATA12,XB119_1_T,fastbus1.T87024.data[13],XB[118][0].T);/*,ZERO_SUPPRESS_ITEM(XB,118)*/
SIGNAL_MAPPING(DATA12,XB120_1_E,fastbus1.Q47342.data[79],XB[119][0].E);/*,ZERO_SUPPRESS_ITEM(XB,119)*/
SIGNAL_MAPPING(DATA12,XB120_1_T,fastbus1.T87024.data[15],XB[119][0].T);/*,ZERO_SUPPRESS_ITEM(XB,119)*/
SIGNAL_MAPPING(DATA12,XB121_1_E,fastbus1.Q47342.data[17],XB[120][0].E);/*,ZERO_SUPPRESS_ITEM(XB,120)*/
SIGNAL_MAPPING(DATA12,XB121_1_T,fastbus1.T87044.data[25],XB[120][0].T);/*,ZERO_SUPPRESS_ITEM(XB,120)*/
SIGNAL_MAPPING(DATA12,XB122_1_E,fastbus1.Q47342.data[19],XB[121][0].E);/*,ZERO_SUPPRESS_ITEM(XB,121)*/
SIGNAL_MAPPING(DATA12,XB122_1_T,fastbus1.T87044.data[27],XB[121][0].T);/*,ZERO_SUPPRESS_ITEM(XB,121)*/
SIGNAL_MAPPING(DATA12,XB123_1_E,fastbus1.Q47342.data[21],XB[122][0].E);/*,ZERO_SUPPRESS_ITEM(XB,122)*/
SIGNAL_MAPPING(DATA12,XB123_1_T,fastbus1.T87044.data[29],XB[122][0].T);/*,ZERO_SUPPRESS_ITEM(XB,122)*/
SIGNAL_MAPPING(DATA12,XB124_1_E,fastbus1.Q47342.data[23],XB[123][0].E);/*,ZERO_SUPPRESS_ITEM(XB,123)*/
SIGNAL_MAPPING(DATA12,XB124_1_T,fastbus1.T87044.data[31],XB[123][0].T);/*,ZERO_SUPPRESS_ITEM(XB,123)*/
SIGNAL_MAPPING(DATA12,XB125_1_E,fastbus1.Q47342.data[25],XB[124][0].E);/*,ZERO_SUPPRESS_ITEM(XB,124)*/
SIGNAL_MAPPING(DATA12,XB125_1_T,fastbus1.T87044.data[41],XB[124][0].T);/*,ZERO_SUPPRESS_ITEM(XB,124)*/
SIGNAL_MAPPING(DATA12,XB126_1_E,fastbus1.Q47342.data[27],XB[125][0].E);/*,ZERO_SUPPRESS_ITEM(XB,125)*/
SIGNAL_MAPPING(DATA12,XB126_1_T,fastbus1.T87044.data[43],XB[125][0].T);/*,ZERO_SUPPRESS_ITEM(XB,125)*/
SIGNAL_MAPPING(DATA12,XB126_2_E,fastbus2.Q75266.data[36],XB[125][1].E);/*,ZERO_SUPPRESS_ITEM(XB,125)*/
SIGNAL_MAPPING(DATA12,XB127_1_E,fastbus1.Q47342.data[29],XB[126][0].E);/*,ZERO_SUPPRESS_ITEM(XB,126)*/
SIGNAL_MAPPING(DATA12,XB127_1_T,fastbus1.T87044.data[45],XB[126][0].T);/*,ZERO_SUPPRESS_ITEM(XB,126)*/
SIGNAL_MAPPING(DATA12,XB127_2_E,fastbus2.Q75266.data[51],XB[126][1].E);/*,ZERO_SUPPRESS_ITEM(XB,126)*/
SIGNAL_MAPPING(DATA12,XB128_1_E,fastbus1.Q47342.data[31],XB[127][0].E);/*,ZERO_SUPPRESS_ITEM(XB,127)*/
SIGNAL_MAPPING(DATA12,XB128_1_T,fastbus1.T87044.data[47],XB[127][0].T);/*,ZERO_SUPPRESS_ITEM(XB,127)*/
SIGNAL_MAPPING(DATA12,XB128_2_E,fastbus2.Q75266.data[41],XB[127][1].E);/*,ZERO_SUPPRESS_ITEM(XB,127)*/
SIGNAL_MAPPING(DATA12,XB129_1_E,fastbus1.Q46848.data[48],XB[128][0].E);/*,ZERO_SUPPRESS_ITEM(XB,128)*/
SIGNAL_MAPPING(DATA12,XB129_1_T,fastbus1.T81800.data[60],XB[128][0].T);/*,ZERO_SUPPRESS_ITEM(XB,128)*/
SIGNAL_MAPPING(DATA12,XB129_2_E,fastbus2.Q75266.data[59],XB[128][1].E);/*,ZERO_SUPPRESS_ITEM(XB,128)*/
SIGNAL_MAPPING(DATA12,XB130_1_E,fastbus1.Q46848.data[50],XB[129][0].E);/*,ZERO_SUPPRESS_ITEM(XB,129)*/
SIGNAL_MAPPING(DATA12,XB130_1_T,fastbus1.T81800.data[62],XB[129][0].T);/*,ZERO_SUPPRESS_ITEM(XB,129)*/
SIGNAL_MAPPING(DATA12,XB130_2_E,fastbus2.Q75266.data[35],XB[129][1].E);/*,ZERO_SUPPRESS_ITEM(XB,129)*/
SIGNAL_MAPPING(DATA12,XB131_1_E,fastbus1.Q46848.data[52],XB[130][0].E);/*,ZERO_SUPPRESS_ITEM(XB,130)*/
SIGNAL_MAPPING(DATA12,XB131_1_T,fastbus1.T81800.data[48],XB[130][0].T);/*,ZERO_SUPPRESS_ITEM(XB,130)*/
SIGNAL_MAPPING(DATA12,XB131_2_E,fastbus2.Q75266.data[40],XB[130][1].E);/*,ZERO_SUPPRESS_ITEM(XB,130)*/
SIGNAL_MAPPING(DATA12,XB132_1_E,fastbus1.Q46848.data[54],XB[131][0].E);/*,ZERO_SUPPRESS_ITEM(XB,131)*/
SIGNAL_MAPPING(DATA12,XB132_1_T,fastbus1.T81800.data[50],XB[131][0].T);/*,ZERO_SUPPRESS_ITEM(XB,131)*/
SIGNAL_MAPPING(DATA12,XB132_2_E,fastbus2.Q75266.data[64],XB[131][1].E);/*,ZERO_SUPPRESS_ITEM(XB,131)*/
SIGNAL_MAPPING(DATA12,XB133_1_E,fastbus1.Q46848.data[56],XB[132][0].E);/*,ZERO_SUPPRESS_ITEM(XB,132)*/
SIGNAL_MAPPING(DATA12,XB133_1_T,fastbus1.T81800.data[61],XB[132][0].T);/*,ZERO_SUPPRESS_ITEM(XB,132)*/
SIGNAL_MAPPING(DATA12,XB134_1_E,fastbus1.Q46848.data[58],XB[133][0].E);/*,ZERO_SUPPRESS_ITEM(XB,133)*/
SIGNAL_MAPPING(DATA12,XB134_1_T,fastbus1.T81800.data[53],XB[133][0].T);/*,ZERO_SUPPRESS_ITEM(XB,133)*/
SIGNAL_MAPPING(DATA12,XB135_1_E,fastbus1.Q46848.data[60],XB[134][0].E);/*,ZERO_SUPPRESS_ITEM(XB,134)*/
SIGNAL_MAPPING(DATA12,XB135_1_T,fastbus1.T81800.data[55],XB[134][0].T);/*,ZERO_SUPPRESS_ITEM(XB,134)*/
SIGNAL_MAPPING(DATA12,XB136_1_E,fastbus1.Q46848.data[62],XB[135][0].E);/*,ZERO_SUPPRESS_ITEM(XB,135)*/
SIGNAL_MAPPING(DATA12,XB136_1_T,fastbus1.T81800.data[54],XB[135][0].T);/*,ZERO_SUPPRESS_ITEM(XB,135)*/
SIGNAL_MAPPING(DATA12,XB137_1_E,fastbus1.Q11111.data[65],XB[136][0].E);/*,ZERO_SUPPRESS_ITEM(XB,136)*/
SIGNAL_MAPPING(DATA12,XB137_1_T,fastbus1.T81800.data[41],XB[136][0].T);/*,ZERO_SUPPRESS_ITEM(XB,136)*/
SIGNAL_MAPPING(DATA12,XB138_1_E,fastbus1.Q11111.data[67],XB[137][0].E);/*,ZERO_SUPPRESS_ITEM(XB,137)*/
SIGNAL_MAPPING(DATA12,XB138_1_T,fastbus1.T81800.data[43],XB[137][0].T);/*,ZERO_SUPPRESS_ITEM(XB,137)*/
SIGNAL_MAPPING(DATA12,XB139_1_E,fastbus1.Q11111.data[69],XB[138][0].E);/*,ZERO_SUPPRESS_ITEM(XB,138)*/
SIGNAL_MAPPING(DATA12,XB139_1_T,fastbus1.T81800.data[45],XB[138][0].T);/*,ZERO_SUPPRESS_ITEM(XB,138)*/
SIGNAL_MAPPING(DATA12,XB140_1_E,fastbus1.Q11111.data[71],XB[139][0].E);/*,ZERO_SUPPRESS_ITEM(XB,139)*/
SIGNAL_MAPPING(DATA12,XB140_1_T,fastbus1.T81800.data[47],XB[139][0].T);/*,ZERO_SUPPRESS_ITEM(XB,139)*/
SIGNAL_MAPPING(DATA12,XB141_1_E,fastbus1.Q11111.data[73],XB[140][0].E);/*,ZERO_SUPPRESS_ITEM(XB,140)*/
SIGNAL_MAPPING(DATA12,XB141_1_T,fastbus1.T87024.data[41],XB[140][0].T);/*,ZERO_SUPPRESS_ITEM(XB,140)*/
SIGNAL_MAPPING(DATA12,XB142_1_E,fastbus1.Q11111.data[75],XB[141][0].E);/*,ZERO_SUPPRESS_ITEM(XB,141)*/
SIGNAL_MAPPING(DATA12,XB142_1_T,fastbus1.T87024.data[43],XB[141][0].T);/*,ZERO_SUPPRESS_ITEM(XB,141)*/
SIGNAL_MAPPING(DATA12,XB143_1_E,fastbus1.Q11111.data[77],XB[142][0].E);/*,ZERO_SUPPRESS_ITEM(XB,142)*/
SIGNAL_MAPPING(DATA12,XB143_1_T,fastbus1.T87024.data[45],XB[142][0].T);/*,ZERO_SUPPRESS_ITEM(XB,142)*/
SIGNAL_MAPPING(DATA12,XB143_2_E,fastbus2.Q75266.data[58],XB[142][1].E);/*,ZERO_SUPPRESS_ITEM(XB,142)*/
SIGNAL_MAPPING(DATA12,XB144_1_E,fastbus1.Q11111.data[79],XB[143][0].E);/*,ZERO_SUPPRESS_ITEM(XB,143)*/
SIGNAL_MAPPING(DATA12,XB144_1_T,fastbus1.T87024.data[47],XB[143][0].T);/*,ZERO_SUPPRESS_ITEM(XB,143)*/
SIGNAL_MAPPING(DATA12,XB144_2_E,fastbus2.Q75266.data[33],XB[143][1].E);/*,ZERO_SUPPRESS_ITEM(XB,143)*/
SIGNAL_MAPPING(DATA12,XB145_1_E,fastbus1.Q47342.data[32],XB[144][0].E);/*,ZERO_SUPPRESS_ITEM(XB,144)*/
SIGNAL_MAPPING(DATA12,XB145_1_T,fastbus1.T87044.data[16],XB[144][0].T);/*,ZERO_SUPPRESS_ITEM(XB,144)*/
SIGNAL_MAPPING(DATA12,XB145_2_E,fastbus2.Q75266.data[50],XB[144][1].E);/*,ZERO_SUPPRESS_ITEM(XB,144)*/
SIGNAL_MAPPING(DATA12,XB146_1_E,fastbus1.Q47342.data[34],XB[145][0].E);/*,ZERO_SUPPRESS_ITEM(XB,145)*/
SIGNAL_MAPPING(DATA12,XB146_1_T,fastbus1.T87044.data[18],XB[145][0].T);/*,ZERO_SUPPRESS_ITEM(XB,145)*/
SIGNAL_MAPPING(DATA12,XB146_2_E,fastbus2.Q75266.data[57],XB[145][1].E);/*,ZERO_SUPPRESS_ITEM(XB,145)*/
SIGNAL_MAPPING(DATA12,XB147_1_E,fastbus1.Q47342.data[36],XB[146][0].E);/*,ZERO_SUPPRESS_ITEM(XB,146)*/
SIGNAL_MAPPING(DATA12,XB147_1_T,fastbus1.T87044.data[20],XB[146][0].T);/*,ZERO_SUPPRESS_ITEM(XB,146)*/
SIGNAL_MAPPING(DATA12,XB147_2_E,fastbus2.Q75266.data[49],XB[146][1].E);/*,ZERO_SUPPRESS_ITEM(XB,146)*/
SIGNAL_MAPPING(DATA12,XB148_1_E,fastbus1.Q47342.data[38],XB[147][0].E);/*,ZERO_SUPPRESS_ITEM(XB,147)*/
SIGNAL_MAPPING(DATA12,XB148_1_T,fastbus1.T87044.data[22],XB[147][0].T);/*,ZERO_SUPPRESS_ITEM(XB,147)*/
SIGNAL_MAPPING(DATA12,XB149_1_E,fastbus1.Q47342.data[40],XB[148][0].E);/*,ZERO_SUPPRESS_ITEM(XB,148)*/
SIGNAL_MAPPING(DATA12,XB149_1_T,fastbus1.T81800.data[0],XB[148][0].T);/*,ZERO_SUPPRESS_ITEM(XB,148)*/
SIGNAL_MAPPING(DATA12,XB150_1_E,fastbus1.Q47342.data[42],XB[149][0].E);/*,ZERO_SUPPRESS_ITEM(XB,149)*/
SIGNAL_MAPPING(DATA12,XB150_1_T,fastbus1.T81800.data[2],XB[149][0].T);/*,ZERO_SUPPRESS_ITEM(XB,149)*/
SIGNAL_MAPPING(DATA12,XB151_1_E,fastbus1.Q47342.data[44],XB[150][0].E);/*,ZERO_SUPPRESS_ITEM(XB,150)*/
SIGNAL_MAPPING(DATA12,XB151_1_T,fastbus1.T81800.data[4],XB[150][0].T);/*,ZERO_SUPPRESS_ITEM(XB,150)*/
SIGNAL_MAPPING(DATA12,XB152_1_E,fastbus1.Q47342.data[46],XB[151][0].E);/*,ZERO_SUPPRESS_ITEM(XB,151)*/
SIGNAL_MAPPING(DATA12,XB152_1_T,fastbus1.T81800.data[6],XB[151][0].T);/*,ZERO_SUPPRESS_ITEM(XB,151)*/
SIGNAL_MAPPING(DATA12,XB153_1_E,fastbus1.Q47342.data[49],XB[152][0].E);/*,ZERO_SUPPRESS_ITEM(XB,152)*/
SIGNAL_MAPPING(DATA12,XB153_1_T,fastbus1.T87024.data[17],XB[152][0].T);/*,ZERO_SUPPRESS_ITEM(XB,152)*/
SIGNAL_MAPPING(DATA12,XB154_1_E,fastbus1.Q47342.data[51],XB[153][0].E);/*,ZERO_SUPPRESS_ITEM(XB,153)*/
SIGNAL_MAPPING(DATA12,XB154_1_T,fastbus1.T87024.data[19],XB[153][0].T);/*,ZERO_SUPPRESS_ITEM(XB,153)*/
SIGNAL_MAPPING(DATA12,XB155_1_E,fastbus1.Q47342.data[53],XB[154][0].E);/*,ZERO_SUPPRESS_ITEM(XB,154)*/
SIGNAL_MAPPING(DATA12,XB155_1_T,fastbus1.T87024.data[21],XB[154][0].T);/*,ZERO_SUPPRESS_ITEM(XB,154)*/
SIGNAL_MAPPING(DATA12,XB155_2_E,fastbus2.Q75266.data[48],XB[154][1].E);/*,ZERO_SUPPRESS_ITEM(XB,154)*/
SIGNAL_MAPPING(DATA12,XB156_1_E,fastbus1.Q47342.data[55],XB[155][0].E);/*,ZERO_SUPPRESS_ITEM(XB,155)*/
SIGNAL_MAPPING(DATA12,XB156_1_T,fastbus1.T87024.data[23],XB[155][0].T);/*,ZERO_SUPPRESS_ITEM(XB,155)*/
SIGNAL_MAPPING(DATA12,XB156_2_E,fastbus2.Q75266.data[56],XB[155][1].E);/*,ZERO_SUPPRESS_ITEM(XB,155)*/
SIGNAL_MAPPING(DATA12,XB157_1_E,fastbus1.Q47342.data[57],XB[156][0].E);/*,ZERO_SUPPRESS_ITEM(XB,156)*/
SIGNAL_MAPPING(DATA12,XB157_1_T,fastbus1.T81800.data[17],XB[156][0].T);/*,ZERO_SUPPRESS_ITEM(XB,156)*/
SIGNAL_MAPPING(DATA12,XB157_2_E,fastbus2.Q75266.data[32],XB[156][1].E);/*,ZERO_SUPPRESS_ITEM(XB,156)*/
SIGNAL_MAPPING(DATA12,XB158_1_E,fastbus1.Q47342.data[59],XB[157][0].E);/*,ZERO_SUPPRESS_ITEM(XB,157)*/
SIGNAL_MAPPING(DATA12,XB158_1_T,fastbus1.T81800.data[19],XB[157][0].T);/*,ZERO_SUPPRESS_ITEM(XB,157)*/
SIGNAL_MAPPING(DATA12,XB159_1_E,fastbus1.Q47342.data[61],XB[158][0].E);/*,ZERO_SUPPRESS_ITEM(XB,158)*/
SIGNAL_MAPPING(DATA12,XB159_1_T,fastbus1.T81800.data[21],XB[158][0].T);/*,ZERO_SUPPRESS_ITEM(XB,158)*/
SIGNAL_MAPPING(DATA12,XB160_1_E,fastbus1.Q47342.data[63],XB[159][0].E);/*,ZERO_SUPPRESS_ITEM(XB,159)*/
SIGNAL_MAPPING(DATA12,XB160_1_T,fastbus1.T81800.data[23],XB[159][0].T);/*,ZERO_SUPPRESS_ITEM(XB,159)*/
SIGNAL_MAPPING(DATA12,XB161_1_E,fastbus1.Q11111.data[49],XB[160][0].E);/*,ZERO_SUPPRESS_ITEM(XB,160)*/
SIGNAL_MAPPING(DATA12,XB161_1_T,fastbus1.T87024.data[25],XB[160][0].T);/*,ZERO_SUPPRESS_ITEM(XB,160)*/
SIGNAL_MAPPING(DATA12,XB162_1_E,fastbus1.Q11111.data[51],XB[161][0].E);/*,ZERO_SUPPRESS_ITEM(XB,161)*/
SIGNAL_MAPPING(DATA12,XB162_1_T,fastbus1.T87024.data[27],XB[161][0].T);/*,ZERO_SUPPRESS_ITEM(XB,161)*/
SIGNAL_MAPPING(DATA12,XBSUM_1_E,camac.qSIA0458.data[7],XBSUM[0].E);

/** END_EVENT_DATA_MAPPING ********************************************/


/** BEGIN_EVENT_DATA_MAPPING *******************************************
 *
 * Event data mapping.
 *
 * Do not edit - automatically generated.
 */

// The order in this file does not matter.
// This information parsed once and not treated eventwise,
// it is used to initialize a structure.


/** END_EVENT_DATA_MAPPING ********************************************/

/**********************************************************/

/** BEGIN_LOCATIONS ****************************************************
 *
 * File and line locations from the parsed specification files.
 *
 * Do not edit - automatically generated.
 */

// It's left to the compiler to only store one copy of each
// unique string.

location spec_locations[] =
{ 
  { 2, 1, "gen_s296/reparse.uce" },
  { 3, 1, "<built-in>" },
  { 4, 1, "<command-line>" },
  { 5, 1, "/usr/include/stdc-predef.h" },
  { 6, 1, "<command-line>" },
  { 7, 1, "gen_s296/reparse.uce" },
  { 8, 12, "gen_s296/reparse.uce" },
  { 1038, 1050, "gen_s296/reparse.uce" },
};

/** END_LOCATIONS *****************************************************/

