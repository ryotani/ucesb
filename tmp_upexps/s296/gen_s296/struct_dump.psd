
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

class CAMAC_LECROY_2277_1CH_HACK
{
  raw_list_ii_zero_suppress<DATA16,DATA16,16> data;
} ;
class CAMAC_LECROY_4434
{
  raw_array_zero_suppress<DATA24,DATA24,32> data;
} ;
class CAMAC_PHILLIPS_7164
{
  raw_array_zero_suppress<DATA12,DATA12,16> data;
} ;
class CAMAC_SILENA_4418
{
  raw_array_zero_suppress<DATA12_OVERFLOW,DATA12_OVERFLOW,8> data;
} ;
class CROS3_REWRITE
{
  raw_array_zero_suppress<WIRE_START_END,WIRE_START_END,32768> data;
  union 
  {
    struct 
    {
      uint32 data_size : 16;
      uint32 threshold_curve : 1;
      uint32 leading_edge : 1;
      uint32 data : 1;
      uint32 dummy_19 : 1;
      uint32 trigger_time : 4;
      uint32 ccb_id : 4;
      uint32 event_counter : 4;
    } ;
    uint32 u32;
  } h1;
  union 
  {
    struct 
    {
      uint32 read_out_mode : 2;
      uint32 dummy_2_3 : 2;
      uint32 pulser_enabled : 1;
      uint32 dummy_5_7 : 3;
      uint32 statistics : 3;
      uint32 both_edges : 1;
      uint32 slices : 8;
      uint32 scale : 2;
      uint32 dummy_22_30 : 9;
      uint32 odd_length16 : 1;
    } ;
    uint32 u32;
  } h2;
  union 
  {
    struct 
    {
      uint32 read_out_mode : 2;
      uint32 dummy_2_3 : 2;
      uint32 pulser_enabled : 1;
      uint32 dummy_5_7 : 3;
      uint32 statistics : 3;
      uint32 both_edges : 1;
      uint32 threshold_start : 8;
      uint32 threshold_step : 4;
      uint32 boards : 5;
      uint32 dummy_29_31 : 3;
    } ;
    uint32 u32;
  } trc_h2;
} ;
class DUMMY_WORD
{
  uint32 dummy_word;
} ;
class FASTBUS_LECROY_1875
{
  raw_array_zero_suppress<DATA12_RANGE,DATA12_RANGE,64> data;
} ;
class FASTBUS_LECROY_1885
{
  raw_array_zero_suppress<DATA12_RANGE,DATA12_RANGE,96> data;
} ;
class LAND_STD_VME
{
  union 
  {
    struct 
    {
      uint32 fail_general : 1;
      uint32 fail_data_corrupt : 1;
      uint32 fail_data_missing : 1;
      uint32 fail_data_too_much : 1;
      uint32 fail_event_counter_mismatch : 1;
      uint32 fail_readout_error_driver : 1;
      uint32 fail_unexpected_trigger : 1;
      uint32 fail_firmware_mismatch : 1;
      uint32 dummy_8_21 : 14;
      uint32 has_multi_trlo_ii_counter0 : 1;
      uint32 has_clock_counter_stamp : 1;
      uint32 has_continous_event_counter : 1;
      uint32 has_update_qdc_iped_value : 1;
      uint32 spurious_start_before_tcal : 1;
      uint32 has_no_zero_suppression : 1;
      uint32 has_multi_adctdc_counter0 : 1;
      uint32 has_multi_scaler_counter0 : 1;
      uint32 has_multi_event : 1;
      uint32 has_time_stamp : 1;
    } ;
    uint32 u32;
  } failure;
  uint32 continous_event_counter;
  uint32 time_stamp;
  uint32 clock_counter_stamp;
  uint32 iped;
  uint32 multi_events;
  uint32 multi_trlo_ii_counter0;
  uint32 multi_scaler_counter0;
  uint32 multi_adctdc_counter0;
} ;
class NTP64_TIME
{
  uint32 sec;
  uint32 frac;
} ;
class NTP_MESSAGE
{
  union 
  {
    struct 
    {
      uint32 word_count : 16;
      uint32 quick_burst : 1;
      uint32 dummy_17_23 : 7;
      uint32 id : 8;
    } ;
    uint32 u32;
  } header;
  uint32 server_id;
  union 
  {
    struct 
    {
      uint32 precision : 8;
      uint32 poll : 8;
      uint32 stratum : 4;
      uint32 dummy_20_23 : 4;
      uint32 mode : 3;
      uint32 version : 3;
      uint32 leap : 2;
    } ;
    uint32 u32;
  } sspp;
  union 
  {
    struct 
    {
      uint32 frac : 16;
      uint32 sec : 16;
    } ;
    uint32 u32;
  } root_dly;
  union 
  {
    struct 
    {
      uint32 frac : 16;
      uint32 sec : 16;
    } ;
    uint32 u32;
  } root_disp;
  uint32 refid;
  NTP64_TIME orig2time;
  NTP64_TIME tmit2time;
  NTP64_TIME rec2time;
  NTP64_TIME rx2time;
  NTP64_TIME reftime;
  NTP64_TIME origtime;
  NTP64_TIME rectime;
  NTP64_TIME tmittime;
  NTP64_TIME rxtime;
} ;
class RANDOM_TCAL_TSTAMP_CLOCK
{
  uint32 soft_latches;
  uint32 hard_latches;
  uint32 clock_ticks;
  NTP64_TIME before;
  NTP64_TIME after;
} ;
class RANDOM_TCAL
{
  union 
  {
    struct 
    {
      uint32 word_count : 8;
      uint32 pulses : 4;
      uint32 clock_bits : 6;
      uint32 has_tstamp1 : 1;
      uint32 has_tstamp2 : 1;
      uint32 dummy_20_23 : 4;
      uint32 id : 8;
    } ;
    uint32 u32;
  } header;
  RANDOM_TCAL_TSTAMP_CLOCK tstamp1;
  RANDOM_TCAL_TSTAMP_CLOCK tstamp2;
} ;
class SIDEREM_BLOCK
{
  raw_array_zero_suppress<DATA12,DATA12,512> data[4];
  union 
  {
    struct 
    {
      uint32 count : 12;
      uint32 local_event_counter : 4;
      uint32 local_trigger : 4;
      uint32 siderem : 4;
      uint32 gtb : 4;
      uint32 sam : 4;
    } ;
    uint32 u32;
  } header;
} ;
class SOFT_SCALER32
{
  raw_array_zero_suppress<DATA32,DATA32,32> data;
} ;
class VME_CAEN_V1190_SUBTDC
{
  union 
  {
    struct 
    {
      uint32 bunch_id : 12;
      uint32 event_id : 12;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } header;
  union 
  {
    struct 
    {
      uint32 flags : 15;
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } error_flags;
  union 
  {
    struct 
    {
      uint32 word_count : 12;
      uint32 event_id : 12;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trailer;
} ;
class VME_CAEN_V1190
{
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 event_number : 22;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } header;
  VME_CAEN_V1190_SUBTDC tdc[4];
  union 
  {
    struct 
    {
      uint32 time_tag : 27;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trigger;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 word_count : 15;
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1;
      uint32 buffer_overflow : 1;
      uint32 trigger_lost : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trailer;
} ;
class VME_CAEN_V1190_SHORT_SUBTDC
{
  ;
} ;
class VME_CAEN_V1190_SHORT_SUBTDC_ERROR
{
  union 
  {
    struct 
    {
      uint32 flags : 15;
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } error_flags;
} ;
class VME_CAEN_V1190_SHORT
{
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 event_number : 22;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } header;
  VME_CAEN_V1190_SHORT_SUBTDC tdc[4];
  VME_CAEN_V1190_SHORT_SUBTDC_ERROR err[4];
  union 
  {
    struct 
    {
      uint32 time_tag : 27;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trigger;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 word_count : 15;
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1;
      uint32 buffer_overflow : 1;
      uint32 trigger_lost : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trailer;
} ;
class VME_CAEN_V1290_SUBTDC
{
  union 
  {
    struct 
    {
      uint32 bunch_id : 12;
      uint32 event_id : 12;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } header;
  union 
  {
    struct 
    {
      uint32 flags : 15;
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } error_flags;
  union 
  {
    struct 
    {
      uint32 word_count : 12;
      uint32 event_id : 12;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trailer;
} ;
class VME_CAEN_V1290
{
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 event_number : 22;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } header;
  VME_CAEN_V1290_SUBTDC tdc[4];
  union 
  {
    struct 
    {
      uint32 time_tag : 27;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trigger;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 word_count : 15;
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1;
      uint32 buffer_overflow : 1;
      uint32 trigger_lost : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trailer;
} ;
class VME_CAEN_V1290_SHORT_SUBTDC
{
  ;
} ;
class VME_CAEN_V1290_SHORT_SUBTDC_ERROR
{
  union 
  {
    struct 
    {
      uint32 flags : 15;
      uint32 dummy_15_23 : 9;
      uint32 tdc : 2;
      uint32 dummy_26 : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } error_flags;
} ;
class VME_CAEN_V1290_SHORT
{
  raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 event_number : 22;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } header;
  VME_CAEN_V1290_SHORT_SUBTDC tdc[4];
  VME_CAEN_V1290_SHORT_SUBTDC_ERROR err[4];
  union 
  {
    struct 
    {
      uint32 time_tag : 27;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trigger;
  union 
  {
    struct 
    {
      uint32 geom : 5;
      uint32 word_count : 15;
      uint32 dummy_20_23 : 4;
      uint32 tdc_error : 1;
      uint32 buffer_overflow : 1;
      uint32 trigger_lost : 1;
      uint32 unnamed_27_31 : 5;
    } ;
    uint32 u32;
  } trailer;
} ;
class VME_CAEN_V775
{
  raw_array_zero_suppress<DATA12_OVERFLOW,DATA12_OVERFLOW,32> data;
  union 
  {
    struct 
    {
      uint32 event_number : 24;
      uint32 unnamed_24_26 : 3;
      uint32 geom : 5;
    } ;
    uint32 u32;
  } eob;
} ;
class VME_CAEN_V830
{
  raw_array_zero_suppress<DATA32,DATA32,32> data;
  union 
  {
    struct 
    {
      uint32 event_number : 16;
      uint32 ts : 2;
      uint32 count : 6;
      uint32 dummy_24_25 : 2;
      uint32 unnamed_26_26 : 1;
      uint32 geom : 5;
    } ;
    uint32 u32;
  } header;
} ;
class VME_MESYTEC_MADC32
{
  raw_array_zero_suppress<DATA14_OVERFLOW,DATA14_OVERFLOW,32> data;
  union 
  {
    struct 
    {
      uint32 counter : 30;
      uint32 unnamed_30_31 : 2;
    } ;
    uint32 u32;
  } end_of_event;
} ;
class VME_MESYTEC_MDPP16
{
  raw_array_multi_zero_suppress<DATA16_OVERFLOW,DATA16_OVERFLOW,34,100> data;
  union 
  {
    struct 
    {
      uint32 counter : 30;
      uint32 unnamed_30_31 : 2;
    } ;
    uint32 u32;
  } end_of_event;
} ;
class CROS3_REWRITE_SUBEVENT : public unpack_subevent_base
{
  CROS3_REWRITE ccb[2];
} ;
class CROS3_SUBEVENT : public unpack_subevent_base
{
  EXT_CROS3 ccb[2];
} ;
class DUMMY : public unpack_subevent_base
{
  DUMMY_WORD d;
} ;
class LAND_CAMAC_CONVERTER : public unpack_subevent_base
{
  uint16 tpat;
  uint16 tprev;
  uint16 tnext;
  uint16 tprev2;
  CAMAC_PHILLIPS_7164 aPHI14829;
  CAMAC_SILENA_4418 qSIA0480;
  CAMAC_SILENA_4418 qSIA0429;
  CAMAC_SILENA_4418 tSIA0400;
  CAMAC_SILENA_4418 tC_FRS120;
  CAMAC_SILENA_4418 tSIA0426;
  CAMAC_SILENA_4418 qSIA0458;
} ;
class LAND_CAMAC_PILEUP : public unpack_subevent_base
{
  CAMAC_LECROY_2277_1CH_HACK tdc;
} ;
class LAND_CAMAC_SCALER : public unpack_subevent_base
{
  uint32 timestamp;
  union 
  {
    struct 
    {
      uint32 unnamed_0_31 : 32;
    } ;
    uint32 u32;
  } endianess;
  CAMAC_LECROY_4434 scaler0;
  CAMAC_LECROY_4434 scaler2;
  CAMAC_LECROY_4434 scaler1;
  SOFT_SCALER32 scaler3;
} ;
class LAND_CAMAC_START_STOP_STAMP : public unpack_subevent_base
{
  uint32 timestamp;
  union 
  {
    struct 
    {
      uint32 unnamed_0_31 : 32;
    } ;
    uint32 u32;
  } endianess;
} ;
class LAND_CAMAC_TCAL_INFO : public unpack_subevent_base
{
  uint32 info;
  RANDOM_TCAL rtcal;
  NTP_MESSAGE ntp;
} ;
class LAND_FASTBUS1 : public unpack_subevent_base
{
  FASTBUS_LECROY_1885 Q47342;
  FASTBUS_LECROY_1885 Q46848;
  FASTBUS_LECROY_1885 Q11111;
  FASTBUS_LECROY_1885 Q47315;
  FASTBUS_LECROY_1885 Q17320;
  FASTBUS_LECROY_1885 Q15372;
  FASTBUS_LECROY_1885 Q46962;
  FASTBUS_LECROY_1885 Q46993;
  FASTBUS_LECROY_1885 Q15358;
  FASTBUS_LECROY_1885 Q47264;
  FASTBUS_LECROY_1875 T81855;
  FASTBUS_LECROY_1875 T87044;
  FASTBUS_LECROY_1875 T87024;
  FASTBUS_LECROY_1875 T81800;
} ;
class LAND_FASTBUS2 : public unpack_subevent_base
{
  FASTBUS_LECROY_1885 Q75266;
  FASTBUS_LECROY_1875 T48854;
  FASTBUS_LECROY_1875 T87047;
  FASTBUS_LECROY_1875 T81808;
  FASTBUS_LECROY_1875 T81859;
  FASTBUS_LECROY_1875 T81795;
  FASTBUS_LECROY_1875 T81806;
  FASTBUS_LECROY_1875 T48834;
} ;
class LAND_FASTBUS_ERROR : public unpack_subevent_base
{
  union 
  {
    struct 
    {
      uint32 timeout_waiting_smi : 1;
      uint32 illegal_block_transfer : 1;
      uint32 fifa_address_overflow : 1;
      uint32 fifa_register_error : 1;
      uint32 dummy_4_15 : 12;
      uint32 init_error : 1;
      uint32 dummy_17_31 : 15;
    } ;
    uint32 u32;
  } error_code;
  uint32 error_num;
} ;
class LAND_FASTBUS_ERROR_NGF : public unpack_subevent_base
{
  union 
  {
    struct 
    {
      uint32 unnamed_0_31 : 32;
    } ;
    uint32 u32;
  } magic;
  union 
  {
    struct 
    {
      uint32 error : 1;
      uint32 uninitialized : 1;
      uint32 ss1 : 1;
      uint32 wc : 1;
      uint32 mid : 1;
      uint32 fifo_empty : 1;
      uint32 fifo_not_empty : 1;
      uint32 not_finished : 1;
      uint32 bad_end_addr : 1;
      uint32 word_lost : 1;
      uint32 dummy_10_31 : 22;
    } ;
    uint32 u32;
  } error_code;
} ;
class LAND_VME : public unpack_subevent_base
{
  VME_CAEN_V775 tCAEN0614;
  VME_CAEN_V830 scaler[2];
  VME_CAEN_V775 qCAEN0472;
  LAND_STD_VME vme;
} ;
class SIDEREM01_VME : public unpack_subevent_base
{
  EXT_SST sst[3];
} ;
class SIDEREM02_VME : public unpack_subevent_base
{
  EXT_SST sst[3];
} ;
class unpack_event : public unpack_event_base
{
  LAND_CAMAC_PILEUP pileup;
  LAND_VME vme;
  CROS3_SUBEVENT cros3;
  SIDEREM01_VME sst1;
  CROS3_REWRITE_SUBEVENT cros3_rewrite;
  SIDEREM02_VME sst2;
  LAND_CAMAC_CONVERTER camac;
  LAND_FASTBUS1 fastbus1;
  LAND_FASTBUS2 fastbus2;
  DUMMY acq;
  LAND_CAMAC_TCAL_INFO camac_tcal_info;
  LAND_CAMAC_SCALER camac_scalers;
  LAND_FASTBUS_ERROR_NGF fastbus1_error;
  LAND_FASTBUS_ERROR_NGF fastbus2_error;
} ;
class unpack_sticky_event : public unpack_sticky_event_base
{
  ;
} ;
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/


/** BEGIN_MIRROR_STRUCT ************************************************
 *
 * Mirror (1 to 1) structure.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

#ifndef USER_DEF_CAMAC_LECROY_2277_1CH_HACK
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CAMAC_LECROY_2277_1CH_HACK)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_list_ii_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),16> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(CAMAC_LECROY_2277_1CH_HACK);
};
#endif//USER_DEF_CAMAC_LECROY_2277_1CH_HACK

#ifndef USER_DEF_CAMAC_LECROY_4434
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CAMAC_LECROY_4434)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA24),STRUCT_MIRROR_TEMPLATE_ARG(DATA24),32> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(CAMAC_LECROY_4434);
};
#endif//USER_DEF_CAMAC_LECROY_4434

#ifndef USER_DEF_CAMAC_PHILLIPS_7164
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CAMAC_PHILLIPS_7164)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),16> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(CAMAC_PHILLIPS_7164);
};
#endif//USER_DEF_CAMAC_PHILLIPS_7164

#ifndef USER_DEF_CAMAC_SILENA_4418
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CAMAC_SILENA_4418)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12_OVERFLOW),STRUCT_MIRROR_TEMPLATE_ARG(DATA12_OVERFLOW),8> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(CAMAC_SILENA_4418);
};
#endif//USER_DEF_CAMAC_SILENA_4418

#ifndef USER_DEF_CROS3_REWRITE
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CROS3_REWRITE)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(WIRE_START_END),STRUCT_MIRROR_TEMPLATE_ARG(WIRE_START_END),32768> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(data_size);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data_size);
      STRUCT_MIRROR_ITEM_CTRL(threshold_curve);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(threshold_curve);
      STRUCT_MIRROR_ITEM_CTRL(leading_edge);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(leading_edge);
      STRUCT_MIRROR_ITEM_CTRL(data);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(data);
      STRUCT_MIRROR_ITEM_CTRL(dummy_19);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_19);
      STRUCT_MIRROR_ITEM_CTRL(trigger_time);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_time);
      STRUCT_MIRROR_ITEM_CTRL(ccb_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ccb_id);
      STRUCT_MIRROR_ITEM_CTRL(event_counter);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_counter);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(h1);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(read_out_mode);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(read_out_mode);
      STRUCT_MIRROR_ITEM_CTRL(dummy_2_3);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_2_3);
      STRUCT_MIRROR_ITEM_CTRL(pulser_enabled);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(pulser_enabled);
      STRUCT_MIRROR_ITEM_CTRL(dummy_5_7);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_5_7);
      STRUCT_MIRROR_ITEM_CTRL(statistics);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(statistics);
      STRUCT_MIRROR_ITEM_CTRL(both_edges);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(both_edges);
      STRUCT_MIRROR_ITEM_CTRL(slices);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(slices);
      STRUCT_MIRROR_ITEM_CTRL(scale);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scale);
      STRUCT_MIRROR_ITEM_CTRL(dummy_22_30);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_22_30);
      STRUCT_MIRROR_ITEM_CTRL(odd_length16);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(odd_length16);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(h2);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(read_out_mode);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(read_out_mode);
      STRUCT_MIRROR_ITEM_CTRL(dummy_2_3);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_2_3);
      STRUCT_MIRROR_ITEM_CTRL(pulser_enabled);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(pulser_enabled);
      STRUCT_MIRROR_ITEM_CTRL(dummy_5_7);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_5_7);
      STRUCT_MIRROR_ITEM_CTRL(statistics);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(statistics);
      STRUCT_MIRROR_ITEM_CTRL(both_edges);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(both_edges);
      STRUCT_MIRROR_ITEM_CTRL(threshold_start);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(threshold_start);
      STRUCT_MIRROR_ITEM_CTRL(threshold_step);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(threshold_step);
      STRUCT_MIRROR_ITEM_CTRL(boards);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(boards);
      STRUCT_MIRROR_ITEM_CTRL(dummy_29_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_29_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trc_h2);
  STRUCT_MIRROR_FCNS_DECL(CROS3_REWRITE);
};
#endif//USER_DEF_CROS3_REWRITE

#ifndef USER_DEF_DUMMY_WORD
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(DUMMY_WORD)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(dummy_word);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_word);
  STRUCT_MIRROR_FCNS_DECL(DUMMY_WORD);
};
#endif//USER_DEF_DUMMY_WORD

#ifndef USER_DEF_FASTBUS_LECROY_1875
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FASTBUS_LECROY_1875)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12_RANGE),STRUCT_MIRROR_TEMPLATE_ARG(DATA12_RANGE),64> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(FASTBUS_LECROY_1875);
};
#endif//USER_DEF_FASTBUS_LECROY_1875

#ifndef USER_DEF_FASTBUS_LECROY_1885
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(FASTBUS_LECROY_1885)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12_RANGE),STRUCT_MIRROR_TEMPLATE_ARG(DATA12_RANGE),96> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(FASTBUS_LECROY_1885);
};
#endif//USER_DEF_FASTBUS_LECROY_1885

#ifndef USER_DEF_LAND_STD_VME
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_STD_VME)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(fail_general);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_general);
      STRUCT_MIRROR_ITEM_CTRL(fail_data_corrupt);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_data_corrupt);
      STRUCT_MIRROR_ITEM_CTRL(fail_data_missing);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_data_missing);
      STRUCT_MIRROR_ITEM_CTRL(fail_data_too_much);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_data_too_much);
      STRUCT_MIRROR_ITEM_CTRL(fail_event_counter_mismatch);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_event_counter_mismatch);
      STRUCT_MIRROR_ITEM_CTRL(fail_readout_error_driver);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_readout_error_driver);
      STRUCT_MIRROR_ITEM_CTRL(fail_unexpected_trigger);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_unexpected_trigger);
      STRUCT_MIRROR_ITEM_CTRL(fail_firmware_mismatch);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fail_firmware_mismatch);
      STRUCT_MIRROR_ITEM_CTRL(dummy_8_21);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_8_21);
      STRUCT_MIRROR_ITEM_CTRL(has_multi_trlo_ii_counter0);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_multi_trlo_ii_counter0);
      STRUCT_MIRROR_ITEM_CTRL(has_clock_counter_stamp);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_clock_counter_stamp);
      STRUCT_MIRROR_ITEM_CTRL(has_continous_event_counter);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_continous_event_counter);
      STRUCT_MIRROR_ITEM_CTRL(has_update_qdc_iped_value);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_update_qdc_iped_value);
      STRUCT_MIRROR_ITEM_CTRL(spurious_start_before_tcal);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(spurious_start_before_tcal);
      STRUCT_MIRROR_ITEM_CTRL(has_no_zero_suppression);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_no_zero_suppression);
      STRUCT_MIRROR_ITEM_CTRL(has_multi_adctdc_counter0);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_multi_adctdc_counter0);
      STRUCT_MIRROR_ITEM_CTRL(has_multi_scaler_counter0);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_multi_scaler_counter0);
      STRUCT_MIRROR_ITEM_CTRL(has_multi_event);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_multi_event);
      STRUCT_MIRROR_ITEM_CTRL(has_time_stamp);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_time_stamp);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(failure);
  STRUCT_MIRROR_ITEM_CTRL(continous_event_counter);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(continous_event_counter);
  STRUCT_MIRROR_ITEM_CTRL(time_stamp);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_stamp);
  STRUCT_MIRROR_ITEM_CTRL(clock_counter_stamp);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(clock_counter_stamp);
  STRUCT_MIRROR_ITEM_CTRL(iped);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(iped);
  STRUCT_MIRROR_ITEM_CTRL(multi_events);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(multi_events);
  STRUCT_MIRROR_ITEM_CTRL(multi_trlo_ii_counter0);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(multi_trlo_ii_counter0);
  STRUCT_MIRROR_ITEM_CTRL(multi_scaler_counter0);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(multi_scaler_counter0);
  STRUCT_MIRROR_ITEM_CTRL(multi_adctdc_counter0);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(multi_adctdc_counter0);
  STRUCT_MIRROR_FCNS_DECL(LAND_STD_VME);
};
#endif//USER_DEF_LAND_STD_VME

#ifndef USER_DEF_NTP64_TIME
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(NTP64_TIME)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(sec);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sec);
  STRUCT_MIRROR_ITEM_CTRL(frac);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(frac);
  STRUCT_MIRROR_FCNS_DECL(NTP64_TIME);
};
#endif//USER_DEF_NTP64_TIME

#ifndef USER_DEF_NTP_MESSAGE
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(NTP_MESSAGE)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(quick_burst);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(quick_burst);
      STRUCT_MIRROR_ITEM_CTRL(dummy_17_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_17_23);
      STRUCT_MIRROR_ITEM_CTRL(id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(id);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_ITEM_CTRL(server_id);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(server_id);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(precision);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(precision);
      STRUCT_MIRROR_ITEM_CTRL(poll);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(poll);
      STRUCT_MIRROR_ITEM_CTRL(stratum);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(stratum);
      STRUCT_MIRROR_ITEM_CTRL(dummy_20_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_20_23);
      STRUCT_MIRROR_ITEM_CTRL(mode);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(mode);
      STRUCT_MIRROR_ITEM_CTRL(version);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(version);
      STRUCT_MIRROR_ITEM_CTRL(leap);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(leap);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(sspp);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(frac);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(frac);
      STRUCT_MIRROR_ITEM_CTRL(sec);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sec);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(root_dly);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(frac);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(frac);
      STRUCT_MIRROR_ITEM_CTRL(sec);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sec);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(root_disp);
  STRUCT_MIRROR_ITEM_CTRL(refid);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(refid);
  STRUCT_MIRROR_ITEM_CTRL(orig2time);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(orig2time);
  STRUCT_MIRROR_ITEM_CTRL(tmit2time);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tmit2time);
  STRUCT_MIRROR_ITEM_CTRL(rec2time);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(rec2time);
  STRUCT_MIRROR_ITEM_CTRL(rx2time);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(rx2time);
  STRUCT_MIRROR_ITEM_CTRL(reftime);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(reftime);
  STRUCT_MIRROR_ITEM_CTRL(origtime);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(origtime);
  STRUCT_MIRROR_ITEM_CTRL(rectime);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(rectime);
  STRUCT_MIRROR_ITEM_CTRL(tmittime);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tmittime);
  STRUCT_MIRROR_ITEM_CTRL(rxtime);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(rxtime);
  STRUCT_MIRROR_FCNS_DECL(NTP_MESSAGE);
};
#endif//USER_DEF_NTP_MESSAGE

#ifndef USER_DEF_RANDOM_TCAL_TSTAMP_CLOCK
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(RANDOM_TCAL_TSTAMP_CLOCK)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(soft_latches);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(soft_latches);
  STRUCT_MIRROR_ITEM_CTRL(hard_latches);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(hard_latches);
  STRUCT_MIRROR_ITEM_CTRL(clock_ticks);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(clock_ticks);
  STRUCT_MIRROR_ITEM_CTRL(before);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(before);
  STRUCT_MIRROR_ITEM_CTRL(after);
  STRUCT_MIRROR_TYPE(NTP64_TIME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(after);
  STRUCT_MIRROR_FCNS_DECL(RANDOM_TCAL_TSTAMP_CLOCK);
};
#endif//USER_DEF_RANDOM_TCAL_TSTAMP_CLOCK

#ifndef USER_DEF_RANDOM_TCAL
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(RANDOM_TCAL)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(pulses);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(pulses);
      STRUCT_MIRROR_ITEM_CTRL(clock_bits);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(clock_bits);
      STRUCT_MIRROR_ITEM_CTRL(has_tstamp1);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_tstamp1);
      STRUCT_MIRROR_ITEM_CTRL(has_tstamp2);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(has_tstamp2);
      STRUCT_MIRROR_ITEM_CTRL(dummy_20_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_20_23);
      STRUCT_MIRROR_ITEM_CTRL(id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(id);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_ITEM_CTRL(tstamp1);
  STRUCT_MIRROR_TYPE(RANDOM_TCAL_TSTAMP_CLOCK) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tstamp1);
  STRUCT_MIRROR_ITEM_CTRL(tstamp2);
  STRUCT_MIRROR_TYPE(RANDOM_TCAL_TSTAMP_CLOCK) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tstamp2);
  STRUCT_MIRROR_FCNS_DECL(RANDOM_TCAL);
};
#endif//USER_DEF_RANDOM_TCAL

#ifndef USER_DEF_SIDEREM_BLOCK
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(SIDEREM_BLOCK)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(data__i0,,4);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),512> STRUCT_MIRROR_NAME(data[4]);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(count);
      STRUCT_MIRROR_ITEM_CTRL(local_event_counter);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(local_event_counter);
      STRUCT_MIRROR_ITEM_CTRL(local_trigger);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(local_trigger);
      STRUCT_MIRROR_ITEM_CTRL(siderem);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(siderem);
      STRUCT_MIRROR_ITEM_CTRL(gtb);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(gtb);
      STRUCT_MIRROR_ITEM_CTRL(sam);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sam);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_FCNS_DECL(SIDEREM_BLOCK);
};
#endif//USER_DEF_SIDEREM_BLOCK

#ifndef USER_DEF_SOFT_SCALER32
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(SOFT_SCALER32)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),32> STRUCT_MIRROR_NAME(data);
  STRUCT_MIRROR_FCNS_DECL(SOFT_SCALER32);
};
#endif//USER_DEF_SOFT_SCALER32

#ifndef USER_DEF_VME_CAEN_V1190_SUBTDC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SUBTDC)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(bunch_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(bunch_id);
      STRUCT_MIRROR_ITEM_CTRL(event_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_id);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(flags);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(flags);
      STRUCT_MIRROR_ITEM_CTRL(dummy_15_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_15_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(error_flags);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(event_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_id);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trailer);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1190_SUBTDC);
};
#endif//USER_DEF_VME_CAEN_V1190_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1190
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1190)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA24),STRUCT_MIRROR_TEMPLATE_ARG(DATA24),32,128> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(event_number);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_number);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_ITEM_CTRL(tdc);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(tdc__i0,,4);
  STRUCT_MIRROR_TYPE(VME_CAEN_V1190_SUBTDC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc[4]);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(time_tag);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_tag);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trigger);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(dummy_20_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_20_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc_error);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc_error);
      STRUCT_MIRROR_ITEM_CTRL(buffer_overflow);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(buffer_overflow);
      STRUCT_MIRROR_ITEM_CTRL(trigger_lost);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_lost);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trailer);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1190);
};
#endif//USER_DEF_VME_CAEN_V1190

#ifndef USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SHORT_SUBTDC)
{
public:
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1190_SHORT_SUBTDC);
};
#endif//USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC_ERROR
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SHORT_SUBTDC_ERROR)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(flags);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(flags);
      STRUCT_MIRROR_ITEM_CTRL(dummy_15_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_15_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(error_flags);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1190_SHORT_SUBTDC_ERROR);
};
#endif//USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC_ERROR

#ifndef USER_DEF_VME_CAEN_V1190_SHORT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SHORT)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA24),STRUCT_MIRROR_TEMPLATE_ARG(DATA24),32,128> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(event_number);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_number);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_ITEM_CTRL(tdc);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(tdc__i0,,4);
  STRUCT_MIRROR_TYPE(VME_CAEN_V1190_SHORT_SUBTDC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc[4]);
  STRUCT_MIRROR_ITEM_CTRL(err);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(err__i0,,4);
  STRUCT_MIRROR_TYPE(VME_CAEN_V1190_SHORT_SUBTDC_ERROR) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(err[4]);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(time_tag);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_tag);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trigger);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(dummy_20_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_20_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc_error);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc_error);
      STRUCT_MIRROR_ITEM_CTRL(buffer_overflow);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(buffer_overflow);
      STRUCT_MIRROR_ITEM_CTRL(trigger_lost);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_lost);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trailer);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1190_SHORT);
};
#endif//USER_DEF_VME_CAEN_V1190_SHORT

#ifndef USER_DEF_VME_CAEN_V1290_SUBTDC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SUBTDC)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(bunch_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(bunch_id);
      STRUCT_MIRROR_ITEM_CTRL(event_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_id);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(flags);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(flags);
      STRUCT_MIRROR_ITEM_CTRL(dummy_15_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_15_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(error_flags);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(event_id);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_id);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trailer);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1290_SUBTDC);
};
#endif//USER_DEF_VME_CAEN_V1290_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1290
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1290)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA24),STRUCT_MIRROR_TEMPLATE_ARG(DATA24),32,128> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(event_number);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_number);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_ITEM_CTRL(tdc);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(tdc__i0,,4);
  STRUCT_MIRROR_TYPE(VME_CAEN_V1290_SUBTDC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc[4]);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(time_tag);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_tag);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trigger);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(dummy_20_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_20_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc_error);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc_error);
      STRUCT_MIRROR_ITEM_CTRL(buffer_overflow);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(buffer_overflow);
      STRUCT_MIRROR_ITEM_CTRL(trigger_lost);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_lost);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trailer);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1290);
};
#endif//USER_DEF_VME_CAEN_V1290

#ifndef USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SHORT_SUBTDC)
{
public:
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1290_SHORT_SUBTDC);
};
#endif//USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC_ERROR
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SHORT_SUBTDC_ERROR)
{
public:
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(flags);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(flags);
      STRUCT_MIRROR_ITEM_CTRL(dummy_15_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_15_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
      STRUCT_MIRROR_ITEM_CTRL(dummy_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_26);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(error_flags);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1290_SHORT_SUBTDC_ERROR);
};
#endif//USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC_ERROR

#ifndef USER_DEF_VME_CAEN_V1290_SHORT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SHORT)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA24),STRUCT_MIRROR_TEMPLATE_ARG(DATA24),32,128> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(event_number);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_number);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_ITEM_CTRL(tdc);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(tdc__i0,,4);
  STRUCT_MIRROR_TYPE(VME_CAEN_V1290_SHORT_SUBTDC) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc[4]);
  STRUCT_MIRROR_ITEM_CTRL(err);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(err__i0,,4);
  STRUCT_MIRROR_TYPE(VME_CAEN_V1290_SHORT_SUBTDC_ERROR) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(err[4]);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(time_tag);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(time_tag);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trigger);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
      STRUCT_MIRROR_ITEM_CTRL(word_count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_count);
      STRUCT_MIRROR_ITEM_CTRL(dummy_20_23);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_20_23);
      STRUCT_MIRROR_ITEM_CTRL(tdc_error);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc_error);
      STRUCT_MIRROR_ITEM_CTRL(buffer_overflow);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(buffer_overflow);
      STRUCT_MIRROR_ITEM_CTRL(trigger_lost);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(trigger_lost);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_27_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_27_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(trailer);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V1290_SHORT);
};
#endif//USER_DEF_VME_CAEN_V1290_SHORT

#ifndef USER_DEF_VME_CAEN_V775
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V775)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12_OVERFLOW),STRUCT_MIRROR_TEMPLATE_ARG(DATA12_OVERFLOW),32> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(event_number);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_number);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_24_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_24_26);
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(eob);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V775);
};
#endif//USER_DEF_VME_CAEN_V775

#ifndef USER_DEF_VME_CAEN_V830
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_CAEN_V830)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),32> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(event_number);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(event_number);
      STRUCT_MIRROR_ITEM_CTRL(ts);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ts);
      STRUCT_MIRROR_ITEM_CTRL(count);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(count);
      STRUCT_MIRROR_ITEM_CTRL(dummy_24_25);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_24_25);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_26_26);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_26_26);
      STRUCT_MIRROR_ITEM_CTRL(geom);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(geom);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(header);
  STRUCT_MIRROR_FCNS_DECL(VME_CAEN_V830);
};
#endif//USER_DEF_VME_CAEN_V830

#ifndef USER_DEF_VME_MESYTEC_MADC32
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_MESYTEC_MADC32)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA14_OVERFLOW),STRUCT_MIRROR_TEMPLATE_ARG(DATA14_OVERFLOW),32> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(counter);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(counter);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_30_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_30_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(end_of_event);
  STRUCT_MIRROR_FCNS_DECL(VME_MESYTEC_MADC32);
};
#endif//USER_DEF_VME_MESYTEC_MADC32

#ifndef USER_DEF_VME_MESYTEC_MDPP16
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(VME_MESYTEC_MDPP16)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(data);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16_OVERFLOW),STRUCT_MIRROR_TEMPLATE_ARG(DATA16_OVERFLOW),34,100> STRUCT_MIRROR_NAME(data);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(counter);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(counter);
      STRUCT_MIRROR_ITEM_CTRL(unnamed_30_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_30_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(end_of_event);
  STRUCT_MIRROR_FCNS_DECL(VME_MESYTEC_MDPP16);
};
#endif//USER_DEF_VME_MESYTEC_MDPP16

#ifndef USER_DEF_CROS3_REWRITE_SUBEVENT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CROS3_REWRITE_SUBEVENT) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ccb);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(ccb__i0,,2);
  STRUCT_MIRROR_TYPE(CROS3_REWRITE) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ccb[2]);
  STRUCT_MIRROR_FCNS_DECL(CROS3_REWRITE_SUBEVENT);
};
#endif//USER_DEF_CROS3_REWRITE_SUBEVENT

#ifndef USER_DEF_CROS3_SUBEVENT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(CROS3_SUBEVENT) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(ccb);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(ccb__i0,,2);
  STRUCT_MIRROR_TYPE(EXT_CROS3) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ccb[2]);
  STRUCT_MIRROR_FCNS_DECL(CROS3_SUBEVENT);
};
#endif//USER_DEF_CROS3_SUBEVENT

#ifndef USER_DEF_DUMMY
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(DUMMY) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(d);
  STRUCT_MIRROR_TYPE(DUMMY_WORD) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(d);
  STRUCT_MIRROR_FCNS_DECL(DUMMY);
};
#endif//USER_DEF_DUMMY

#ifndef USER_DEF_LAND_CAMAC_CONVERTER
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_CAMAC_CONVERTER) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(tpat);
  STRUCT_MIRROR_TYPE(uint16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tpat);
  STRUCT_MIRROR_ITEM_CTRL(tprev);
  STRUCT_MIRROR_TYPE(uint16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tprev);
  STRUCT_MIRROR_ITEM_CTRL(tnext);
  STRUCT_MIRROR_TYPE(uint16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tnext);
  STRUCT_MIRROR_ITEM_CTRL(tprev2);
  STRUCT_MIRROR_TYPE(uint16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tprev2);
  STRUCT_MIRROR_ITEM_CTRL(aPHI14829);
  STRUCT_MIRROR_TYPE(CAMAC_PHILLIPS_7164) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(aPHI14829);
  STRUCT_MIRROR_ITEM_CTRL(qSIA0480);
  STRUCT_MIRROR_TYPE(CAMAC_SILENA_4418) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(qSIA0480);
  STRUCT_MIRROR_ITEM_CTRL(qSIA0429);
  STRUCT_MIRROR_TYPE(CAMAC_SILENA_4418) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(qSIA0429);
  STRUCT_MIRROR_ITEM_CTRL(tSIA0400);
  STRUCT_MIRROR_TYPE(CAMAC_SILENA_4418) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tSIA0400);
  STRUCT_MIRROR_ITEM_CTRL(tC_FRS120);
  STRUCT_MIRROR_TYPE(CAMAC_SILENA_4418) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tC_FRS120);
  STRUCT_MIRROR_ITEM_CTRL(tSIA0426);
  STRUCT_MIRROR_TYPE(CAMAC_SILENA_4418) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tSIA0426);
  STRUCT_MIRROR_ITEM_CTRL(qSIA0458);
  STRUCT_MIRROR_TYPE(CAMAC_SILENA_4418) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(qSIA0458);
  STRUCT_MIRROR_FCNS_DECL(LAND_CAMAC_CONVERTER);
};
#endif//USER_DEF_LAND_CAMAC_CONVERTER

#ifndef USER_DEF_LAND_CAMAC_PILEUP
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_CAMAC_PILEUP) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(tdc);
  STRUCT_MIRROR_TYPE(CAMAC_LECROY_2277_1CH_HACK) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tdc);
  STRUCT_MIRROR_FCNS_DECL(LAND_CAMAC_PILEUP);
};
#endif//USER_DEF_LAND_CAMAC_PILEUP

#ifndef USER_DEF_LAND_CAMAC_SCALER
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_CAMAC_SCALER) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(timestamp);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(timestamp);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(unnamed_0_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_0_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(endianess);
  STRUCT_MIRROR_ITEM_CTRL(scaler0);
  STRUCT_MIRROR_TYPE(CAMAC_LECROY_4434) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scaler0);
  STRUCT_MIRROR_ITEM_CTRL(scaler2);
  STRUCT_MIRROR_TYPE(CAMAC_LECROY_4434) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scaler2);
  STRUCT_MIRROR_ITEM_CTRL(scaler1);
  STRUCT_MIRROR_TYPE(CAMAC_LECROY_4434) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scaler1);
  STRUCT_MIRROR_ITEM_CTRL(scaler3);
  STRUCT_MIRROR_TYPE(SOFT_SCALER32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scaler3);
  STRUCT_MIRROR_FCNS_DECL(LAND_CAMAC_SCALER);
};
#endif//USER_DEF_LAND_CAMAC_SCALER

#ifndef USER_DEF_LAND_CAMAC_START_STOP_STAMP
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_CAMAC_START_STOP_STAMP) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(timestamp);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(timestamp);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(unnamed_0_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_0_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(endianess);
  STRUCT_MIRROR_FCNS_DECL(LAND_CAMAC_START_STOP_STAMP);
};
#endif//USER_DEF_LAND_CAMAC_START_STOP_STAMP

#ifndef USER_DEF_LAND_CAMAC_TCAL_INFO
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_CAMAC_TCAL_INFO) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(info);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(info);
  STRUCT_MIRROR_ITEM_CTRL(rtcal);
  STRUCT_MIRROR_TYPE(RANDOM_TCAL) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(rtcal);
  STRUCT_MIRROR_ITEM_CTRL(ntp);
  STRUCT_MIRROR_TYPE(NTP_MESSAGE) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ntp);
  STRUCT_MIRROR_FCNS_DECL(LAND_CAMAC_TCAL_INFO);
};
#endif//USER_DEF_LAND_CAMAC_TCAL_INFO

#ifndef USER_DEF_LAND_FASTBUS1
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_FASTBUS1) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(Q47342);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1885) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(Q47342);
  STRUCT_MIRROR_ITEM_CTRL(Q46848);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1885) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(Q46848);
  STRUCT_MIRROR_ITEM_CTRL(Q11111);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1885) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(Q11111);
  STRUCT_MIRROR_ITEM_CTRL(Q47315);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1885) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(Q47315);
  STRUCT_MIRROR_ITEM_CTRL(Q17320);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1885) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(Q17320);
  STRUCT_MIRROR_ITEM_CTRL(Q15372);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1885) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(Q15372);
  STRUCT_MIRROR_ITEM_CTRL(Q46962);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1885) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(Q46962);
  STRUCT_MIRROR_ITEM_CTRL(Q46993);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1885) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(Q46993);
  STRUCT_MIRROR_ITEM_CTRL(Q15358);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1885) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(Q15358);
  STRUCT_MIRROR_ITEM_CTRL(Q47264);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1885) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(Q47264);
  STRUCT_MIRROR_ITEM_CTRL(T81855);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1875) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T81855);
  STRUCT_MIRROR_ITEM_CTRL(T87044);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1875) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T87044);
  STRUCT_MIRROR_ITEM_CTRL(T87024);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1875) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T87024);
  STRUCT_MIRROR_ITEM_CTRL(T81800);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1875) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T81800);
  STRUCT_MIRROR_FCNS_DECL(LAND_FASTBUS1);
};
#endif//USER_DEF_LAND_FASTBUS1

#ifndef USER_DEF_LAND_FASTBUS2
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_FASTBUS2) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(Q75266);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1885) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(Q75266);
  STRUCT_MIRROR_ITEM_CTRL(T48854);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1875) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T48854);
  STRUCT_MIRROR_ITEM_CTRL(T87047);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1875) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T87047);
  STRUCT_MIRROR_ITEM_CTRL(T81808);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1875) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T81808);
  STRUCT_MIRROR_ITEM_CTRL(T81859);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1875) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T81859);
  STRUCT_MIRROR_ITEM_CTRL(T81795);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1875) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T81795);
  STRUCT_MIRROR_ITEM_CTRL(T81806);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1875) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T81806);
  STRUCT_MIRROR_ITEM_CTRL(T48834);
  STRUCT_MIRROR_TYPE(FASTBUS_LECROY_1875) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T48834);
  STRUCT_MIRROR_FCNS_DECL(LAND_FASTBUS2);
};
#endif//USER_DEF_LAND_FASTBUS2

#ifndef USER_DEF_LAND_FASTBUS_ERROR
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_FASTBUS_ERROR) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(timeout_waiting_smi);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(timeout_waiting_smi);
      STRUCT_MIRROR_ITEM_CTRL(illegal_block_transfer);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(illegal_block_transfer);
      STRUCT_MIRROR_ITEM_CTRL(fifa_address_overflow);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fifa_address_overflow);
      STRUCT_MIRROR_ITEM_CTRL(fifa_register_error);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fifa_register_error);
      STRUCT_MIRROR_ITEM_CTRL(dummy_4_15);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_4_15);
      STRUCT_MIRROR_ITEM_CTRL(init_error);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(init_error);
      STRUCT_MIRROR_ITEM_CTRL(dummy_17_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_17_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(error_code);
  STRUCT_MIRROR_ITEM_CTRL(error_num);
  STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(error_num);
  STRUCT_MIRROR_FCNS_DECL(LAND_FASTBUS_ERROR);
};
#endif//USER_DEF_LAND_FASTBUS_ERROR

#ifndef USER_DEF_LAND_FASTBUS_ERROR_NGF
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_FASTBUS_ERROR_NGF) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(unnamed_0_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(unnamed_0_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(magic);
#if STRUCT_ONLY_LAST_UNION_MEMBER
  struct 
#else
  union 
#endif

  {
  public:
#if !STRUCT_ONLY_LAST_UNION_MEMBER
    struct 
    {
    public:
      STRUCT_MIRROR_ITEM_CTRL(error);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(error);
      STRUCT_MIRROR_ITEM_CTRL(uninitialized);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(uninitialized);
      STRUCT_MIRROR_ITEM_CTRL(ss1);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ss1);
      STRUCT_MIRROR_ITEM_CTRL(wc);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(wc);
      STRUCT_MIRROR_ITEM_CTRL(mid);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(mid);
      STRUCT_MIRROR_ITEM_CTRL(fifo_empty);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fifo_empty);
      STRUCT_MIRROR_ITEM_CTRL(fifo_not_empty);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fifo_not_empty);
      STRUCT_MIRROR_ITEM_CTRL(not_finished);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(not_finished);
      STRUCT_MIRROR_ITEM_CTRL(bad_end_addr);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(bad_end_addr);
      STRUCT_MIRROR_ITEM_CTRL(word_lost);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(word_lost);
      STRUCT_MIRROR_ITEM_CTRL(dummy_10_31);
      STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(dummy_10_31);
    };
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
    STRUCT_MIRROR_ITEM_CTRL(u32);
    STRUCT_MIRROR_TYPE(uint32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(u32);
  } STRUCT_MIRROR_NAME(error_code);
  STRUCT_MIRROR_FCNS_DECL(LAND_FASTBUS_ERROR_NGF);
};
#endif//USER_DEF_LAND_FASTBUS_ERROR_NGF

#ifndef USER_DEF_LAND_VME
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(LAND_VME) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(tCAEN0614);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(tCAEN0614);
  STRUCT_MIRROR_ITEM_CTRL(scaler);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(scaler__i0,,2);
  STRUCT_MIRROR_TYPE(VME_CAEN_V830) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(scaler[2]);
  STRUCT_MIRROR_ITEM_CTRL(qCAEN0472);
  STRUCT_MIRROR_TYPE(VME_CAEN_V775) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(qCAEN0472);
  STRUCT_MIRROR_ITEM_CTRL(vme);
  STRUCT_MIRROR_TYPE(LAND_STD_VME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(vme);
  STRUCT_MIRROR_FCNS_DECL(LAND_VME);
};
#endif//USER_DEF_LAND_VME

#ifndef USER_DEF_SIDEREM01_VME
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(SIDEREM01_VME) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(sst);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(sst__i0,,3);
  STRUCT_MIRROR_TYPE(EXT_SST) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sst[3]);
  STRUCT_MIRROR_FCNS_DECL(SIDEREM01_VME);
};
#endif//USER_DEF_SIDEREM01_VME

#ifndef USER_DEF_SIDEREM02_VME
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(SIDEREM02_VME) : public STRUCT_MIRROR_BASE(unpack_subevent_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_subevent_base);
  STRUCT_MIRROR_ITEM_CTRL(sst);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(sst__i0,,3);
  STRUCT_MIRROR_TYPE(EXT_SST) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sst[3]);
  STRUCT_MIRROR_FCNS_DECL(SIDEREM02_VME);
};
#endif//USER_DEF_SIDEREM02_VME

#ifndef USER_DEF_unpack_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(unpack_event) : public STRUCT_MIRROR_BASE(unpack_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_event_base);
  STRUCT_MIRROR_ITEM_CTRL(pileup);
  STRUCT_MIRROR_TYPE(LAND_CAMAC_PILEUP) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(pileup);
  STRUCT_MIRROR_ITEM_CTRL(vme);
  STRUCT_MIRROR_TYPE(LAND_VME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(vme);
  STRUCT_MIRROR_ITEM_CTRL(cros3);
  STRUCT_MIRROR_TYPE(CROS3_SUBEVENT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(cros3);
  STRUCT_MIRROR_ITEM_CTRL(sst1);
  STRUCT_MIRROR_TYPE(SIDEREM01_VME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sst1);
  STRUCT_MIRROR_ITEM_CTRL(cros3_rewrite);
  STRUCT_MIRROR_TYPE(CROS3_REWRITE_SUBEVENT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(cros3_rewrite);
  STRUCT_MIRROR_ITEM_CTRL(sst2);
  STRUCT_MIRROR_TYPE(SIDEREM02_VME) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(sst2);
  STRUCT_MIRROR_ITEM_CTRL(camac);
  STRUCT_MIRROR_TYPE(LAND_CAMAC_CONVERTER) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(camac);
  STRUCT_MIRROR_ITEM_CTRL(fastbus1);
  STRUCT_MIRROR_TYPE(LAND_FASTBUS1) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fastbus1);
  STRUCT_MIRROR_ITEM_CTRL(fastbus2);
  STRUCT_MIRROR_TYPE(LAND_FASTBUS2) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fastbus2);
  STRUCT_MIRROR_ITEM_CTRL(acq);
  STRUCT_MIRROR_TYPE(DUMMY) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(acq);
  STRUCT_MIRROR_ITEM_CTRL(camac_tcal_info);
  STRUCT_MIRROR_TYPE(LAND_CAMAC_TCAL_INFO) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(camac_tcal_info);
  STRUCT_MIRROR_ITEM_CTRL(camac_scalers);
  STRUCT_MIRROR_TYPE(LAND_CAMAC_SCALER) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(camac_scalers);
  STRUCT_MIRROR_ITEM_CTRL(fastbus1_error);
  STRUCT_MIRROR_TYPE(LAND_FASTBUS_ERROR_NGF) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fastbus1_error);
  STRUCT_MIRROR_ITEM_CTRL(fastbus2_error);
  STRUCT_MIRROR_TYPE(LAND_FASTBUS_ERROR_NGF) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(fastbus2_error);
  STRUCT_MIRROR_FCNS_DECL(unpack_event);
};
#endif//USER_DEF_unpack_event

#ifndef USER_DEF_unpack_sticky_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(unpack_sticky_event) : public STRUCT_MIRROR_BASE(unpack_sticky_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(unpack_sticky_event_base);
  STRUCT_MIRROR_FCNS_DECL(unpack_sticky_event);
};
#endif//USER_DEF_unpack_sticky_event

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_STRUCT *************************************************/


/** BEGIN_MIRROR_DECL_STRUCT *******************************************
 *
 * Mirror structure names.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CAMAC_LECROY_2277_1CH_HACK);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CAMAC_LECROY_4434);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CAMAC_PHILLIPS_7164);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CAMAC_SILENA_4418);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CROS3_REWRITE);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(DUMMY_WORD);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FASTBUS_LECROY_1875);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(FASTBUS_LECROY_1885);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_STD_VME);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(NTP64_TIME);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(NTP_MESSAGE);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(RANDOM_TCAL_TSTAMP_CLOCK);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(RANDOM_TCAL);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(SIDEREM_BLOCK);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(SOFT_SCALER32);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SUBTDC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1190);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SHORT_SUBTDC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SHORT_SUBTDC_ERROR);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1190_SHORT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SUBTDC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1290);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SHORT_SUBTDC);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SHORT_SUBTDC_ERROR);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V1290_SHORT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V775);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_CAEN_V830);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_MESYTEC_MADC32);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(VME_MESYTEC_MDPP16);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CROS3_REWRITE_SUBEVENT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(CROS3_SUBEVENT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(DUMMY);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_CAMAC_CONVERTER);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_CAMAC_PILEUP);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_CAMAC_SCALER);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_CAMAC_START_STOP_STAMP);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_CAMAC_TCAL_INFO);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_FASTBUS1);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_FASTBUS2);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_FASTBUS_ERROR);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_FASTBUS_ERROR_NGF);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(LAND_VME);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(SIDEREM01_VME);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(SIDEREM02_VME);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(unpack_event);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(unpack_sticky_event);

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_DECL_STRUCT ********************************************/


/** BEGIN_FUNCTION_CALL_PER_MEMBER *************************************
 *
 * Recursive function calls per member.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_fcncall_define.hh"

#ifndef USER_DEF_CAMAC_LECROY_2277_1CH_HACK
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CAMAC_LECROY_2277_1CH_HACK)::FCNCALL_NAME(CAMAC_LECROY_2277_1CH_HACK)
{
  FCNCALL_INIT;
  // raw_list_ii_zero_suppress<DATA16,DATA16,16> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CAMAC_LECROY_2277_1CH_HACK

#ifndef USER_DEF_CAMAC_LECROY_4434
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CAMAC_LECROY_4434)::FCNCALL_NAME(CAMAC_LECROY_4434)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA24,DATA24,32> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CAMAC_LECROY_4434

#ifndef USER_DEF_CAMAC_PHILLIPS_7164
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CAMAC_PHILLIPS_7164)::FCNCALL_NAME(CAMAC_PHILLIPS_7164)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12,DATA12,16> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CAMAC_PHILLIPS_7164

#ifndef USER_DEF_CAMAC_SILENA_4418
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CAMAC_SILENA_4418)::FCNCALL_NAME(CAMAC_SILENA_4418)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12_OVERFLOW,DATA12_OVERFLOW,8> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CAMAC_SILENA_4418

#ifndef USER_DEF_CROS3_REWRITE
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CROS3_REWRITE)::FCNCALL_NAME(CROS3_REWRITE)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<WIRE_START_END,WIRE_START_END,32768> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 data_size : 16;
      // uint32 threshold_curve : 1;
      // uint32 leading_edge : 1;
      // uint32 data : 1;
      // uint32 dummy_19 : 1;
      // uint32 trigger_time : 4;
      // uint32 ccb_id : 4;
      // uint32 event_counter : 4;
    // } ;
    // uint32 u32;
  // } h1;
  {
  FCNCALL_SUBNAME("h1");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 data_size : 16;
    // uint32 threshold_curve : 1;
    // uint32 leading_edge : 1;
    // uint32 data : 1;
    // uint32 dummy_19 : 1;
    // uint32 trigger_time : 4;
    // uint32 ccb_id : 4;
    // uint32 event_counter : 4;
  // } ;
  // uint32 data_size : 16;
  {
  FCNCALL_SUBNAME("data_size");
  { FCNCALL_CALL_CTRL_WRAP(h1.data_size,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.data_size)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 threshold_curve : 1;
  {
  FCNCALL_SUBNAME("threshold_curve");
  { FCNCALL_CALL_CTRL_WRAP(h1.threshold_curve,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.threshold_curve)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 leading_edge : 1;
  {
  FCNCALL_SUBNAME("leading_edge");
  { FCNCALL_CALL_CTRL_WRAP(h1.leading_edge,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.leading_edge)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 data : 1;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(h1.data,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.data)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_19 : 1;
  {
  FCNCALL_SUBNAME("dummy_19");
  { FCNCALL_CALL_CTRL_WRAP(h1.dummy_19,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.dummy_19)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_time : 4;
  {
  FCNCALL_SUBNAME("trigger_time");
  { FCNCALL_CALL_CTRL_WRAP(h1.trigger_time,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.trigger_time)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 ccb_id : 4;
  {
  FCNCALL_SUBNAME("ccb_id");
  { FCNCALL_CALL_CTRL_WRAP(h1.ccb_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.ccb_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_counter : 4;
  {
  FCNCALL_SUBNAME("event_counter");
  { FCNCALL_CALL_CTRL_WRAP(h1.event_counter,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h1.event_counter)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(h1.u32,FCNCALL_CALL_TYPE(uint32,h1.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 read_out_mode : 2;
      // uint32 dummy_2_3 : 2;
      // uint32 pulser_enabled : 1;
      // uint32 dummy_5_7 : 3;
      // uint32 statistics : 3;
      // uint32 both_edges : 1;
      // uint32 slices : 8;
      // uint32 scale : 2;
      // uint32 dummy_22_30 : 9;
      // uint32 odd_length16 : 1;
    // } ;
    // uint32 u32;
  // } h2;
  {
  FCNCALL_SUBNAME("h2");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 read_out_mode : 2;
    // uint32 dummy_2_3 : 2;
    // uint32 pulser_enabled : 1;
    // uint32 dummy_5_7 : 3;
    // uint32 statistics : 3;
    // uint32 both_edges : 1;
    // uint32 slices : 8;
    // uint32 scale : 2;
    // uint32 dummy_22_30 : 9;
    // uint32 odd_length16 : 1;
  // } ;
  // uint32 read_out_mode : 2;
  {
  FCNCALL_SUBNAME("read_out_mode");
  { FCNCALL_CALL_CTRL_WRAP(h2.read_out_mode,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.read_out_mode)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_2_3 : 2;
  {
  FCNCALL_SUBNAME("dummy_2_3");
  { FCNCALL_CALL_CTRL_WRAP(h2.dummy_2_3,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.dummy_2_3)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 pulser_enabled : 1;
  {
  FCNCALL_SUBNAME("pulser_enabled");
  { FCNCALL_CALL_CTRL_WRAP(h2.pulser_enabled,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.pulser_enabled)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_5_7 : 3;
  {
  FCNCALL_SUBNAME("dummy_5_7");
  { FCNCALL_CALL_CTRL_WRAP(h2.dummy_5_7,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.dummy_5_7)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 statistics : 3;
  {
  FCNCALL_SUBNAME("statistics");
  { FCNCALL_CALL_CTRL_WRAP(h2.statistics,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.statistics)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 both_edges : 1;
  {
  FCNCALL_SUBNAME("both_edges");
  { FCNCALL_CALL_CTRL_WRAP(h2.both_edges,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.both_edges)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 slices : 8;
  {
  FCNCALL_SUBNAME("slices");
  { FCNCALL_CALL_CTRL_WRAP(h2.slices,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.slices)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 scale : 2;
  {
  FCNCALL_SUBNAME("scale");
  { FCNCALL_CALL_CTRL_WRAP(h2.scale,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.scale)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_22_30 : 9;
  {
  FCNCALL_SUBNAME("dummy_22_30");
  { FCNCALL_CALL_CTRL_WRAP(h2.dummy_22_30,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.dummy_22_30)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 odd_length16 : 1;
  {
  FCNCALL_SUBNAME("odd_length16");
  { FCNCALL_CALL_CTRL_WRAP(h2.odd_length16,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,h2.odd_length16)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(h2.u32,FCNCALL_CALL_TYPE(uint32,h2.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 read_out_mode : 2;
      // uint32 dummy_2_3 : 2;
      // uint32 pulser_enabled : 1;
      // uint32 dummy_5_7 : 3;
      // uint32 statistics : 3;
      // uint32 both_edges : 1;
      // uint32 threshold_start : 8;
      // uint32 threshold_step : 4;
      // uint32 boards : 5;
      // uint32 dummy_29_31 : 3;
    // } ;
    // uint32 u32;
  // } trc_h2;
  {
  FCNCALL_SUBNAME("trc_h2");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 read_out_mode : 2;
    // uint32 dummy_2_3 : 2;
    // uint32 pulser_enabled : 1;
    // uint32 dummy_5_7 : 3;
    // uint32 statistics : 3;
    // uint32 both_edges : 1;
    // uint32 threshold_start : 8;
    // uint32 threshold_step : 4;
    // uint32 boards : 5;
    // uint32 dummy_29_31 : 3;
  // } ;
  // uint32 read_out_mode : 2;
  {
  FCNCALL_SUBNAME("read_out_mode");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.read_out_mode,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.read_out_mode)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_2_3 : 2;
  {
  FCNCALL_SUBNAME("dummy_2_3");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.dummy_2_3,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.dummy_2_3)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 pulser_enabled : 1;
  {
  FCNCALL_SUBNAME("pulser_enabled");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.pulser_enabled,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.pulser_enabled)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_5_7 : 3;
  {
  FCNCALL_SUBNAME("dummy_5_7");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.dummy_5_7,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.dummy_5_7)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 statistics : 3;
  {
  FCNCALL_SUBNAME("statistics");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.statistics,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.statistics)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 both_edges : 1;
  {
  FCNCALL_SUBNAME("both_edges");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.both_edges,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.both_edges)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 threshold_start : 8;
  {
  FCNCALL_SUBNAME("threshold_start");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.threshold_start,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.threshold_start)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 threshold_step : 4;
  {
  FCNCALL_SUBNAME("threshold_step");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.threshold_step,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.threshold_step)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 boards : 5;
  {
  FCNCALL_SUBNAME("boards");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.boards,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.boards)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_29_31 : 3;
  {
  FCNCALL_SUBNAME("dummy_29_31");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.dummy_29_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trc_h2.dummy_29_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trc_h2.u32,FCNCALL_CALL_TYPE(uint32,trc_h2.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CROS3_REWRITE

#ifndef USER_DEF_DUMMY_WORD
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(DUMMY_WORD)::FCNCALL_NAME(DUMMY_WORD)
{
  FCNCALL_INIT;
  // uint32 dummy_word;
  {
  FCNCALL_SUBNAME("dummy_word");
  { FCNCALL_CALL_CTRL_WRAP(dummy_word,FCNCALL_CALL_TYPE(uint32,dummy_word)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_DUMMY_WORD

#ifndef USER_DEF_FASTBUS_LECROY_1875
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FASTBUS_LECROY_1875)::FCNCALL_NAME(FASTBUS_LECROY_1875)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12_RANGE,DATA12_RANGE,64> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_FASTBUS_LECROY_1875

#ifndef USER_DEF_FASTBUS_LECROY_1885
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(FASTBUS_LECROY_1885)::FCNCALL_NAME(FASTBUS_LECROY_1885)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12_RANGE,DATA12_RANGE,96> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_FASTBUS_LECROY_1885

#ifndef USER_DEF_LAND_STD_VME
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_STD_VME)::FCNCALL_NAME(LAND_STD_VME)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 fail_general : 1;
      // uint32 fail_data_corrupt : 1;
      // uint32 fail_data_missing : 1;
      // uint32 fail_data_too_much : 1;
      // uint32 fail_event_counter_mismatch : 1;
      // uint32 fail_readout_error_driver : 1;
      // uint32 fail_unexpected_trigger : 1;
      // uint32 fail_firmware_mismatch : 1;
      // uint32 dummy_8_21 : 14;
      // uint32 has_multi_trlo_ii_counter0 : 1;
      // uint32 has_clock_counter_stamp : 1;
      // uint32 has_continous_event_counter : 1;
      // uint32 has_update_qdc_iped_value : 1;
      // uint32 spurious_start_before_tcal : 1;
      // uint32 has_no_zero_suppression : 1;
      // uint32 has_multi_adctdc_counter0 : 1;
      // uint32 has_multi_scaler_counter0 : 1;
      // uint32 has_multi_event : 1;
      // uint32 has_time_stamp : 1;
    // } ;
    // uint32 u32;
  // } failure;
  {
  FCNCALL_SUBNAME("failure");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 fail_general : 1;
    // uint32 fail_data_corrupt : 1;
    // uint32 fail_data_missing : 1;
    // uint32 fail_data_too_much : 1;
    // uint32 fail_event_counter_mismatch : 1;
    // uint32 fail_readout_error_driver : 1;
    // uint32 fail_unexpected_trigger : 1;
    // uint32 fail_firmware_mismatch : 1;
    // uint32 dummy_8_21 : 14;
    // uint32 has_multi_trlo_ii_counter0 : 1;
    // uint32 has_clock_counter_stamp : 1;
    // uint32 has_continous_event_counter : 1;
    // uint32 has_update_qdc_iped_value : 1;
    // uint32 spurious_start_before_tcal : 1;
    // uint32 has_no_zero_suppression : 1;
    // uint32 has_multi_adctdc_counter0 : 1;
    // uint32 has_multi_scaler_counter0 : 1;
    // uint32 has_multi_event : 1;
    // uint32 has_time_stamp : 1;
  // } ;
  // uint32 fail_general : 1;
  {
  FCNCALL_SUBNAME("fail_general");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_general,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_general)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_data_corrupt : 1;
  {
  FCNCALL_SUBNAME("fail_data_corrupt");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_data_corrupt,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_data_corrupt)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_data_missing : 1;
  {
  FCNCALL_SUBNAME("fail_data_missing");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_data_missing,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_data_missing)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_data_too_much : 1;
  {
  FCNCALL_SUBNAME("fail_data_too_much");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_data_too_much,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_data_too_much)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_event_counter_mismatch : 1;
  {
  FCNCALL_SUBNAME("fail_event_counter_mismatch");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_event_counter_mismatch,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_event_counter_mismatch)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_readout_error_driver : 1;
  {
  FCNCALL_SUBNAME("fail_readout_error_driver");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_readout_error_driver,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_readout_error_driver)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_unexpected_trigger : 1;
  {
  FCNCALL_SUBNAME("fail_unexpected_trigger");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_unexpected_trigger,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_unexpected_trigger)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fail_firmware_mismatch : 1;
  {
  FCNCALL_SUBNAME("fail_firmware_mismatch");
  { FCNCALL_CALL_CTRL_WRAP(failure.fail_firmware_mismatch,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.fail_firmware_mismatch)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_8_21 : 14;
  {
  FCNCALL_SUBNAME("dummy_8_21");
  { FCNCALL_CALL_CTRL_WRAP(failure.dummy_8_21,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.dummy_8_21)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_multi_trlo_ii_counter0 : 1;
  {
  FCNCALL_SUBNAME("has_multi_trlo_ii_counter0");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_multi_trlo_ii_counter0,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_multi_trlo_ii_counter0)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_clock_counter_stamp : 1;
  {
  FCNCALL_SUBNAME("has_clock_counter_stamp");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_clock_counter_stamp,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_clock_counter_stamp)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_continous_event_counter : 1;
  {
  FCNCALL_SUBNAME("has_continous_event_counter");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_continous_event_counter,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_continous_event_counter)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_update_qdc_iped_value : 1;
  {
  FCNCALL_SUBNAME("has_update_qdc_iped_value");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_update_qdc_iped_value,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_update_qdc_iped_value)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 spurious_start_before_tcal : 1;
  {
  FCNCALL_SUBNAME("spurious_start_before_tcal");
  { FCNCALL_CALL_CTRL_WRAP(failure.spurious_start_before_tcal,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.spurious_start_before_tcal)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_no_zero_suppression : 1;
  {
  FCNCALL_SUBNAME("has_no_zero_suppression");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_no_zero_suppression,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_no_zero_suppression)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_multi_adctdc_counter0 : 1;
  {
  FCNCALL_SUBNAME("has_multi_adctdc_counter0");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_multi_adctdc_counter0,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_multi_adctdc_counter0)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_multi_scaler_counter0 : 1;
  {
  FCNCALL_SUBNAME("has_multi_scaler_counter0");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_multi_scaler_counter0,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_multi_scaler_counter0)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_multi_event : 1;
  {
  FCNCALL_SUBNAME("has_multi_event");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_multi_event,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_multi_event)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_time_stamp : 1;
  {
  FCNCALL_SUBNAME("has_time_stamp");
  { FCNCALL_CALL_CTRL_WRAP(failure.has_time_stamp,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,failure.has_time_stamp)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(failure.u32,FCNCALL_CALL_TYPE(uint32,failure.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // uint32 continous_event_counter;
  {
  FCNCALL_SUBNAME("continous_event_counter");
  { FCNCALL_CALL_CTRL_WRAP(continous_event_counter,FCNCALL_CALL_TYPE(uint32,continous_event_counter)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 time_stamp;
  {
  FCNCALL_SUBNAME("time_stamp");
  { FCNCALL_CALL_CTRL_WRAP(time_stamp,FCNCALL_CALL_TYPE(uint32,time_stamp)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 clock_counter_stamp;
  {
  FCNCALL_SUBNAME("clock_counter_stamp");
  { FCNCALL_CALL_CTRL_WRAP(clock_counter_stamp,FCNCALL_CALL_TYPE(uint32,clock_counter_stamp)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 iped;
  {
  FCNCALL_SUBNAME("iped");
  { FCNCALL_CALL_CTRL_WRAP(iped,FCNCALL_CALL_TYPE(uint32,iped)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 multi_events;
  {
  FCNCALL_SUBNAME("multi_events");
  { FCNCALL_CALL_CTRL_WRAP(multi_events,FCNCALL_CALL_TYPE(uint32,multi_events)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 multi_trlo_ii_counter0;
  {
  FCNCALL_SUBNAME("multi_trlo_ii_counter0");
  { FCNCALL_CALL_CTRL_WRAP(multi_trlo_ii_counter0,FCNCALL_CALL_TYPE(uint32,multi_trlo_ii_counter0)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 multi_scaler_counter0;
  {
  FCNCALL_SUBNAME("multi_scaler_counter0");
  { FCNCALL_CALL_CTRL_WRAP(multi_scaler_counter0,FCNCALL_CALL_TYPE(uint32,multi_scaler_counter0)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 multi_adctdc_counter0;
  {
  FCNCALL_SUBNAME("multi_adctdc_counter0");
  { FCNCALL_CALL_CTRL_WRAP(multi_adctdc_counter0,FCNCALL_CALL_TYPE(uint32,multi_adctdc_counter0)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_STD_VME

#ifndef USER_DEF_NTP64_TIME
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(NTP64_TIME)::FCNCALL_NAME(NTP64_TIME)
{
  FCNCALL_INIT;
  // uint32 sec;
  {
  FCNCALL_SUBNAME("sec");
  { FCNCALL_CALL_CTRL_WRAP(sec,FCNCALL_CALL_TYPE(uint32,sec)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 frac;
  {
  FCNCALL_SUBNAME("frac");
  { FCNCALL_CALL_CTRL_WRAP(frac,FCNCALL_CALL_TYPE(uint32,frac)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_NTP64_TIME

#ifndef USER_DEF_NTP_MESSAGE
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(NTP_MESSAGE)::FCNCALL_NAME(NTP_MESSAGE)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 word_count : 16;
      // uint32 quick_burst : 1;
      // uint32 dummy_17_23 : 7;
      // uint32 id : 8;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 word_count : 16;
    // uint32 quick_burst : 1;
    // uint32 dummy_17_23 : 7;
    // uint32 id : 8;
  // } ;
  // uint32 word_count : 16;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(header.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 quick_burst : 1;
  {
  FCNCALL_SUBNAME("quick_burst");
  { FCNCALL_CALL_CTRL_WRAP(header.quick_burst,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.quick_burst)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_17_23 : 7;
  {
  FCNCALL_SUBNAME("dummy_17_23");
  { FCNCALL_CALL_CTRL_WRAP(header.dummy_17_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.dummy_17_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 id : 8;
  {
  FCNCALL_SUBNAME("id");
  { FCNCALL_CALL_CTRL_WRAP(header.id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.id)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // uint32 server_id;
  {
  FCNCALL_SUBNAME("server_id");
  { FCNCALL_CALL_CTRL_WRAP(server_id,FCNCALL_CALL_TYPE(uint32,server_id)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 precision : 8;
      // uint32 poll : 8;
      // uint32 stratum : 4;
      // uint32 dummy_20_23 : 4;
      // uint32 mode : 3;
      // uint32 version : 3;
      // uint32 leap : 2;
    // } ;
    // uint32 u32;
  // } sspp;
  {
  FCNCALL_SUBNAME("sspp");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 precision : 8;
    // uint32 poll : 8;
    // uint32 stratum : 4;
    // uint32 dummy_20_23 : 4;
    // uint32 mode : 3;
    // uint32 version : 3;
    // uint32 leap : 2;
  // } ;
  // uint32 precision : 8;
  {
  FCNCALL_SUBNAME("precision");
  { FCNCALL_CALL_CTRL_WRAP(sspp.precision,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.precision)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 poll : 8;
  {
  FCNCALL_SUBNAME("poll");
  { FCNCALL_CALL_CTRL_WRAP(sspp.poll,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.poll)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 stratum : 4;
  {
  FCNCALL_SUBNAME("stratum");
  { FCNCALL_CALL_CTRL_WRAP(sspp.stratum,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.stratum)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_20_23 : 4;
  {
  FCNCALL_SUBNAME("dummy_20_23");
  { FCNCALL_CALL_CTRL_WRAP(sspp.dummy_20_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.dummy_20_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 mode : 3;
  {
  FCNCALL_SUBNAME("mode");
  { FCNCALL_CALL_CTRL_WRAP(sspp.mode,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.mode)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 version : 3;
  {
  FCNCALL_SUBNAME("version");
  { FCNCALL_CALL_CTRL_WRAP(sspp.version,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.version)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 leap : 2;
  {
  FCNCALL_SUBNAME("leap");
  { FCNCALL_CALL_CTRL_WRAP(sspp.leap,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,sspp.leap)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(sspp.u32,FCNCALL_CALL_TYPE(uint32,sspp.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 frac : 16;
      // uint32 sec : 16;
    // } ;
    // uint32 u32;
  // } root_dly;
  {
  FCNCALL_SUBNAME("root_dly");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 frac : 16;
    // uint32 sec : 16;
  // } ;
  // uint32 frac : 16;
  {
  FCNCALL_SUBNAME("frac");
  { FCNCALL_CALL_CTRL_WRAP(root_dly.frac,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,root_dly.frac)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 sec : 16;
  {
  FCNCALL_SUBNAME("sec");
  { FCNCALL_CALL_CTRL_WRAP(root_dly.sec,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,root_dly.sec)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(root_dly.u32,FCNCALL_CALL_TYPE(uint32,root_dly.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 frac : 16;
      // uint32 sec : 16;
    // } ;
    // uint32 u32;
  // } root_disp;
  {
  FCNCALL_SUBNAME("root_disp");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 frac : 16;
    // uint32 sec : 16;
  // } ;
  // uint32 frac : 16;
  {
  FCNCALL_SUBNAME("frac");
  { FCNCALL_CALL_CTRL_WRAP(root_disp.frac,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,root_disp.frac)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 sec : 16;
  {
  FCNCALL_SUBNAME("sec");
  { FCNCALL_CALL_CTRL_WRAP(root_disp.sec,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,root_disp.sec)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(root_disp.u32,FCNCALL_CALL_TYPE(uint32,root_disp.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // uint32 refid;
  {
  FCNCALL_SUBNAME("refid");
  { FCNCALL_CALL_CTRL_WRAP(refid,FCNCALL_CALL_TYPE(uint32,refid)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME orig2time;
  {
  FCNCALL_SUBNAME("orig2time");
  { FCNCALL_CALL_CTRL_WRAP(orig2time,orig2time.FCNCALL_CALL(orig2time)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME tmit2time;
  {
  FCNCALL_SUBNAME("tmit2time");
  { FCNCALL_CALL_CTRL_WRAP(tmit2time,tmit2time.FCNCALL_CALL(tmit2time)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME rec2time;
  {
  FCNCALL_SUBNAME("rec2time");
  { FCNCALL_CALL_CTRL_WRAP(rec2time,rec2time.FCNCALL_CALL(rec2time)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME rx2time;
  {
  FCNCALL_SUBNAME("rx2time");
  { FCNCALL_CALL_CTRL_WRAP(rx2time,rx2time.FCNCALL_CALL(rx2time)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME reftime;
  {
  FCNCALL_SUBNAME("reftime");
  { FCNCALL_CALL_CTRL_WRAP(reftime,reftime.FCNCALL_CALL(reftime)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME origtime;
  {
  FCNCALL_SUBNAME("origtime");
  { FCNCALL_CALL_CTRL_WRAP(origtime,origtime.FCNCALL_CALL(origtime)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME rectime;
  {
  FCNCALL_SUBNAME("rectime");
  { FCNCALL_CALL_CTRL_WRAP(rectime,rectime.FCNCALL_CALL(rectime)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME tmittime;
  {
  FCNCALL_SUBNAME("tmittime");
  { FCNCALL_CALL_CTRL_WRAP(tmittime,tmittime.FCNCALL_CALL(tmittime)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME rxtime;
  {
  FCNCALL_SUBNAME("rxtime");
  { FCNCALL_CALL_CTRL_WRAP(rxtime,rxtime.FCNCALL_CALL(rxtime)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_NTP_MESSAGE

#ifndef USER_DEF_RANDOM_TCAL_TSTAMP_CLOCK
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(RANDOM_TCAL_TSTAMP_CLOCK)::FCNCALL_NAME(RANDOM_TCAL_TSTAMP_CLOCK)
{
  FCNCALL_INIT;
  // uint32 soft_latches;
  {
  FCNCALL_SUBNAME("soft_latches");
  { FCNCALL_CALL_CTRL_WRAP(soft_latches,FCNCALL_CALL_TYPE(uint32,soft_latches)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 hard_latches;
  {
  FCNCALL_SUBNAME("hard_latches");
  { FCNCALL_CALL_CTRL_WRAP(hard_latches,FCNCALL_CALL_TYPE(uint32,hard_latches)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 clock_ticks;
  {
  FCNCALL_SUBNAME("clock_ticks");
  { FCNCALL_CALL_CTRL_WRAP(clock_ticks,FCNCALL_CALL_TYPE(uint32,clock_ticks)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME before;
  {
  FCNCALL_SUBNAME("before");
  { FCNCALL_CALL_CTRL_WRAP(before,before.FCNCALL_CALL(before)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP64_TIME after;
  {
  FCNCALL_SUBNAME("after");
  { FCNCALL_CALL_CTRL_WRAP(after,after.FCNCALL_CALL(after)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_RANDOM_TCAL_TSTAMP_CLOCK

#ifndef USER_DEF_RANDOM_TCAL
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(RANDOM_TCAL)::FCNCALL_NAME(RANDOM_TCAL)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 word_count : 8;
      // uint32 pulses : 4;
      // uint32 clock_bits : 6;
      // uint32 has_tstamp1 : 1;
      // uint32 has_tstamp2 : 1;
      // uint32 dummy_20_23 : 4;
      // uint32 id : 8;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 word_count : 8;
    // uint32 pulses : 4;
    // uint32 clock_bits : 6;
    // uint32 has_tstamp1 : 1;
    // uint32 has_tstamp2 : 1;
    // uint32 dummy_20_23 : 4;
    // uint32 id : 8;
  // } ;
  // uint32 word_count : 8;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(header.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 pulses : 4;
  {
  FCNCALL_SUBNAME("pulses");
  { FCNCALL_CALL_CTRL_WRAP(header.pulses,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.pulses)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 clock_bits : 6;
  {
  FCNCALL_SUBNAME("clock_bits");
  { FCNCALL_CALL_CTRL_WRAP(header.clock_bits,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.clock_bits)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_tstamp1 : 1;
  {
  FCNCALL_SUBNAME("has_tstamp1");
  { FCNCALL_CALL_CTRL_WRAP(header.has_tstamp1,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.has_tstamp1)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 has_tstamp2 : 1;
  {
  FCNCALL_SUBNAME("has_tstamp2");
  { FCNCALL_CALL_CTRL_WRAP(header.has_tstamp2,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.has_tstamp2)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_20_23 : 4;
  {
  FCNCALL_SUBNAME("dummy_20_23");
  { FCNCALL_CALL_CTRL_WRAP(header.dummy_20_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.dummy_20_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 id : 8;
  {
  FCNCALL_SUBNAME("id");
  { FCNCALL_CALL_CTRL_WRAP(header.id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.id)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // RANDOM_TCAL_TSTAMP_CLOCK tstamp1;
  {
  FCNCALL_SUBNAME("tstamp1");
  { FCNCALL_CALL_CTRL_WRAP(tstamp1,tstamp1.FCNCALL_CALL(tstamp1)); }
  FCNCALL_SUBNAME_END;
  }
  // RANDOM_TCAL_TSTAMP_CLOCK tstamp2;
  {
  FCNCALL_SUBNAME("tstamp2");
  { FCNCALL_CALL_CTRL_WRAP(tstamp2,tstamp2.FCNCALL_CALL(tstamp2)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_RANDOM_TCAL

#ifndef USER_DEF_SIDEREM_BLOCK
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(SIDEREM_BLOCK)::FCNCALL_NAME(SIDEREM_BLOCK)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12,DATA12,512> data[4];
  {
  FCNCALL_SUBNAME("data");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(data__i0,,__i0,data[__i0].FCNCALL_CALL(data[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 count : 12;
      // uint32 local_event_counter : 4;
      // uint32 local_trigger : 4;
      // uint32 siderem : 4;
      // uint32 gtb : 4;
      // uint32 sam : 4;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 count : 12;
    // uint32 local_event_counter : 4;
    // uint32 local_trigger : 4;
    // uint32 siderem : 4;
    // uint32 gtb : 4;
    // uint32 sam : 4;
  // } ;
  // uint32 count : 12;
  {
  FCNCALL_SUBNAME("count");
  { FCNCALL_CALL_CTRL_WRAP(header.count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 local_event_counter : 4;
  {
  FCNCALL_SUBNAME("local_event_counter");
  { FCNCALL_CALL_CTRL_WRAP(header.local_event_counter,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.local_event_counter)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 local_trigger : 4;
  {
  FCNCALL_SUBNAME("local_trigger");
  { FCNCALL_CALL_CTRL_WRAP(header.local_trigger,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.local_trigger)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 siderem : 4;
  {
  FCNCALL_SUBNAME("siderem");
  { FCNCALL_CALL_CTRL_WRAP(header.siderem,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.siderem)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 gtb : 4;
  {
  FCNCALL_SUBNAME("gtb");
  { FCNCALL_CALL_CTRL_WRAP(header.gtb,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.gtb)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 sam : 4;
  {
  FCNCALL_SUBNAME("sam");
  { FCNCALL_CALL_CTRL_WRAP(header.sam,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.sam)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_SIDEREM_BLOCK

#ifndef USER_DEF_SOFT_SCALER32
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(SOFT_SCALER32)::FCNCALL_NAME(SOFT_SCALER32)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA32,DATA32,32> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_SOFT_SCALER32

#ifndef USER_DEF_VME_CAEN_V1190_SUBTDC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1190_SUBTDC)::FCNCALL_NAME(VME_CAEN_V1190_SUBTDC)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 bunch_id : 12;
      // uint32 event_id : 12;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 bunch_id : 12;
    // uint32 event_id : 12;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 bunch_id : 12;
  {
  FCNCALL_SUBNAME("bunch_id");
  { FCNCALL_CALL_CTRL_WRAP(header.bunch_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.bunch_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_id : 12;
  {
  FCNCALL_SUBNAME("event_id");
  { FCNCALL_CALL_CTRL_WRAP(header.event_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(header.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(header.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 flags : 15;
      // uint32 dummy_15_23 : 9;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } error_flags;
  {
  FCNCALL_SUBNAME("error_flags");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 flags : 15;
    // uint32 dummy_15_23 : 9;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 flags : 15;
  {
  FCNCALL_SUBNAME("flags");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.flags,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.flags)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_15_23 : 9;
  {
  FCNCALL_SUBNAME("dummy_15_23");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_15_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_15_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.u32,FCNCALL_CALL_TYPE(uint32,error_flags.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 word_count : 12;
      // uint32 event_id : 12;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trailer;
  {
  FCNCALL_SUBNAME("trailer");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 word_count : 12;
    // uint32 event_id : 12;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 word_count : 12;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(trailer.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_id : 12;
  {
  FCNCALL_SUBNAME("event_id");
  { FCNCALL_CALL_CTRL_WRAP(trailer.event_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.event_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(trailer.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(trailer.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trailer.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trailer.u32,FCNCALL_CALL_TYPE(uint32,trailer.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1190_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1190
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1190)::FCNCALL_NAME(VME_CAEN_V1190)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 event_number : 22;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 event_number : 22;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(header.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_number : 22;
  {
  FCNCALL_SUBNAME("event_number");
  { FCNCALL_CALL_CTRL_WRAP(header.event_number,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_number)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V1190_SUBTDC tdc[4];
  {
  FCNCALL_SUBNAME("tdc");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(tdc__i0,,__i0,tdc[__i0].FCNCALL_CALL(tdc[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 time_tag : 27;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trigger;
  {
  FCNCALL_SUBNAME("trigger");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 time_tag : 27;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 time_tag : 27;
  {
  FCNCALL_SUBNAME("time_tag");
  { FCNCALL_CALL_CTRL_WRAP(trigger.time_tag,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.time_tag)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trigger.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trigger.u32,FCNCALL_CALL_TYPE(uint32,trigger.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 word_count : 15;
      // uint32 dummy_20_23 : 4;
      // uint32 tdc_error : 1;
      // uint32 buffer_overflow : 1;
      // uint32 trigger_lost : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trailer;
  {
  FCNCALL_SUBNAME("trailer");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 word_count : 15;
    // uint32 dummy_20_23 : 4;
    // uint32 tdc_error : 1;
    // uint32 buffer_overflow : 1;
    // uint32 trigger_lost : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(trailer.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 word_count : 15;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(trailer.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_20_23 : 4;
  {
  FCNCALL_SUBNAME("dummy_20_23");
  { FCNCALL_CALL_CTRL_WRAP(trailer.dummy_20_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.dummy_20_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc_error : 1;
  {
  FCNCALL_SUBNAME("tdc_error");
  { FCNCALL_CALL_CTRL_WRAP(trailer.tdc_error,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.tdc_error)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 buffer_overflow : 1;
  {
  FCNCALL_SUBNAME("buffer_overflow");
  { FCNCALL_CALL_CTRL_WRAP(trailer.buffer_overflow,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.buffer_overflow)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_lost : 1;
  {
  FCNCALL_SUBNAME("trigger_lost");
  { FCNCALL_CALL_CTRL_WRAP(trailer.trigger_lost,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.trigger_lost)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trailer.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trailer.u32,FCNCALL_CALL_TYPE(uint32,trailer.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1190

#ifndef USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1190_SHORT_SUBTDC)::FCNCALL_NAME(VME_CAEN_V1190_SHORT_SUBTDC)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC_ERROR
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1190_SHORT_SUBTDC_ERROR)::FCNCALL_NAME(VME_CAEN_V1190_SHORT_SUBTDC_ERROR)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 flags : 15;
      // uint32 dummy_15_23 : 9;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } error_flags;
  {
  FCNCALL_SUBNAME("error_flags");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 flags : 15;
    // uint32 dummy_15_23 : 9;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 flags : 15;
  {
  FCNCALL_SUBNAME("flags");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.flags,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.flags)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_15_23 : 9;
  {
  FCNCALL_SUBNAME("dummy_15_23");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_15_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_15_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.u32,FCNCALL_CALL_TYPE(uint32,error_flags.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1190_SHORT_SUBTDC_ERROR

#ifndef USER_DEF_VME_CAEN_V1190_SHORT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1190_SHORT)::FCNCALL_NAME(VME_CAEN_V1190_SHORT)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 event_number : 22;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 event_number : 22;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(header.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_number : 22;
  {
  FCNCALL_SUBNAME("event_number");
  { FCNCALL_CALL_CTRL_WRAP(header.event_number,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_number)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V1190_SHORT_SUBTDC tdc[4];
  {
  FCNCALL_SUBNAME("tdc");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(tdc__i0,,__i0,tdc[__i0].FCNCALL_CALL(tdc[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V1190_SHORT_SUBTDC_ERROR err[4];
  {
  FCNCALL_SUBNAME("err");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(err__i0,,__i0,err[__i0].FCNCALL_CALL(err[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 time_tag : 27;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trigger;
  {
  FCNCALL_SUBNAME("trigger");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 time_tag : 27;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 time_tag : 27;
  {
  FCNCALL_SUBNAME("time_tag");
  { FCNCALL_CALL_CTRL_WRAP(trigger.time_tag,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.time_tag)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trigger.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trigger.u32,FCNCALL_CALL_TYPE(uint32,trigger.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 word_count : 15;
      // uint32 dummy_20_23 : 4;
      // uint32 tdc_error : 1;
      // uint32 buffer_overflow : 1;
      // uint32 trigger_lost : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trailer;
  {
  FCNCALL_SUBNAME("trailer");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 word_count : 15;
    // uint32 dummy_20_23 : 4;
    // uint32 tdc_error : 1;
    // uint32 buffer_overflow : 1;
    // uint32 trigger_lost : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(trailer.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 word_count : 15;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(trailer.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_20_23 : 4;
  {
  FCNCALL_SUBNAME("dummy_20_23");
  { FCNCALL_CALL_CTRL_WRAP(trailer.dummy_20_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.dummy_20_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc_error : 1;
  {
  FCNCALL_SUBNAME("tdc_error");
  { FCNCALL_CALL_CTRL_WRAP(trailer.tdc_error,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.tdc_error)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 buffer_overflow : 1;
  {
  FCNCALL_SUBNAME("buffer_overflow");
  { FCNCALL_CALL_CTRL_WRAP(trailer.buffer_overflow,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.buffer_overflow)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_lost : 1;
  {
  FCNCALL_SUBNAME("trigger_lost");
  { FCNCALL_CALL_CTRL_WRAP(trailer.trigger_lost,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.trigger_lost)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trailer.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trailer.u32,FCNCALL_CALL_TYPE(uint32,trailer.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1190_SHORT

#ifndef USER_DEF_VME_CAEN_V1290_SUBTDC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1290_SUBTDC)::FCNCALL_NAME(VME_CAEN_V1290_SUBTDC)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 bunch_id : 12;
      // uint32 event_id : 12;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 bunch_id : 12;
    // uint32 event_id : 12;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 bunch_id : 12;
  {
  FCNCALL_SUBNAME("bunch_id");
  { FCNCALL_CALL_CTRL_WRAP(header.bunch_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.bunch_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_id : 12;
  {
  FCNCALL_SUBNAME("event_id");
  { FCNCALL_CALL_CTRL_WRAP(header.event_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(header.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(header.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 flags : 15;
      // uint32 dummy_15_23 : 9;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } error_flags;
  {
  FCNCALL_SUBNAME("error_flags");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 flags : 15;
    // uint32 dummy_15_23 : 9;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 flags : 15;
  {
  FCNCALL_SUBNAME("flags");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.flags,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.flags)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_15_23 : 9;
  {
  FCNCALL_SUBNAME("dummy_15_23");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_15_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_15_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.u32,FCNCALL_CALL_TYPE(uint32,error_flags.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 word_count : 12;
      // uint32 event_id : 12;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trailer;
  {
  FCNCALL_SUBNAME("trailer");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 word_count : 12;
    // uint32 event_id : 12;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 word_count : 12;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(trailer.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_id : 12;
  {
  FCNCALL_SUBNAME("event_id");
  { FCNCALL_CALL_CTRL_WRAP(trailer.event_id,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.event_id)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(trailer.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(trailer.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trailer.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trailer.u32,FCNCALL_CALL_TYPE(uint32,trailer.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1290_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1290
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1290)::FCNCALL_NAME(VME_CAEN_V1290)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 event_number : 22;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 event_number : 22;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(header.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_number : 22;
  {
  FCNCALL_SUBNAME("event_number");
  { FCNCALL_CALL_CTRL_WRAP(header.event_number,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_number)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V1290_SUBTDC tdc[4];
  {
  FCNCALL_SUBNAME("tdc");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(tdc__i0,,__i0,tdc[__i0].FCNCALL_CALL(tdc[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 time_tag : 27;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trigger;
  {
  FCNCALL_SUBNAME("trigger");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 time_tag : 27;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 time_tag : 27;
  {
  FCNCALL_SUBNAME("time_tag");
  { FCNCALL_CALL_CTRL_WRAP(trigger.time_tag,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.time_tag)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trigger.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trigger.u32,FCNCALL_CALL_TYPE(uint32,trigger.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 word_count : 15;
      // uint32 dummy_20_23 : 4;
      // uint32 tdc_error : 1;
      // uint32 buffer_overflow : 1;
      // uint32 trigger_lost : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trailer;
  {
  FCNCALL_SUBNAME("trailer");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 word_count : 15;
    // uint32 dummy_20_23 : 4;
    // uint32 tdc_error : 1;
    // uint32 buffer_overflow : 1;
    // uint32 trigger_lost : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(trailer.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 word_count : 15;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(trailer.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_20_23 : 4;
  {
  FCNCALL_SUBNAME("dummy_20_23");
  { FCNCALL_CALL_CTRL_WRAP(trailer.dummy_20_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.dummy_20_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc_error : 1;
  {
  FCNCALL_SUBNAME("tdc_error");
  { FCNCALL_CALL_CTRL_WRAP(trailer.tdc_error,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.tdc_error)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 buffer_overflow : 1;
  {
  FCNCALL_SUBNAME("buffer_overflow");
  { FCNCALL_CALL_CTRL_WRAP(trailer.buffer_overflow,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.buffer_overflow)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_lost : 1;
  {
  FCNCALL_SUBNAME("trigger_lost");
  { FCNCALL_CALL_CTRL_WRAP(trailer.trigger_lost,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.trigger_lost)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trailer.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trailer.u32,FCNCALL_CALL_TYPE(uint32,trailer.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1290

#ifndef USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1290_SHORT_SUBTDC)::FCNCALL_NAME(VME_CAEN_V1290_SHORT_SUBTDC)
{
  FCNCALL_INIT;
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC

#ifndef USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC_ERROR
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1290_SHORT_SUBTDC_ERROR)::FCNCALL_NAME(VME_CAEN_V1290_SHORT_SUBTDC_ERROR)
{
  FCNCALL_INIT;
  // union 
  // {
    // struct 
    // {
      // uint32 flags : 15;
      // uint32 dummy_15_23 : 9;
      // uint32 tdc : 2;
      // uint32 dummy_26 : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } error_flags;
  {
  FCNCALL_SUBNAME("error_flags");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 flags : 15;
    // uint32 dummy_15_23 : 9;
    // uint32 tdc : 2;
    // uint32 dummy_26 : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 flags : 15;
  {
  FCNCALL_SUBNAME("flags");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.flags,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.flags)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_15_23 : 9;
  {
  FCNCALL_SUBNAME("dummy_15_23");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_15_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_15_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc : 2;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.tdc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.tdc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_26 : 1;
  {
  FCNCALL_SUBNAME("dummy_26");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.dummy_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.dummy_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_flags.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(error_flags.u32,FCNCALL_CALL_TYPE(uint32,error_flags.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1290_SHORT_SUBTDC_ERROR

#ifndef USER_DEF_VME_CAEN_V1290_SHORT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V1290_SHORT)::FCNCALL_NAME(VME_CAEN_V1290_SHORT)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA24,DATA24,32,128> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 event_number : 22;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 event_number : 22;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(header.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 event_number : 22;
  {
  FCNCALL_SUBNAME("event_number");
  { FCNCALL_CALL_CTRL_WRAP(header.event_number,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_number)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V1290_SHORT_SUBTDC tdc[4];
  {
  FCNCALL_SUBNAME("tdc");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(tdc__i0,,__i0,tdc[__i0].FCNCALL_CALL(tdc[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V1290_SHORT_SUBTDC_ERROR err[4];
  {
  FCNCALL_SUBNAME("err");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(err__i0,,__i0,err[__i0].FCNCALL_CALL(err[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 time_tag : 27;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trigger;
  {
  FCNCALL_SUBNAME("trigger");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 time_tag : 27;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 time_tag : 27;
  {
  FCNCALL_SUBNAME("time_tag");
  { FCNCALL_CALL_CTRL_WRAP(trigger.time_tag,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.time_tag)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trigger.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trigger.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trigger.u32,FCNCALL_CALL_TYPE(uint32,trigger.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 geom : 5;
      // uint32 word_count : 15;
      // uint32 dummy_20_23 : 4;
      // uint32 tdc_error : 1;
      // uint32 buffer_overflow : 1;
      // uint32 trigger_lost : 1;
      // uint32 unnamed_27_31 : 5;
    // } ;
    // uint32 u32;
  // } trailer;
  {
  FCNCALL_SUBNAME("trailer");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 geom : 5;
    // uint32 word_count : 15;
    // uint32 dummy_20_23 : 4;
    // uint32 tdc_error : 1;
    // uint32 buffer_overflow : 1;
    // uint32 trigger_lost : 1;
    // uint32 unnamed_27_31 : 5;
  // } ;
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(trailer.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.geom)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 word_count : 15;
  {
  FCNCALL_SUBNAME("word_count");
  { FCNCALL_CALL_CTRL_WRAP(trailer.word_count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.word_count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_20_23 : 4;
  {
  FCNCALL_SUBNAME("dummy_20_23");
  { FCNCALL_CALL_CTRL_WRAP(trailer.dummy_20_23,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.dummy_20_23)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 tdc_error : 1;
  {
  FCNCALL_SUBNAME("tdc_error");
  { FCNCALL_CALL_CTRL_WRAP(trailer.tdc_error,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.tdc_error)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 buffer_overflow : 1;
  {
  FCNCALL_SUBNAME("buffer_overflow");
  { FCNCALL_CALL_CTRL_WRAP(trailer.buffer_overflow,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.buffer_overflow)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 trigger_lost : 1;
  {
  FCNCALL_SUBNAME("trigger_lost");
  { FCNCALL_CALL_CTRL_WRAP(trailer.trigger_lost,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.trigger_lost)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_27_31 : 5;
  {
  FCNCALL_SUBNAME("unnamed_27_31");
  { FCNCALL_CALL_CTRL_WRAP(trailer.unnamed_27_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,trailer.unnamed_27_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(trailer.u32,FCNCALL_CALL_TYPE(uint32,trailer.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V1290_SHORT

#ifndef USER_DEF_VME_CAEN_V775
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V775)::FCNCALL_NAME(VME_CAEN_V775)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA12_OVERFLOW,DATA12_OVERFLOW,32> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 event_number : 24;
      // uint32 unnamed_24_26 : 3;
      // uint32 geom : 5;
    // } ;
    // uint32 u32;
  // } eob;
  {
  FCNCALL_SUBNAME("eob");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 event_number : 24;
    // uint32 unnamed_24_26 : 3;
    // uint32 geom : 5;
  // } ;
  // uint32 event_number : 24;
  {
  FCNCALL_SUBNAME("event_number");
  { FCNCALL_CALL_CTRL_WRAP(eob.event_number,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,eob.event_number)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_24_26 : 3;
  {
  FCNCALL_SUBNAME("unnamed_24_26");
  { FCNCALL_CALL_CTRL_WRAP(eob.unnamed_24_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,eob.unnamed_24_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(eob.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,eob.geom)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(eob.u32,FCNCALL_CALL_TYPE(uint32,eob.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V775

#ifndef USER_DEF_VME_CAEN_V830
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_CAEN_V830)::FCNCALL_NAME(VME_CAEN_V830)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA32,DATA32,32> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 event_number : 16;
      // uint32 ts : 2;
      // uint32 count : 6;
      // uint32 dummy_24_25 : 2;
      // uint32 unnamed_26_26 : 1;
      // uint32 geom : 5;
    // } ;
    // uint32 u32;
  // } header;
  {
  FCNCALL_SUBNAME("header");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 event_number : 16;
    // uint32 ts : 2;
    // uint32 count : 6;
    // uint32 dummy_24_25 : 2;
    // uint32 unnamed_26_26 : 1;
    // uint32 geom : 5;
  // } ;
  // uint32 event_number : 16;
  {
  FCNCALL_SUBNAME("event_number");
  { FCNCALL_CALL_CTRL_WRAP(header.event_number,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.event_number)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 ts : 2;
  {
  FCNCALL_SUBNAME("ts");
  { FCNCALL_CALL_CTRL_WRAP(header.ts,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.ts)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 count : 6;
  {
  FCNCALL_SUBNAME("count");
  { FCNCALL_CALL_CTRL_WRAP(header.count,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.count)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_24_25 : 2;
  {
  FCNCALL_SUBNAME("dummy_24_25");
  { FCNCALL_CALL_CTRL_WRAP(header.dummy_24_25,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.dummy_24_25)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_26_26 : 1;
  {
  FCNCALL_SUBNAME("unnamed_26_26");
  { FCNCALL_CALL_CTRL_WRAP(header.unnamed_26_26,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.unnamed_26_26)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 geom : 5;
  {
  FCNCALL_SUBNAME("geom");
  { FCNCALL_CALL_CTRL_WRAP(header.geom,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,header.geom)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(header.u32,FCNCALL_CALL_TYPE(uint32,header.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_CAEN_V830

#ifndef USER_DEF_VME_MESYTEC_MADC32
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_MESYTEC_MADC32)::FCNCALL_NAME(VME_MESYTEC_MADC32)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA14_OVERFLOW,DATA14_OVERFLOW,32> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 counter : 30;
      // uint32 unnamed_30_31 : 2;
    // } ;
    // uint32 u32;
  // } end_of_event;
  {
  FCNCALL_SUBNAME("end_of_event");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 counter : 30;
    // uint32 unnamed_30_31 : 2;
  // } ;
  // uint32 counter : 30;
  {
  FCNCALL_SUBNAME("counter");
  { FCNCALL_CALL_CTRL_WRAP(end_of_event.counter,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,end_of_event.counter)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_30_31 : 2;
  {
  FCNCALL_SUBNAME("unnamed_30_31");
  { FCNCALL_CALL_CTRL_WRAP(end_of_event.unnamed_30_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,end_of_event.unnamed_30_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(end_of_event.u32,FCNCALL_CALL_TYPE(uint32,end_of_event.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_MESYTEC_MADC32

#ifndef USER_DEF_VME_MESYTEC_MDPP16
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(VME_MESYTEC_MDPP16)::FCNCALL_NAME(VME_MESYTEC_MDPP16)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA16_OVERFLOW,DATA16_OVERFLOW,34,100> data;
  {
  FCNCALL_SUBNAME("data");
  { FCNCALL_CALL_CTRL_WRAP(data,data.FCNCALL_CALL(data)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 counter : 30;
      // uint32 unnamed_30_31 : 2;
    // } ;
    // uint32 u32;
  // } end_of_event;
  {
  FCNCALL_SUBNAME("end_of_event");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 counter : 30;
    // uint32 unnamed_30_31 : 2;
  // } ;
  // uint32 counter : 30;
  {
  FCNCALL_SUBNAME("counter");
  { FCNCALL_CALL_CTRL_WRAP(end_of_event.counter,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,end_of_event.counter)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 unnamed_30_31 : 2;
  {
  FCNCALL_SUBNAME("unnamed_30_31");
  { FCNCALL_CALL_CTRL_WRAP(end_of_event.unnamed_30_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,end_of_event.unnamed_30_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(end_of_event.u32,FCNCALL_CALL_TYPE(uint32,end_of_event.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_VME_MESYTEC_MDPP16

#ifndef USER_DEF_CROS3_REWRITE_SUBEVENT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CROS3_REWRITE_SUBEVENT)::FCNCALL_NAME(CROS3_REWRITE_SUBEVENT)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // CROS3_REWRITE ccb[2];
  {
  FCNCALL_SUBNAME("ccb");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(ccb__i0,,__i0,ccb[__i0].FCNCALL_CALL(ccb[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CROS3_REWRITE_SUBEVENT

#ifndef USER_DEF_CROS3_SUBEVENT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(CROS3_SUBEVENT)::FCNCALL_NAME(CROS3_SUBEVENT)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // EXT_CROS3 ccb[2];
  {
  FCNCALL_SUBNAME("ccb");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(ccb__i0,,__i0,ccb[__i0].FCNCALL_CALL(ccb[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_CROS3_SUBEVENT

#ifndef USER_DEF_DUMMY
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(DUMMY)::FCNCALL_NAME(DUMMY)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // DUMMY_WORD d;
  {
  FCNCALL_SUBNAME("d");
  { FCNCALL_CALL_CTRL_WRAP(d,d.FCNCALL_CALL(d)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_DUMMY

#ifndef USER_DEF_LAND_CAMAC_CONVERTER
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_CAMAC_CONVERTER)::FCNCALL_NAME(LAND_CAMAC_CONVERTER)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // uint16 tpat;
  {
  FCNCALL_SUBNAME("tpat");
  { FCNCALL_CALL_CTRL_WRAP(tpat,FCNCALL_CALL_TYPE(uint16,tpat)); }
  FCNCALL_SUBNAME_END;
  }
  // uint16 tprev;
  {
  FCNCALL_SUBNAME("tprev");
  { FCNCALL_CALL_CTRL_WRAP(tprev,FCNCALL_CALL_TYPE(uint16,tprev)); }
  FCNCALL_SUBNAME_END;
  }
  // uint16 tnext;
  {
  FCNCALL_SUBNAME("tnext");
  { FCNCALL_CALL_CTRL_WRAP(tnext,FCNCALL_CALL_TYPE(uint16,tnext)); }
  FCNCALL_SUBNAME_END;
  }
  // uint16 tprev2;
  {
  FCNCALL_SUBNAME("tprev2");
  { FCNCALL_CALL_CTRL_WRAP(tprev2,FCNCALL_CALL_TYPE(uint16,tprev2)); }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_PHILLIPS_7164 aPHI14829;
  {
  FCNCALL_SUBNAME("aPHI14829");
  { FCNCALL_CALL_CTRL_WRAP(aPHI14829,aPHI14829.FCNCALL_CALL(aPHI14829)); }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_SILENA_4418 qSIA0480;
  {
  FCNCALL_SUBNAME("qSIA0480");
  { FCNCALL_CALL_CTRL_WRAP(qSIA0480,qSIA0480.FCNCALL_CALL(qSIA0480)); }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_SILENA_4418 qSIA0429;
  {
  FCNCALL_SUBNAME("qSIA0429");
  { FCNCALL_CALL_CTRL_WRAP(qSIA0429,qSIA0429.FCNCALL_CALL(qSIA0429)); }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_SILENA_4418 tSIA0400;
  {
  FCNCALL_SUBNAME("tSIA0400");
  { FCNCALL_CALL_CTRL_WRAP(tSIA0400,tSIA0400.FCNCALL_CALL(tSIA0400)); }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_SILENA_4418 tC_FRS120;
  {
  FCNCALL_SUBNAME("tC_FRS120");
  { FCNCALL_CALL_CTRL_WRAP(tC_FRS120,tC_FRS120.FCNCALL_CALL(tC_FRS120)); }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_SILENA_4418 tSIA0426;
  {
  FCNCALL_SUBNAME("tSIA0426");
  { FCNCALL_CALL_CTRL_WRAP(tSIA0426,tSIA0426.FCNCALL_CALL(tSIA0426)); }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_SILENA_4418 qSIA0458;
  {
  FCNCALL_SUBNAME("qSIA0458");
  { FCNCALL_CALL_CTRL_WRAP(qSIA0458,qSIA0458.FCNCALL_CALL(qSIA0458)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_CAMAC_CONVERTER

#ifndef USER_DEF_LAND_CAMAC_PILEUP
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_CAMAC_PILEUP)::FCNCALL_NAME(LAND_CAMAC_PILEUP)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // CAMAC_LECROY_2277_1CH_HACK tdc;
  {
  FCNCALL_SUBNAME("tdc");
  { FCNCALL_CALL_CTRL_WRAP(tdc,tdc.FCNCALL_CALL(tdc)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_CAMAC_PILEUP

#ifndef USER_DEF_LAND_CAMAC_SCALER
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_CAMAC_SCALER)::FCNCALL_NAME(LAND_CAMAC_SCALER)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // uint32 timestamp;
  {
  FCNCALL_SUBNAME("timestamp");
  { FCNCALL_CALL_CTRL_WRAP(timestamp,FCNCALL_CALL_TYPE(uint32,timestamp)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 unnamed_0_31 : 32;
    // } ;
    // uint32 u32;
  // } endianess;
  {
  FCNCALL_SUBNAME("endianess");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 unnamed_0_31 : 32;
  // } ;
  // uint32 unnamed_0_31 : 32;
  {
  FCNCALL_SUBNAME("unnamed_0_31");
  { FCNCALL_CALL_CTRL_WRAP(endianess.unnamed_0_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,endianess.unnamed_0_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(endianess.u32,FCNCALL_CALL_TYPE(uint32,endianess.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_LECROY_4434 scaler0;
  {
  FCNCALL_SUBNAME("scaler0");
  { FCNCALL_CALL_CTRL_WRAP(scaler0,scaler0.FCNCALL_CALL(scaler0)); }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_LECROY_4434 scaler2;
  {
  FCNCALL_SUBNAME("scaler2");
  { FCNCALL_CALL_CTRL_WRAP(scaler2,scaler2.FCNCALL_CALL(scaler2)); }
  FCNCALL_SUBNAME_END;
  }
  // CAMAC_LECROY_4434 scaler1;
  {
  FCNCALL_SUBNAME("scaler1");
  { FCNCALL_CALL_CTRL_WRAP(scaler1,scaler1.FCNCALL_CALL(scaler1)); }
  FCNCALL_SUBNAME_END;
  }
  // SOFT_SCALER32 scaler3;
  {
  FCNCALL_SUBNAME("scaler3");
  { FCNCALL_CALL_CTRL_WRAP(scaler3,scaler3.FCNCALL_CALL(scaler3)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_CAMAC_SCALER

#ifndef USER_DEF_LAND_CAMAC_START_STOP_STAMP
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_CAMAC_START_STOP_STAMP)::FCNCALL_NAME(LAND_CAMAC_START_STOP_STAMP)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // uint32 timestamp;
  {
  FCNCALL_SUBNAME("timestamp");
  { FCNCALL_CALL_CTRL_WRAP(timestamp,FCNCALL_CALL_TYPE(uint32,timestamp)); }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 unnamed_0_31 : 32;
    // } ;
    // uint32 u32;
  // } endianess;
  {
  FCNCALL_SUBNAME("endianess");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 unnamed_0_31 : 32;
  // } ;
  // uint32 unnamed_0_31 : 32;
  {
  FCNCALL_SUBNAME("unnamed_0_31");
  { FCNCALL_CALL_CTRL_WRAP(endianess.unnamed_0_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,endianess.unnamed_0_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(endianess.u32,FCNCALL_CALL_TYPE(uint32,endianess.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_CAMAC_START_STOP_STAMP

#ifndef USER_DEF_LAND_CAMAC_TCAL_INFO
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_CAMAC_TCAL_INFO)::FCNCALL_NAME(LAND_CAMAC_TCAL_INFO)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // uint32 info;
  {
  FCNCALL_SUBNAME("info");
  { FCNCALL_CALL_CTRL_WRAP(info,FCNCALL_CALL_TYPE(uint32,info)); }
  FCNCALL_SUBNAME_END;
  }
  // RANDOM_TCAL rtcal;
  {
  FCNCALL_SUBNAME("rtcal");
  { FCNCALL_CALL_CTRL_WRAP(rtcal,rtcal.FCNCALL_CALL(rtcal)); }
  FCNCALL_SUBNAME_END;
  }
  // NTP_MESSAGE ntp;
  {
  FCNCALL_SUBNAME("ntp");
  { FCNCALL_CALL_CTRL_WRAP(ntp,ntp.FCNCALL_CALL(ntp)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_CAMAC_TCAL_INFO

#ifndef USER_DEF_LAND_FASTBUS1
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_FASTBUS1)::FCNCALL_NAME(LAND_FASTBUS1)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // FASTBUS_LECROY_1885 Q47342;
  {
  FCNCALL_SUBNAME("Q47342");
  { FCNCALL_CALL_CTRL_WRAP(Q47342,Q47342.FCNCALL_CALL(Q47342)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1885 Q46848;
  {
  FCNCALL_SUBNAME("Q46848");
  { FCNCALL_CALL_CTRL_WRAP(Q46848,Q46848.FCNCALL_CALL(Q46848)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1885 Q11111;
  {
  FCNCALL_SUBNAME("Q11111");
  { FCNCALL_CALL_CTRL_WRAP(Q11111,Q11111.FCNCALL_CALL(Q11111)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1885 Q47315;
  {
  FCNCALL_SUBNAME("Q47315");
  { FCNCALL_CALL_CTRL_WRAP(Q47315,Q47315.FCNCALL_CALL(Q47315)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1885 Q17320;
  {
  FCNCALL_SUBNAME("Q17320");
  { FCNCALL_CALL_CTRL_WRAP(Q17320,Q17320.FCNCALL_CALL(Q17320)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1885 Q15372;
  {
  FCNCALL_SUBNAME("Q15372");
  { FCNCALL_CALL_CTRL_WRAP(Q15372,Q15372.FCNCALL_CALL(Q15372)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1885 Q46962;
  {
  FCNCALL_SUBNAME("Q46962");
  { FCNCALL_CALL_CTRL_WRAP(Q46962,Q46962.FCNCALL_CALL(Q46962)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1885 Q46993;
  {
  FCNCALL_SUBNAME("Q46993");
  { FCNCALL_CALL_CTRL_WRAP(Q46993,Q46993.FCNCALL_CALL(Q46993)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1885 Q15358;
  {
  FCNCALL_SUBNAME("Q15358");
  { FCNCALL_CALL_CTRL_WRAP(Q15358,Q15358.FCNCALL_CALL(Q15358)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1885 Q47264;
  {
  FCNCALL_SUBNAME("Q47264");
  { FCNCALL_CALL_CTRL_WRAP(Q47264,Q47264.FCNCALL_CALL(Q47264)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1875 T81855;
  {
  FCNCALL_SUBNAME("T81855");
  { FCNCALL_CALL_CTRL_WRAP(T81855,T81855.FCNCALL_CALL(T81855)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1875 T87044;
  {
  FCNCALL_SUBNAME("T87044");
  { FCNCALL_CALL_CTRL_WRAP(T87044,T87044.FCNCALL_CALL(T87044)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1875 T87024;
  {
  FCNCALL_SUBNAME("T87024");
  { FCNCALL_CALL_CTRL_WRAP(T87024,T87024.FCNCALL_CALL(T87024)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1875 T81800;
  {
  FCNCALL_SUBNAME("T81800");
  { FCNCALL_CALL_CTRL_WRAP(T81800,T81800.FCNCALL_CALL(T81800)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_FASTBUS1

#ifndef USER_DEF_LAND_FASTBUS2
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_FASTBUS2)::FCNCALL_NAME(LAND_FASTBUS2)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // FASTBUS_LECROY_1885 Q75266;
  {
  FCNCALL_SUBNAME("Q75266");
  { FCNCALL_CALL_CTRL_WRAP(Q75266,Q75266.FCNCALL_CALL(Q75266)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1875 T48854;
  {
  FCNCALL_SUBNAME("T48854");
  { FCNCALL_CALL_CTRL_WRAP(T48854,T48854.FCNCALL_CALL(T48854)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1875 T87047;
  {
  FCNCALL_SUBNAME("T87047");
  { FCNCALL_CALL_CTRL_WRAP(T87047,T87047.FCNCALL_CALL(T87047)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1875 T81808;
  {
  FCNCALL_SUBNAME("T81808");
  { FCNCALL_CALL_CTRL_WRAP(T81808,T81808.FCNCALL_CALL(T81808)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1875 T81859;
  {
  FCNCALL_SUBNAME("T81859");
  { FCNCALL_CALL_CTRL_WRAP(T81859,T81859.FCNCALL_CALL(T81859)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1875 T81795;
  {
  FCNCALL_SUBNAME("T81795");
  { FCNCALL_CALL_CTRL_WRAP(T81795,T81795.FCNCALL_CALL(T81795)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1875 T81806;
  {
  FCNCALL_SUBNAME("T81806");
  { FCNCALL_CALL_CTRL_WRAP(T81806,T81806.FCNCALL_CALL(T81806)); }
  FCNCALL_SUBNAME_END;
  }
  // FASTBUS_LECROY_1875 T48834;
  {
  FCNCALL_SUBNAME("T48834");
  { FCNCALL_CALL_CTRL_WRAP(T48834,T48834.FCNCALL_CALL(T48834)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_FASTBUS2

#ifndef USER_DEF_LAND_FASTBUS_ERROR
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_FASTBUS_ERROR)::FCNCALL_NAME(LAND_FASTBUS_ERROR)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // union 
  // {
    // struct 
    // {
      // uint32 timeout_waiting_smi : 1;
      // uint32 illegal_block_transfer : 1;
      // uint32 fifa_address_overflow : 1;
      // uint32 fifa_register_error : 1;
      // uint32 dummy_4_15 : 12;
      // uint32 init_error : 1;
      // uint32 dummy_17_31 : 15;
    // } ;
    // uint32 u32;
  // } error_code;
  {
  FCNCALL_SUBNAME("error_code");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 timeout_waiting_smi : 1;
    // uint32 illegal_block_transfer : 1;
    // uint32 fifa_address_overflow : 1;
    // uint32 fifa_register_error : 1;
    // uint32 dummy_4_15 : 12;
    // uint32 init_error : 1;
    // uint32 dummy_17_31 : 15;
  // } ;
  // uint32 timeout_waiting_smi : 1;
  {
  FCNCALL_SUBNAME("timeout_waiting_smi");
  { FCNCALL_CALL_CTRL_WRAP(error_code.timeout_waiting_smi,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.timeout_waiting_smi)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 illegal_block_transfer : 1;
  {
  FCNCALL_SUBNAME("illegal_block_transfer");
  { FCNCALL_CALL_CTRL_WRAP(error_code.illegal_block_transfer,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.illegal_block_transfer)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fifa_address_overflow : 1;
  {
  FCNCALL_SUBNAME("fifa_address_overflow");
  { FCNCALL_CALL_CTRL_WRAP(error_code.fifa_address_overflow,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.fifa_address_overflow)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fifa_register_error : 1;
  {
  FCNCALL_SUBNAME("fifa_register_error");
  { FCNCALL_CALL_CTRL_WRAP(error_code.fifa_register_error,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.fifa_register_error)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_4_15 : 12;
  {
  FCNCALL_SUBNAME("dummy_4_15");
  { FCNCALL_CALL_CTRL_WRAP(error_code.dummy_4_15,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.dummy_4_15)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 init_error : 1;
  {
  FCNCALL_SUBNAME("init_error");
  { FCNCALL_CALL_CTRL_WRAP(error_code.init_error,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.init_error)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_17_31 : 15;
  {
  FCNCALL_SUBNAME("dummy_17_31");
  { FCNCALL_CALL_CTRL_WRAP(error_code.dummy_17_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.dummy_17_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(error_code.u32,FCNCALL_CALL_TYPE(uint32,error_code.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // uint32 error_num;
  {
  FCNCALL_SUBNAME("error_num");
  { FCNCALL_CALL_CTRL_WRAP(error_num,FCNCALL_CALL_TYPE(uint32,error_num)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_FASTBUS_ERROR

#ifndef USER_DEF_LAND_FASTBUS_ERROR_NGF
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_FASTBUS_ERROR_NGF)::FCNCALL_NAME(LAND_FASTBUS_ERROR_NGF)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // union 
  // {
    // struct 
    // {
      // uint32 unnamed_0_31 : 32;
    // } ;
    // uint32 u32;
  // } magic;
  {
  FCNCALL_SUBNAME("magic");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 unnamed_0_31 : 32;
  // } ;
  // uint32 unnamed_0_31 : 32;
  {
  FCNCALL_SUBNAME("unnamed_0_31");
  { FCNCALL_CALL_CTRL_WRAP(magic.unnamed_0_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,magic.unnamed_0_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(magic.u32,FCNCALL_CALL_TYPE(uint32,magic.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  // union 
  // {
    // struct 
    // {
      // uint32 error : 1;
      // uint32 uninitialized : 1;
      // uint32 ss1 : 1;
      // uint32 wc : 1;
      // uint32 mid : 1;
      // uint32 fifo_empty : 1;
      // uint32 fifo_not_empty : 1;
      // uint32 not_finished : 1;
      // uint32 bad_end_addr : 1;
      // uint32 word_lost : 1;
      // uint32 dummy_10_31 : 22;
    // } ;
    // uint32 u32;
  // } error_code;
  {
  FCNCALL_SUBNAME("error_code");
#if !STRUCT_ONLY_LAST_UNION_MEMBER
  // struct 
  // {
    // uint32 error : 1;
    // uint32 uninitialized : 1;
    // uint32 ss1 : 1;
    // uint32 wc : 1;
    // uint32 mid : 1;
    // uint32 fifo_empty : 1;
    // uint32 fifo_not_empty : 1;
    // uint32 not_finished : 1;
    // uint32 bad_end_addr : 1;
    // uint32 word_lost : 1;
    // uint32 dummy_10_31 : 22;
  // } ;
  // uint32 error : 1;
  {
  FCNCALL_SUBNAME("error");
  { FCNCALL_CALL_CTRL_WRAP(error_code.error,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.error)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 uninitialized : 1;
  {
  FCNCALL_SUBNAME("uninitialized");
  { FCNCALL_CALL_CTRL_WRAP(error_code.uninitialized,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.uninitialized)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 ss1 : 1;
  {
  FCNCALL_SUBNAME("ss1");
  { FCNCALL_CALL_CTRL_WRAP(error_code.ss1,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.ss1)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 wc : 1;
  {
  FCNCALL_SUBNAME("wc");
  { FCNCALL_CALL_CTRL_WRAP(error_code.wc,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.wc)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 mid : 1;
  {
  FCNCALL_SUBNAME("mid");
  { FCNCALL_CALL_CTRL_WRAP(error_code.mid,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.mid)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fifo_empty : 1;
  {
  FCNCALL_SUBNAME("fifo_empty");
  { FCNCALL_CALL_CTRL_WRAP(error_code.fifo_empty,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.fifo_empty)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 fifo_not_empty : 1;
  {
  FCNCALL_SUBNAME("fifo_not_empty");
  { FCNCALL_CALL_CTRL_WRAP(error_code.fifo_not_empty,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.fifo_not_empty)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 not_finished : 1;
  {
  FCNCALL_SUBNAME("not_finished");
  { FCNCALL_CALL_CTRL_WRAP(error_code.not_finished,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.not_finished)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 bad_end_addr : 1;
  {
  FCNCALL_SUBNAME("bad_end_addr");
  { FCNCALL_CALL_CTRL_WRAP(error_code.bad_end_addr,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.bad_end_addr)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 word_lost : 1;
  {
  FCNCALL_SUBNAME("word_lost");
  { FCNCALL_CALL_CTRL_WRAP(error_code.word_lost,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.word_lost)); }
  FCNCALL_SUBNAME_END;
  }
  // uint32 dummy_10_31 : 22;
  {
  FCNCALL_SUBNAME("dummy_10_31");
  { FCNCALL_CALL_CTRL_WRAP(error_code.dummy_10_31,FCNCALL_CALL_TYPE/*_BITFIELD*/(uint32,error_code.dummy_10_31)); }
  FCNCALL_SUBNAME_END;
  }
#endif// !STRUCT_ONLY_LAST_UNION_MEMBER
  // uint32 u32;
  {
  FCNCALL_SUBNAME("u32");
  { FCNCALL_CALL_CTRL_WRAP(error_code.u32,FCNCALL_CALL_TYPE(uint32,error_code.u32)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_FASTBUS_ERROR_NGF

#ifndef USER_DEF_LAND_VME
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(LAND_VME)::FCNCALL_NAME(LAND_VME)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // VME_CAEN_V775 tCAEN0614;
  {
  FCNCALL_SUBNAME("tCAEN0614");
  { FCNCALL_CALL_CTRL_WRAP(tCAEN0614,tCAEN0614.FCNCALL_CALL(tCAEN0614)); }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V830 scaler[2];
  {
  FCNCALL_SUBNAME("scaler");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(scaler__i0,,__i0,scaler[__i0].FCNCALL_CALL(scaler[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // VME_CAEN_V775 qCAEN0472;
  {
  FCNCALL_SUBNAME("qCAEN0472");
  { FCNCALL_CALL_CTRL_WRAP(qCAEN0472,qCAEN0472.FCNCALL_CALL(qCAEN0472)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_STD_VME vme;
  {
  FCNCALL_SUBNAME("vme");
  { FCNCALL_CALL_CTRL_WRAP(vme,vme.FCNCALL_CALL(vme)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_LAND_VME

#ifndef USER_DEF_SIDEREM01_VME
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(SIDEREM01_VME)::FCNCALL_NAME(SIDEREM01_VME)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // EXT_SST sst[3];
  {
  FCNCALL_SUBNAME("sst");
  FCNCALL_FOR(__i0,3)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(sst__i0,,__i0,sst[__i0].FCNCALL_CALL(sst[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_SIDEREM01_VME

#ifndef USER_DEF_SIDEREM02_VME
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(SIDEREM02_VME)::FCNCALL_NAME(SIDEREM02_VME)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_subevent_base,FCNCALL_CLASS_NAME(unpack_subevent_base)::FCNCALL_CALL_BASE());
  // EXT_SST sst[3];
  {
  FCNCALL_SUBNAME("sst");
  FCNCALL_FOR(__i0,3)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(sst__i0,,__i0,sst[__i0].FCNCALL_CALL(sst[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_SIDEREM02_VME

#ifndef USER_DEF_unpack_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(unpack_event)::FCNCALL_NAME(unpack_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_event_base,FCNCALL_CLASS_NAME(unpack_event_base)::FCNCALL_CALL_BASE());
  // LAND_CAMAC_PILEUP pileup;
  {
  FCNCALL_SUBNAME("pileup");
  { FCNCALL_CALL_CTRL_WRAP(pileup,pileup.FCNCALL_CALL(pileup)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_VME vme;
  {
  FCNCALL_SUBNAME("vme");
  { FCNCALL_CALL_CTRL_WRAP(vme,vme.FCNCALL_CALL(vme)); }
  FCNCALL_SUBNAME_END;
  }
  // CROS3_SUBEVENT cros3;
  {
  FCNCALL_SUBNAME("cros3");
  { FCNCALL_CALL_CTRL_WRAP(cros3,cros3.FCNCALL_CALL(cros3)); }
  FCNCALL_SUBNAME_END;
  }
  // SIDEREM01_VME sst1;
  {
  FCNCALL_SUBNAME("sst1");
  { FCNCALL_CALL_CTRL_WRAP(sst1,sst1.FCNCALL_CALL(sst1)); }
  FCNCALL_SUBNAME_END;
  }
  // CROS3_REWRITE_SUBEVENT cros3_rewrite;
  {
  FCNCALL_SUBNAME("cros3_rewrite");
  { FCNCALL_CALL_CTRL_WRAP(cros3_rewrite,cros3_rewrite.FCNCALL_CALL(cros3_rewrite)); }
  FCNCALL_SUBNAME_END;
  }
  // SIDEREM02_VME sst2;
  {
  FCNCALL_SUBNAME("sst2");
  { FCNCALL_CALL_CTRL_WRAP(sst2,sst2.FCNCALL_CALL(sst2)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_CAMAC_CONVERTER camac;
  {
  FCNCALL_SUBNAME("camac");
  { FCNCALL_CALL_CTRL_WRAP(camac,camac.FCNCALL_CALL(camac)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_FASTBUS1 fastbus1;
  {
  FCNCALL_SUBNAME("fastbus1");
  { FCNCALL_CALL_CTRL_WRAP(fastbus1,fastbus1.FCNCALL_CALL(fastbus1)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_FASTBUS2 fastbus2;
  {
  FCNCALL_SUBNAME("fastbus2");
  { FCNCALL_CALL_CTRL_WRAP(fastbus2,fastbus2.FCNCALL_CALL(fastbus2)); }
  FCNCALL_SUBNAME_END;
  }
  // DUMMY acq;
  {
  FCNCALL_SUBNAME("acq");
  { FCNCALL_CALL_CTRL_WRAP(acq,acq.FCNCALL_CALL(acq)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_CAMAC_TCAL_INFO camac_tcal_info;
  {
  FCNCALL_SUBNAME("camac_tcal_info");
  { FCNCALL_CALL_CTRL_WRAP(camac_tcal_info,camac_tcal_info.FCNCALL_CALL(camac_tcal_info)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_CAMAC_SCALER camac_scalers;
  {
  FCNCALL_SUBNAME("camac_scalers");
  { FCNCALL_CALL_CTRL_WRAP(camac_scalers,camac_scalers.FCNCALL_CALL(camac_scalers)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_FASTBUS_ERROR_NGF fastbus1_error;
  {
  FCNCALL_SUBNAME("fastbus1_error");
  { FCNCALL_CALL_CTRL_WRAP(fastbus1_error,fastbus1_error.FCNCALL_CALL(fastbus1_error)); }
  FCNCALL_SUBNAME_END;
  }
  // LAND_FASTBUS_ERROR_NGF fastbus2_error;
  {
  FCNCALL_SUBNAME("fastbus2_error");
  { FCNCALL_CALL_CTRL_WRAP(fastbus2_error,fastbus2_error.FCNCALL_CALL(fastbus2_error)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_unpack_event

#ifndef USER_DEF_unpack_sticky_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(unpack_sticky_event)::FCNCALL_NAME(unpack_sticky_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(unpack_sticky_event_base,FCNCALL_CLASS_NAME(unpack_sticky_event_base)::FCNCALL_CALL_BASE());
  FCNCALL_RET;
}
#endif//USER_DEF_unpack_sticky_event

#include "gen/default_fcncall_undef.hh"


/** END_FUNCTION_CALL_PER_MEMBER **************************************/


/** BEGIN_CORR_STRUCT **************************************************
 *
 * Correlation structure.
 *
 * Do not edit - automatically generated.
 */

// Corr struct for: CAMAC_LECROY_2277_1CH_HACK
// raw_list_ii_zero_suppress  .data(DATA16)[16]
// DATA16 .data[16]
// 
// size= 1  chunks= 16  mem=  16  line=32  total=512
// size=16  chunks=  1  mem=  16  line=17  total=272
// 
// corr structure: CAMAC_LECROY_2277_1CH_HACK
  // DATA16 .data[16]
// .CAMAC_LECROY_2277_1CH_HACK/16/.data/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_LECROY_2277_1CH_HACK
// .CAMAC_LECROY_2277_1CH_HACK// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_LECROY_2277_1CH_HACK
// .CAMAC_LECROY_2277_1CH_HACK
// Corr struct for: CAMAC_LECROY_4434
// raw_array_zero_suppress  .data(DATA24)[32]
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_LECROY_4434
// .CAMAC_LECROY_4434// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_LECROY_4434
// .CAMAC_LECROY_4434// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_LECROY_4434
// .CAMAC_LECROY_4434
// Corr struct for: CAMAC_PHILLIPS_7164
// raw_array_zero_suppress  .data(DATA12)[16]
// DATA12 .data[16]
// 
// size= 1  chunks= 16  mem=  16  line=32  total=512
// size=16  chunks=  1  mem=  16  line=17  total=272
// 
// corr structure: CAMAC_PHILLIPS_7164
  // DATA12 .data[16]
// .CAMAC_PHILLIPS_7164/16/.data/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_PHILLIPS_7164
// .CAMAC_PHILLIPS_7164// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_PHILLIPS_7164
// .CAMAC_PHILLIPS_7164
// Corr struct for: CAMAC_SILENA_4418
// raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
// DATA12_OVERFLOW .data[8]
// 
// size= 1  chunks=  8  mem=   8  line=16  total=128
// size= 8  chunks=  1  mem=   8  line=9  total=72
// 
// corr structure: CAMAC_SILENA_4418
  // DATA12_OVERFLOW .data[8]
// .CAMAC_SILENA_4418/8/.data/8/[8]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_SILENA_4418
// .CAMAC_SILENA_4418// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CAMAC_SILENA_4418
// .CAMAC_SILENA_4418
// Corr struct for: CROS3_REWRITE
// raw_array_zero_suppress  .data(WIRE_START_END)[32768]
// uint32  .data_size
  // ---
// uint32  .threshold_curve
  // ---
// uint32  .leading_edge
  // ---
// uint32  .data
  // ---
// uint32  .dummy_19
  // ---
// uint32  .trigger_time
  // ---
// uint32  .ccb_id
  // ---
// uint32  .event_counter
  // ---
// uint32  .u32
  // ---
// uint32  .read_out_mode
  // ---
// uint32  .dummy_2_3
  // ---
// uint32  .pulser_enabled
  // ---
// uint32  .dummy_5_7
  // ---
// uint32  .statistics
  // ---
// uint32  .both_edges
  // ---
// uint32  .slices
  // ---
// uint32  .scale
  // ---
// uint32  .dummy_22_30
  // ---
// uint32  .odd_length16
  // ---
// uint32  .u32
  // ---
// uint32  .read_out_mode
  // ---
// uint32  .dummy_2_3
  // ---
// uint32  .pulser_enabled
  // ---
// uint32  .dummy_5_7
  // ---
// uint32  .statistics
  // ---
// uint32  .both_edges
  // ---
// uint32  .threshold_start
  // ---
// uint32  .threshold_step
  // ---
// uint32  .boards
  // ---
// uint32  .dummy_29_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_REWRITE
// .CROS3_REWRITE// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_REWRITE
// .CROS3_REWRITE// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_REWRITE
// .CROS3_REWRITE
// Corr struct for: DUMMY_WORD
// uint32  .dummy_word
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY_WORD
// .DUMMY_WORD// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY_WORD
// .DUMMY_WORD// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY_WORD
// .DUMMY_WORD
// Corr struct for: FASTBUS_LECROY_1875
// raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// DATA12_RANGE .data[64]
// 
// size= 1  chunks= 64  mem=  64  line=128  total=8192
// size=64  chunks=  1  mem=  64  line=65  total=4160
// 
// corr structure: FASTBUS_LECROY_1875
  // DATA12_RANGE .data[64]
// .FASTBUS_LECROY_1875/64/.data/64/[64]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FASTBUS_LECROY_1875
// .FASTBUS_LECROY_1875// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FASTBUS_LECROY_1875
// .FASTBUS_LECROY_1875
// Corr struct for: FASTBUS_LECROY_1885
// raw_array_zero_suppress  .data(DATA12_RANGE)[96]
// DATA12_RANGE .data[96]
// 
// size= 1  chunks= 96  mem=  96  line=192  total=18432
// size=96  chunks=  1  mem=  96  line=97  total=9312
// 
// corr structure: FASTBUS_LECROY_1885
  // DATA12_RANGE .data[96]
// .FASTBUS_LECROY_1885/96/.data/96/[96]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FASTBUS_LECROY_1885
// .FASTBUS_LECROY_1885// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: FASTBUS_LECROY_1885
// .FASTBUS_LECROY_1885
// Corr struct for: LAND_STD_VME
// uint32  .fail_general
  // ---
// uint32  .fail_data_corrupt
  // ---
// uint32  .fail_data_missing
  // ---
// uint32  .fail_data_too_much
  // ---
// uint32  .fail_event_counter_mismatch
  // ---
// uint32  .fail_readout_error_driver
  // ---
// uint32  .fail_unexpected_trigger
  // ---
// uint32  .fail_firmware_mismatch
  // ---
// uint32  .dummy_8_21
  // ---
// uint32  .has_multi_trlo_ii_counter0
  // ---
// uint32  .has_clock_counter_stamp
  // ---
// uint32  .has_continous_event_counter
  // ---
// uint32  .has_update_qdc_iped_value
  // ---
// uint32  .spurious_start_before_tcal
  // ---
// uint32  .has_no_zero_suppression
  // ---
// uint32  .has_multi_adctdc_counter0
  // ---
// uint32  .has_multi_scaler_counter0
  // ---
// uint32  .has_multi_event
  // ---
// uint32  .has_time_stamp
  // ---
// uint32  .u32
  // ---
// uint32  .continous_event_counter
  // ---
// uint32  .time_stamp
  // ---
// uint32  .clock_counter_stamp
  // ---
// uint32  .iped
  // ---
// uint32  .multi_events
  // ---
// uint32  .multi_trlo_ii_counter0
  // ---
// uint32  .multi_scaler_counter0
  // ---
// uint32  .multi_adctdc_counter0
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_STD_VME
// .LAND_STD_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_STD_VME
// .LAND_STD_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_STD_VME
// .LAND_STD_VME
// Corr struct for: NTP64_TIME
// uint32  .sec
  // ---
// uint32  .frac
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: NTP64_TIME
// .NTP64_TIME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: NTP64_TIME
// .NTP64_TIME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: NTP64_TIME
// .NTP64_TIME
// Corr struct for: NTP_MESSAGE
// uint32  .word_count
  // ---
// uint32  .quick_burst
  // ---
// uint32  .dummy_17_23
  // ---
// uint32  .id
  // ---
// uint32  .u32
  // ---
// uint32  .server_id
  // ---
// uint32  .precision
  // ---
// uint32  .poll
  // ---
// uint32  .stratum
  // ---
// uint32  .dummy_20_23
  // ---
// uint32  .mode
  // ---
// uint32  .version
  // ---
// uint32  .leap
  // ---
// uint32  .u32
  // ---
// uint32  .frac
  // ---
// uint32  .sec
  // ---
// uint32  .u32
  // ---
// uint32  .frac
  // ---
// uint32  .sec
  // ---
// uint32  .u32
  // ---
// uint32  .refid
  // ---
// NTP64_TIME  .orig2time
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .tmit2time
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .rec2time
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .rx2time
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .reftime
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .origtime
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .rectime
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .tmittime
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .rxtime
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: NTP_MESSAGE
// .NTP_MESSAGE// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: NTP_MESSAGE
// .NTP_MESSAGE// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: NTP_MESSAGE
// .NTP_MESSAGE
// Corr struct for: RANDOM_TCAL_TSTAMP_CLOCK
// uint32  .soft_latches
  // ---
// uint32  .hard_latches
  // ---
// uint32  .clock_ticks
  // ---
// NTP64_TIME  .before
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// NTP64_TIME  .after
  // uint32  .sec
    // ---
  // uint32  .frac
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: RANDOM_TCAL_TSTAMP_CLOCK
// .RANDOM_TCAL_TSTAMP_CLOCK// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: RANDOM_TCAL_TSTAMP_CLOCK
// .RANDOM_TCAL_TSTAMP_CLOCK// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: RANDOM_TCAL_TSTAMP_CLOCK
// .RANDOM_TCAL_TSTAMP_CLOCK
// Corr struct for: RANDOM_TCAL
// uint32  .word_count
  // ---
// uint32  .pulses
  // ---
// uint32  .clock_bits
  // ---
// uint32  .has_tstamp1
  // ---
// uint32  .has_tstamp2
  // ---
// uint32  .dummy_20_23
  // ---
// uint32  .id
  // ---
// uint32  .u32
  // ---
// RANDOM_TCAL_TSTAMP_CLOCK  .tstamp1
  // uint32  .soft_latches
    // ---
  // uint32  .hard_latches
    // ---
  // uint32  .clock_ticks
    // ---
  // NTP64_TIME  .before
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .after
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
// RANDOM_TCAL_TSTAMP_CLOCK  .tstamp2
  // uint32  .soft_latches
    // ---
  // uint32  .hard_latches
    // ---
  // uint32  .clock_ticks
    // ---
  // NTP64_TIME  .before
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .after
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: RANDOM_TCAL
// .RANDOM_TCAL// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: RANDOM_TCAL
// .RANDOM_TCAL// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: RANDOM_TCAL
// .RANDOM_TCAL
// Corr struct for: SIDEREM_BLOCK
// raw_array_zero_suppress  .data[4](DATA12)[512]
// uint32  .count
  // ---
// uint32  .local_event_counter
  // ---
// uint32  .local_trigger
  // ---
// uint32  .siderem
  // ---
// uint32  .gtb
  // ---
// uint32  .sam
  // ---
// uint32  .u32
  // ---
// DATA12 .data[4][512]
// 
// size= 1  chunks=2048  mem=2048  line=4096  total=8388608
// size=512  chunks=  4  mem=2048  line=2052  total=4202496
// size=2048  chunks=  1  mem=2048  line=2049  total=4196352
// 
// corr structure: SIDEREM_BLOCK
  // DATA12 .data[4][512]
// .SIDEREM_BLOCK/2048/.data/2048/[4]/512/[512]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SIDEREM_BLOCK
// .SIDEREM_BLOCK// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SIDEREM_BLOCK
// .SIDEREM_BLOCK
// Corr struct for: SOFT_SCALER32
// raw_array_zero_suppress  .data(DATA32)[32]
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SOFT_SCALER32
// .SOFT_SCALER32// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SOFT_SCALER32
// .SOFT_SCALER32// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SOFT_SCALER32
// .SOFT_SCALER32
// Corr struct for: VME_CAEN_V1190_SUBTDC
// uint32  .bunch_id
  // ---
// uint32  .event_id
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .flags
  // ---
// uint32  .dummy_15_23
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .word_count
  // ---
// uint32  .event_id
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SUBTDC
// .VME_CAEN_V1190_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SUBTDC
// .VME_CAEN_V1190_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SUBTDC
// .VME_CAEN_V1190_SUBTDC
// Corr struct for: VME_CAEN_V1190
// raw_array_multi_zero_suppress  .data(DATA24)[32][128]
  // ---
// uint32  .geom
  // ---
// uint32  .event_number
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// VME_CAEN_V1190_SUBTDC  .tdc[4]
  // uint32  .bunch_id
    // ---
  // uint32  .event_id
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
  // uint32  .flags
    // ---
  // uint32  .dummy_15_23
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
  // uint32  .word_count
    // ---
  // uint32  .event_id
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
// uint32  .time_tag
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .geom
  // ---
// uint32  .word_count
  // ---
// uint32  .dummy_20_23
  // ---
// uint32  .tdc_error
  // ---
// uint32  .buffer_overflow
  // ---
// uint32  .trigger_lost
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190
// .VME_CAEN_V1190// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190
// .VME_CAEN_V1190// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190
// .VME_CAEN_V1190
// Corr struct for: VME_CAEN_V1190_SHORT_SUBTDC
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT_SUBTDC
// .VME_CAEN_V1190_SHORT_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT_SUBTDC
// .VME_CAEN_V1190_SHORT_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT_SUBTDC
// .VME_CAEN_V1190_SHORT_SUBTDC
// Corr struct for: VME_CAEN_V1190_SHORT_SUBTDC_ERROR
// uint32  .flags
  // ---
// uint32  .dummy_15_23
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT_SUBTDC_ERROR
// .VME_CAEN_V1190_SHORT_SUBTDC_ERROR// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT_SUBTDC_ERROR
// .VME_CAEN_V1190_SHORT_SUBTDC_ERROR// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT_SUBTDC_ERROR
// .VME_CAEN_V1190_SHORT_SUBTDC_ERROR
// Corr struct for: VME_CAEN_V1190_SHORT
// raw_array_multi_zero_suppress  .data(DATA24)[32][128]
  // ---
// uint32  .geom
  // ---
// uint32  .event_number
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// VME_CAEN_V1190_SHORT_SUBTDC  .tdc[4]
// VME_CAEN_V1190_SHORT_SUBTDC_ERROR  .err[4]
  // uint32  .flags
    // ---
  // uint32  .dummy_15_23
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
// uint32  .time_tag
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .geom
  // ---
// uint32  .word_count
  // ---
// uint32  .dummy_20_23
  // ---
// uint32  .tdc_error
  // ---
// uint32  .buffer_overflow
  // ---
// uint32  .trigger_lost
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT
// .VME_CAEN_V1190_SHORT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT
// .VME_CAEN_V1190_SHORT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1190_SHORT
// .VME_CAEN_V1190_SHORT
// Corr struct for: VME_CAEN_V1290_SUBTDC
// uint32  .bunch_id
  // ---
// uint32  .event_id
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .flags
  // ---
// uint32  .dummy_15_23
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .word_count
  // ---
// uint32  .event_id
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SUBTDC
// .VME_CAEN_V1290_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SUBTDC
// .VME_CAEN_V1290_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SUBTDC
// .VME_CAEN_V1290_SUBTDC
// Corr struct for: VME_CAEN_V1290
// raw_array_multi_zero_suppress  .data(DATA24)[32][128]
  // ---
// uint32  .geom
  // ---
// uint32  .event_number
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// VME_CAEN_V1290_SUBTDC  .tdc[4]
  // uint32  .bunch_id
    // ---
  // uint32  .event_id
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
  // uint32  .flags
    // ---
  // uint32  .dummy_15_23
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
  // uint32  .word_count
    // ---
  // uint32  .event_id
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
// uint32  .time_tag
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .geom
  // ---
// uint32  .word_count
  // ---
// uint32  .dummy_20_23
  // ---
// uint32  .tdc_error
  // ---
// uint32  .buffer_overflow
  // ---
// uint32  .trigger_lost
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290
// .VME_CAEN_V1290// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290
// .VME_CAEN_V1290// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290
// .VME_CAEN_V1290
// Corr struct for: VME_CAEN_V1290_SHORT_SUBTDC
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT_SUBTDC
// .VME_CAEN_V1290_SHORT_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT_SUBTDC
// .VME_CAEN_V1290_SHORT_SUBTDC// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT_SUBTDC
// .VME_CAEN_V1290_SHORT_SUBTDC
// Corr struct for: VME_CAEN_V1290_SHORT_SUBTDC_ERROR
// uint32  .flags
  // ---
// uint32  .dummy_15_23
  // ---
// uint32  .tdc
  // ---
// uint32  .dummy_26
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT_SUBTDC_ERROR
// .VME_CAEN_V1290_SHORT_SUBTDC_ERROR// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT_SUBTDC_ERROR
// .VME_CAEN_V1290_SHORT_SUBTDC_ERROR// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT_SUBTDC_ERROR
// .VME_CAEN_V1290_SHORT_SUBTDC_ERROR
// Corr struct for: VME_CAEN_V1290_SHORT
// raw_array_multi_zero_suppress  .data(DATA24)[32][128]
  // ---
// uint32  .geom
  // ---
// uint32  .event_number
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// VME_CAEN_V1290_SHORT_SUBTDC  .tdc[4]
// VME_CAEN_V1290_SHORT_SUBTDC_ERROR  .err[4]
  // uint32  .flags
    // ---
  // uint32  .dummy_15_23
    // ---
  // uint32  .tdc
    // ---
  // uint32  .dummy_26
    // ---
  // uint32  .unnamed_27_31
    // ---
  // uint32  .u32
    // ---
// uint32  .time_tag
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// uint32  .geom
  // ---
// uint32  .word_count
  // ---
// uint32  .dummy_20_23
  // ---
// uint32  .tdc_error
  // ---
// uint32  .buffer_overflow
  // ---
// uint32  .trigger_lost
  // ---
// uint32  .unnamed_27_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT
// .VME_CAEN_V1290_SHORT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT
// .VME_CAEN_V1290_SHORT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V1290_SHORT
// .VME_CAEN_V1290_SHORT
// Corr struct for: VME_CAEN_V775
// raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
// uint32  .event_number
  // ---
// uint32  .unnamed_24_26
  // ---
// uint32  .geom
  // ---
// uint32  .u32
  // ---
// DATA12_OVERFLOW .data[32]
// 
// size= 1  chunks= 32  mem=  32  line=64  total=2048
// size=32  chunks=  1  mem=  32  line=33  total=1056
// 
// corr structure: VME_CAEN_V775
  // DATA12_OVERFLOW .data[32]
// .VME_CAEN_V775/32/.data/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V775
// .VME_CAEN_V775// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V775
// .VME_CAEN_V775
// Corr struct for: VME_CAEN_V830
// raw_array_zero_suppress  .data(DATA32)[32]
  // ---
// uint32  .event_number
  // ---
// uint32  .ts
  // ---
// uint32  .count
  // ---
// uint32  .dummy_24_25
  // ---
// uint32  .unnamed_26_26
  // ---
// uint32  .geom
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V830
// .VME_CAEN_V830// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V830
// .VME_CAEN_V830// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_CAEN_V830
// .VME_CAEN_V830
// Corr struct for: VME_MESYTEC_MADC32
// raw_array_zero_suppress  .data(DATA14_OVERFLOW)[32]
// uint32  .counter
  // ---
// uint32  .unnamed_30_31
  // ---
// uint32  .u32
  // ---
// DATA14_OVERFLOW .data[32]
// 
// size= 1  chunks= 32  mem=  32  line=64  total=2048
// size=32  chunks=  1  mem=  32  line=33  total=1056
// 
// corr structure: VME_MESYTEC_MADC32
  // DATA14_OVERFLOW .data[32]
// .VME_MESYTEC_MADC32/32/.data/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_MESYTEC_MADC32
// .VME_MESYTEC_MADC32// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_MESYTEC_MADC32
// .VME_MESYTEC_MADC32
// Corr struct for: VME_MESYTEC_MDPP16
// raw_array_multi_zero_suppress  .data(DATA16_OVERFLOW)[34][100]
// uint32  .counter
  // ---
// uint32  .unnamed_30_31
  // ---
// uint32  .u32
  // ---
// DATA16_OVERFLOW .data[34][100]
// 
// size= 1  chunks=3400  mem=3400  line=6800  total=23120000
// size=100  chunks= 34  mem=3400  line=3434  total=11675600
// size=3400  chunks=  1  mem=3400  line=3401  total=11563400
// 
// corr structure: VME_MESYTEC_MDPP16
  // DATA16_OVERFLOW .data[34][100]
// .VME_MESYTEC_MDPP16/3400/.data/3400/[34]/100/[100]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_MESYTEC_MDPP16
// .VME_MESYTEC_MDPP16// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: VME_MESYTEC_MDPP16
// .VME_MESYTEC_MDPP16
// Corr struct for: CROS3_REWRITE_SUBEVENT
//  : public unpack_subevent_base
// ---
// CROS3_REWRITE  .ccb[2]
  // raw_array_zero_suppress  .data(WIRE_START_END)[32768]
  // uint32  .data_size
    // ---
  // uint32  .threshold_curve
    // ---
  // uint32  .leading_edge
    // ---
  // uint32  .data
    // ---
  // uint32  .dummy_19
    // ---
  // uint32  .trigger_time
    // ---
  // uint32  .ccb_id
    // ---
  // uint32  .event_counter
    // ---
  // uint32  .u32
    // ---
  // uint32  .read_out_mode
    // ---
  // uint32  .dummy_2_3
    // ---
  // uint32  .pulser_enabled
    // ---
  // uint32  .dummy_5_7
    // ---
  // uint32  .statistics
    // ---
  // uint32  .both_edges
    // ---
  // uint32  .slices
    // ---
  // uint32  .scale
    // ---
  // uint32  .dummy_22_30
    // ---
  // uint32  .odd_length16
    // ---
  // uint32  .u32
    // ---
  // uint32  .read_out_mode
    // ---
  // uint32  .dummy_2_3
    // ---
  // uint32  .pulser_enabled
    // ---
  // uint32  .dummy_5_7
    // ---
  // uint32  .statistics
    // ---
  // uint32  .both_edges
    // ---
  // uint32  .threshold_start
    // ---
  // uint32  .threshold_step
    // ---
  // uint32  .boards
    // ---
  // uint32  .dummy_29_31
    // ---
  // uint32  .u32
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_REWRITE_SUBEVENT
// .CROS3_REWRITE_SUBEVENT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_REWRITE_SUBEVENT
// .CROS3_REWRITE_SUBEVENT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_REWRITE_SUBEVENT
// .CROS3_REWRITE_SUBEVENT
// Corr struct for: CROS3_SUBEVENT
//  : public unpack_subevent_base
// ---
// EXT_CROS3  .ccb[2]
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_SUBEVENT
// .CROS3_SUBEVENT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_SUBEVENT
// .CROS3_SUBEVENT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: CROS3_SUBEVENT
// .CROS3_SUBEVENT
// Corr struct for: DUMMY
//  : public unpack_subevent_base
// ---
// DUMMY_WORD  .d
  // uint32  .dummy_word
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: DUMMY
// .DUMMY
// Corr struct for: LAND_CAMAC_CONVERTER
//  : public unpack_subevent_base
// ---
// uint16  .tpat
  // ---
// uint16  .tprev
  // ---
// uint16  .tnext
  // ---
// uint16  .tprev2
  // ---
// CAMAC_PHILLIPS_7164  .aPHI14829
  // raw_array_zero_suppress  .data(DATA12)[16]
// CAMAC_SILENA_4418  .qSIA0480
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
// CAMAC_SILENA_4418  .qSIA0429
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
// CAMAC_SILENA_4418  .tSIA0400
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
// CAMAC_SILENA_4418  .tC_FRS120
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
// CAMAC_SILENA_4418  .tSIA0426
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
// CAMAC_SILENA_4418  .qSIA0458
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
// DATA12 .aPHI14829.data[16]
// DATA12_OVERFLOW .qSIA0480.data[8]
// DATA12_OVERFLOW .qSIA0429.data[8]
// DATA12_OVERFLOW .tSIA0400.data[8]
// DATA12_OVERFLOW .tC_FRS120.data[8]
// DATA12_OVERFLOW .tSIA0426.data[8]
// DATA12_OVERFLOW .qSIA0458.data[8]
// 
// size= 1  chunks= 64  mem=  64  line=128  total=8192
// size= 8  chunks= 22  mem= 176  line=198  total=12672
// size=16  chunks=  7  mem= 112  line=119  total=7616
// size=64  chunks=  1  mem=  64  line=65  total=4160
// 
// corr structure: LAND_CAMAC_CONVERTER
  // DATA12 .aPHI14829.data[16]
  // DATA12_OVERFLOW .qSIA0480.data[8]
  // DATA12_OVERFLOW .qSIA0429.data[8]
  // DATA12_OVERFLOW .tSIA0400.data[8]
  // DATA12_OVERFLOW .tC_FRS120.data[8]
  // DATA12_OVERFLOW .tSIA0426.data[8]
  // DATA12_OVERFLOW .qSIA0458.data[8]
// .LAND_CAMAC_CONVERTER/64/.aPHI14829/16/.data/16/[16]
                         // .qSIA0480/8/.data/8/[8]
                         // .qSIA0429/8/.data/8/[8]
                         // .tSIA0400/8/.data/8/[8]
                         // .tC_FRS120/8/.data/8/[8]
                         // .tSIA0426/8/.data/8/[8]
                         // .qSIA0458/8/.data/8/[8]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_CONVERTER
// .LAND_CAMAC_CONVERTER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_CONVERTER
// .LAND_CAMAC_CONVERTER
// Corr struct for: LAND_CAMAC_PILEUP
//  : public unpack_subevent_base
// ---
// CAMAC_LECROY_2277_1CH_HACK  .tdc
  // raw_list_ii_zero_suppress  .data(DATA16)[16]
// DATA16 .tdc.data[16]
// 
// size= 1  chunks= 16  mem=  16  line=32  total=512
// size=16  chunks=  1  mem=  16  line=17  total=272
// 
// corr structure: LAND_CAMAC_PILEUP
  // DATA16 .tdc.data[16]
// .LAND_CAMAC_PILEUP/16/.tdc/16/.data/16/[16]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_PILEUP
// .LAND_CAMAC_PILEUP// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_PILEUP
// .LAND_CAMAC_PILEUP
// Corr struct for: LAND_CAMAC_SCALER
//  : public unpack_subevent_base
// ---
// uint32  .timestamp
  // ---
// uint32  .unnamed_0_31
  // ---
// uint32  .u32
  // ---
// CAMAC_LECROY_4434  .scaler0
  // raw_array_zero_suppress  .data(DATA24)[32]
    // ---
// CAMAC_LECROY_4434  .scaler2
  // raw_array_zero_suppress  .data(DATA24)[32]
    // ---
// CAMAC_LECROY_4434  .scaler1
  // raw_array_zero_suppress  .data(DATA24)[32]
    // ---
// SOFT_SCALER32  .scaler3
  // raw_array_zero_suppress  .data(DATA32)[32]
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_SCALER
// .LAND_CAMAC_SCALER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_SCALER
// .LAND_CAMAC_SCALER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_SCALER
// .LAND_CAMAC_SCALER
// Corr struct for: LAND_CAMAC_START_STOP_STAMP
//  : public unpack_subevent_base
// ---
// uint32  .timestamp
  // ---
// uint32  .unnamed_0_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_START_STOP_STAMP
// .LAND_CAMAC_START_STOP_STAMP// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_START_STOP_STAMP
// .LAND_CAMAC_START_STOP_STAMP// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_START_STOP_STAMP
// .LAND_CAMAC_START_STOP_STAMP
// Corr struct for: LAND_CAMAC_TCAL_INFO
//  : public unpack_subevent_base
// ---
// uint32  .info
  // ---
// RANDOM_TCAL  .rtcal
  // uint32  .word_count
    // ---
  // uint32  .pulses
    // ---
  // uint32  .clock_bits
    // ---
  // uint32  .has_tstamp1
    // ---
  // uint32  .has_tstamp2
    // ---
  // uint32  .dummy_20_23
    // ---
  // uint32  .id
    // ---
  // uint32  .u32
    // ---
  // RANDOM_TCAL_TSTAMP_CLOCK  .tstamp1
    // uint32  .soft_latches
      // ---
    // uint32  .hard_latches
      // ---
    // uint32  .clock_ticks
      // ---
    // NTP64_TIME  .before
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .after
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
  // RANDOM_TCAL_TSTAMP_CLOCK  .tstamp2
    // uint32  .soft_latches
      // ---
    // uint32  .hard_latches
      // ---
    // uint32  .clock_ticks
      // ---
    // NTP64_TIME  .before
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .after
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
// NTP_MESSAGE  .ntp
  // uint32  .word_count
    // ---
  // uint32  .quick_burst
    // ---
  // uint32  .dummy_17_23
    // ---
  // uint32  .id
    // ---
  // uint32  .u32
    // ---
  // uint32  .server_id
    // ---
  // uint32  .precision
    // ---
  // uint32  .poll
    // ---
  // uint32  .stratum
    // ---
  // uint32  .dummy_20_23
    // ---
  // uint32  .mode
    // ---
  // uint32  .version
    // ---
  // uint32  .leap
    // ---
  // uint32  .u32
    // ---
  // uint32  .frac
    // ---
  // uint32  .sec
    // ---
  // uint32  .u32
    // ---
  // uint32  .frac
    // ---
  // uint32  .sec
    // ---
  // uint32  .u32
    // ---
  // uint32  .refid
    // ---
  // NTP64_TIME  .orig2time
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .tmit2time
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .rec2time
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .rx2time
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .reftime
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .origtime
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .rectime
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .tmittime
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
  // NTP64_TIME  .rxtime
    // uint32  .sec
      // ---
    // uint32  .frac
      // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_TCAL_INFO
// .LAND_CAMAC_TCAL_INFO// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_TCAL_INFO
// .LAND_CAMAC_TCAL_INFO// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_CAMAC_TCAL_INFO
// .LAND_CAMAC_TCAL_INFO
// Corr struct for: LAND_FASTBUS1
//  : public unpack_subevent_base
// ---
// FASTBUS_LECROY_1885  .Q47342
  // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
// FASTBUS_LECROY_1885  .Q46848
  // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
// FASTBUS_LECROY_1885  .Q11111
  // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
// FASTBUS_LECROY_1885  .Q47315
  // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
// FASTBUS_LECROY_1885  .Q17320
  // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
// FASTBUS_LECROY_1885  .Q15372
  // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
// FASTBUS_LECROY_1885  .Q46962
  // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
// FASTBUS_LECROY_1885  .Q46993
  // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
// FASTBUS_LECROY_1885  .Q15358
  // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
// FASTBUS_LECROY_1885  .Q47264
  // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
// FASTBUS_LECROY_1875  .T81855
  // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// FASTBUS_LECROY_1875  .T87044
  // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// FASTBUS_LECROY_1875  .T87024
  // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// FASTBUS_LECROY_1875  .T81800
  // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// DATA12_RANGE .Q47342.data[96]
// DATA12_RANGE .Q46848.data[96]
// DATA12_RANGE .Q11111.data[96]
// DATA12_RANGE .Q47315.data[96]
// DATA12_RANGE .Q17320.data[96]
// DATA12_RANGE .Q15372.data[96]
// DATA12_RANGE .Q46962.data[96]
// DATA12_RANGE .Q46993.data[96]
// DATA12_RANGE .Q15358.data[96]
// DATA12_RANGE .Q47264.data[96]
// DATA12_RANGE .T81855.data[64]
// DATA12_RANGE .T87044.data[64]
// DATA12_RANGE .T87024.data[64]
// DATA12_RANGE .T81800.data[64]
// 
// size= 1  chunks=1216  mem=1216  line=2432  total=2957312
// size=64  chunks=964  mem=61696  line=62660  total=76194560
// size=96  chunks= 14  mem=1344  line=1358  total=1651328
// size=1216  chunks=  1  mem=1216  line=1217  total=1479872
// 
// corr structure: LAND_FASTBUS1
  // DATA12_RANGE .Q47342.data[96]
  // DATA12_RANGE .Q46848.data[96]
  // DATA12_RANGE .Q11111.data[96]
  // DATA12_RANGE .Q47315.data[96]
  // DATA12_RANGE .Q17320.data[96]
  // DATA12_RANGE .Q15372.data[96]
  // DATA12_RANGE .Q46962.data[96]
  // DATA12_RANGE .Q46993.data[96]
  // DATA12_RANGE .Q15358.data[96]
  // DATA12_RANGE .Q47264.data[96]
  // DATA12_RANGE .T81855.data[64]
  // DATA12_RANGE .T87044.data[64]
  // DATA12_RANGE .T87024.data[64]
  // DATA12_RANGE .T81800.data[64]
// .LAND_FASTBUS1/1216/.Q47342/96/.data/96/[96]
                    // .Q46848/96/.data/96/[96]
                    // .Q11111/96/.data/96/[96]
                    // .Q47315/96/.data/96/[96]
                    // .Q17320/96/.data/96/[96]
                    // .Q15372/96/.data/96/[96]
                    // .Q46962/96/.data/96/[96]
                    // .Q46993/96/.data/96/[96]
                    // .Q15358/96/.data/96/[96]
                    // .Q47264/96/.data/96/[96]
                    // .T81855/64/.data/64/[64]
                    // .T87044/64/.data/64/[64]
                    // .T87024/64/.data/64/[64]
                    // .T81800/64/.data/64/[64]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_FASTBUS1
// .LAND_FASTBUS1// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_FASTBUS1
// .LAND_FASTBUS1
// Corr struct for: LAND_FASTBUS2
//  : public unpack_subevent_base
// ---
// FASTBUS_LECROY_1885  .Q75266
  // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
// FASTBUS_LECROY_1875  .T48854
  // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// FASTBUS_LECROY_1875  .T87047
  // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// FASTBUS_LECROY_1875  .T81808
  // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// FASTBUS_LECROY_1875  .T81859
  // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// FASTBUS_LECROY_1875  .T81795
  // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// FASTBUS_LECROY_1875  .T81806
  // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// FASTBUS_LECROY_1875  .T48834
  // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// DATA12_RANGE .Q75266.data[96]
// DATA12_RANGE .T48854.data[64]
// DATA12_RANGE .T87047.data[64]
// DATA12_RANGE .T81808.data[64]
// DATA12_RANGE .T81859.data[64]
// DATA12_RANGE .T81795.data[64]
// DATA12_RANGE .T81806.data[64]
// DATA12_RANGE .T48834.data[64]
// 
// size= 1  chunks=544  mem= 544  line=1088  total=591872
// size=64  chunks=103  mem=6592  line=6695  total=3642080
// size=96  chunks=  8  mem= 768  line=776  total=422144
// size=544  chunks=  1  mem= 544  line=545  total=296480
// 
// corr structure: LAND_FASTBUS2
  // DATA12_RANGE .Q75266.data[96]
  // DATA12_RANGE .T48854.data[64]
  // DATA12_RANGE .T87047.data[64]
  // DATA12_RANGE .T81808.data[64]
  // DATA12_RANGE .T81859.data[64]
  // DATA12_RANGE .T81795.data[64]
  // DATA12_RANGE .T81806.data[64]
  // DATA12_RANGE .T48834.data[64]
// .LAND_FASTBUS2/544/.Q75266/96/.data/96/[96]
                   // .T48854/64/.data/64/[64]
                   // .T87047/64/.data/64/[64]
                   // .T81808/64/.data/64/[64]
                   // .T81859/64/.data/64/[64]
                   // .T81795/64/.data/64/[64]
                   // .T81806/64/.data/64/[64]
                   // .T48834/64/.data/64/[64]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_FASTBUS2
// .LAND_FASTBUS2// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_FASTBUS2
// .LAND_FASTBUS2
// Corr struct for: LAND_FASTBUS_ERROR
//  : public unpack_subevent_base
// ---
// uint32  .timeout_waiting_smi
  // ---
// uint32  .illegal_block_transfer
  // ---
// uint32  .fifa_address_overflow
  // ---
// uint32  .fifa_register_error
  // ---
// uint32  .dummy_4_15
  // ---
// uint32  .init_error
  // ---
// uint32  .dummy_17_31
  // ---
// uint32  .u32
  // ---
// uint32  .error_num
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_FASTBUS_ERROR
// .LAND_FASTBUS_ERROR// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_FASTBUS_ERROR
// .LAND_FASTBUS_ERROR// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_FASTBUS_ERROR
// .LAND_FASTBUS_ERROR
// Corr struct for: LAND_FASTBUS_ERROR_NGF
//  : public unpack_subevent_base
// ---
// uint32  .unnamed_0_31
  // ---
// uint32  .u32
  // ---
// uint32  .error
  // ---
// uint32  .uninitialized
  // ---
// uint32  .ss1
  // ---
// uint32  .wc
  // ---
// uint32  .mid
  // ---
// uint32  .fifo_empty
  // ---
// uint32  .fifo_not_empty
  // ---
// uint32  .not_finished
  // ---
// uint32  .bad_end_addr
  // ---
// uint32  .word_lost
  // ---
// uint32  .dummy_10_31
  // ---
// uint32  .u32
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_FASTBUS_ERROR_NGF
// .LAND_FASTBUS_ERROR_NGF// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_FASTBUS_ERROR_NGF
// .LAND_FASTBUS_ERROR_NGF// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_FASTBUS_ERROR_NGF
// .LAND_FASTBUS_ERROR_NGF
// Corr struct for: LAND_VME
//  : public unpack_subevent_base
// ---
// VME_CAEN_V775  .tCAEN0614
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V830  .scaler[2]
  // raw_array_zero_suppress  .data(DATA32)[32]
    // ---
  // uint32  .event_number
    // ---
  // uint32  .ts
    // ---
  // uint32  .count
    // ---
  // uint32  .dummy_24_25
    // ---
  // uint32  .unnamed_26_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// VME_CAEN_V775  .qCAEN0472
  // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
  // uint32  .event_number
    // ---
  // uint32  .unnamed_24_26
    // ---
  // uint32  .geom
    // ---
  // uint32  .u32
    // ---
// LAND_STD_VME  .vme
  // uint32  .fail_general
    // ---
  // uint32  .fail_data_corrupt
    // ---
  // uint32  .fail_data_missing
    // ---
  // uint32  .fail_data_too_much
    // ---
  // uint32  .fail_event_counter_mismatch
    // ---
  // uint32  .fail_readout_error_driver
    // ---
  // uint32  .fail_unexpected_trigger
    // ---
  // uint32  .fail_firmware_mismatch
    // ---
  // uint32  .dummy_8_21
    // ---
  // uint32  .has_multi_trlo_ii_counter0
    // ---
  // uint32  .has_clock_counter_stamp
    // ---
  // uint32  .has_continous_event_counter
    // ---
  // uint32  .has_update_qdc_iped_value
    // ---
  // uint32  .spurious_start_before_tcal
    // ---
  // uint32  .has_no_zero_suppression
    // ---
  // uint32  .has_multi_adctdc_counter0
    // ---
  // uint32  .has_multi_scaler_counter0
    // ---
  // uint32  .has_multi_event
    // ---
  // uint32  .has_time_stamp
    // ---
  // uint32  .u32
    // ---
  // uint32  .continous_event_counter
    // ---
  // uint32  .time_stamp
    // ---
  // uint32  .clock_counter_stamp
    // ---
  // uint32  .iped
    // ---
  // uint32  .multi_events
    // ---
  // uint32  .multi_trlo_ii_counter0
    // ---
  // uint32  .multi_scaler_counter0
    // ---
  // uint32  .multi_adctdc_counter0
    // ---
// DATA12_OVERFLOW .tCAEN0614.data[32]
// DATA12_OVERFLOW .qCAEN0472.data[32]
// 
// size= 1  chunks= 64  mem=  64  line=128  total=8192
// size=32  chunks=  2  mem=  64  line=66  total=4224
// size=64  chunks=  1  mem=  64  line=65  total=4160
// 
// corr structure: LAND_VME
  // DATA12_OVERFLOW .tCAEN0614.data[32]
  // DATA12_OVERFLOW .qCAEN0472.data[32]
// .LAND_VME/64/.tCAEN0614/32/.data/32/[32]
             // .qCAEN0472/32/.data/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_VME
// .LAND_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: LAND_VME
// .LAND_VME
// Corr struct for: SIDEREM01_VME
//  : public unpack_subevent_base
// ---
// EXT_SST  .sst[3]
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SIDEREM01_VME
// .SIDEREM01_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SIDEREM01_VME
// .SIDEREM01_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SIDEREM01_VME
// .SIDEREM01_VME
// Corr struct for: SIDEREM02_VME
//  : public unpack_subevent_base
// ---
// EXT_SST  .sst[3]
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SIDEREM02_VME
// .SIDEREM02_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SIDEREM02_VME
// .SIDEREM02_VME// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: SIDEREM02_VME
// .SIDEREM02_VME
// Corr struct for: unpack_event
//  : public unpack_event_base
// ---
// LAND_CAMAC_PILEUP  .pileup
  //  : public unpack_subevent_base
  // ---
  // CAMAC_LECROY_2277_1CH_HACK  .tdc
    // raw_list_ii_zero_suppress  .data(DATA16)[16]
// LAND_VME  .vme
  //  : public unpack_subevent_base
  // ---
  // VME_CAEN_V775  .tCAEN0614
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V830  .scaler[2]
    // raw_array_zero_suppress  .data(DATA32)[32]
      // ---
    // uint32  .event_number
      // ---
    // uint32  .ts
      // ---
    // uint32  .count
      // ---
    // uint32  .dummy_24_25
      // ---
    // uint32  .unnamed_26_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // VME_CAEN_V775  .qCAEN0472
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[32]
    // uint32  .event_number
      // ---
    // uint32  .unnamed_24_26
      // ---
    // uint32  .geom
      // ---
    // uint32  .u32
      // ---
  // LAND_STD_VME  .vme
    // uint32  .fail_general
      // ---
    // uint32  .fail_data_corrupt
      // ---
    // uint32  .fail_data_missing
      // ---
    // uint32  .fail_data_too_much
      // ---
    // uint32  .fail_event_counter_mismatch
      // ---
    // uint32  .fail_readout_error_driver
      // ---
    // uint32  .fail_unexpected_trigger
      // ---
    // uint32  .fail_firmware_mismatch
      // ---
    // uint32  .dummy_8_21
      // ---
    // uint32  .has_multi_trlo_ii_counter0
      // ---
    // uint32  .has_clock_counter_stamp
      // ---
    // uint32  .has_continous_event_counter
      // ---
    // uint32  .has_update_qdc_iped_value
      // ---
    // uint32  .spurious_start_before_tcal
      // ---
    // uint32  .has_no_zero_suppression
      // ---
    // uint32  .has_multi_adctdc_counter0
      // ---
    // uint32  .has_multi_scaler_counter0
      // ---
    // uint32  .has_multi_event
      // ---
    // uint32  .has_time_stamp
      // ---
    // uint32  .u32
      // ---
    // uint32  .continous_event_counter
      // ---
    // uint32  .time_stamp
      // ---
    // uint32  .clock_counter_stamp
      // ---
    // uint32  .iped
      // ---
    // uint32  .multi_events
      // ---
    // uint32  .multi_trlo_ii_counter0
      // ---
    // uint32  .multi_scaler_counter0
      // ---
    // uint32  .multi_adctdc_counter0
      // ---
// CROS3_SUBEVENT  .cros3
  //  : public unpack_subevent_base
  // ---
  // EXT_CROS3  .ccb[2]
// SIDEREM01_VME  .sst1
  //  : public unpack_subevent_base
  // ---
  // EXT_SST  .sst[3]
// CROS3_REWRITE_SUBEVENT  .cros3_rewrite
  //  : public unpack_subevent_base
  // ---
  // CROS3_REWRITE  .ccb[2]
    // raw_array_zero_suppress  .data(WIRE_START_END)[32768]
    // uint32  .data_size
      // ---
    // uint32  .threshold_curve
      // ---
    // uint32  .leading_edge
      // ---
    // uint32  .data
      // ---
    // uint32  .dummy_19
      // ---
    // uint32  .trigger_time
      // ---
    // uint32  .ccb_id
      // ---
    // uint32  .event_counter
      // ---
    // uint32  .u32
      // ---
    // uint32  .read_out_mode
      // ---
    // uint32  .dummy_2_3
      // ---
    // uint32  .pulser_enabled
      // ---
    // uint32  .dummy_5_7
      // ---
    // uint32  .statistics
      // ---
    // uint32  .both_edges
      // ---
    // uint32  .slices
      // ---
    // uint32  .scale
      // ---
    // uint32  .dummy_22_30
      // ---
    // uint32  .odd_length16
      // ---
    // uint32  .u32
      // ---
    // uint32  .read_out_mode
      // ---
    // uint32  .dummy_2_3
      // ---
    // uint32  .pulser_enabled
      // ---
    // uint32  .dummy_5_7
      // ---
    // uint32  .statistics
      // ---
    // uint32  .both_edges
      // ---
    // uint32  .threshold_start
      // ---
    // uint32  .threshold_step
      // ---
    // uint32  .boards
      // ---
    // uint32  .dummy_29_31
      // ---
    // uint32  .u32
      // ---
// SIDEREM02_VME  .sst2
  //  : public unpack_subevent_base
  // ---
  // EXT_SST  .sst[3]
// LAND_CAMAC_CONVERTER  .camac
  //  : public unpack_subevent_base
  // ---
  // uint16  .tpat
    // ---
  // uint16  .tprev
    // ---
  // uint16  .tnext
    // ---
  // uint16  .tprev2
    // ---
  // CAMAC_PHILLIPS_7164  .aPHI14829
    // raw_array_zero_suppress  .data(DATA12)[16]
  // CAMAC_SILENA_4418  .qSIA0480
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
  // CAMAC_SILENA_4418  .qSIA0429
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
  // CAMAC_SILENA_4418  .tSIA0400
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
  // CAMAC_SILENA_4418  .tC_FRS120
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
  // CAMAC_SILENA_4418  .tSIA0426
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
  // CAMAC_SILENA_4418  .qSIA0458
    // raw_array_zero_suppress  .data(DATA12_OVERFLOW)[8]
// LAND_FASTBUS1  .fastbus1
  //  : public unpack_subevent_base
  // ---
  // FASTBUS_LECROY_1885  .Q47342
    // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
  // FASTBUS_LECROY_1885  .Q46848
    // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
  // FASTBUS_LECROY_1885  .Q11111
    // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
  // FASTBUS_LECROY_1885  .Q47315
    // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
  // FASTBUS_LECROY_1885  .Q17320
    // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
  // FASTBUS_LECROY_1885  .Q15372
    // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
  // FASTBUS_LECROY_1885  .Q46962
    // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
  // FASTBUS_LECROY_1885  .Q46993
    // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
  // FASTBUS_LECROY_1885  .Q15358
    // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
  // FASTBUS_LECROY_1885  .Q47264
    // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
  // FASTBUS_LECROY_1875  .T81855
    // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
  // FASTBUS_LECROY_1875  .T87044
    // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
  // FASTBUS_LECROY_1875  .T87024
    // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
  // FASTBUS_LECROY_1875  .T81800
    // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// LAND_FASTBUS2  .fastbus2
  //  : public unpack_subevent_base
  // ---
  // FASTBUS_LECROY_1885  .Q75266
    // raw_array_zero_suppress  .data(DATA12_RANGE)[96]
  // FASTBUS_LECROY_1875  .T48854
    // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
  // FASTBUS_LECROY_1875  .T87047
    // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
  // FASTBUS_LECROY_1875  .T81808
    // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
  // FASTBUS_LECROY_1875  .T81859
    // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
  // FASTBUS_LECROY_1875  .T81795
    // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
  // FASTBUS_LECROY_1875  .T81806
    // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
  // FASTBUS_LECROY_1875  .T48834
    // raw_array_zero_suppress  .data(DATA12_RANGE)[64]
// DUMMY  .acq
  //  : public unpack_subevent_base
  // ---
  // DUMMY_WORD  .d
    // uint32  .dummy_word
      // ---
// LAND_CAMAC_TCAL_INFO  .camac_tcal_info
  //  : public unpack_subevent_base
  // ---
  // uint32  .info
    // ---
  // RANDOM_TCAL  .rtcal
    // uint32  .word_count
      // ---
    // uint32  .pulses
      // ---
    // uint32  .clock_bits
      // ---
    // uint32  .has_tstamp1
      // ---
    // uint32  .has_tstamp2
      // ---
    // uint32  .dummy_20_23
      // ---
    // uint32  .id
      // ---
    // uint32  .u32
      // ---
    // RANDOM_TCAL_TSTAMP_CLOCK  .tstamp1
      // uint32  .soft_latches
        // ---
      // uint32  .hard_latches
        // ---
      // uint32  .clock_ticks
        // ---
      // NTP64_TIME  .before
        // uint32  .sec
          // ---
        // uint32  .frac
          // ---
      // NTP64_TIME  .after
        // uint32  .sec
          // ---
        // uint32  .frac
          // ---
    // RANDOM_TCAL_TSTAMP_CLOCK  .tstamp2
      // uint32  .soft_latches
        // ---
      // uint32  .hard_latches
        // ---
      // uint32  .clock_ticks
        // ---
      // NTP64_TIME  .before
        // uint32  .sec
          // ---
        // uint32  .frac
          // ---
      // NTP64_TIME  .after
        // uint32  .sec
          // ---
        // uint32  .frac
          // ---
  // NTP_MESSAGE  .ntp
    // uint32  .word_count
      // ---
    // uint32  .quick_burst
      // ---
    // uint32  .dummy_17_23
      // ---
    // uint32  .id
      // ---
    // uint32  .u32
      // ---
    // uint32  .server_id
      // ---
    // uint32  .precision
      // ---
    // uint32  .poll
      // ---
    // uint32  .stratum
      // ---
    // uint32  .dummy_20_23
      // ---
    // uint32  .mode
      // ---
    // uint32  .version
      // ---
    // uint32  .leap
      // ---
    // uint32  .u32
      // ---
    // uint32  .frac
      // ---
    // uint32  .sec
      // ---
    // uint32  .u32
      // ---
    // uint32  .frac
      // ---
    // uint32  .sec
      // ---
    // uint32  .u32
      // ---
    // uint32  .refid
      // ---
    // NTP64_TIME  .orig2time
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .tmit2time
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .rec2time
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .rx2time
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .reftime
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .origtime
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .rectime
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .tmittime
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
    // NTP64_TIME  .rxtime
      // uint32  .sec
        // ---
      // uint32  .frac
        // ---
// LAND_CAMAC_SCALER  .camac_scalers
  //  : public unpack_subevent_base
  // ---
  // uint32  .timestamp
    // ---
  // uint32  .unnamed_0_31
    // ---
  // uint32  .u32
    // ---
  // CAMAC_LECROY_4434  .scaler0
    // raw_array_zero_suppress  .data(DATA24)[32]
      // ---
  // CAMAC_LECROY_4434  .scaler2
    // raw_array_zero_suppress  .data(DATA24)[32]
      // ---
  // CAMAC_LECROY_4434  .scaler1
    // raw_array_zero_suppress  .data(DATA24)[32]
      // ---
  // SOFT_SCALER32  .scaler3
    // raw_array_zero_suppress  .data(DATA32)[32]
      // ---
// LAND_FASTBUS_ERROR_NGF  .fastbus1_error
  //  : public unpack_subevent_base
  // ---
  // uint32  .unnamed_0_31
    // ---
  // uint32  .u32
    // ---
  // uint32  .error
    // ---
  // uint32  .uninitialized
    // ---
  // uint32  .ss1
    // ---
  // uint32  .wc
    // ---
  // uint32  .mid
    // ---
  // uint32  .fifo_empty
    // ---
  // uint32  .fifo_not_empty
    // ---
  // uint32  .not_finished
    // ---
  // uint32  .bad_end_addr
    // ---
  // uint32  .word_lost
    // ---
  // uint32  .dummy_10_31
    // ---
  // uint32  .u32
    // ---
// LAND_FASTBUS_ERROR_NGF  .fastbus2_error
  //  : public unpack_subevent_base
  // ---
  // uint32  .unnamed_0_31
    // ---
  // uint32  .u32
    // ---
  // uint32  .error
    // ---
  // uint32  .uninitialized
    // ---
  // uint32  .ss1
    // ---
  // uint32  .wc
    // ---
  // uint32  .mid
    // ---
  // uint32  .fifo_empty
    // ---
  // uint32  .fifo_not_empty
    // ---
  // uint32  .not_finished
    // ---
  // uint32  .bad_end_addr
    // ---
  // uint32  .word_lost
    // ---
  // uint32  .dummy_10_31
    // ---
  // uint32  .u32
    // ---
// DATA16 .pileup.tdc.data[16]
// DATA12_OVERFLOW .vme.tCAEN0614.data[32]
// DATA12_OVERFLOW .vme.qCAEN0472.data[32]
// DATA12 .camac.aPHI14829.data[16]
// DATA12_OVERFLOW .camac.qSIA0480.data[8]
// DATA12_OVERFLOW .camac.qSIA0429.data[8]
// DATA12_OVERFLOW .camac.tSIA0400.data[8]
// DATA12_OVERFLOW .camac.tC_FRS120.data[8]
// DATA12_OVERFLOW .camac.tSIA0426.data[8]
// DATA12_OVERFLOW .camac.qSIA0458.data[8]
// DATA12_RANGE .fastbus1.Q47342.data[96]
// DATA12_RANGE .fastbus1.Q46848.data[96]
// DATA12_RANGE .fastbus1.Q11111.data[96]
// DATA12_RANGE .fastbus1.Q47315.data[96]
// DATA12_RANGE .fastbus1.Q17320.data[96]
// DATA12_RANGE .fastbus1.Q15372.data[96]
// DATA12_RANGE .fastbus1.Q46962.data[96]
// DATA12_RANGE .fastbus1.Q46993.data[96]
// DATA12_RANGE .fastbus1.Q15358.data[96]
// DATA12_RANGE .fastbus1.Q47264.data[96]
// DATA12_RANGE .fastbus1.T81855.data[64]
// DATA12_RANGE .fastbus1.T87044.data[64]
// DATA12_RANGE .fastbus1.T87024.data[64]
// DATA12_RANGE .fastbus1.T81800.data[64]
// DATA12_RANGE .fastbus2.Q75266.data[96]
// DATA12_RANGE .fastbus2.T48854.data[64]
// DATA12_RANGE .fastbus2.T87047.data[64]
// DATA12_RANGE .fastbus2.T81808.data[64]
// DATA12_RANGE .fastbus2.T81859.data[64]
// DATA12_RANGE .fastbus2.T81795.data[64]
// DATA12_RANGE .fastbus2.T81806.data[64]
// DATA12_RANGE .fastbus2.T48834.data[64]
// 
// size= 1  chunks=1904  mem=1904  line=3808  total=7250432
// size= 8  chunks=1862  mem=14896  line=16758  total=31907232
// size=16  chunks=1832  mem=29312  line=31144  total=59298176
// size=32  chunks=1770  mem=56640  line=58410  total=111212640
// size=64  chunks=1070  mem=68480  line=69550  total=132423200
// size=96  chunks= 25  mem=2400  line=2425  total=4617200
// size=544  chunks= 18  mem=9792  line=9810  total=18678240
// size=1216  chunks=  5  mem=6080  line=6085  total=11585840
// size=1904  chunks=  1  mem=1904  line=1905  total=3627120
// 
// corr structure: unpack_event
  // DATA16 .pileup.tdc.data[16]
  // DATA12_OVERFLOW .vme.tCAEN0614.data[32]
  // DATA12_OVERFLOW .vme.qCAEN0472.data[32]
  // DATA12 .camac.aPHI14829.data[16]
  // DATA12_OVERFLOW .camac.qSIA0480.data[8]
  // DATA12_OVERFLOW .camac.qSIA0429.data[8]
  // DATA12_OVERFLOW .camac.tSIA0400.data[8]
  // DATA12_OVERFLOW .camac.tC_FRS120.data[8]
  // DATA12_OVERFLOW .camac.tSIA0426.data[8]
  // DATA12_OVERFLOW .camac.qSIA0458.data[8]
  // DATA12_RANGE .fastbus1.Q47342.data[96]
  // DATA12_RANGE .fastbus1.Q46848.data[96]
  // DATA12_RANGE .fastbus1.Q11111.data[96]
  // DATA12_RANGE .fastbus1.Q47315.data[96]
  // DATA12_RANGE .fastbus1.Q17320.data[96]
  // DATA12_RANGE .fastbus1.Q15372.data[96]
  // DATA12_RANGE .fastbus1.Q46962.data[96]
  // DATA12_RANGE .fastbus1.Q46993.data[96]
  // DATA12_RANGE .fastbus1.Q15358.data[96]
  // DATA12_RANGE .fastbus1.Q47264.data[96]
  // DATA12_RANGE .fastbus1.T81855.data[64]
  // DATA12_RANGE .fastbus1.T87044.data[64]
  // DATA12_RANGE .fastbus1.T87024.data[64]
  // DATA12_RANGE .fastbus1.T81800.data[64]
  // DATA12_RANGE .fastbus2.Q75266.data[96]
  // DATA12_RANGE .fastbus2.T48854.data[64]
  // DATA12_RANGE .fastbus2.T87047.data[64]
  // DATA12_RANGE .fastbus2.T81808.data[64]
  // DATA12_RANGE .fastbus2.T81859.data[64]
  // DATA12_RANGE .fastbus2.T81795.data[64]
  // DATA12_RANGE .fastbus2.T81806.data[64]
  // DATA12_RANGE .fastbus2.T48834.data[64]
// .unpack_event/1904/.pileup/16/.tdc/16/.data/16/[16]
                   // .vme/64/.tCAEN0614/32/.data/32/[32]
                           // .qCAEN0472/32/.data/32/[32]
                   // .camac/64/.aPHI14829/16/.data/16/[16]
                             // .qSIA0480/8/.data/8/[8]
                             // .qSIA0429/8/.data/8/[8]
                             // .tSIA0400/8/.data/8/[8]
                             // .tC_FRS120/8/.data/8/[8]
                             // .tSIA0426/8/.data/8/[8]
                             // .qSIA0458/8/.data/8/[8]
                   // .fastbus1/1216/.Q47342/96/.data/96/[96]
                                  // .Q46848/96/.data/96/[96]
                                  // .Q11111/96/.data/96/[96]
                                  // .Q47315/96/.data/96/[96]
                                  // .Q17320/96/.data/96/[96]
                                  // .Q15372/96/.data/96/[96]
                                  // .Q46962/96/.data/96/[96]
                                  // .Q46993/96/.data/96/[96]
                                  // .Q15358/96/.data/96/[96]
                                  // .Q47264/96/.data/96/[96]
                                  // .T81855/64/.data/64/[64]
                                  // .T87044/64/.data/64/[64]
                                  // .T87024/64/.data/64/[64]
                                  // .T81800/64/.data/64/[64]
                   // .fastbus2/544/.Q75266/96/.data/96/[96]
                                 // .T48854/64/.data/64/[64]
                                 // .T87047/64/.data/64/[64]
                                 // .T81808/64/.data/64/[64]
                                 // .T81859/64/.data/64/[64]
                                 // .T81795/64/.data/64/[64]
                                 // .T81806/64/.data/64/[64]
                                 // .T48834/64/.data/64/[64]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_event
// .unpack_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_event
// .unpack_event
// Corr struct for: unpack_sticky_event
//  : public unpack_sticky_event_base
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: unpack_sticky_event
// .unpack_sticky_event

/** END_CORR_STRUCT ***************************************************/

