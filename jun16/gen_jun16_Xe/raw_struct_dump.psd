
/** BEGIN_INPUT_DEFINITION *********************************************
 *
 * All specifications as seen by the parser.
 *
 * Do not edit - automatically generated.
 */

/**********************************************************
 * Dump of all structures:
 */

class raw_event_LOS
{
  raw_array_multi_zero_suppress<DATA12,DATA12,4,32> TF;
  raw_array_multi_zero_suppress<DATA16,DATA16,4,32> TC;
} ;
class raw_event_TOFD_VFTX
{
  DATA16 T[3];
} ;
class raw_event_TOFD_P_T
{
  raw_array_multi_zero_suppress<DATA12,DATA12,6,32> TFL;
  raw_array_multi_zero_suppress<DATA12,DATA12,6,32> TFT;
  raw_array_multi_zero_suppress<DATA16,DATA16,6,32> TCL;
  raw_array_multi_zero_suppress<DATA16,DATA16,6,32> TCT;
} ;
class raw_event_TOFD_P
{
  raw_event_TOFD_P_T T[2];
} ;
class raw_event_TOFD
{
  raw_event_TOFD_VFTX VFTX[2];
  raw_event_TOFD_P P[6];
} ;
class raw_event_PSPXT
{
  raw_array_zero_suppress<DATA16,DATA16,400> Tr;
} ;
class raw_event_TIMESTAMP_MASTER_WR
{
  DATA16 T[4];
} ;
class raw_event_TIMESTAMP_MASTER
{
  DATA12 ID;
  raw_event_TIMESTAMP_MASTER_WR WR;
  DATA32 HI;
  DATA32 LO;
} ;
class raw_event_TIMESTAMP
{
  raw_event_TIMESTAMP_MASTER MASTER;
} ;
class raw_event_TRLO_SAMPLER
{
  raw_array_zero_suppress<DATA32,DATA32,512> S;
} ;
class raw_event_TRLO
{
  raw_event_TRLO_SAMPLER SAMPLER;
} ;
class raw_event_FITEST
{
  raw_array_multi_zero_suppress<DATA12,DATA12,64,64> TF;
  raw_array_multi_zero_suppress<DATA16,DATA16,64,64> TC;
} ;
class raw_event_FITRACK
{
  raw_array_multi_zero_suppress<DATA12,DATA12,16,32> t;
  raw_array_multi_zero_suppress<DATA32,DATA32,16,32> E;
} ;
class raw_event : public raw_event_base
{
  raw_event_LOS LOS[1];
  raw_event_TOFD TOFD;
  raw_event_PSPXT PSPXT[6][128];
  raw_array_multi_zero_suppress<DATA32,DATA32,128,20> PSPX[6];
  raw_event_TIMESTAMP TIMESTAMP;
  raw_event_TRLO TRLO;
  raw_event_FITEST FITEST;
  raw_event_FITRACK FITRACK[10];
} ;
class raw_sticky : public raw_sticky_base
{
  ;
} ;
/**********************************************************/

/** END_INPUT_DEFINITION **********************************************/


/** BEGIN_MIRROR_STRUCT ************************************************
 *
 * Mirror (1 to 1) structure.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

#ifndef USER_DEF_raw_event_LOS
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_LOS)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(TF);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),4,32> STRUCT_MIRROR_NAME(TF);
  STRUCT_MIRROR_ITEM_CTRL(TC);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),4,32> STRUCT_MIRROR_NAME(TC);
  STRUCT_MIRROR_FCNS_DECL(raw_event_LOS);
};
#endif//USER_DEF_raw_event_LOS

#ifndef USER_DEF_raw_event_TOFD_VFTX
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_TOFD_VFTX)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(T);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(T__i0,,3);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T[3]);
  STRUCT_MIRROR_FCNS_DECL(raw_event_TOFD_VFTX);
};
#endif//USER_DEF_raw_event_TOFD_VFTX

#ifndef USER_DEF_raw_event_TOFD_P_T
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_TOFD_P_T)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(TFL);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),6,32> STRUCT_MIRROR_NAME(TFL);
  STRUCT_MIRROR_ITEM_CTRL(TFT);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),6,32> STRUCT_MIRROR_NAME(TFT);
  STRUCT_MIRROR_ITEM_CTRL(TCL);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),6,32> STRUCT_MIRROR_NAME(TCL);
  STRUCT_MIRROR_ITEM_CTRL(TCT);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),6,32> STRUCT_MIRROR_NAME(TCT);
  STRUCT_MIRROR_FCNS_DECL(raw_event_TOFD_P_T);
};
#endif//USER_DEF_raw_event_TOFD_P_T

#ifndef USER_DEF_raw_event_TOFD_P
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_TOFD_P)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(T);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(T__i0,,2);
  STRUCT_MIRROR_TYPE(raw_event_TOFD_P_T) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T[2]);
  STRUCT_MIRROR_FCNS_DECL(raw_event_TOFD_P);
};
#endif//USER_DEF_raw_event_TOFD_P

#ifndef USER_DEF_raw_event_TOFD
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_TOFD)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(VFTX);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(VFTX__i0,,2);
  STRUCT_MIRROR_TYPE(raw_event_TOFD_VFTX) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(VFTX[2]);
  STRUCT_MIRROR_ITEM_CTRL(P);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(P__i0,,6);
  STRUCT_MIRROR_TYPE(raw_event_TOFD_P) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(P[6]);
  STRUCT_MIRROR_FCNS_DECL(raw_event_TOFD);
};
#endif//USER_DEF_raw_event_TOFD

#ifndef USER_DEF_raw_event_PSPXT
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_PSPXT)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(Tr);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),400> STRUCT_MIRROR_NAME(Tr);
  STRUCT_MIRROR_FCNS_DECL(raw_event_PSPXT);
};
#endif//USER_DEF_raw_event_PSPXT

#ifndef USER_DEF_raw_event_TIMESTAMP_MASTER_WR
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_TIMESTAMP_MASTER_WR)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(T);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(T__i0,,4);
  STRUCT_MIRROR_TYPE(DATA16) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(T[4]);
  STRUCT_MIRROR_FCNS_DECL(raw_event_TIMESTAMP_MASTER_WR);
};
#endif//USER_DEF_raw_event_TIMESTAMP_MASTER_WR

#ifndef USER_DEF_raw_event_TIMESTAMP_MASTER
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_TIMESTAMP_MASTER)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(ID);
  STRUCT_MIRROR_TYPE(DATA12) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(ID);
  STRUCT_MIRROR_ITEM_CTRL(WR);
  STRUCT_MIRROR_TYPE(raw_event_TIMESTAMP_MASTER_WR) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(WR);
  STRUCT_MIRROR_ITEM_CTRL(HI);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(HI);
  STRUCT_MIRROR_ITEM_CTRL(LO);
  STRUCT_MIRROR_TYPE(DATA32) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(LO);
  STRUCT_MIRROR_FCNS_DECL(raw_event_TIMESTAMP_MASTER);
};
#endif//USER_DEF_raw_event_TIMESTAMP_MASTER

#ifndef USER_DEF_raw_event_TIMESTAMP
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_TIMESTAMP)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(MASTER);
  STRUCT_MIRROR_TYPE(raw_event_TIMESTAMP_MASTER) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(MASTER);
  STRUCT_MIRROR_FCNS_DECL(raw_event_TIMESTAMP);
};
#endif//USER_DEF_raw_event_TIMESTAMP

#ifndef USER_DEF_raw_event_TRLO_SAMPLER
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_TRLO_SAMPLER)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(S);
  STRUCT_MIRROR_TYPE(raw_array_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),512> STRUCT_MIRROR_NAME(S);
  STRUCT_MIRROR_FCNS_DECL(raw_event_TRLO_SAMPLER);
};
#endif//USER_DEF_raw_event_TRLO_SAMPLER

#ifndef USER_DEF_raw_event_TRLO
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_TRLO)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(SAMPLER);
  STRUCT_MIRROR_TYPE(raw_event_TRLO_SAMPLER) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(SAMPLER);
  STRUCT_MIRROR_FCNS_DECL(raw_event_TRLO);
};
#endif//USER_DEF_raw_event_TRLO

#ifndef USER_DEF_raw_event_FITEST
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_FITEST)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(TF);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),64,64> STRUCT_MIRROR_NAME(TF);
  STRUCT_MIRROR_ITEM_CTRL(TC);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA16),STRUCT_MIRROR_TEMPLATE_ARG(DATA16),64,64> STRUCT_MIRROR_NAME(TC);
  STRUCT_MIRROR_FCNS_DECL(raw_event_FITEST);
};
#endif//USER_DEF_raw_event_FITEST

#ifndef USER_DEF_raw_event_FITRACK
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event_FITRACK)
{
public:
  STRUCT_MIRROR_ITEM_CTRL(t);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA12),STRUCT_MIRROR_TEMPLATE_ARG(DATA12),16,32> STRUCT_MIRROR_NAME(t);
  STRUCT_MIRROR_ITEM_CTRL(E);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),16,32> STRUCT_MIRROR_NAME(E);
  STRUCT_MIRROR_FCNS_DECL(raw_event_FITRACK);
};
#endif//USER_DEF_raw_event_FITRACK

#ifndef USER_DEF_raw_event
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_event) : public STRUCT_MIRROR_BASE(raw_event_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(raw_event_base);
  STRUCT_MIRROR_ITEM_CTRL(LOS);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(LOS__i0,,1);
  STRUCT_MIRROR_TYPE(raw_event_LOS) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(LOS[1]);
  STRUCT_MIRROR_ITEM_CTRL(TOFD);
  STRUCT_MIRROR_TYPE(raw_event_TOFD) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(TOFD);
  STRUCT_MIRROR_ITEM_CTRL(PSPXT);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(PSPXT__i0,,6);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(PSPXT__i0__i1,[6],128);
  STRUCT_MIRROR_TYPE(raw_event_PSPXT) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(PSPXT[6][128]);
  STRUCT_MIRROR_ITEM_CTRL(PSPX);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(PSPX__i0,,6);
  STRUCT_MIRROR_TYPE(raw_array_multi_zero_suppress) < STRUCT_MIRROR_TYPE_TEMPLATE STRUCT_MIRROR_TEMPLATE_ARG(DATA32),STRUCT_MIRROR_TEMPLATE_ARG(DATA32),128,20> STRUCT_MIRROR_NAME(PSPX[6]);
  STRUCT_MIRROR_ITEM_CTRL(TIMESTAMP);
  STRUCT_MIRROR_TYPE(raw_event_TIMESTAMP) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(TIMESTAMP);
  STRUCT_MIRROR_ITEM_CTRL(TRLO);
  STRUCT_MIRROR_TYPE(raw_event_TRLO) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(TRLO);
  STRUCT_MIRROR_ITEM_CTRL(FITEST);
  STRUCT_MIRROR_TYPE(raw_event_FITEST) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(FITEST);
  STRUCT_MIRROR_ITEM_CTRL(FITRACK);
  STRUCT_MIRROR_ITEM_CTRL_ARRAY(FITRACK__i0,,10);
  STRUCT_MIRROR_TYPE(raw_event_FITRACK) STRUCT_MIRROR_TYPE_TEMPLATE_FULL STRUCT_MIRROR_NAME(FITRACK[10]);
  STRUCT_MIRROR_FCNS_DECL(raw_event);
};
#endif//USER_DEF_raw_event

#ifndef USER_DEF_raw_sticky
STRUCT_MIRROR_TEMPLATE
class STRUCT_MIRROR_STRUCT(raw_sticky) : public STRUCT_MIRROR_BASE(raw_sticky_base)
{
public:
  STRUCT_MIRROR_ITEM_CTRL_BASE(raw_sticky_base);
  STRUCT_MIRROR_FCNS_DECL(raw_sticky);
};
#endif//USER_DEF_raw_sticky

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_STRUCT *************************************************/


/** BEGIN_MIRROR_DECL_STRUCT *******************************************
 *
 * Mirror structure names.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_mirror_define.hh"

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_LOS);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_TOFD_VFTX);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_TOFD_P_T);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_TOFD_P);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_TOFD);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_PSPXT);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_TIMESTAMP_MASTER_WR);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_TIMESTAMP_MASTER);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_TIMESTAMP);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_TRLO_SAMPLER);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_TRLO);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_FITEST);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event_FITRACK);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_event);

STRUCT_MIRROR_TEMPLATE
struct STRUCT_MIRROR_STRUCT(raw_sticky);

#include "gen/default_mirror_undef.hh"


/** END_MIRROR_DECL_STRUCT ********************************************/


/** BEGIN_FUNCTION_CALL_PER_MEMBER *************************************
 *
 * Recursive function calls per member.
 *
 * Do not edit - automatically generated.
 */

#include "gen/default_fcncall_define.hh"

#ifndef USER_DEF_raw_event_LOS
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_LOS)::FCNCALL_NAME(raw_event_LOS)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA12,DATA12,4,32> TF;
  {
  FCNCALL_SUBNAME("TF");
  { FCNCALL_CALL_CTRL_WRAP(TF,TF.FCNCALL_CALL(TF)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_multi_zero_suppress<DATA16,DATA16,4,32> TC;
  {
  FCNCALL_SUBNAME("TC");
  { FCNCALL_CALL_CTRL_WRAP(TC,TC.FCNCALL_CALL(TC)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_LOS

#ifndef USER_DEF_raw_event_TOFD_VFTX
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_TOFD_VFTX)::FCNCALL_NAME(raw_event_TOFD_VFTX)
{
  FCNCALL_INIT;
  // DATA16 T[3];
  {
  FCNCALL_SUBNAME("T");
  FCNCALL_FOR(__i0,3)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(T__i0,,__i0,T[__i0].FCNCALL_CALL(T[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_TOFD_VFTX

#ifndef USER_DEF_raw_event_TOFD_P_T
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_TOFD_P_T)::FCNCALL_NAME(raw_event_TOFD_P_T)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA12,DATA12,6,32> TFL;
  {
  FCNCALL_SUBNAME("TFL");
  { FCNCALL_CALL_CTRL_WRAP(TFL,TFL.FCNCALL_CALL(TFL)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_multi_zero_suppress<DATA12,DATA12,6,32> TFT;
  {
  FCNCALL_SUBNAME("TFT");
  { FCNCALL_CALL_CTRL_WRAP(TFT,TFT.FCNCALL_CALL(TFT)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_multi_zero_suppress<DATA16,DATA16,6,32> TCL;
  {
  FCNCALL_SUBNAME("TCL");
  { FCNCALL_CALL_CTRL_WRAP(TCL,TCL.FCNCALL_CALL(TCL)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_multi_zero_suppress<DATA16,DATA16,6,32> TCT;
  {
  FCNCALL_SUBNAME("TCT");
  { FCNCALL_CALL_CTRL_WRAP(TCT,TCT.FCNCALL_CALL(TCT)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_TOFD_P_T

#ifndef USER_DEF_raw_event_TOFD_P
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_TOFD_P)::FCNCALL_NAME(raw_event_TOFD_P)
{
  FCNCALL_INIT;
  // raw_event_TOFD_P_T T[2];
  {
  FCNCALL_SUBNAME("T");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(T__i0,,__i0,T[__i0].FCNCALL_CALL(T[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_TOFD_P

#ifndef USER_DEF_raw_event_TOFD
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_TOFD)::FCNCALL_NAME(raw_event_TOFD)
{
  FCNCALL_INIT;
  // raw_event_TOFD_VFTX VFTX[2];
  {
  FCNCALL_SUBNAME("VFTX");
  FCNCALL_FOR(__i0,2)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(VFTX__i0,,__i0,VFTX[__i0].FCNCALL_CALL(VFTX[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_TOFD_P P[6];
  {
  FCNCALL_SUBNAME("P");
  FCNCALL_FOR(__i0,6)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(P__i0,,__i0,P[__i0].FCNCALL_CALL(P[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_TOFD

#ifndef USER_DEF_raw_event_PSPXT
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_PSPXT)::FCNCALL_NAME(raw_event_PSPXT)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA16,DATA16,400> Tr;
  {
  FCNCALL_SUBNAME("Tr");
  { FCNCALL_CALL_CTRL_WRAP(Tr,Tr.FCNCALL_CALL(Tr)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_PSPXT

#ifndef USER_DEF_raw_event_TIMESTAMP_MASTER_WR
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_TIMESTAMP_MASTER_WR)::FCNCALL_NAME(raw_event_TIMESTAMP_MASTER_WR)
{
  FCNCALL_INIT;
  // DATA16 T[4];
  {
  FCNCALL_SUBNAME("T");
  FCNCALL_FOR(__i0,4)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(T__i0,,__i0,T[__i0].FCNCALL_CALL(T[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_TIMESTAMP_MASTER_WR

#ifndef USER_DEF_raw_event_TIMESTAMP_MASTER
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_TIMESTAMP_MASTER)::FCNCALL_NAME(raw_event_TIMESTAMP_MASTER)
{
  FCNCALL_INIT;
  // DATA12 ID;
  {
  FCNCALL_SUBNAME("ID");
  { FCNCALL_CALL_CTRL_WRAP(ID,ID.FCNCALL_CALL(ID)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_TIMESTAMP_MASTER_WR WR;
  {
  FCNCALL_SUBNAME("WR");
  { FCNCALL_CALL_CTRL_WRAP(WR,WR.FCNCALL_CALL(WR)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 HI;
  {
  FCNCALL_SUBNAME("HI");
  { FCNCALL_CALL_CTRL_WRAP(HI,HI.FCNCALL_CALL(HI)); }
  FCNCALL_SUBNAME_END;
  }
  // DATA32 LO;
  {
  FCNCALL_SUBNAME("LO");
  { FCNCALL_CALL_CTRL_WRAP(LO,LO.FCNCALL_CALL(LO)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_TIMESTAMP_MASTER

#ifndef USER_DEF_raw_event_TIMESTAMP
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_TIMESTAMP)::FCNCALL_NAME(raw_event_TIMESTAMP)
{
  FCNCALL_INIT;
  // raw_event_TIMESTAMP_MASTER MASTER;
  {
  FCNCALL_SUBNAME("MASTER");
  { FCNCALL_CALL_CTRL_WRAP(MASTER,MASTER.FCNCALL_CALL(MASTER)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_TIMESTAMP

#ifndef USER_DEF_raw_event_TRLO_SAMPLER
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_TRLO_SAMPLER)::FCNCALL_NAME(raw_event_TRLO_SAMPLER)
{
  FCNCALL_INIT;
  // raw_array_zero_suppress<DATA32,DATA32,512> S;
  {
  FCNCALL_SUBNAME("S");
  { FCNCALL_CALL_CTRL_WRAP(S,S.FCNCALL_CALL(S)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_TRLO_SAMPLER

#ifndef USER_DEF_raw_event_TRLO
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_TRLO)::FCNCALL_NAME(raw_event_TRLO)
{
  FCNCALL_INIT;
  // raw_event_TRLO_SAMPLER SAMPLER;
  {
  FCNCALL_SUBNAME("SAMPLER");
  { FCNCALL_CALL_CTRL_WRAP(SAMPLER,SAMPLER.FCNCALL_CALL(SAMPLER)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_TRLO

#ifndef USER_DEF_raw_event_FITEST
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_FITEST)::FCNCALL_NAME(raw_event_FITEST)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA12,DATA12,64,64> TF;
  {
  FCNCALL_SUBNAME("TF");
  { FCNCALL_CALL_CTRL_WRAP(TF,TF.FCNCALL_CALL(TF)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_multi_zero_suppress<DATA16,DATA16,64,64> TC;
  {
  FCNCALL_SUBNAME("TC");
  { FCNCALL_CALL_CTRL_WRAP(TC,TC.FCNCALL_CALL(TC)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_FITEST

#ifndef USER_DEF_raw_event_FITRACK
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event_FITRACK)::FCNCALL_NAME(raw_event_FITRACK)
{
  FCNCALL_INIT;
  // raw_array_multi_zero_suppress<DATA12,DATA12,16,32> t;
  {
  FCNCALL_SUBNAME("t");
  { FCNCALL_CALL_CTRL_WRAP(t,t.FCNCALL_CALL(t)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_multi_zero_suppress<DATA32,DATA32,16,32> E;
  {
  FCNCALL_SUBNAME("E");
  { FCNCALL_CALL_CTRL_WRAP(E,E.FCNCALL_CALL(E)); }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event_FITRACK

#ifndef USER_DEF_raw_event
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_event)::FCNCALL_NAME(raw_event)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(raw_event_base,FCNCALL_CLASS_NAME(raw_event_base)::FCNCALL_CALL_BASE());
  // raw_event_LOS LOS[1];
  {
  FCNCALL_SUBNAME("LOS");
  FCNCALL_FOR(__i0,1)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(LOS__i0,,__i0,LOS[__i0].FCNCALL_CALL(LOS[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_TOFD TOFD;
  {
  FCNCALL_SUBNAME("TOFD");
  { FCNCALL_CALL_CTRL_WRAP(TOFD,TOFD.FCNCALL_CALL(TOFD)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_PSPXT PSPXT[6][128];
  {
  FCNCALL_SUBNAME("PSPXT");
  FCNCALL_FOR(__i0,6)
  {
    FCNCALL_SUBINDEX(__i0);
    FCNCALL_FOR(__i1,128)
    {
      FCNCALL_SUBINDEX(__i1);
      { FCNCALL_CALL_CTRL_WRAP_ARRAY(PSPXT__i0__i1,[__i0],__i1,PSPXT[__i0][__i1].FCNCALL_CALL(PSPXT[__i0][__i1])); }
      FCNCALL_SUBINDEX_END(__i1);
    }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_array_multi_zero_suppress<DATA32,DATA32,128,20> PSPX[6];
  {
  FCNCALL_SUBNAME("PSPX");
  FCNCALL_FOR(__i0,6)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(PSPX__i0,,__i0,PSPX[__i0].FCNCALL_CALL(PSPX[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_TIMESTAMP TIMESTAMP;
  {
  FCNCALL_SUBNAME("TIMESTAMP");
  { FCNCALL_CALL_CTRL_WRAP(TIMESTAMP,TIMESTAMP.FCNCALL_CALL(TIMESTAMP)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_TRLO TRLO;
  {
  FCNCALL_SUBNAME("TRLO");
  { FCNCALL_CALL_CTRL_WRAP(TRLO,TRLO.FCNCALL_CALL(TRLO)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_FITEST FITEST;
  {
  FCNCALL_SUBNAME("FITEST");
  { FCNCALL_CALL_CTRL_WRAP(FITEST,FITEST.FCNCALL_CALL(FITEST)); }
  FCNCALL_SUBNAME_END;
  }
  // raw_event_FITRACK FITRACK[10];
  {
  FCNCALL_SUBNAME("FITRACK");
  FCNCALL_FOR(__i0,10)
  {
    FCNCALL_SUBINDEX(__i0);
    { FCNCALL_CALL_CTRL_WRAP_ARRAY(FITRACK__i0,,__i0,FITRACK[__i0].FCNCALL_CALL(FITRACK[__i0])); }
    FCNCALL_SUBINDEX_END(__i0);
  }
  FCNCALL_SUBNAME_END;
  }
  FCNCALL_RET;
}
#endif//USER_DEF_raw_event

#ifndef USER_DEF_raw_sticky
FCNCALL_TEMPLATE
FCNCALL_RET_TYPE FCNCALL_CLASS_NAME(raw_sticky)::FCNCALL_NAME(raw_sticky)
{
  FCNCALL_INIT;
  FCNCALL_CALL_CTRL_WRAP(raw_sticky_base,FCNCALL_CLASS_NAME(raw_sticky_base)::FCNCALL_CALL_BASE());
  FCNCALL_RET;
}
#endif//USER_DEF_raw_sticky

#include "gen/default_fcncall_undef.hh"


/** END_FUNCTION_CALL_PER_MEMBER **************************************/


/** BEGIN_CORR_STRUCT **************************************************
 *
 * Correlation structure.
 *
 * Do not edit - automatically generated.
 */

// Corr struct for: raw_event_LOS
// raw_array_multi_zero_suppress  .TF(DATA12)[4][32]
// raw_array_multi_zero_suppress  .TC(DATA16)[4][32]
// DATA12 .TF[4][32]
// DATA16 .TC[4][32]
// 
// size= 1  chunks=256  mem= 256  line=512  total=131072
// size=32  chunks=  8  mem= 256  line=264  total=67584
// size=128  chunks=  2  mem= 256  line=258  total=66048
// size=256  chunks=  1  mem= 256  line=257  total=65792
// 
// corr structure: raw_event_LOS
  // DATA12 .TF[4][32]
  // DATA16 .TC[4][32]
// .raw_event_LOS/256/.TF/128/[4]/32/[32]
                   // .TC/128/[4]/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_LOS
// .raw_event_LOS// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_LOS
// .raw_event_LOS
// Corr struct for: raw_event_TOFD_VFTX
// DATA16  .T[3]
// DATA16 .T[3]
// 
// size= 1  chunks=  3  mem=   3  line=6  total=18
// size= 3  chunks=  1  mem=   3  line=4  total=12
// 
// corr structure: raw_event_TOFD_VFTX
  // DATA16 .T[3]
// .raw_event_TOFD_VFTX/3/.T/3/[3]// 
// size= 1  chunks=  3  mem=   3  line=6  total=18
// size= 3  chunks=  1  mem=   3  line=4  total=12
// 
// corr structure: raw_event_TOFD_VFTX
  // DATA16 .T[3]
// .raw_event_TOFD_VFTX/3/.T/3/[3]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TOFD_VFTX
// .raw_event_TOFD_VFTX
// Corr struct for: raw_event_TOFD_P_T
// raw_array_multi_zero_suppress  .TFL(DATA12)[6][32]
// raw_array_multi_zero_suppress  .TFT(DATA12)[6][32]
// raw_array_multi_zero_suppress  .TCL(DATA16)[6][32]
// raw_array_multi_zero_suppress  .TCT(DATA16)[6][32]
// DATA12 .TFL[6][32]
// DATA12 .TFT[6][32]
// DATA16 .TCL[6][32]
// DATA16 .TCT[6][32]
// 
// size= 1  chunks=768  mem= 768  line=1536  total=1179648
// size=32  chunks= 24  mem= 768  line=792  total=608256
// size=192  chunks=  4  mem= 768  line=772  total=592896
// size=768  chunks=  1  mem= 768  line=769  total=590592
// 
// corr structure: raw_event_TOFD_P_T
  // DATA12 .TFL[6][32]
  // DATA12 .TFT[6][32]
  // DATA16 .TCL[6][32]
  // DATA16 .TCT[6][32]
// .raw_event_TOFD_P_T/768/.TFL/192/[6]/32/[32]
                        // .TFT/192/[6]/32/[32]
                        // .TCL/192/[6]/32/[32]
                        // .TCT/192/[6]/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TOFD_P_T
// .raw_event_TOFD_P_T// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TOFD_P_T
// .raw_event_TOFD_P_T
// Corr struct for: raw_event_TOFD_P
// raw_event_TOFD_P_T  .T[2]
  // raw_array_multi_zero_suppress  .TFL(DATA12)[6][32]
  // raw_array_multi_zero_suppress  .TFT(DATA12)[6][32]
  // raw_array_multi_zero_suppress  .TCL(DATA16)[6][32]
  // raw_array_multi_zero_suppress  .TCT(DATA16)[6][32]
// DATA12 .T[2].TFL[6][32]
// DATA12 .T[2].TFT[6][32]
// DATA16 .T[2].TCL[6][32]
// DATA16 .T[2].TCT[6][32]
// 
// size= 1  chunks=1536  mem=1536  line=3072  total=4718592
// size=32  chunks= 48  mem=1536  line=1584  total=2433024
// size=192  chunks=  8  mem=1536  line=1544  total=2371584
// size=768  chunks=  2  mem=1536  line=1538  total=2362368
// size=1536  chunks=  1  mem=1536  line=1537  total=2360832
// 
// corr structure: raw_event_TOFD_P
  // DATA12 .T[2].TFL[6][32]
  // DATA12 .T[2].TFT[6][32]
  // DATA16 .T[2].TCL[6][32]
  // DATA16 .T[2].TCT[6][32]
// .raw_event_TOFD_P/1536/.T/1536/[2]/768/.TFL/192/[6]/32/[32]
                                       // .TFT/192/[6]/32/[32]
                                       // .TCL/192/[6]/32/[32]
                                       // .TCT/192/[6]/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TOFD_P
// .raw_event_TOFD_P// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TOFD_P
// .raw_event_TOFD_P
// Corr struct for: raw_event_TOFD
// raw_event_TOFD_VFTX  .VFTX[2]
  // DATA16  .T[3]
// raw_event_TOFD_P  .P[6]
  // raw_event_TOFD_P_T  .T[2]
    // raw_array_multi_zero_suppress  .TFL(DATA12)[6][32]
    // raw_array_multi_zero_suppress  .TFT(DATA12)[6][32]
    // raw_array_multi_zero_suppress  .TCL(DATA16)[6][32]
    // raw_array_multi_zero_suppress  .TCT(DATA16)[6][32]
// DATA16 .VFTX[2].T[3]
// DATA12 .P[6].T[2].TFL[6][32]
// DATA12 .P[6].T[2].TFT[6][32]
// DATA16 .P[6].T[2].TCL[6][32]
// DATA16 .P[6].T[2].TCT[6][32]
// 
// size= 1  chunks=9222  mem=9222  line=18444  total=170090568
// size= 3  chunks=9218  mem=27654  line=36872  total=340033584
// size= 6  chunks=9217  mem=55302  line=64519  total=594994218
// size=32  chunks=289  mem=9248  line=9537  total=87950214
// size=192  chunks= 49  mem=9408  line=9457  total=87212454
// size=768  chunks= 13  mem=9984  line=9997  total=92192334
// size=1536  chunks=  7  mem=10752  line=10759  total=99219498
// size=9216  chunks=  2  mem=18432  line=18434  total=169998348
// size=9222  chunks=  1  mem=9222  line=9223  total=85054506
// 
// corr structure: raw_event_TOFD
  // DATA16 .VFTX[2].T[3]
  // DATA12 .P[6].T[2].TFL[6][32]
  // DATA12 .P[6].T[2].TFT[6][32]
  // DATA16 .P[6].T[2].TCL[6][32]
  // DATA16 .P[6].T[2].TCT[6][32]
// .raw_event_TOFD/9222/.VFTX/6/[2]/3/.T/3/[3]
                     // .P/9216/[6]/1536/.T/1536/[2]/768/.TFL/192/[6]/32/[32]
                                                      // .TFT/192/[6]/32/[32]
                                                      // .TCL/192/[6]/32/[32]
                                                      // .TCT/192/[6]/32/[32]// 
// size= 1  chunks=  6  mem=   6  line=12  total=72
// size= 3  chunks=  2  mem=   6  line=8  total=48
// size= 6  chunks=  1  mem=   6  line=7  total=42
// 
// corr structure: raw_event_TOFD
  // DATA16 .VFTX[2].T[3]
// .raw_event_TOFD/6/.VFTX/6/[2]/3/.T/3/[3]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TOFD
// .raw_event_TOFD
// Corr struct for: raw_event_PSPXT
// raw_array_zero_suppress  .Tr(DATA16)[400]
// DATA16 .Tr[400]
// 
// size= 1  chunks=400  mem= 400  line=800  total=320000
// size=400  chunks=  1  mem= 400  line=401  total=160400
// 
// corr structure: raw_event_PSPXT
  // DATA16 .Tr[400]
// .raw_event_PSPXT/400/.Tr/400/[400]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_PSPXT
// .raw_event_PSPXT// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_PSPXT
// .raw_event_PSPXT
// Corr struct for: raw_event_TIMESTAMP_MASTER_WR
// DATA16  .T[4]
// DATA16 .T[4]
// 
// size= 1  chunks=  4  mem=   4  line=8  total=32
// size= 4  chunks=  1  mem=   4  line=5  total=20
// 
// corr structure: raw_event_TIMESTAMP_MASTER_WR
  // DATA16 .T[4]
// .raw_event_TIMESTAMP_MASTER_WR/4/.T/4/[4]// 
// size= 1  chunks=  4  mem=   4  line=8  total=32
// size= 4  chunks=  1  mem=   4  line=5  total=20
// 
// corr structure: raw_event_TIMESTAMP_MASTER_WR
  // DATA16 .T[4]
// .raw_event_TIMESTAMP_MASTER_WR/4/.T/4/[4]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TIMESTAMP_MASTER_WR
// .raw_event_TIMESTAMP_MASTER_WR
// Corr struct for: raw_event_TIMESTAMP_MASTER
// DATA12  .ID
// raw_event_TIMESTAMP_MASTER_WR  .WR
  // DATA16  .T[4]
// DATA32  .HI
  // ---
// DATA32  .LO
  // ---
// DATA12 .ID
// DATA16 .WR.T[4]
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 4  chunks=  2  mem=   8  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: raw_event_TIMESTAMP_MASTER
  // DATA12 .ID
  // DATA16 .WR.T[4]
// .raw_event_TIMESTAMP_MASTER/5/.ID
                              // .WR/4/.T/4/[4]// 
// size= 1  chunks=  4  mem=   4  line=8  total=32
// size= 4  chunks=  1  mem=   4  line=5  total=20
// 
// corr structure: raw_event_TIMESTAMP_MASTER
  // DATA16 .WR.T[4]
// .raw_event_TIMESTAMP_MASTER/4/.WR/4/.T/4/[4]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TIMESTAMP_MASTER
// .raw_event_TIMESTAMP_MASTER
// Corr struct for: raw_event_TIMESTAMP
// raw_event_TIMESTAMP_MASTER  .MASTER
  // DATA12  .ID
  // raw_event_TIMESTAMP_MASTER_WR  .WR
    // DATA16  .T[4]
  // DATA32  .HI
    // ---
  // DATA32  .LO
    // ---
// DATA12 .MASTER.ID
// DATA16 .MASTER.WR.T[4]
// 
// size= 1  chunks=  5  mem=   5  line=10  total=50
// size= 4  chunks=  2  mem=   8  line=10  total=50
// size= 5  chunks=  1  mem=   5  line=6  total=30
// 
// corr structure: raw_event_TIMESTAMP
  // DATA12 .MASTER.ID
  // DATA16 .MASTER.WR.T[4]
// .raw_event_TIMESTAMP/5/.MASTER/5/.ID
                                 // .WR/4/.T/4/[4]// 
// size= 1  chunks=  4  mem=   4  line=8  total=32
// size= 4  chunks=  1  mem=   4  line=5  total=20
// 
// corr structure: raw_event_TIMESTAMP
  // DATA16 .MASTER.WR.T[4]
// .raw_event_TIMESTAMP/4/.MASTER/4/.WR/4/.T/4/[4]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TIMESTAMP
// .raw_event_TIMESTAMP
// Corr struct for: raw_event_TRLO_SAMPLER
// raw_array_zero_suppress  .S(DATA32)[512]
  // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TRLO_SAMPLER
// .raw_event_TRLO_SAMPLER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TRLO_SAMPLER
// .raw_event_TRLO_SAMPLER// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TRLO_SAMPLER
// .raw_event_TRLO_SAMPLER
// Corr struct for: raw_event_TRLO
// raw_event_TRLO_SAMPLER  .SAMPLER
  // raw_array_zero_suppress  .S(DATA32)[512]
    // ---
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TRLO
// .raw_event_TRLO// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TRLO
// .raw_event_TRLO// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_TRLO
// .raw_event_TRLO
// Corr struct for: raw_event_FITEST
// raw_array_multi_zero_suppress  .TF(DATA12)[64][64]
// raw_array_multi_zero_suppress  .TC(DATA16)[64][64]
// DATA12 .TF[64][64]
// DATA16 .TC[64][64]
// 
// size= 1  chunks=8192  mem=8192  line=16384  total=134217728
// size=64  chunks=128  mem=8192  line=8320  total=68157440
// size=4096  chunks=  2  mem=8192  line=8194  total=67125248
// size=8192  chunks=  1  mem=8192  line=8193  total=67117056
// 
// corr structure: raw_event_FITEST
  // DATA12 .TF[64][64]
  // DATA16 .TC[64][64]
// .raw_event_FITEST/8192/.TF/4096/[64]/64/[64]
                       // .TC/4096/[64]/64/[64]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_FITEST
// .raw_event_FITEST// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_FITEST
// .raw_event_FITEST
// Corr struct for: raw_event_FITRACK
// raw_array_multi_zero_suppress  .t(DATA12)[16][32]
// raw_array_multi_zero_suppress  .E(DATA32)[16][32]
  // ---
// DATA12 .t[16][32]
// 
// size= 1  chunks=512  mem= 512  line=1024  total=524288
// size=32  chunks= 16  mem= 512  line=528  total=270336
// size=512  chunks=  1  mem= 512  line=513  total=262656
// 
// corr structure: raw_event_FITRACK
  // DATA12 .t[16][32]
// .raw_event_FITRACK/512/.t/512/[16]/32/[32]// 
// size= 1  chunks=512  mem= 512  line=1024  total=524288
// size=32  chunks= 16  mem= 512  line=528  total=270336
// size=512  chunks=  1  mem= 512  line=513  total=262656
// 
// corr structure: raw_event_FITRACK
  // DATA12 .t[16][32]
// .raw_event_FITRACK/512/.t/512/[16]/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event_FITRACK
// .raw_event_FITRACK
// Corr struct for: raw_event
//  : public raw_event_base
// ---
// raw_event_LOS  .LOS[1]
  // raw_array_multi_zero_suppress  .TF(DATA12)[4][32]
  // raw_array_multi_zero_suppress  .TC(DATA16)[4][32]
// raw_event_TOFD  .TOFD
  // raw_event_TOFD_VFTX  .VFTX[2]
    // DATA16  .T[3]
  // raw_event_TOFD_P  .P[6]
    // raw_event_TOFD_P_T  .T[2]
      // raw_array_multi_zero_suppress  .TFL(DATA12)[6][32]
      // raw_array_multi_zero_suppress  .TFT(DATA12)[6][32]
      // raw_array_multi_zero_suppress  .TCL(DATA16)[6][32]
      // raw_array_multi_zero_suppress  .TCT(DATA16)[6][32]
// raw_event_PSPXT  .PSPXT[6][128]
  // raw_array_zero_suppress  .Tr(DATA16)[400]
// raw_array_multi_zero_suppress  .PSPX[6](DATA32)[128][20]
  // ---
// raw_event_TIMESTAMP  .TIMESTAMP
  // raw_event_TIMESTAMP_MASTER  .MASTER
    // DATA12  .ID
    // raw_event_TIMESTAMP_MASTER_WR  .WR
      // DATA16  .T[4]
    // DATA32  .HI
      // ---
    // DATA32  .LO
      // ---
// raw_event_TRLO  .TRLO
  // raw_event_TRLO_SAMPLER  .SAMPLER
    // raw_array_zero_suppress  .S(DATA32)[512]
      // ---
// raw_event_FITEST  .FITEST
  // raw_array_multi_zero_suppress  .TF(DATA12)[64][64]
  // raw_array_multi_zero_suppress  .TC(DATA16)[64][64]
// raw_event_FITRACK  .FITRACK[10]
  // raw_array_multi_zero_suppress  .t(DATA12)[16][32]
  // raw_array_multi_zero_suppress  .E(DATA32)[16][32]
    // ---
// DATA12 .LOS[1].TF[4][32]
// DATA16 .LOS[1].TC[4][32]
// DATA16 .TOFD.VFTX[2].T[3]
// DATA12 .TOFD.P[6].T[2].TFL[6][32]
// DATA12 .TOFD.P[6].T[2].TFT[6][32]
// DATA16 .TOFD.P[6].T[2].TCL[6][32]
// DATA16 .TOFD.P[6].T[2].TCT[6][32]
// DATA16 .PSPXT[6][128].Tr[400]
// DATA12 .TIMESTAMP.MASTER.ID
// DATA16 .TIMESTAMP.MASTER.WR.T[4]
// DATA12 .FITEST.TF[64][64]
// DATA16 .FITEST.TC[64][64]
// DATA12 .FITRACK[10].t[16][32]
// 
// size= 1  chunks=329995  mem=329995  line=659990  total=-1249932046
// size= 3  chunks=329991  mem=989973  line=1319964  total=1789823284
// size= 4  chunks=329988  mem=1319952  line=1649940  total=-988896292
// size= 5  chunks=329987  mem=1649935  line=1979922  total=529331398
// size= 6  chunks=329986  mem=1979916  line=2309902  total=2046899098
// size=32  chunks=315850  mem=10107200  line=10423050  total=-714419346
// size=64  chunks=307786  mem=19698304  line=20006090  total=544935598
// size=128  chunks=307780  mem=39395840  line=39703620  total=-1949138196
// size=192  chunks=307540  mem=59047680  line=59355220  total=1874954140
// size=256  chunks=307539  mem=78729984  line=79037523  total=-1348986223
// size=400  chunks=1107  mem=442800  line=443907  total=458202401
// size=512  chunks=957  mem=489984  line=490941  total=-1200681953
// size=768  chunks=921  mem=707328  line=708249  total=1790394771
// size=1536  chunks=915  mem=1405440  line=1406355  total=233650257
// size=4096  chunks=789  mem=3231744  line=3232533  total=1567837927
// size=5120  chunks=780  mem=3993600  line=3994380  total=-429531772
// size=8192  chunks=779  mem=6381568  line=6382347  total=1608623225
// size=9216  chunks=774  mem=7133184  line=7133958  total=528392002
// size=9222  chunks=773  mem=7128606  line=7129379  total=-982655103
// size=51200  chunks= 11  mem=563200  line=563211  total=1173220217
// size=307200  chunks=  6  mem=1843200  line=1843206  total=-1636592062
// size=329995  chunks=  1  mem=329995  line=329996  total=1522847620
// 
// corr structure: raw_event
  // DATA12 .LOS[1].TF[4][32]
  // DATA16 .LOS[1].TC[4][32]
  // DATA16 .TOFD.VFTX[2].T[3]
  // DATA12 .TOFD.P[6].T[2].TFL[6][32]
  // DATA12 .TOFD.P[6].T[2].TFT[6][32]
  // DATA16 .TOFD.P[6].T[2].TCL[6][32]
  // DATA16 .TOFD.P[6].T[2].TCT[6][32]
  // DATA16 .PSPXT[6][128].Tr[400]
  // DATA12 .TIMESTAMP.MASTER.ID
  // DATA16 .TIMESTAMP.MASTER.WR.T[4]
  // DATA12 .FITEST.TF[64][64]
  // DATA16 .FITEST.TC[64][64]
  // DATA12 .FITRACK[10].t[16][32]
// .raw_event/329995/.LOS/256/[1]/256/.TF/128/[4]/32/[32]
                                   // .TC/128/[4]/32/[32]
                  // .TOFD/9222/.VFTX/6/[2]/3/.T/3/[3]
                             // .P/9216/[6]/1536/.T/1536/[2]/768/.TFL/192/[6]/32/[32]
                                                              // .TFT/192/[6]/32/[32]
                                                              // .TCL/192/[6]/32/[32]
                                                              // .TCT/192/[6]/32/[32]
                  // .PSPXT/307200/[6]/51200/[128]/400/.Tr/400/[400]
                  // .TIMESTAMP/5/.MASTER/5/.ID
                                         // .WR/4/.T/4/[4]
                  // .FITEST/8192/.TF/4096/[64]/64/[64]
                               // .TC/4096/[64]/64/[64]
                  // .FITRACK/5120/[10]/512/.t/512/[16]/32/[32]// 
// size= 1  chunks=5130  mem=5130  line=10260  total=52633800
// size= 3  chunks=5126  mem=15378  line=20504  total=105185520
// size= 4  chunks=5123  mem=20492  line=25615  total=131404950
// size= 6  chunks=5122  mem=30732  line=35854  total=183931020
// size=32  chunks=162  mem=5184  line=5346  total=27424980
// size=512  chunks= 12  mem=6144  line=6156  total=31580280
// size=5120  chunks=  3  mem=15360  line=15363  total=78812190
// size=5130  chunks=  1  mem=5130  line=5131  total=26322030
// 
// corr structure: raw_event
  // DATA16 .TOFD.VFTX[2].T[3]
  // DATA16 .TIMESTAMP.MASTER.WR.T[4]
  // DATA12 .FITRACK[10].t[16][32]
// .raw_event/5130/.TOFD/6/.VFTX/6/[2]/3/.T/3/[3]
                // .TIMESTAMP/4/.MASTER/4/.WR/4/.T/4/[4]
                // .FITRACK/5120/[10]/512/.t/512/[16]/32/[32]// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_event
// .raw_event
// Corr struct for: raw_sticky
//  : public raw_sticky_base
// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky// 
// size= 1  chunks=  1  mem=   1  line=2  total=2
// 
// corr structure: raw_sticky
// .raw_sticky

/** END_CORR_STRUCT ***************************************************/

